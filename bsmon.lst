              *******************************
              * BSM = Bit Shifter's Monitor *
              * for The MEGA65  28-Dec_2020 *
              *******************************

              .CPU 45GS02

              .STORE $6000,$2000,"bsmon.rom"

              *************
              * Constants *
              *************

0005          WHITE  = $05
009e          YELLOW = $9e
0096          LRED   = $96

000d          CR     = $0d
0012          REV    = $12
001d          CRIGHT = $1d
0022          QUOTE  = $22
0027          APOSTR = $27

              ************************************************
              * Register storage for JMPFAR and JSRFAR calls *
              ************************************************

0002          Bank       =  2
0003          PCH        =  3
0004          PCL        =  4
0005          SR         =  5
0006          AC         =  6
0007          XR         =  7
0008          YR         =  8
0009          ZR         =  9

              *************************************
              * Used direct (zero) page addresses *
              *************************************

000a          BP         = 10
000b          SPH        = 11
000c          SPL        = 12

              ; following variables overlap with the BASIC floating point area

              ; $59 - $5d : temporary floating point accumulator
              ; $5e - $62 : temporary floating point accumulator
              ; $63 - $69 : primary   floating point accumulator
              ; $6a - $6f : secondary floating point accumulator

              ; A set of 32 bit variables also used as 32 bit pointer

0059          & = $59

0059          Long_AC    .BSS 4  ; 32 bit accumulator
005d          Long_CT    .BSS 4  ; 32 bit counter
0061          Long_PC    .BSS 4  ; 32 bit program counter
0065          Long_DA    .BSS 4  ; 32 bit data pointer

              ; Flags are  used in BBR BBS instructions

0069          Adr_Flags  .BSS 1
006a          Mode_Flags .BSS 1
006b          Op_Code    .BSS 1
006c          Op_Flag    .BSS 1  ; 7: two operands
                                 ; 6: long branch
                                 ; 5: 32 bit address
                                 ; 4: Q register
006d          Op_Size    .BSS 1
006e          Dig_Cnt    .BSS 1
006f          Buf_Index  .BSS 1

              ; operating system variables


0090          STATUS     = $90
0093          VERCK      = $93
00b7          FNLEN      = $b7
00b9          SA         = $b9
00ba          FA         = $ba
00bb          FNADR      = $bb
00bd          BA         = $bd
00be          FNBANK     = $be

00d0          NDX        = $d0        ; length of keyboard buffer
00d7          MODE_80    = $d7        ; 80 column / 40 volumn flag

00e4          B_Margin   = $e4        ; SCBOT  default = 24
00e5          T_Margin   = $e5        ; SCTOP  default =  0
00e6          L_Margin   = $e6        ; SCLF   default =  0
00e7          R_Margin   = $e7        ; SCRT   default = 39 or 79

00f4          QTSW       = $f4        ; Quote switch

0200          Buffer     = $0200      ; input buffer

0314          IIRQ       = $0314
0316          IBRK       = $0316
032e          EXMON      = $032e

0400          & = $400                ; bottom of BASIC runtime stack
                                      ; should be a safe space
0400          X_Vector    .BSS  2     ; exit vector (ROM version dependent)
0402          Ix_Mne      .BSS  1     ; index to mnemonics table
0403          Op_Mne      .BSS  3     ; 3 bytes for mnemonic
0406          Op_Ix       .BSS  1     ; type of constant
0407          Op_Len      .BSS  1     ; length of operand
0408          Disk_Unit   .BSS  1     ; unit = device
0409          Disk_Track  .BSS  1     ; logical track  1 -> 255
040a          Disk_Sector .BSS  1     ; logical sector 0 -> 255
040b          Disk_Status .BSS  1     ; BCD value of status

040c          Mon_Data    .BSS 40     ; buffer for hunt and filename
0434          Disk_Msg    .BSS 40     ; disk status as text message

cf2e          EXIT_OLD   = $cf2e      ; exit address for ROM 910110
cfa4          EXIT       = $cfa4      ; exit address for ROM 911001

ff6b          SETBNK     = $ff6b
ff6e          JSRFAR     = $ff6e
ff71          JMPFAR     = $ff71
ff74          LDA_FAR    = $ff74
ff77          STA_FAR    = $ff77
ff7a          CMP_FAR    = $ff7a
ff7d          PRIMM      = $ff7d
ff81          CINT       = $ff81
ff84          IOINIT     = $ff84
ff90          SETMSG     = $ff90
ff93          SECOND     = $ff93
ff96          TKSA       = $ff96
ff99          MEMTOP     = $ff99
ff9c          MEMBOT     = $ff9c
ff9f          KEY        = $ff9f
ffa2          SETTMO     = $ffa2
ffa5          ACPTR      = $ffa5
ffa8          CIOUT      = $ffa8
ffab          UNTALK     = $ffab
ffae          UNLSN      = $ffae
ffb1          LISTEN     = $ffb1
ffb4          TALK       = $ffb4
ffb7          READSS     = $ffb7
ffba          SETLFS     = $ffba
ffbd          SETNAM     = $ffbd
ffc0          OPEN       = $ffc0
ffc3          CLOSE      = $ffc3
ffc6          CHKIN      = $ffc6
ffc9          CHKOUT     = $ffc9
ffcc          CLRCHN     = $ffcc
ffcf          CHRIN      = $ffcf
ffd2          CHROUT     = $ffd2
ffd5          LOAD       = $ffd5
ffd8          SAVE       = $ffd8
ffdb          SETTIM     = $ffdb
ffde          GETTIM     = $ffde
ffe1          STOP       = $ffe1
ffe4          GETIN      = $ffe4
ffe7          CLALL      = $ffe7
ffea          SCAN       = $ffea
ffed          SCRORG     = $ffed
fff0          PLOT       = $fff0

1fff          * = $1fff
                      .STORE $1fff,$0101,"bsm.prg"

              *************
              Module header
              *************

1fff 01 20            .WORD $2001             ; load address
2001 29 20            .WORD Link              ; line link
2003 e4 07            .WORD 2020              ; line number
2005 fe 02            .BYTE $fe,$02           ; BANK token
2007 30 3a            .BYTE "0:"              ; BANK argument
2009 9e               .BYTE $9e               ; SYS  token
200a 28 38 32         .BYTE "(8235):"         ; $202d
2011 8f               .BYTE $8f               ; REM  token
2012 20 42 49         .BYTE " BIT SHIFTER 28-DEC-20",0
2029 00 00    Link    .WORD 0                 ; BASIC end marker

                      ; copy image to $030000

202b 78               SEI

              ; map memory to monitor configuration

202c a9 a0            LDA  #$a0
202e a2 82            LDX  #$82
2030 a0 00            LDY  #$00
2032 a3 83            LDZ  #$83
2034 5c               MAP
2035 ea               EOM

              ; VIC IV registers visible

2036 a9 47            LDA  #$47
2038 8d 2f d0         STA  $d02f
203b a9 53            LDA  #$53
203d 8d 2f d0         STA  $d02f

              ; toggle write protection

2040 a9 70            LDA  #$70
2042 8d 40 d6         STA  $D640
2045 ea               NOP

2046 a3 00            LDZ  #0
2048 64 59            STZ  Long_AC
204a a9 21            LDA  #$21
204c 85 5a            STA  Long_AC+1
204e 64 5d            STZ  Long_CT
2050 64 5e            STZ  Long_CT+1
2052 a9 03            LDA  #3
2054 85 5f            STA  Long_CT+2
2056 64 60            STZ  Long_CT+3
2058 a2 20            LDX  #$20

205a b2 59    _loop   LDA  (Long_AC),Z
205c ea 92 5d         STA  [Long_CT],Z
205f 1b               INZ
2060 d0 f8            BNE  _loop
2062 e6 5a            INC  Long_AC+1
2064 e6 5e            INC  Long_CT+1
2066 ca               DEX
2067 d0 f1            BNE  _loop

2069 a9 70            LDA  #$70
206b 8d 40 d6         STA  $D640              ; toggle write protection
206e ea               NOP

206f 60               RTS
2070          EndMod [header] Size = 113 [$71]

2070 00 00 00         .FILL $2100-* (0) ; 144 bytes

6000          * = $6000

              ********************
6000          Monitor_Call ; $6000
              ********************

6000 4c 3c 60          JMP  Mon_Call

              *********************
6003          Monitor_Break ; $6003
              *********************

6003 4c 09 60          JMP  Mon_Break

              **********************
6006          Monitor_Switch ; $6009
              **********************

6006 4c c9 60          JMP  Mon_Switch

              ****************
              Module Mon_Break
              ****************

6009 20 7d ff          JSR  PRIMM
600c 0d 42 52          .BYTE "\rBREAK\a",0
6014 20 ed 60          JSR  Print_Commands

              ; pull BP, Z, Y, X, A,SR,PCL,PCH
              ;       7  6  5  4  3  2  1  0

6017 a2 07             LDX  #7
6019 2c a4 cf          BIT  EXIT      ; version
601c 10 01             BPL  _loop
601e ca                DEX
601f 68       _loop    PLA
6020 95 03             STA  PCH,X
6022 ca                DEX
6023 10 fa             BPL  _loop

              ; decrement PC to point after BRK

6025 a5 04             LDA  PCL
6027 d0 02             BNE  _nopage
6029 c6 03             DEC  PCH
602b c6 04    _nopage  DEC  PCL

602d ad 1d 01          LDA  $011d
6030 7f 02 03          BBR7 Bank,_bank
6033 ad 1f 01          LDA  $011f
6036 29 0f    _bank    AND  #15
6038 85 02             STA  Bank
603a 80 23             BRA  Mon_Start
603c          EndMod [Mon_Break] Size = 51 [$33]

              ***************
              Module Mon_Call
              ***************

603c 20 ed 60          JSR  Print_Commands

              ;        clear register for monitor call

603f a9 00             LDA  #0
6041 a2 06             LDX  #6
6043 95 06    _loop    STA  AC,X
6045 ca                DEX
6046 10 fb             BPL  _loop

              ;        set default PC to "exit to BASIC"

6048 a9 a4             LDA  #<EXIT     ; ROM 911110
604a a2 cf             LDX  #>EXIT
604c 2c a4 cf          BIT  EXIT       ; $20 (JSR) or $ff ?
604f 10 04             BPL  _store
6051 a9 2e             LDA  #<EXIT_OLD ; ROM 910111
6053 a2 cf             LDX  #>EXIT_OLD
6055 85 04    _store   STA  PCL
6057 8d 00 04          STA  X_Vector
605a 86 03             STX  PCH
605c 8e 01 04          STX  X_Vector+1
605f          EndMod [Mon_Call] Size = 35 [$23]

              ****************
              Module Mon_Start
              ****************

605f d8                CLD
6060 0b                TSY
6061 84 0b             STY  SPH
6063 ba                TSX
6064 86 0c             STX  SPL
6066 a9 c0             LDA  #$c0
6068 20 90 ff          JSR  SETMSG
606b 58                CLI
606c ea                NOP
606d          EndMod [Mon_Start] Size = 14 [$e]

              ***************************
              Module Mon_Register ; $6042
              ***************************

606d 20 e6 71          JSR  Reg_Text

              ; print Bank,PCH

6070 a0 00             LDY  #0
6072 b9 02 00 _loopa   LDA  Bank,Y
6075 20 2b 6b          JSR  Print_Hex
6078 c8                INY
6079 c0 02             CPY  #2
607b 90 f5             BCC  _loopa

              ; print SR,PCL,A,X,Y,Z,BP

607d b9 02 00 _loopb   LDA  Bank,Y
6080 20 16 6b          JSR  Print_Hex_Blank
6083 c8                INY
6084 c0 09             CPY  #9
6086 90 f5             BCC  _loopb

              ; print 16 bit stack pointer

6088 a5 0b             LDA  SPH
608a 20 2b 6b          JSR  Print_Hex
608d a5 0c             LDA  SPL
608f 20 16 6b          JSR  Print_Hex_Blank

              ; print flags

6092 a0 08             LDY  #8
6094 a5 05             LDA  SR
6096 0a       _loopc   ASL  A
6097 48                PHA
6098 a9 2d             LDA  #'-'
609a 90 02             BCC  _flag
609c a9 31             LDA  #'1'
609e 20 d2 ff _flag    JSR  CHROUT
60a1 68                PLA
60a2 88                DEY
60a3 d0 f1             BNE  _loopc
60a5          EndMod [Mon_Register] Size = 56 [$38]

              ***********
              Module Main
              ***********

60a5 20 1e 6b          JSR  Print_CR
60a8 a2 00             LDX  #0

              ; read one line into buffer

              ******
60aa          Main_A
              ******

60aa 20 cf ff _loop    JSR  CHRIN
60ad 9d 00 02          STA  Buffer,X
60b0 e8                INX
60b1 e0 50             CPX  #80
60b3 b0 1e             BCS  Mon_Error         ; input too long
60b5 c9 0d             CMP  #CR
60b7 d0 f1             BNE  _loop

60b9 a9 00             LDA  #0
60bb 85 6f             STA  Buf_Index
60bd 9d ff 01          STA  Buffer-1,X        ; terminate buffer
60c0 20 5b 6b _getcomm JSR  Get_Char
60c3 f0 e0             BEQ  Main
60c5 c9 20             CMP  #' '
60c7 f0 f7             BEQ  _getcomm
60c9          EndMod [Main] Size = 36 [$24]

              *****************
              Module Mon_Switch
              *****************

60c9 a2 18             LDX  #24
60cb dd 07 61 _loop    CMP  Command_Char,X
60ce f0 10             BEQ  Mon_Select
60d0 ca                DEX
60d1 10 f8             BPL  _loop

              ;        fall through to error routine if not found

              ****************
              Module Mon_Error
              ****************

              ; put a question mark at the end of the text

60d3 20 7d ff          JSR  PRIMM
60d6 1b 4f 1d          .BYTE "\eO",CRIGHT,'?',0
60db a2 f8             LDX  #$f8              ; reset stack pointer
60dd 9a                TXS
60de 80 c5             BRA  Main

              *****************
              Module Mon_Select
              *****************

60e0 85 93             STA  VERCK
60e2 e0 16             CPX  #22
60e4 b3 34 03          LBCS  Load_Save
60e7 8a                TXA
60e8 0a                ASL  A
60e9 aa                TAX
60ea 7c 23 61          JMP  (Jump_Table,X)
60ed          EndMod [Mon_Select] Size = 13 [$d]

              **************
60ed          Print_Commands
              **************

60ed 20 7d ff          JSR  PRIMM
60f0 0d 9e 12          .BYTE CR,YELLOW,REV,"BS MONITOR COMMANDS:"

              ************
6107          Command_Char
              ************

                       ;      0123456789abcdef
6107 41 42 43          .BYTE "ABCDFGHJMRTX@.>;?"

              ***********
6118          Cons_Prefix
              ***********

6118 24 2b 26          .BYTE "$+&%'"

              ****************
611d          Load_Save_Verify
              ****************

611d 4c 53 56          .BYTE "LSV",WHITE,0
6122 60                RTS

              **********
6123          Jump_Table
              **********

6123 e8 64             .WORD Mon_Assemble     ; A
6125 29 62             .WORD Mon_Bits         ; B
6127 8a 63             .WORD Mon_Compare      ; C
6129 ed 67             .WORD Mon_Disassemble  ; D
612b c7 64             .WORD Mon_Fill         ; F
612d ae 62             .WORD Mon_Go           ; G
612f ba 63             .WORD Mon_Hunt         ; H
6131 ba 62             .WORD Mon_JSR          ; J
6133 df 61             .WORD Mon_Memory       ; M
6135 6d 60             .WORD Mon_Register     ; R
6137 40 63             .WORD Mon_Transfer     ; T
6139 4d 61             .WORD Mon_Exit         ; X
613b ff 6c             .WORD Mon_DOS          ; @
613d e8 64             .WORD Mon_Assemble     ; .
613f 80 62             .WORD Mon_Set_Memory   ; >
6141 66 62             .WORD Mon_Set_Register ; ;
6143 19 72             .WORD Mon_Help         ; ?
6145 ab 6b             .WORD Converter        ; $
6147 ab 6b             .WORD Converter        ; +
6149 ab 6b             .WORD Converter        ; &
614b ab 6b             .WORD Converter        ; %


              ***************
              Module Mon_Exit
              ***************

614d 6c 00 04          JMP  (X_Vector)

              ****************
              Module LAC_To_PC
              ****************

              ; called from Mon_Set_Register, Mon_Go and Mon_JSR
              ; as the first instruction. The carry flag was set from
              ; the routine Got_LAC if an error occured.
              ; Notice that the Bank, PCH and PCL values are stored
              ; high to low, reverse to the standard order.

              ; Bank, PCH and PCL are part of a list, that is used by
              ; the routines FAR_JMP and FAR_JSR of the operating system

6150 b0 0c             BCS  _error
6152 a5 59             LDA  Long_AC
6154 85 04             STA  Bank+2
6156 a5 5a             LDA  Long_AC+1
6158 85 03             STA  Bank+1
615a a5 5b             LDA  Long_AC+2
615c 85 02             STA  Bank
615e 60       _error   RTS
615f          EndMod [LAC_To_PC] Size = 15 [$f]

              *****************
              Module LAC_To_LPC
              *****************

615f da                PHX
6160 a2 03             LDX  #3
6162 b5 59    _loop    LDA  Long_AC,X
6164 95 61             STA  Long_PC,X
6166 ca                DEX
6167 10 f9             BPL  _loop
6169 fa                PLX
616a 60                RTS
616b          EndMod [LAC_To_LPC] Size = 12 [$c]

              *****************
              Module LAC_To_LCT
              *****************

616b da                PHX
616c a2 03             LDX  #3
616e b5 59    _loop    LDA  Long_AC,X
6170 95 5d             STA  Long_CT,X
6172 ca                DEX
6173 10 f9             BPL  _loop
6175 fa                PLX
6176 60                RTS
6177          EndMod [LAC_To_LCT] Size = 12 [$c]

              *****************
              Module LAC_To_LDA
              *****************

6177 da                PHX
6178 a2 03             LDX  #3
617a b5 59    _loop    LDA  Long_AC,X
617c 95 65             STA  Long_DA,X
617e ca                DEX
617f 10 f9             BPL  _loop
6181 fa                PLX
6182 60                RTS
6183          EndMod [LAC_To_LDA] Size = 12 [$c]

              *******************
              Module LAC_Plus_LCT
              *******************

6183 da                PHX
6184 a2 fc             LDX  #252              ; use ZP wrap around
6186 18                CLC
6187 b5 5d    _loop    LDA  Long_AC+4,X
6189 75 61             ADC  Long_CT+4,X
618b 95 5d             STA  Long_AC+4,X
618d e8                INX
618e d0 f7             BNE  _loop
6190 fa                PLX
6191 60                RTS
6192          EndMod [LAC_Plus_LCT] Size = 15 [$f]

              ********************
              Module LAC_Minus_LPC
              ********************

6192 da                PHX
6193 a2 fc             LDX  #252              ; use ZP wrap around
6195 38                SEC
6196 b5 5d    _loop    LDA  Long_AC+4,X
6198 f5 65             SBC  Long_PC+4,X
619a 95 61             STA  Long_CT+4,X
619c e8                INX
619d d0 f7             BNE  _loop
619f fa                PLX
61a0 60                RTS
61a1          EndMod [LAC_Minus_LPC] Size = 15 [$f]

              **********************
              Module LAC_Compare_LPC
              **********************

61a1 da                PHX
61a2 a2 fc             LDX  #252              ; use ZP wrap around
61a4 38                SEC
61a5 b5 5d    _loop    LDA  Long_AC+4,X
61a7 f5 65             SBC  Long_PC+4,X
61a9 e8                INX
61aa d0 f9             BNE  _loop
61ac fa                PLX
61ad 60                RTS
61ae          EndMod [LAC_Compare_LPC] Size = 13 [$d]

              **************
              Module Inc_LAC
              **************

61ae e3 59             INW  Long_AC
61b0 d0 02             BNE  _return
61b2 e3 5b             INW  Long_AC+2
61b4 60       _return  RTS
61b5          EndMod [Inc_LAC] Size = 7 [$7]

              **************
              Module Dec_LAC
              **************

61b5 a5 59             LDA  Long_AC
61b7 05 5a             ORA  Long_AC+1
61b9 d0 02             BNE  _skip
61bb c3 5b             DEW  Long_AC+2
61bd c3 59    _skip    DEW  Long_AC
61bf 60                RTS
61c0          EndMod [Dec_LAC] Size = 11 [$b]

              **************
              Module Inc_LPC
              **************

61c0 e3 61             INW  Long_PC
61c2 d0 02             BNE  _return
61c4 e3 63             INW  Long_PC+2
61c6 60       _return  RTS
61c7          EndMod [Inc_LPC] Size = 7 [$7]

              **************
              Module Dec_LDA
              **************

61c7 a5 65             LDA  Long_DA
61c9 05 66             ORA  Long_DA+1
61cb d0 02             BNE  _skip
61cd c3 67             DEW  Long_DA+2
61cf c3 65    _skip    DEW  Long_DA
61d1 60                RTS
61d2          EndMod [Dec_LDA] Size = 11 [$b]

              ************
              Module Fetch
              ************

61d2 db                PHZ
61d3 98                TYA
61d4 4b                TAZ
61d5 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
61d8 ea                NOP                    ; use LDA  [Long_PC],Z
61d9 b2 61    _banked  LDA  (Long_PC),Z
61db fb                PLZ
61dc 29 ff             AND  #$ff
61de 60                RTS
61df          EndMod [Fetch] Size = 13 [$d]

              *****************
              Module Mon_Memory
              *****************

61df 20 37 6a          JSR  Get_LAC           ; get 1st. parameter
61e2 a3 10             LDZ  #16               ; default row count
61e4 b0 1f             BCS  _row              ; no address
61e6 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = start address
61e9 20 37 6a          JSR  Get_LAC           ; Long_AC = end address
61ec b0 17             BCS  _row              ; not given

61ee 20 92 61          JSR  LAC_Minus_LPC     ; Long_CT = range
61f1 93 e0 fe          LBCC Mon_Error         ; negative range -> error
61f4 a2 04             LDX  #4                ; 16 bytes / line
61f6 7f d7 01          BBR7 MODE_80,_shift
61f9 ca                DEX                    ;  8 bytes / line
61fa 46 5e    _shift   LSR  Long_CT+1
61fc 66 5d             ROR  Long_CT
61fe ca                DEX
61ff d0 f9             BNE  _shift
6201 ab 5d 00          LDZ  Long_CT           ; row count
6204 1b                INZ

6205 20 e1 ff _row     JSR  STOP
6208 f0 06             BEQ  _exit
620a 20 fe 62          JSR  Dump_Row
620d 3b                DEZ
620e d0 f5             BNE  _row
6210 4c a5 60 _exit    JMP  Main
6213          EndMod [Mon_Memory] Size = 52 [$34]

              *****************
              Module Print_Bits
              *****************

6213 db                PHZ
6214 85 65             STA  Long_DA
6216 a0 08             LDY  #8
6218 a9 2a    _loop    LDA  #'*'
621a ff 65 02          BBS7 Long_DA,_set
621d a9 2e             LDA  #'.'
621f 20 d2 ff _set     JSR  CHROUT
6222 06 65             ASL  Long_DA
6224 88                DEY
6225 d0 f1             BNE  _loop
6227 fb                PLZ
6228 60                RTS
6229          EndMod [Print_Bits] Size = 22 [$16]

              ***************
              Module Mon_Bits
              ***************

6229 20 37 6a          JSR  Get_LAC           ; get 1st. parameter
622c b0 03             BCS  _lab
622e 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = start address
6231 20 1e 6b _lab     JSR  Print_CR
6234 a9 05             LDA  #WHITE
6236 85 66             STA  Long_DA+1

6238 a2 08             LDX  #8
623a da       _row     PHX
623b 20 ec 6a          JSR  Hex_LPC
623e a3 00             LDZ  #0
6240 38       _col     SEC
6241 a9 9b             LDA  #WHITE+LRED       ; toggle colour
6243 e5 66             SBC  Long_DA+1
6245 85 66             STA  Long_DA+1
6247 20 d2 ff          JSR  CHROUT
624a ea b2 61          LDA  [Long_PC],Z
624d 20 13 62          JSR  Print_Bits
6250 18                CLC
6251 6b                TZA
6252 69 08             ADC  #8
6254 4b                TAZ
6255 c9 40             CMP  #64
6257 90 e7             BCC  _col
6259 20 1e 6b          JSR  Print_CR
625c 20 c0 61          JSR  Inc_LPC
625f fa                PLX
6260 ca                DEX
6261 d0 d7             BNE  _row
6263 4c a5 60          JMP  Main
6266          EndMod [Mon_Bits] Size = 61 [$3d]

              ***********************
              Module Mon_Set_Register
              ***********************

6266 20 37 6a          JSR  Get_LAC           ; get 1st. parameter
6269 20 50 61          JSR  LAC_To_PC
626c a0 03             LDY  #3
626e 20 37 6a _loop    JSR  Get_LAC
6271 b0 0a             BCS  _exit
6273 a5 59             LDA  Long_AC
6275 99 02 00          STA  Bank,Y
6278 c8                INY
6279 c0 09             CPY  #9
627b 90 f1             BCC  _loop
627d 4c a5 60 _exit    JMP  Main
6280          EndMod [Mon_Set_Register] Size = 26 [$1a]

              *********************
              Module Mon_Set_Memory
              *********************

6280 20 37 6a          JSR  Get_LAC           ; get 1st. parameter
6283 b0 1c             BCS  _exit
6285 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = row address
6288 a3 00             LDZ  #0
628a 20 37 6a _loop    JSR  Get_LAC
628d b0 12             BCS  _exit
628f a5 59             LDA  Long_AC
6291 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
6294 ea                NOP                    ; use STA  [Long_PC],Z
6295 92 61    _banked  STA  (Long_PC),Z
6297 1b                INZ
6298 c2 10             CPZ  #16
629a 7f d7 02          BBR7 MODE_80,_next
629d c2 08             CPZ  #8
629f 90 e9    _next    BCC  _loop

62a1 20 7d ff _exit    JSR  PRIMM
62a4 1b 4f             .BYTE "\eO"
62a6 91 00             .BYTE $91,$00
62a8 20 fe 62          JSR  Dump_Row
62ab 4c a5 60          JMP  Main
62ae          EndMod [Mon_Set_Memory] Size = 46 [$2e]

              *************
              Module Mon_Go
              *************

62ae 20 37 6a          JSR  Get_LAC           ; get 1st. parameter
62b1 20 50 61          JSR  LAC_To_PC
62b4 a6 0c             LDX  SPL
62b6 9a                TXS
62b7 4c 71 ff          JMP  JMPFAR
62ba          EndMod [Mon_Go] Size = 12 [$c]

              **************
              Module Mon_JSR
              **************

62ba 20 37 6a          JSR  Get_LAC           ; get 1st. parameter
62bd 20 50 61          JSR  LAC_To_PC
62c0 a6 0c             LDX  SPL
62c2 9a                TXS
62c3 20 6e ff          JSR  JSRFAR
62c6 ba                TSX
62c7 86 0c             STX  SPL
62c9 4c a5 60          JMP  Main
62cc          EndMod [Mon_JSR] Size = 18 [$12]

              *******************
              Module Dump_4_Bytes
              *******************

62cc 20 d2 ff          JSR  CHROUT            ; colour
62cf ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62d2 ea                NOP                    ; use LDA  [Long_PC],Z
62d3 b2 61    _banked  LDA  (Long_PC),Z
62d5 20 16 6b          JSR  Print_Hex_Blank
62d8 1b                INZ
62d9 6b                TZA
62da 29 03             AND  #3
62dc d0 f1             BNE  _loop
62de 60                RTS
62df          EndMod [Dump_4_Bytes] Size = 19 [$13]

              *******************
              Module Dump_4_Chars
              *******************

62df a0 00             LDY  #0
62e1 84 f4             STY  QTSW              ; disable quote mode
62e3 20 d2 ff          JSR  CHROUT            ; colour
62e6 ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62e9 ea                NOP                    ; use LDA  [Long_PC],Z
62ea b2 61    _banked  LDA  (Long_PC),Z
62ec a8                TAY
62ed 29 60             AND  #%0110 0000
62ef d0 02             BNE  _laba
62f1 a0 2e             LDY  #'.'
62f3 98       _laba    TYA
62f4 20 d2 ff          JSR  CHROUT
62f7 1b                INZ
62f8 6b                TZA
62f9 29 03             AND  #3
62fb d0 e9             BNE  _loop
62fd 60                RTS
62fe          EndMod [Dump_4_Chars] Size = 31 [$1f]

              ***************
              Module Dump_Row
              ***************

62fe db                PHZ
62ff 20 1e 6b          JSR  Print_CR
6302 a9 3e             LDA  #'>'
6304 20 d2 ff          JSR  CHROUT
6307 20 ec 6a          JSR  Hex_LPC

630a a3 00             LDZ  #0
630c a2 02             LDX  #2                ; 2 blocks in 80 columns
630e 7f d7 01          BBR7 MODE_80,_loop
6311 ca                DEX                    ; 1 block  in 40 columns
6312 a9 96    _loop    LDA  #LRED
6314 20 cc 62          JSR  Dump_4_Bytes
6317 a9 05             LDA  #WHITE
6319 20 cc 62          JSR  Dump_4_Bytes
631c ca                DEX
631d d0 f3             BNE  _loop

631f 20 7d ff          JSR  PRIMM
6322 3a 12 00          .BYTE $3a,$12,$00      ; : reverse on

6325 a3 00             LDZ  #0
6327 a2 02             LDX  #2                ; 4 blocks in 80 columns
6329 7f d7 01          BBR7 MODE_80,_lchr
632c ca                DEX                    ; 2 blocks in 40 columns
632d a9 96    _lchr    LDA  #LRED
632f 20 df 62          JSR  Dump_4_Chars
6332 a9 05             LDA  #WHITE
6334 20 df 62          JSR  Dump_4_Chars
6337 ca                DEX
6338 d0 f3             BNE  _lchr
633a 6b                TZA
633b 20 84 6b          JSR  Add_LPC
633e fb                PLZ
633f 60                RTS
6340          EndMod [Dump_Row] Size = 66 [$42]

              *******************
              Module Mon_Transfer
              *******************

6340 20 92 6b          JSR  Param_Range       ; Long_PC = source
6343 b3 8e fd          LBCS Mon_Error         ; Long_CT = count
6346 20 37 6a          JSR  Get_LAC           ; Long_AC = target
6349 b3 88 fd          LBCS Mon_Error

634c a3 00             LDZ  #0
634e 20 a1 61          JSR  LAC_Compare_LPC   ; target - source
6351 90 1d             BCC  _forward

              ;        source < target: backward transfer

6353 20 83 61          JSR  LAC_Plus_LCT      ; Long_AC = end of target

6356 ff 68 01 _lpback  BBS7 Long_DA+3,_rb     ; bit 31 ?
6359 ea                NOP                    ; LDA  [Long_DA],Z
635a b2 65    _rb      LDA  (Long_DA),Z       ; backward copy
635c ff 5c 01          BBS7 Long_AC+3,_wb     ; bit 31 ?
635f ea                NOP                    ; STA  [Long_AC],Z
6360 92 59    _wb      STA  (Long_AC),Z
6362 20 c7 61          JSR  Dec_LDA
6365 20 b5 61          JSR  Dec_LAC
6368 20 77 6b          JSR  Dec_LCT
636b 10 e9             BPL  _lpback
636d 4c a5 60          JMP  Main

6370 ff 64 01 _forward BBS7 Long_PC+3,_rf     ; bit 31 ?
6373 ea                NOP                    ; LDA  [Long_PC],Z
6374 b2 61    _rf      LDA  (Long_PC),Z       ; backward copy
6376 ff 5c 01          BBS7 Long_AC+3,_wf     ; bit 31 ?
6379 ea                NOP                    ; STA  [Long_AC],Z
637a 92 59    _wf      STA  (Long_AC),Z
637c 20 c0 61          JSR  Inc_LPC
637f 20 ae 61          JSR  Inc_LAC
6382 20 77 6b          JSR  Dec_LCT
6385 10 e9             BPL  _forward
6387 4c a5 60          JMP  Main
638a          EndMod [Mon_Transfer] Size = 74 [$4a]

              ******************
              Module Mon_Compare
              ******************

638a 20 92 6b          JSR  Param_Range       ; Long_PC = source
638d b3 44 fd          LBCS Mon_Error         ; Long_CT = count
6390 20 37 6a          JSR  Get_LAC           ; Long_AC = target
6393 b3 3e fd          LBCS Mon_Error
6396 20 1e 6b          JSR  Print_CR
6399 a3 00             LDZ  #0
639b ff 64 01 _loop    BBS7 Long_PC+3,_rf     ; bit 31 ?
639e ea                NOP                    ; LDA  [Long_PC],Z
639f b2 61    _rf      LDA  (Long_PC),Z       ; backward copy
63a1 ff 5c 01          BBS7 Long_AC+3,_cf     ; bit 31 ?
63a4 ea                NOP                    ; CMP  [Long_AC],Z
63a5 d2 59    _cf      CMP  (Long_AC),Z
63a7 f0 03             BEQ  _laba
63a9 20 ec 6a          JSR  Hex_LPC
63ac 20 ae 61 _laba    JSR  Inc_LAC
63af 20 c0 61          JSR  Inc_LPC
63b2 20 77 6b          JSR  Dec_LCT
63b5 10 e4             BPL  _loop
63b7 4c a5 60          JMP  Main
63ba          EndMod [Mon_Compare] Size = 48 [$30]

              ***************
              Module Mon_Hunt
              ***************

63ba 20 92 6b          JSR  Param_Range       ; Long_PC = start
63bd b3 14 fd          LBCS Mon_Error         ; Long_CT = count
63c0 a0 00             LDY  #0
63c2 20 5b 6b          JSR  Get_Char
63c5 c9 27             CMP  #APOSTR
63c7 d0 17             BNE  _bin
63c9 20 5b 6b          JSR  Get_Char          ; string hunt
63cc c9 00             CMP  #0
63ce f3 03 fd          LBEQ Mon_Error         ; null string

63d1 99 0c 04 _lpstr   STA  Mon_Data,Y
63d4 c8                INY
63d5 20 5b 6b          JSR  Get_Char
63d8 f0 18             BEQ  _hunt
63da c0 20             CPY  #32               ;max. string length
63dc d0 f3             BNE  _lpstr
63de 80 12             BRA  _hunt

63e0 20 35 6a _bin     JSR  Got_LAC
63e3 a5 59    _lpbin   LDA  Long_AC
63e5 99 0c 04          STA  Mon_Data,Y
63e8 c8                INY
63e9 20 37 6a          JSR  Get_LAC
63ec b0 04             BCS  _hunt
63ee c0 20             CPY  #32               ;max. data length
63f0 d0 f1             BNE  _lpbin

63f2 84 65    _hunt    STY  Long_DA           ; hunt length
63f4 20 1e 6b          JSR  Print_CR

63f7 a0 00    _lpstart LDY  #0
63f9 20 d2 61 _lpins   JSR  Fetch
63fc d9 0c 04          CMP  Mon_Data,Y
63ff d0 08             BNE  _next
6401 c8                INY
6402 c4 65             CPY  Long_DA
6404 d0 f3             BNE  _lpins
6406 20 ec 6a          JSR  Hex_LPC           ; match
6409 20 e1 ff _next    JSR  STOP
640c f3 97 fc          LBEQ Main
640f 20 c0 61          JSR  Inc_LPC
6412 20 77 6b          JSR  Dec_LCT
6415 10 e0             BPL  _lpstart
6417 4c a5 60          JMP  Main
641a          EndMod [Mon_Hunt] Size = 96 [$60]

              ****************
              Module Load_Save
              ****************

641a ac 08 04          LDY  Disk_Unit
641d 84 ba             STY  FA
641f a0 08             LDY  #8
6421 84 b9             STY  SA
6423 a0 00             LDY  #0
6425 84 bd             STY  BA
6427 84 b7             STY  FNLEN
6429 84 be             STY  FNBANK
642b 84 90             STY  STATUS
642d a9 04             LDA  #>Mon_Data
642f 85 bc             STA  FNADR+1
6431 a9 0c             LDA  #<Mon_Data
6433 85 bb             STA  FNADR
6435 20 5b 6b _skip    JSR  Get_Char          ; skip blanks
6438 f3 99 fc          LBEQ Mon_Error
643b c9 20             CMP  #' '
643d f0 f6             BEQ  _skip
643f c9 22             CMP  #QUOTE            ; must be quote
6441 d3 90 fc          LBNE Mon_Error

6444 a6 6f             LDX  Buf_Index
6446 bd 00 02 _copyfn  LDA  Buffer,X          ; copy filename
6449 f0 4a             BEQ  _do               ; no more input
644b e8                INX
644c c9 22             CMP  #QUOTE
644e f0 0c             BEQ  _unit             ; end of filename
6450 91 bb             STA  (FNADR),Y         ; store to filename
6452 e6 b7             INC  FNLEN
6454 c8                INY
6455 c0 13             CPY  #19               ; max = 16 plus prefix "@0:"
6457 90 ed             BCC  _copyfn
6459 4c d3 60          JMP  Mon_Error         ; filename too long

645c 86 6f    _unit    STX  Buf_Index         ; update read position
645e 20 5b 6b          JSR  Get_Char
6461 f0 32             BEQ  _do               ; no more parameter
6463 20 37 6a          JSR  Get_LAC
6466 b0 2d             BCS  _do
6468 a5 59             LDA  Long_AC           ; unit #
646a 85 ba             STA  FA
646c 20 37 6a          JSR  Get_LAC
646f b0 24             BCS  _do
6471 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = start address
6474 85 bd             STA  BA                ; Bank
6476 20 37 6a          JSR  Get_LAC           ; Long_AC = end address + 1
6479 b0 42             BCS  _load             ; no end address -> load/verify
647b 20 1e 6b          JSR  Print_CR
647e a6 59             LDX  Long_AC           ; X/Y = end address
6480 a4 5a             LDY  Long_AC+1
6482 a5 93             LDA  VERCK             ; A = load/verify/save
6484 c9 53             CMP  #'S'
6486 d3 4b fc          LBNE Mon_Error         ; must be Save
6489 a9 00             LDA  #0
648b 85 b9             STA  SA                ; set SA for PRG
648d a9 61             LDA  #Long_PC          ; Long_PC = start address
648f 20 d8 ff          JSR  SAVE
6492 4c a5 60 _exit    JMP  Main

6495 a5 93    _do      LDA  VERCK
6497 c9 56             CMP  #'V'              ; Verify
6499 f0 07             BEQ  _exec
649b c9 4c             CMP  #'L'              ; Load
649d d3 34 fc          LBNE Mon_Error
64a0 a9 00             LDA  #0                ; 0 = LOAD
64a2 20 d5 ff _exec    JSR  LOAD              ; A == 0 : LOAD else VERIFY
64a5 4f 90 ea          BBR4 STATUS,_exit
64a8 a5 93             LDA  VERCK
64aa f3 27 fc          LBEQ Mon_Error
64ad b3 f6 fb          LBCS Main
64b0 20 7d ff          JSR  PRIMM
64b3 20 45 52          .BYTE " ERROR",0
64ba 4c a5 60          JMP  Main

64bd a6 61    _load    LDX  Long_PC
64bf a4 62             LDY  Long_PC+1
64c1 a9 00             LDA  #0                ; 0 = use X/Y as load address
64c3 85 b9             STA  SA                ; and ignore load address from file
64c5 80 ce             BRA  _do
64c7          EndMod [Load_Save] Size = 173 [$ad]

              ***************
              Module Mon_Fill
              ***************

64c7 20 92 6b          JSR  Param_Range       ; Long_PC = target
64ca b3 07 fc          LBCS Mon_Error         ; Long_CT = count
64cd 20 37 6a          JSR  Get_LAC           ; Long_AC = fill byte
64d0 b3 01 fc          LBCS Mon_Error
64d3 20 1e 6b          JSR  Print_CR
64d6 a3 00             LDZ  #0
64d8 a5 59    _loop    LDA  Long_AC
64da ea 92 61          STA  [Long_PC],Z
64dd 20 c0 61          JSR  Inc_LPC
64e0 20 77 6b          JSR  Dec_LCT
64e3 10 f3             BPL  _loop
64e5 4c a5 60          JMP  Main
64e8          EndMod [Mon_Fill] Size = 33 [$21]

              *******************
              Module Mon_Assemble
              *******************

64e8 20 37 6a          JSR  Get_LAC           ; get 1st. parameter
64eb b3 e6 fb          LBCS Mon_Error
64ee 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = PC

64f1 a2 00    _start   LDX  #0                ; mne letter counter
64f3 86 66             STX  Long_DA+1         ; clear encoded MNE
64f5 86 6c             STX  Op_Flag           ; 6:long branch 5:32 bit
64f7 8e 06 04          STX  Op_Ix             ; operand byte index
64fa 8e 07 04          STX  Op_Len            ; operand length
64fd 20 5b 6b _getin   JSR  Get_Char
6500 d0 05             BNE  _laba
6502 e0 00             CPX  #0
6504 f3 9f fb          LBEQ Main

6507 c9 20    _laba    CMP  #' '
6509 f0 e6             BEQ  _start            ; restart after blank

              ;        check for long branches

650b e0 01             CPX  #1
650d d0 0e             BNE  _labb             ; -> not 2nd. char
650f c9 42             CMP  #'B'
6511 d0 0a             BNE  _labb             ; 2nd. char != 'B'
6513 ab 03 04          LDZ  Op_Mne
6516 c2 4c             CPZ  #'L'
6518 d0 03             BNE  _labb             ; 1st. Char != 'L'
651a e7 6c             SMB6 Op_Flag           ; flag long branch
651c ca                DEX                    ; skip 'L'

651d 9d 03 04 _labb    STA  Op_Mne,X          ; next mne character
6520 e8                INX
6521 e0 03             CPX  #3
6523 d0 d8             BNE  _getin

              ;        encode 3 letter mnemonic

6525 bd 02 04 _lpenc   LDA  Op_Mne-1,X
6528 38                SEC
6529 e9 3f             SBC  #$3f              ; offset
652b a0 05             LDY  #5                ; 5 bit code
652d 4a       _lpbit   LSR  A
652e 66 65             ROR  Long_DA
6530 66 66             ROR  Long_DA+1
6532 88                DEY
6533 d0 f8             BNE  _lpbit
6535 ca                DEX
6536 d0 ed             BNE  _lpenc

              ;        find packed MNE code in table

6538 a2 5a             LDX  #90               ; # of mnemonics
653a a5 65             LDA  Long_DA
653c dd ec 6e _lpfind  CMP  MNE_L,X           ; compare left MNE
653f d0 07             BNE  _nxfind
6541 bc 47 6f          LDY  MNE_R,X
6544 c4 66             CPY  Long_DA+1         ; compare right MNE
6546 f0 06             BEQ  _found
6548 ca       _nxfind  DEX
6549 10 f1             BPL  _lpfind
654b 4c d3 60          JMP  Mon_Error

654e 8e 02 04 _found   STX  Ix_Mne

              ;        find 1st. opcode for this mnemonic

6551 8a                TXA
6552 a2 00             LDX  #0
6554 dd a2 6f _lpopc   CMP  MNE_Index,X
6557 f0 03             BEQ  _exopc
6559 e8                INX
655a d0 f8             BNE  _lpopc
655c 86 6b    _exopc   STX  Op_Code

              ;        check for BBR BBS RMB SMB

655e 8a                TXA
655f 29 07             AND  #7
6561 c9 07             CMP  #7
6563 d0 1d             BNE  _labc

6565 20 5b 6b          JSR  Get_Char
6568 c9 30             CMP  #'0'
656a 93 67 fb          LBCC Mon_Error
656d c9 38             CMP  #'8'
656f b3 62 fb          LBCS Mon_Error
6572 0a                ASL  A
6573 0a                ASL  A
6574 0a                ASL  A
6575 0a                ASL  A
6576 05 6b             ORA  Op_Code
6578 85 6b             STA  Op_Code

657a 20 5b 6b          JSR  Get_Char
657d c9 20             CMP  #' '
657f d3 52 fb          LBNE Mon_Error

              ;        read operand

6582 a9 00    _labc    LDA  #0
6584 85 6a    _labd    STA  Mode_Flags
6586 20 54 6a          JSR  Read_Number
6589 b3 48 fb          LBCS Mon_Error
658c f0 1c             BEQ  _labg             ; no operand
658e a5 5b             LDA  Long_AC+2
6590 d3 41 fb          LBNE Mon_Error         ; -> overflow
6593 a0 02             LDY  #2                ; Y=2 word operand
6595 a5 5a             LDA  Long_AC+1
6597 d0 01             BNE  _labf             ; high byte not zero
6599 88                DEY                    ; Y=1 byte operand
659a ae 06 04 _labf    LDX  Op_Ix             ; X = operand value #
659d 98                TYA                    ; A = 1:byte or 2:word
659e 9d 07 04          STA  Op_Len,X          ; store operand length
65a1 ee 06 04          INC  Op_Ix             ; ++index to operand value
65a4 8a                TXA                    ; A = current index
65a5 d0 03             BNE  _labg             ; -> at 2nd. byte
65a7 20 6b 61          JSR  LAC_To_LCT        ; Long_CT = 1st. operand
65aa c6 6f    _labg    DEC  Buf_Index         ; back to delimiter

65ac 20 5b 6b _lpnop   JSR  Get_Char          ; get delimiter
65af f3 ed 00          LBEQ _adjust           ; end of operand
65b2 c9 20             CMP  #' '
65b4 f0 f6             BEQ  _lpnop

              ;        immediate

65b6 c9 23             CMP  #'#'
65b8 d0 08             BNE  _lbra
65ba a5 6a             LDA  Mode_Flags
65bc d0 70             BNE  _error
65be a9 80             LDA  #$80              ; immediate mode
65c0 80 c2             BRA  _labd

              ;        left bracket

65c2 c9 5b    _lbra    CMP  #'['
65c4 d0 0a             BNE  _indir
65c6 a5 6a             LDA  Mode_Flags
65c8 d0 64             BNE  _error
65ca d7 6c             SMB5 Op_Flag           ; 32 bit mode
65cc a9 40             LDA  #$40              ; ( flag
65ce 80 b4             BRA  _labd

              ;        left parenthesis

65d0 c9 28    _indir   CMP  #'('
65d2 d0 08             BNE  _comma
65d4 a5 6a             LDA  Mode_Flags
65d6 d0 56             BNE  _error
65d8 a9 40             LDA  #$40              ; ( flag
65da 80 a8             BRA  _labd

              ;        comma

65dc c9 2c    _comma   CMP  #','
65de d0 1f             BNE  _stack
65e0 ad 06 04          LDA  Op_Ix             ; operand value #
65e3 f0 49             BEQ  _error
65e5 a2 04             LDX  #4                ; outside comma
65e7 a5 6a             LDA  Mode_Flags
65e9 f0 0e             BEQ  _comma1           ; no flags yet
65eb c9 78             CMP  #$78              ; ($nn,SP)
65ed f0 0a             BEQ  _comma1
65ef c9 48             CMP  #$48              ; ($nn)
65f1 f0 06             BEQ  _comma1
65f3 a2 20             LDX  #$20              ; , inside comma
65f5 c9 40             CMP  #$40              ; (
65f7 d0 35             BNE  _error
65f9 8a       _comma1  TXA
65fa 05 6a             ORA  Mode_Flags
65fc 4c 84 65          JMP  _labd

              ;        stack relative

65ff c9 53    _stack   CMP  #'S'
6601 d0 12             BNE  _rbra
6603 20 5b 6b          JSR  Get_Char
6606 c9 50             CMP  #'P'
6608 d0 24             BNE  _error
660a a5 6a             LDA  Mode_Flags
660c c9 60             CMP  #$60              ; ($nn,
660e d0 1e             BNE  _error
6610 09 10             ORA  #%0001 0000       ; SP flag
6612 4c 84 65          JMP  _labd

              ;        right bracket

6615 c9 5d    _rbra    CMP  #']'
6617 d0 18             BNE  _right
6619 5f 6c 12          BBR5 Op_Flag,_error
661c ad 06 04          LDA  Op_Ix
661f f3 b2 fa          LBEQ Mon_Error         ; no value
6622 a5 6a             LDA  Mode_Flags
6624 c9 40             CMP  #$40              ; (
6626 d3 ab fa          LBNE Mon_Error
6629 09 08             ORA  #%0000 1000       ; )
662b 4c 84 65          JMP  _labd

662e 4c d3 60 _error   JMP  Mon_Error

              ;        right parenthesis

6631 c9 29    _right   CMP  #')'
6633 d0 1a             BNE  _X
6635 ad 06 04          LDA  Op_Ix
6638 f3 99 fa          LBEQ Mon_Error         ; no value
663b a5 6a             LDA  Mode_Flags
663d c9 40             CMP  #$40              ; (
663f f0 09             BEQ  _right1
6641 c9 61             CMP  #$61              ; ($nn,X
6643 f0 05             BEQ  _right1
6645 c9 70             CMP  #$70              ; ($nn,SP
6647 d3 8a fa          LBNE Mon_Error
664a 09 08    _right1  ORA  #%0000 1000       ; )
664c 4c 84 65          JMP  _labd

664f c9 58    _X       CMP  #'X'
6651 d0 16             BNE  _Y
6653 ad 06 04          LDA  Op_Ix
6656 f3 7b fa          LBEQ Mon_Error
6659 a5 6a             LDA  Mode_Flags
665b c9 60             CMP  #$60
665d f0 05             BEQ  _X1
665f c9 04             CMP  #4
6661 d3 70 fa          LBNE Mon_Error
6664 09 01    _X1      ORA  #%0000 0001
6666 4c 84 65          JMP  _labd

              ;        Y

6669 c9 59    _Y       CMP  #'Y'
666b d0 1a             BNE  _Z
666d ad 06 04          LDA  Op_Ix
6670 f3 61 fa          LBEQ Mon_Error
6673 a5 6a             LDA  Mode_Flags
6675 c9 4c             CMP  #$4c             ; ($nn),
6677 f0 09             BEQ  _Y1
6679 c9 04             CMP  #4               ; $nn,
667b f0 05             BEQ  _Y1
667d c9 7c             CMP  #$7c             ; ($nn,SP),
667f d3 52 fa          LBNE Mon_Error
6682 09 02    _Y1      ORA  #%0000 0010      ; Y
6684 4c 84 65          JMP  _labd

              ;        Z

6687 c9 5a    _Z       CMP  #'Z'
6689 d3 48 fa          LBNE Mon_Error
668c ad 06 04          LDA  Op_Ix
668f f3 42 fa          LBEQ Mon_Error
6692 a5 6a             LDA  Mode_Flags
6694 c9 4c             CMP  #$4c              ; $nn,
6696 d3 3b fa          LBNE Mon_Error
6699 09 03             ORA  #%0000 0011       ; Z
669b 4c 84 65          JMP  _labd

              ;        BBR BBS RMB SMB  two operands

669e ad 02 04 _adjust  LDA  Ix_Mne
66a1 ae 06 04          LDX  Op_Ix             ; # if values
66a4 f0 52             BEQ  _match            ; -> no operand
66a6 ca                DEX
66a7 f0 25             BEQ  _one             ; ->  one operand
66a9 ca                DEX
66aa d3 27 fa          LBNE Mon_Error         ; -> error if more than 2
66ad c9 05             CMP  #5                ; BBR
66af f0 05             BEQ  _BB
66b1 c9 06             CMP  #6                ; BBS
66b3 d3 1e fa          LBNE Mon_Error
66b6 a5 5e    _BB      LDA  Long_CT+1
66b8 d3 19 fa          LBNE Mon_Error
66bb a9 03             LDA  #3                ; offset
66bd 20 a3 67          JSR  Branch_Target
66c0 a5 6b             LDA  Op_Code
66c2 a4 59             LDY  Long_AC
66c4 a6 5d             LDX  Long_CT
66c6 86 59             STX  Long_AC
66c8 84 5a             STY  Long_AC+1
66ca a0 02             LDY  #2
66cc 80 4d             BRA  _store

              ;        one operand in Long_CT

66ce a6 5d    _one     LDX  Long_CT
66d0 a4 5e             LDY  Long_CT+1
66d2 86 59             STX  Long_AC
66d4 84 5a             STY  Long_AC+1            ; Aval = operand
66d6 a2 0a             LDX  #10
66d8 dd a1 70 _lpbrain CMP  BRAIN-1,X
66db f0 05             BEQ  _branch
66dd ca                DEX
66de d0 f8             BNE  _lpbrain
66e0 80 16             BRA  _match

              ;        branch instruction

66e2 a5 6a    _branch  LDA  Mode_Flags
66e4 d3 ed f9          LBNE Mon_Error         ; only value
66e7 a9 02             LDA  #2                ; branch offset
66e9 20 a3 67          JSR  Branch_Target
66ec a5 6b             LDA  Op_Code
66ee a0 01             LDY  #1                ; short branch
66f0 6f 6c 03          BBR6 Op_Flag,_bran1
66f3 c8                INY                    ; long branch
66f4 09 03             ORA  #3
66f6 80 23    _bran1   BRA  _store

              ;        find opcode matching mnemonic and address mode

66f8 20 ce 67 _match   JSR  Mode_Index
66fb 20 b6 67 _lpmatch JSR  Match_Mode
66fe f0 17             BEQ  _okmat
6700 ad 07 04          LDA  Op_Len
6703 f3 ce f9          LBEQ Mon_Error
6706 a5 6a             LDA  Mode_Flags
6708 33 c9 f9          LBMI Mon_Error
670b 29 3f             AND  #%0011 1111
670d 85 6a             STA  Mode_Flags
670f ee 07 04          INC  Op_Len
6712 20 e0 67          JSR  Size_To_Mode
6715 80 e4             BRA  _lpmatch
6717 ac 07 04 _okmat   LDY  Op_Len
671a 8a                TXA

              ;        store instruction bytes
              ;        -----------------------
              ;        A    = opcode
              ;        Y    = operand length
              ;        Long_AC = operand value

671b 85 6b    _store   STA  Op_Code
671d 84 6d             STY  Op_Size
671f e6 6d             INC  Op_Size
6721 5f 6c 17          BBR5 Op_Flag,_storen
6724 a9 ea             LDA  #$ea              ; 32 bit prefix
6726 a3 00             LDZ  #0
6728 ea 92 61          STA  [Long_PC],Z       ; store prefix
672b 1b                INZ
672c a5 6b             LDA  Op_Code
672e ea 92 61          STA  [Long_PC],Z       ; store opcode
6731 1b                INZ
6732 a5 59             LDA  Long_AC
6734 ea 92 61          STA  [Long_PC],Z       ; store address
6737 e6 6d             INC  Op_Size
6739 80 13             BRA  _print

673b 5a       _storen  PHY
673c fb                PLZ                    ; Z = Y
673d f0 0a             BEQ  _store1

673f b9 58 00 _lpsto   LDA  Long_AC-1,Y
6742 ea 92 61          STA  [Long_PC],Z
6745 3b                DEZ
6746 88                DEY
6747 d0 f6             BNE  _lpsto

6749 a5 6b    _store1  LDA  Op_Code
674b ea 92 61          STA  [Long_PC],Z

674e 20 7d ff _print   JSR  PRIMM
6751 0d 91 41          .BYTE 13,$91,"A \eQ",0
6758 20 2b 68          JSR  Print_Code
675b e6 6d             INC  Op_Size
675d a5 6d             LDA  Op_Size
675f 20 84 6b          JSR  Add_LPC

              ; print out command 'A' together with next address
              ; and put it into buffer too,
              ; for easy entry of next assembler instruction

6762 20 7d ff          JSR  PRIMM
6765 0d 41 20          .BYTE CR,"A ",0

6769 a9 41             LDA  #'A'
676b 8d 00 02          STA  Buffer
676e a9 20             LDA  #' '
6770 8d 01 02          STA  Buffer+1
6773 a0 02             LDY  #2
6775 a2 02             LDX  #2                ; 6 digits
6777 b5 61             LDA  Long_PC,X
6779 d0 01             BNE  _auto
677b ca                DEX                    ; 4 digits
677c da       _auto    PHX
677d b5 61             LDA  Long_PC,X
677f 20 37 6b          JSR  A_To_Hex
6782 99 00 02          STA  Buffer,Y
6785 20 d2 ff          JSR  CHROUT
6788 c8                INY
6789 8a                TXA
678a 99 00 02          STA  Buffer,Y
678d 20 d2 ff          JSR  CHROUT
6790 c8                INY
6791 fa                PLX
6792 ca                DEX
6793 10 e7             BPL  _auto

6795 a9 20             LDA  #' '
6797 99 00 02          STA  Buffer,Y
679a 20 d2 ff          JSR  CHROUT
679d c8                INY
679e 98                TYA
679f aa                TAX
67a0 4c aa 60          JMP  Main_A
67a3          EndMod [Mon_Assemble] Size = 699 [$2bb]

              ********************
              Module Branch_Target
              ********************

67a3 c3 59             DEW  Long_AC
67a5 3a                DEC  A
67a6 d0 fb             BNE  Branch_Target

              ;        Target - PC

67a8 38                SEC
67a9 a5 59             LDA  Long_AC
67ab e5 61             SBC  Long_PC
67ad 85 59             STA  Long_AC
67af a5 5a             LDA  Long_AC+1
67b1 e5 62             SBC  Long_PC+1
67b3 85 5a             STA  Long_AC+1
67b5 60                RTS
67b6          EndMod [Branch_Target] Size = 19 [$13]

              *****************
              Module Match_Mode
              *****************

              ;        find matching mnemonic and address mode

67b6 a6 6b             LDX  Op_Code           ; try this opcode
67b8 a5 6a             LDA  Mode_Flags         ; size and address mode
67ba dd ac 70 _loop    CMP  LEN_ADM,X
67bd f0 0e             BEQ  _return           ; success  ZF=1

              ;        search for next opcode with same mnemonic

67bf e8       _next    INX                    ; next opcode
67c0 f0 0a             BEQ _error
67c2 bc a2 6f          LDY  MNE_Index,X
67c5 cc 02 04          CPY  Ix_Mne            ; same mnemonic ?
67c8 f0 f0             BEQ  _loop             ; -> compare again
67ca 80 f3             BRA  _next

67cc ca       _error   DEX                    ; X = $ff ZF=0
67cd 60       _return  RTS
67ce          EndMod [Match_Mode] Size = 24 [$18]

              *****************
              Module Mode_Index
              *****************

67ce a5 6a             LDA  Mode_Flags
67d0 a2 00             LDX  #0
67d2 dd ac 71 _loop    CMP  ADMODE,X
67d5 f0 07             BEQ  _found
67d7 e8                INX
67d8 e0 10             CPX  #16
67da 90 f6             BCC  _loop
67dc 8a                TXA
67dd 60                RTS
67de 86 6a    _found   STX  Mode_Flags
67e0          EndMod [Mode_Index] Size = 18 [$12]

              *******************
              Module Size_To_Mode
              *******************

67e0 ad 07 04          LDA  Op_Len
67e3 4a                LSR  A
67e4 6a                ROR  A
67e5 6a                ROR  A
67e6 05 6a             ORA  Mode_Flags
67e8 85 6a             STA  Mode_Flags
67ea a2 00             LDX  #0
67ec 60                RTS
67ed          EndMod [Size_To_Mode] Size = 13 [$d]

              **********************
              Module Mon_Disassemble
              **********************

67ed 20 37 6a          JSR  Get_LAC           ; get 1st. parameter
67f0 b0 08             BCS  _nopar
67f2 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = start address
67f5 20 37 6a          JSR  Get_LAC           ; Long_AC = end address
67f8 90 06             BCC  range
67fa a9 20    _nopar   LDA  #32               ; disassemble 32 bytes
67fc 85 5d             STA  Long_CT
67fe 80 06             BRA  _loop
6800 20 92 61 range    JSR  LAC_Minus_LPC     ; Long_CT = range
6803 93 ce f8          LBCC Mon_Error         ; -> negative

6806 20 23 6b _loop    JSR  CR_Erase          ; prepare empty line
6809 20 e1 ff          JSR  STOP
680c f3 97 f8          LBEQ Main
680f 20 25 68          JSR  Dis_Code          ; disassemble one line
6812 e6 6d             INC  Op_Size
6814 a5 6d             LDA  Op_Size
6816 20 84 6b          JSR  Add_LPC           ; advance address
6819 a5 5d             LDA  Long_CT
681b 38                SEC
681c e5 6d             SBC  Op_Size
681e 85 5d             STA  Long_CT
6820 b0 e4             BCS  _loop
6822 4c a5 60          JMP  Main
6825          EndMod [Mon_Disassemble] Size = 56 [$38]

              ***************
              Module Dis_Code
              ***************

6825 20 7d ff          JSR  PRIMM
6828 2e 20 00          .BYTE ". ",0
682b          EndMod [Dis_Code] Size = 6 [$6]

              *****************
              Module Print_Code
              *****************

              ;        print 24 bit address of instruction

682b 20 ec 6a          JSR  Hex_LPC          ; 24 bit address

              ;        read opcode and calculate length and address mode

682e a0 00             LDY  #0
6830 84 6c             STY  Op_Flag           ; clear flags
6832 20 d2 61          JSR  Fetch             ; fetch from (banked) address

              ;        check for Q instructions

6835 c9 42             CMP  #$42              ; NEG
6837 d0 0f             BNE  _nop
6839 c8                INY                    ; Y = 1
683a 20 d2 61          JSR  Fetch
683d c9 42             CMP  #$42              ; NEG
683f d0 07             BNE  _nop
6841 c7 6c             SMB4 Op_Flag           ; Q flag
6843 a9 02             LDA  #2
6845 20 84 6b          JSR  Add_LPC           ; skip NEG NEG

              ;        check for 32 bit address mode

6848 a0 00    _nop     LDY  #0
684a 20 d2 61          JSR  Fetch
684d 85 6b             STA  Op_Code
684f aa                TAX
6850 c9 ea             CMP  #$ea              ; prefix ?
6852 d0 12             BNE  _normal
6854 c8                INY
6855 20 d2 61          JSR  Fetch             ; opcode after prefix
6858 29 1f             AND  #%0001 1111       ; identify ($nn),Z codes
685a c9 12             CMP  #%0001 0010
685c d0 08             BNE  _normal
685e d7 6c             SMB5 Op_Flag           ; set extended flag
6860 20 d2 61          JSR  Fetch
6863 85 6b             STA  Op_Code           ; code after prefix
6865 aa                TAX

6866 bc ac 70 _normal  LDY  LEN_ADM,X         ; Y = length and address mode
6869 98                TYA                    ; A = length and address mode
686a 29 0f             AND  #15               ; A = address mode
686c aa                TAX                    ; X = address mode
686d bd ac 71          LDA  ADMODE,X          ; A = mode flags
6870 85 69             STA  Adr_Flags         ; store
6872 98                TYA                    ; A = length and address mode
6873 29 c0             AND  #%1100 0000       ; mask instruction length
6875 0a                ASL  A                 ; rotate into lower two bits
6876 2a                ROL  A
6877 2a                ROL  A
6878 85 6d             STA  Op_Size           ; store
687a 5f 6c 02          BBR5 Op_Flag,_norm1
687d e6 6d             INC  Op_Size
687f          _norm1

              ;        print instruction and operand bytes

687f a0 00             LDY  #0
6881 a9 20             LDA  #' '
6883 4f 6c 02          BBR4 Op_Flag,_blpr
6886 a9 2a             LDA  #'*'              ; print * for NEG NEG
6888 20 d2 ff _blpr    JSR  CHROUT
688b 20 d2 61 _lphex   JSR  Fetch
688e 20 16 6b          JSR  Print_Hex_Blank
6891 c0 02             CPY  #2
6893 f0 13             BEQ  _long             ; stop after 3 bytes
6895 c4 6d             CPY  Op_Size
6897 c8                INY
6898 90 f1             BCC  _lphex

              ;        fill up with blanks

689a c0 03    _lpfill  CPY  #3
689c b0 0a             BCS  _long
689e 20 7d ff          JSR  PRIMM
68a1 20 20 20          .BYTE "   ",0
68a5 c8                INY
68a6 80 f2             BRA  _lpfill

              ;        detect long branches

68a8 a9 9e    _long    LDA  #YELLOW
68aa 20 d2 ff          JSR  CHROUT
68ad a6 6b             LDX  Op_Code
68af bd ac 70          LDA  LEN_ADM,X
68b2 c9 a0             CMP  #%1010 0000        ; long branch mode
68b4 d0 07             BNE  _locate
68b6 e7 6c             SMB6 Op_Flag            ; set long branch flag
68b8 a9 4c             LDA  #'L'
68ba 20 d2 ff          JSR  CHROUT

              ;        locate mnemonic text

68bd a6 6b    _locate  LDX  Op_Code           ; X = opcode
68bf bc a2 6f          LDY  MNE_Index,X       ; Y = index to mnemonic text
68c2 b9 ec 6e          LDA  MNE_L,Y           ; A = packed left part
68c5 85 5a             STA  Long_AC+1
68c7 b9 47 6f          LDA  MNE_R,Y           ; A = packed right part
68ca 85 59             STA  Long_AC

              ;        unpack and print mnemonic text

68cc a2 03             LDX  #3                ; 3 letters
68ce a9 00    _lpmne   LDA  #0
68d0 a0 05             LDY  #5                ; 5 bits per letter
68d2 06 59    _lplet   ASL  Long_AC
68d4 26 5a             ROL  Long_AC+1
68d6 2a                ROL  A                 ; rotate letter into A
68d7 88                DEY
68d8 d0 f8             BNE  _lplet            ; next bit
68da 69 3f             ADC  #$3f              ; add offset (C = 0)
68dc ca                DEX
68dd f0 06             BEQ  _lastc            ; 3rd. character
68df 4b                TAZ                    ; remember
68e0 20 d2 ff          JSR  CHROUT            ; and print it
68e3 80 e9             BRA  _lpmne            ; next letter

68e5 4f 6c 21 _lastc   BBR4 Op_Flag,_lbra     ; -> no Q
68e8 c9 41             CMP  #'A'              ; LDA, STA, ORA
68ea f0 0c             BEQ  _Q3
68ec c9 43             CMP  #'C'              ; DEC, INC
68ee d0 0f             BNE  _Q4
68f0 c2 45             CPZ  #'E'              ; DEC
68f2 f0 04             BEQ  _Q3
68f4 c2 4e             CPZ  #'N'              ; INC
68f6 d0 07             BNE  _Q4
68f8 a9 51    _Q3      LDA  #'Q'              ; LDQ, STQ, ORQ, INQ, DEQ
68fa 20 d2 ff          JSR  CHROUT
68fd 80 2e             BRA  _mne4
68ff 20 d2 ff _Q4      JSR  CHROUT
6902 a9 51             LDA  #'Q'              ; add Q as 4th. char
6904 20 d2 ff          JSR  CHROUT
6907 80 27             BRA  _mne5

6909 20 d2 ff _lbra    JSR  CHROUT            ; 3rd. character
690c ef 6c 21          BBS6 Op_Flag,_mne5     ; long branch

              ;        check for 4-letter bit instructions

690f a5 6b             LDA  Op_Code
6911 29 0f             AND  #15
6913 c9 07             CMP  #7                ; RMB & SMB
6915 f0 06             BEQ  _biti
6917 c9 0f             CMP  #15               ; BBR & BBS
6919 d0 12             BNE  _mne4
691b f7 6c             SMB7 Op_Flag           ; flag two operands
691d a5 6b    _biti    LDA  Op_Code
691f 29 70             AND  #%0111 0000
6921 0a                ASL  A
6922 2a                ROL  A
6923 2a                ROL  A
6924 2a                ROL  A
6925 2a                ROL  A
6926 09 30             ORA  #'0'
6928 20 d2 ff          JSR  CHROUT
692b 80 03             BRA  _mne5

692d 20 19 6b _mne4    JSR  Print_Blank
6930 20 19 6b _mne5    JSR  Print_Blank
6933 a9 05             LDA  #WHITE
6935 20 d2 ff          JSR  CHROUT

              ;        check for accumulator operand

6938 a5 6b             LDA  Op_Code
693a a2 08             LDX  #8
693c ca       _lpaccu  DEX
693d 30 12             BMI  _oper
693f dd bc 71          CMP  ACCUMODE,X
6942 d0 f8             BNE  _lpaccu

6944 a9 41             LDA  #'A'
6946 4f 6c 02          BBR4 Op_Flag,_accu
6949 a9 51             LDA  #'Q'
694b 20 d2 ff _accu    JSR  CHROUT
694e 4c 34 6a          JMP  _return

              ;        fetch and decode operand

6951 a6 6d    _oper    LDX  Op_Size
6953 f3 df 00          LBEQ _return           ; -> no operand

6956 7f 69 04          BBR7 Adr_Flags,_laba   ; bit 7: immediate
6959 a9 23             LDA  #'#'
695b 80 0a             BRA  _labb
695d 6f 69 0a _laba    BBR6 Adr_Flags,_labc   ; bit 6: left (
6960 a9 28             LDA  #'('
6962 5f 6c 02          BBR5 Op_Flag,_labb
6965 a9 5b             LDA  #'['
6967 20 d2 ff _labb    JSR  CHROUT
696a a9 24    _labc    LDA  #'$'
696c 20 d2 ff          JSR  CHROUT

              ;        fetch operand to Long_AC

696f a0 00             LDY  #0
6971 84 5a             STY  Long_AC+1
6973 c8       _lpfop   INY
6974 20 d2 61          JSR  Fetch
6977 99 58 00          STA  Long_AC-1,Y
697a c4 6d             CPY  Op_Size
697c 90 f5             BCC  _lpfop

              ;        interpret address modes

697e a6 6b             LDX  Op_Code
6980 bd ac 70          LDA  LEN_ADM,X
6983 29 20             AND  #%0010 0000       ; branches
6985 d3 84 00          LBNE _rel

              ;        print 16 bit operand hi/lo or 8 bit operand

6988 5f 6c 0c          BBR5 Op_Flag,_proper
698b a5 5a             LDA  Long_AC+1
698d 20 2b 6b          JSR  Print_Hex         ; [$nn],Z
6990 a9 5d             LDA  #']'
6992 20 d2 ff          JSR  CHROUT
6995 80 35             BRA  _labf

6997 a4 6d    _proper  LDY  Op_Size
6999 7f 6c 02          BBR7 Op_Flag,_lpoper
699c a0 01             LDY  #1
699e b9 58 00 _lpoper  LDA  Long_AC-1,Y
69a1 20 2b 6b          JSR  Print_Hex
69a4 88                DEY
69a5 d0 f7             BNE  _lpoper

69a7 5f 69 1a          BBR5 Adr_Flags,_labe   ; comma flag
69aa a9 2c             LDA  #','
69ac 20 d2 ff          JSR  CHROUT

69af 4f 69 0a          BBR4 Adr_Flags,_labd   ; SP flag
69b2 a9 53             LDA  #'S'
69b4 20 d2 ff          JSR  CHROUT
69b7 a9 50             LDA  #'P'
69b9 20 d2 ff          JSR  CHROUT

69bc 0f 69 05 _labd    BBR0 Adr_Flags,_labe   ; X flag
69bf a9 58             LDA  #'X'
69c1 20 d2 ff          JSR  CHROUT

69c4 3f 69 05 _labe    BBR3 Adr_Flags,_labf   ; ) flag
69c7 a9 29             LDA  #')'
69c9 20 d2 ff          JSR  CHROUT

69cc 4f 6c 08 _labf    BBR4 Op_Flag,_comch    ; not a Q instruction
69cf a5 69             LDA  Adr_Flags
69d1 29 03             AND  #3
69d3 c9 01             CMP  #1
69d5 d0 5d             BNE  _return           ; Q only with ,X

69d7 2f 69 12 _comch   BBR2 Adr_Flags,_labg   ; , flag
69da a9 2c             LDA  #','
69dc 20 d2 ff          JSR  CHROUT

69df a5 69             LDA  Adr_Flags
69e1 29 03             AND  #%0000 0011 ; $03
69e3 f0 07             BEQ  _labg
69e5 a8                TAY
69e6 b9 cb 71          LDA  Index_Char-1,Y
69e9 20 d2 ff          JSR  CHROUT

              ;        fetch 2nd. operand for BBR and BBS

69ec 7f 6c 45 _labg    BBR7 Op_Flag,_return
69ef a9 2c             LDA  #','
69f1 20 d2 ff          JSR  CHROUT
69f4 a9 24             LDA  #'$'
69f6 20 d2 ff          JSR  CHROUT
69f9 a0 02             LDY  #2
69fb 20 d2 61          JSR  Fetch
69fe 85 59             STA  Long_AC
6a00 a9 00             LDA  #0
6a02 85 5a             STA  Long_AC+1
6a04 88                DEY
6a05 84 6d             STY  Op_Size           ; Op_Size = 1
6a07 a9 03             LDA  #3                ; offset for relative address
6a09 80 02             BRA  _rela

6a0b a9 02    _rel     LDA  #2                ; offset for relative address
6a0d 48       _rela    PHA
6a0e a5 6d             LDA  Op_Size           ; 1:short   2:long
6a10 4a                LSR  A
6a11 6a                ROR  A
6a12 25 59             AND  Long_AC
6a14 10 04             BPL  _labh
6a16 a9 ff             LDA  #$ff              ; backward branch
6a18 85 5a             STA  Long_AC+1

6a1a fa       _labh    PLX                    ; offset 2 or 3
6a1b e3 59    _lpinw   INW  Long_AC
6a1d ca                DEX
6a1e d0 fb             BNE  _lpinw

6a20 18                CLC
6a21 a5 59             LDA  Long_AC
6a23 65 61             ADC  Long_PC
6a25 48                PHA
6a26 a5 5a             LDA  Long_AC+1
6a28 65 62             ADC  Long_PC+1
6a2a aa                TAX
6a2b 68                PLA
6a2c 20 10 6b          JSR  Print_XA_Hex
6a2f 7f 6c 02          BBR7 Op_Flag,_return
6a32 e6 6d             INC  Op_Size
6a34 60       _return  RTS
6a35          EndMod [Print_Code] Size = 522 [$20a]

              **************
              Module Got_LAC
              **************

6a35 c6 6f             DEC  Buf_Index
6a37          EndMod [Got_LAC] Size = 2 [$2]

              **************
              Module Get_LAC
              **************

6a37 20 54 6a          JSR  Read_Number
6a3a b0 0f             BCS  _error            ; illegal character
6a3c f0 10             BEQ  _noval            ; no value
6a3e 20 59 6b          JSR  Got_Char          ; delimiter ?
6a41 f0 0d             BEQ  _end              ; end of input
6a43 c9 20             CMP  #' '
6a45 f0 0b             BEQ  _ok
6a47 c9 2c             CMP  #','
6a49 f0 07             BEQ  _ok
6a4b 4c d3 60 _error   JMP  Mon_Error         ; stack is reset in Mon_Error

6a4e 38       _noval   SEC
6a4f 60                RTS

6a50 c6 6f    _end     DEC  Buf_Index
6a52 18       _ok      CLC
6a53 60                RTS
6a54          EndMod [Get_LAC] Size = 29 [$1d]

              ******************
              Module Read_Number
              ******************

6a54 da                PHX
6a55 5a                PHY
6a56 db                PHZ
6a57 a9 00             LDA  #0
6a59 85 6e             STA  Dig_Cnt               ; count columns read
6a5b 85 59             STA  Long_AC           ; clear result Long_AC
6a5d 85 5a             STA  Long_AC+1
6a5f 85 5b             STA  Long_AC+2
6a61 85 5c             STA  Long_AC+3

6a63 20 4c 6b          JSR  Get_Glyph         ; get 1st. character
6a66 f0 7d             BEQ  _exit
6a68 c9 27             CMP  #APOSTR           ; character entry 'C
6a6a d0 09             BNE  _numeric
6a6c 20 5b 6b          JSR  Get_Char          ; character after '
6a6f 85 59             STA  Long_AC
6a71 e6 6e             INC  Dig_Cnt
6a73 80 70             BRA  _exit

6a75 a0 03    _numeric LDY  #3                ; $ + % %
6a77 d9 18 61 _prefix  CMP  Cons_Prefix,Y     ; Y = base index
6a7a f0 06             BEQ  _digit            ; -> valid prefix
6a7c 88                DEY
6a7d 10 f8             BPL  _prefix
6a7f c8                INY                    ; Y = 0
6a80 c6 6f             DEC  Buf_Index         ; character is digit

6a82 20 5b 6b _digit   JSR  Get_Char          ; hex -> BCD
6a85 f0 5e             BEQ  _exit             ; ? : ; and zero terminate
6a87 c9 30             CMP  #'0'
6a89 90 5a             BCC  _exit
6a8b c9 3a             CMP  #':'
6a8d 90 0a             BCC  _valid            ; 0-9
6a8f c9 41             CMP  #'A'
6a91 90 52             BCC  _exit
6a93 c9 47             CMP  #'G'
6a95 b0 4e             BCS  _exit
6a97 e9 07             SBC  #7                ; hex conversion
6a99 e9 2f    _valid   SBC  #'0'-1
6a9b d9 c4 71          CMP  Num_Base,Y
6a9e b0 42             BCS  _error
6aa0 48                PHA                    ; push digit
6aa1 e6 6e             INC  Dig_Cnt

6aa3 c0 01             CPY  #1                ; decimal
6aa5 d0 0a             BNE  _laba
6aa7 a2 03             LDX  #3                ; push Long_AC * 2
6aa9 18                CLC
6aaa b5 59    _push    LDA  Long_AC,X
6aac 2a                ROL  A
6aad 48                PHA
6aae ca                DEX
6aaf 10 f9             BPL  _push

6ab1 be c8 71 _laba    LDX  Num_Bits,Y
6ab4 06 59    _shift   ASL  Long_AC
6ab6 26 5a             ROL  Long_AC+1
6ab8 eb 5b 00          ROW  Long_AC+2
6abb b0 25             BCS  _error            ; overflow
6abd ca                DEX
6abe d0 f4             BNE  _shift

6ac0 c0 01             CPY  #1                ; decimal adjustment
6ac2 d0 0e             BNE  _labc
6ac4 a2 00             LDX  #0
6ac6 a3 03             LDZ  #3
6ac8 18                CLC
6ac9 68       _pull    PLA
6aca 75 59             ADC  Long_AC,X
6acc 95 59             STA  Long_AC,X
6ace e8                INX
6acf 3b                DEZ
6ad0 10 f7             BPL  _pull

6ad2 68       _labc    PLA                    ; pull digit
6ad3 18                CLC
6ad4 65 59             ADC  Long_AC
6ad6 85 59             STA  Long_AC
6ad8 90 a8             BCC  _digit
6ada e6 5a             INC  Long_AC+1
6adc d0 a4             BNE  _digit
6ade e3 5b             INW  Long_AC+2
6ae0 d0 a0             BNE  _digit

6ae2 38       _error   SEC
6ae3 80 01             BRA  _return
6ae5 18       _exit    CLC
6ae6 fb       _return  PLZ
6ae7 7a                PLY
6ae8 fa                PLX
6ae9 a5 6e             LDA  Dig_Cnt           ; digits read
6aeb 60                RTS
6aec          EndMod [Read_Number] Size = 152 [$98]

              **************
              Module Hex_LPC
              **************

6aec a6 64             LDX  Long_PC+3
6aee f0 15             BEQ  _laba
6af0 a9 9e             LDA  #YELLOW
6af2 20 d2 ff          JSR  CHROUT
6af5 8a                TXA
6af6 20 2b 6b          JSR  Print_Hex
6af9 a5 63             LDA  Long_PC+2
6afb 20 2b 6b          JSR  Print_Hex
6afe a9 05             LDA  #WHITE
6b00 20 d2 ff          JSR  CHROUT
6b03 80 07             BRA  _labb
6b05 a5 63    _laba    LDA  Long_PC+2
6b07 f0 03             BEQ  _labb
6b09 20 2b 6b          JSR  Print_Hex
6b0c a6 62    _labb    LDX  Long_PC+1
6b0e a5 61             LDA  Long_PC
6b10          EndMod [Hex_LPC] Size = 36 [$24]

              *******************
              Module Print_XA_Hex
              *******************

6b10 48                PHA
6b11 8a                TXA
6b12 20 2b 6b          JSR  Print_Hex
6b15 68                PLA
6b16          EndMod [Print_XA_Hex] Size = 6 [$6]

              **********************
              Module Print_Hex_Blank
              **********************

6b16 20 2b 6b          JSR  Print_Hex
6b19          EndMod [Print_Hex_Blank] Size = 3 [$3]

              ******************
              Module Print_Blank
              ******************

6b19 a9 20             LDA  #' '
6b1b 4c d2 ff          JMP  CHROUT
6b1e          EndMod [Print_Blank] Size = 5 [$5]

              ***************
              Module Print_CR
              ***************

6b1e a9 0d             LDA  #13
6b20 4c d2 ff          JMP  CHROUT
6b23          EndMod [Print_CR] Size = 5 [$5]

              ***************
              Module CR_Erase
              ***************

6b23 20 7d ff          JSR  PRIMM
6b26 0d 1b 51          .BYTE "\r\eQ",0
6b2a 60                RTS
6b2b          EndMod [CR_Erase] Size = 8 [$8]

              ****************
              Module Print_Hex
              ****************

6b2b da                PHX
6b2c 20 37 6b          JSR  A_To_Hex
6b2f 20 d2 ff          JSR  CHROUT
6b32 8a                TXA
6b33 fa                PLX
6b34 4c d2 ff          JMP  CHROUT
6b37          EndMod [Print_Hex] Size = 12 [$c]

              ***************
              Module A_To_Hex
              ***************

6b37 48                PHA
6b38 20 41 6b          JSR  _nibble
6b3b aa                TAX
6b3c 68                PLA
6b3d 4a                LSR  A
6b3e 4a                LSR  A
6b3f 4a                LSR  A
6b40 4a                LSR  A

6b41 29 0f    _nibble  AND  #15
6b43 c9 0a             CMP  #10
6b45 90 02             BCC  _lab
6b47 69 06             ADC  #6
6b49 69 30    _lab     ADC  #'0'
6b4b 60                RTS
6b4c          EndMod [A_To_Hex] Size = 21 [$15]

              ****************
              Module Get_Glyph
              ****************
6b4c da                PHX
6b4d a9 20             LDA  #' '
6b4f a6 6f    _loop    LDX  Buf_Index
6b51 e6 6f             INC  Buf_Index
6b53 dd 00 02          CMP  Buffer,X
6b56 f0 f7             BEQ  _loop
6b58 fa                PLX                    ; fall through
6b59          EndMod [Get_Glyph] Size = 13 [$d]

              ***************
              Module Got_Char
              ***************

6b59 c6 6f             DEC  Buf_Index
6b5b          EndMod [Got_Char] Size = 2 [$2]

              ***************
              Module Get_Char
              ***************

6b5b da                PHX
6b5c a6 6f             LDX  Buf_Index
6b5e e6 6f             INC  Buf_Index
6b60 bd 00 02          LDA  Buffer,X
6b63 e0 01             CPX  #1
6b65 fa                PLX
6b66 90 08             BCC  _regc
6b68 c9 3b             CMP  #';'            ; register
6b6a f0 0a             BEQ  _return
6b6c c9 3f             CMP  #'?'            ; help
6b6e f0 06             BEQ  _return
6b70 c9 00    _regc    CMP  #0
6b72 f0 02             BEQ  _return
6b74 c9 3a             CMP  #':'
6b76 60       _return  RTS
6b77          EndMod [Get_Char] Size = 28 [$1c]


              **************
              Module Dec_LCT
              **************

6b77 a5 5d             LDA  Long_CT
6b79 05 5e             ORA  Long_CT+1
6b7b d0 02             BNE  _skip
6b7d c3 5f             DEW  Long_CT+2
6b7f c3 5d    _skip    DEW  Long_CT
6b81 a5 60             LDA  Long_CT+3         ; set N flag
6b83 60                RTS
6b84          EndMod [Dec_LCT] Size = 13 [$d]

              **************
              Module Add_LPC
              **************

6b84 18                CLC
6b85 65 61             ADC  Long_PC
6b87 85 61             STA  Long_PC
6b89 90 06             BCC  _return

              ************
6b8b          Inc_LPC_Page
              ************

6b8b e6 62             INC  Long_PC+1
6b8d d0 02             BNE  _return
6b8f e3 63             INW  Long_PC+2
6b91 60       _return  RTS

              ******************
              Module Param_Range
              ******************

              ; read two (address) parameters

              ; Long_CT = difference (2nd. minus 1st.)
              ; Long_PC = 1st. parameter
              ; Long_DA = 2nd. parameter

              ; carry on exit flags error

6b92 20 37 6a          JSR  Get_LAC           ; get 1st. parameter
6b95 b0 12             BCS  _error
6b97 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = 1st. address
6b9a 20 37 6a          JSR  Get_LAC
6b9d b0 0a             BCS  _error
6b9f 20 77 61          JSR  LAC_To_LDA        ; Long_DA = 2nd. address
6ba2 20 92 61          JSR  LAC_Minus_LPC     ; Long_CT = range
6ba5 90 02             BCC  _error
6ba7 18                CLC
6ba8 60                RTS
6ba9 38       _error   SEC
6baa 60                RTS
6bab          EndMod [Param_Range] Size = 25 [$19]

              ****************
              Module Converter
              ****************

6bab a2 00             LDX  #0
6bad 86 6f             STX  Buf_Index
6baf 20 37 6a          JSR  Get_LAC
6bb2 b3 1f f5          LBCS Mon_Error
6bb5 a2 00             LDX  #0
6bb7 da       _loop    PHX
6bb8 20 23 6b          JSR  CR_Erase
6bbb bd 18 61          LDA  Cons_Prefix,X
6bbe 20 d2 ff          JSR  CHROUT
6bc1 8a                TXA
6bc2 0a                ASL  A
6bc3 aa                TAX
6bc4 23 d0 6b          JSR  (Conv_Tab,X)
6bc7 fa                PLX
6bc8 e8                INX
6bc9 e0 04             CPX  #4
6bcb 90 ea             BCC  _loop
6bcd 4c a5 60          JMP  Main

6bd0 0d 6c    Conv_Tab .WORD Print_Hexval
6bd2 16 6c             .WORD Print_Decimal
6bd4 de 6b             .WORD Print_Octal
6bd6 d8 6b             .WORD Print_Dual
6bd8          EndMod [Converter] Size = 45 [$2d]

              *****************
              Module Print_Dual
              *****************

6bd8 a2 18             LDX  #24               ; digits
6bda a0 01             LDY  #1                ; bits per digit
6bdc 80 04             BRA  _entry

              ***********
6bde          Print_Octal
              ***********

6bde a2 08             LDX  #8                ; digits
6be0 a0 03             LDY  #3                ; bits per digit

6be2 20 6b 61 _entry   JSR  LAC_To_LCT
6be5 a3 00             LDZ  #0
6be7 64 61             STZ  Long_PC
6be9 a3 30             LDZ  #'0'
6beb 5a                PHY                    ; save start value
6bec 7a       _loopa   PLY                    ; reinitialise
6bed 5a                PHY
6bee a9 00             LDA  #0
6bf0 06 5d    _loopb   ASL  Long_CT
6bf2 eb 5e 00          ROW  Long_CT+1
6bf5 2a                ROL  A
6bf6 88                DEY
6bf7 d0 f7             BNE  _loopb
6bf9 e0 01             CPX  #1                ; print last character
6bfb f0 04             BEQ  _skip
6bfd 05 61             ORA  Long_PC
6bff f0 07             BEQ  _next
6c01 09 30    _skip    ORA  #'0'
6c03 64 61             STZ  Long_PC
6c05 20 d2 ff          JSR  CHROUT
6c08 ca       _next    DEX
6c09 d0 e1             BNE  _loopa
6c0b 7a                PLY                    ; cleanup stack
6c0c 60                RTS
6c0d          EndMod [Print_Dual] Size = 53 [$35]

              *******************
              Module Print_Hexval
              *******************

6c0d 20 5f 61         JSR  LAC_To_LPC
6c10 a9 00            LDA  #0
6c12 85 64            STA  Long_PC+3
6c14 80 32            BRA  Print_BCD
6c16          EndMod [Print_Hexval] Size = 9 [$9]

              ********************
              Module Print_Decimal
              ********************

              ; max $ffffff = 16777215 (8 digits)

6c16 20 6b 61          JSR  LAC_To_LCT
6c19 a2 03             LDX  #3                ; 4 BCD bytes = 8 digits
6c1b a9 00             LDA  #0
6c1d 95 61    _clear   STA  Long_PC,X
6c1f ca                DEX
6c20 10 fb             BPL  _clear

6c22 a2 20             LDX  #32               ; source bits
6c24 f8                SED
6c25 06 5d    _loop    ASL  Long_CT
6c27 26 5e             ROL  Long_CT+1
6c29 eb 5f 00          ROW  Long_CT+2
6c2c a5 61             LDA  Long_PC
6c2e 65 61             ADC  Long_PC
6c30 85 61             STA  Long_PC
6c32 a5 62             LDA  Long_PC+1
6c34 65 62             ADC  Long_PC+1
6c36 85 62             STA  Long_PC+1
6c38 a5 63             LDA  Long_PC+2
6c3a 65 63             ADC  Long_PC+2
6c3c 85 63             STA  Long_PC+2
6c3e a5 64             LDA  Long_PC+3
6c40 65 64             ADC  Long_PC+3
6c42 85 64             STA  Long_PC+3
6c44 ca                DEX
6c45 d0 de             BNE  _loop
6c47 d8                CLD
6c48          EndMod [Print_Decimal] Size = 50 [$32]

              ****************
              Module Print_BCD
              ****************

6c48 a9 00             LDA  #0
6c4a 85 5d             STA  Long_CT
6c4c a3 30             LDZ  #'0'
6c4e a0 08             LDY  #8                ; max. digits
6c50 a2 03    _loopa   LDX  #3                ; 4 bytes
6c52 a9 00             LDA  #0
6c54 06 61    _loopb   ASL  Long_PC
6c56 26 62             ROL  Long_PC+1
6c58 eb 63 00          ROW  Long_PC+2
6c5b 2a                ROL  A
6c5c ca                DEX
6c5d 10 f5             BPL  _loopb

6c5f c0 01             CPY  #1                ; print last character
6c61 f0 04             BEQ  _skip
6c63 05 5d             ORA  Long_CT
6c65 f0 0d             BEQ  _next
6c67 09 30    _skip    ORA  #'0'
6c69 64 5d             STZ  Long_CT
6c6b c9 3a             CMP  #$3a
6c6d 90 02             BCC  _print
6c6f 69 06             ADC  #6                ; + carry
6c71 20 d2 ff _print   JSR  CHROUT
6c74 88       _next    DEY
6c75 d0 d9             BNE  _loopa
6c77 60                RTS
6c78          EndMod [Print_BCD] Size = 48 [$30]


              ***************
              Module Mon_Disk
              ***************

6c78 c6 6f             DEC  Buf_Index
6c7a a6 6f             LDX  Buf_Index
6c7c bd 00 02          LDA  Buffer,X
6c7f f0 68             BEQ  Print_Disk_Status
6c81 85 5d             STA  Long_CT           ; dir marker
6c83 a0 ff             LDY  #$ff              ; SA = 15
6c85 c9 24             CMP  #'$'
6c87 d0 02             BNE  _lab
6c89 a0 f0             LDY  #$f0              ; SA =  0
6c8b a5 ba    _lab     LDA  FA
6c8d 20 b1 ff          JSR  LISTEN
6c90 98                TYA                    ; SA
6c91 20 93 ff          JSR  SECOND
6c94 bd 00 02 _loop    LDA  Buffer,X
6c97 f0 06             BEQ  _close
6c99 20 a8 ff          JSR  CIOUT
6c9c e8                INX
6c9d 80 f5             BRA  _loop
6c9f 20 ae ff _close   JSR  UNLSN
6ca2 a5 5d             LDA  Long_CT
6ca4 c9 24             CMP  #'$'
6ca6 d0 41             BNE  Print_Disk_Status
6ca8 4c 3a 6d          JMP  Directory

6cab          EndMod [Mon_Disk] Size = 51 [$33]

              **********************
              Module Get_Disk_Status
              **********************

6cab a5 ba             LDA  FA
6cad 20 b4 ff          JSR  TALK
6cb0 a9 6f             LDA  #$6f
6cb2 20 96 ff          JSR  TKSA
6cb5 20 a5 ff          JSR  ACPTR             ; 1st. digit
6cb8 8d 34 04          STA  Disk_Msg
6cbb 0a                ASL  A
6cbc 0a                ASL  A
6cbd 0a                ASL  A
6cbe 0a                ASL  A
6cbf 8d 0b 04          STA  Disk_Status       ; BCD
6cc2 20 a5 ff          JSR  ACPTR             ; 2nd. digit
6cc5 8d 35 04          STA  Disk_Msg+1
6cc8 29 0f             AND  #15
6cca 0d 0b 04          ORA  Disk_Status
6ccd 8d 0b 04          STA  Disk_Status       ; complete BCD number

6cd0 a0 01             LDY  #1
6cd2 c8       _loop    INY
6cd3 20 a5 ff          JSR  ACPTR
6cd6 99 34 04          STA  Disk_Msg,Y
6cd9 c9 20             CMP  #' '
6cdb b0 f5             BCS  _loop
6cdd a9 00             LDA  #0
6cdf 99 34 04          STA  Disk_Msg,Y
6ce2 20 ab ff          JSR  UNTALK
6ce5 ad 0b 04          LDA  Disk_Status
6ce8 60                RTS
6ce9          EndMod [Get_Disk_Status] Size = 62 [$3e]

              ************************
              Module Print_Disk_Status
              ************************

6ce9 20 ab 6c          JSR  Get_Disk_Status

              **************
6cec          Print_Disk_Msg
              **************

6cec 20 1e 6b          JSR  Print_CR
6cef a0 00             LDY  #0
6cf1 b9 34 04 _loop    LDA  Disk_Msg,Y
6cf4 f0 06             BEQ  _exit
6cf6 20 d2 ff          JSR  CHROUT
6cf9 c8                INY
6cfa 80 f5             BRA  _loop
6cfc 4c 1e 6b _exit    JMP  Print_CR
6cff          EndMod [Print_Disk_Status] Size = 22 [$16]

              ; @[u] : print disk status for unit u
              ; @[u],$[=pattern] : print directory
              ; @[u],command : send disk command and read status
              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)
              ; @[u],U2 mem track startsec [endsec] : write disk sector(s)

              **************
              Module Mon_DOS
              **************

6cff a2 08             LDX  #8                ; default device
6d01 20 4c 6b          JSR  Get_Glyph
6d04 c9 30             CMP  #'0'
6d06 90 17             BCC  _unit
6d08 c9 3a             CMP  #':'
6d0a b0 13             BCS  _unit
6d0c c6 6f             DEC  Buf_Index
6d0e 20 54 6a          JSR  Read_Number
6d11 b0 0c             BCS  _unit
6d13 a6 59             LDX  Long_AC           ; unit
6d15 e0 04             CPX  #4
6d17 93 ba f3          LBCC Mon_Error
6d1a e0 1f             CPX  #31
6d1c b3 b5 f3          LBCS Mon_Error
6d1f 86 ba    _unit    STX  FA
6d21 c6 6f             DEC  Buf_Index
6d23 20 5b 6b _next    JSR  Get_Char
6d26 f0 0c             BEQ  _status           ; only @u
6d28 c9 20             CMP  #' '
6d2a f0 f7             BEQ  _next
6d2c c9 2c             CMP  #','
6d2e f0 f3             BEQ  _next
6d30 c9 55             CMP  #'U'              ; sector read/write
6d32 f0 4e             BEQ  DOS_U
6d34 20 78 6c _status  JSR  Mon_Disk
6d37 4c a5 60          JMP  Main
6d3a          EndMod [Mon_DOS] Size = 59 [$3b]

              ****************
              Module Directory
              ****************

6d3a a5 ba             LDA  FA
6d3c 20 b4 ff          JSR  TALK
6d3f a9 60             LDA  #$60
6d41 85 b9             STA  SA
6d43 20 96 ff          JSR  TKSA
6d46 a9 00             LDA  #0
6d48 85 90             STA  STATUS

6d4a a3 06             LDZ  #6                ; load address, pseudo link, pseudo number
6d4c aa       _loopb   TAX                    ; X = previous byte
6d4d 20 a5 ff          JSR  ACPTR             ; A = current  byte
6d50 a4 90             LDY  STATUS
6d52 d0 2b             BNE  _exit
6d54 3b                DEZ
6d55 d0 f5             BNE  _loopb            ; X/A = last read word

6d57 86 59             STX  Long_AC
6d59 85 5a             STA  Long_AC+1
6d5b 64 5b             STZ  Long_AC+2
6d5d 64 5c             STZ  Long_AC+3
6d5f 20 16 6c          JSR  Print_Decimal     ; file size
6d62 20 19 6b          JSR  Print_Blank

6d65 20 a5 ff _loopc   JSR  ACPTR             ; print file entry
6d68 f0 09             BEQ  _cr
6d6a a4 90             LDY  STATUS
6d6c d0 11             BNE  _exit
6d6e 20 d2 ff          JSR  CHROUT
6d71 90 f2             BCC  _loopc

6d73 20 1e 6b _cr      JSR  Print_CR
6d76 20 e1 ff          JSR  STOP
6d79 f0 04             BEQ  _exit
6d7b a3 04             LDZ  #4
6d7d 80 cd             BRA  _loopb            ; next file
6d7f 4c ab ff _exit    JMP  UNTALK
6d82          EndMod [Directory] Size = 72 [$48]

              ************
              Module DOS_U
              ************

6d82 20 5b 6b          JSR  Get_Char
6d85 c9 31             CMP  #'1'            ; U1: read
6d87 93 4a f3          LBCC Mon_Error
6d8a c9 33             CMP  #'3'            ; U2: write
6d8c b3 45 f3          LBCS Mon_Error
6d8f 8d 0d 04          STA  Mon_Data+1      ; U type
6d92 e6 6f             INC  Buf_Index
6d94 20 37 6a          JSR  Get_LAC
6d97 b3 3a f3          LBCS Mon_Error
6d9a 20 5f 61          JSR  LAC_To_LPC      ; Long_PC = memory address

6d9d 20 37 6a          JSR  Get_LAC
6da0 b3 31 f3          LBCS Mon_Error
6da3 a5 59             LDA  Long_AC
6da5 8d 09 04          STA  Disk_Track

6da8 20 37 6a          JSR  Get_LAC
6dab b3 26 f3          LBCS Mon_Error
6dae a5 59             LDA  Long_AC
6db0 8d 0a 04          STA  Disk_Sector

6db3 20 37 6a          JSR  Get_LAC
6db6 20 6b 61          JSR  LAC_To_LCT        ; Long_CT = sector count
6db9 c3 5d             DEW  Long_CT           ; Long_CT = -1 for single

6dbb 20 b9 6e          JSR  Open_Disk_Buffer

6dbe ad 0d 04 _loop    LDA  Mon_Data+1
6dc1 4a                LSR  A
6dc2 f0 0a             BEQ  _write
6dc4 20 e9 6d          JSR  Find_Next_Sector
6dc7 d0 17             BNE  _error
6dc9 20 43 6e          JSR  Read_Sector
6dcc 80 08             BRA  _next

6dce 20 5d 6e _write   JSR  Write_Sector
6dd1 20 e9 6d          JSR  Find_Next_Sector
6dd4 d0 0a             BNE  _error

6dd6 20 8b 6b _next    JSR  Inc_LPC_Page
6dd9 ee 0a 04          INC  Disk_Sector
6ddc c3 5d             DEW  Long_CT
6dde 10 de             BPL  _loop

6de0 20 ec 6c _error   JSR  Print_Disk_Msg
6de3 20 d5 6e          JSR  Close_Disk_Buffer
6de6 4c a5 60          JMP  Main
6de9          EndMod [DOS_U] Size = 103 [$67]

              ***********************
              Module Find_Next_Sector
              ***********************

6de9 20 97 6e          JSR  Build_U_String
6dec 20 32 6e          JSR  Send_Disk_Command
6def 20 ab 6c          JSR  Get_Disk_Status
6df2 f0 1d             BEQ  _return           ; OK
6df4 c9 66             CMP  #$66              ; illegal track or sector
6df6 d0 13             BNE  _error            ; error
6df8 a9 00             LDA  #0
6dfa 8d 0a 04          STA  Disk_Sector
6dfd ee 09 04          INC  Disk_Track        ; try next track
6e00 20 97 6e          JSR  Build_U_String
6e03 20 32 6e          JSR  Send_Disk_Command
6e06 20 ab 6c          JSR  Get_Disk_Status
6e09 f0 06             BEQ  _return
6e0b 20 ec 6c _error   JSR  Print_Disk_Msg
6e0e ad 0b 04          LDA  Disk_Status
6e11 60       _return  RTS
6e12          EndMod [Find_Next_Sector] Size = 41 [$29]

              ***************************
              Module Open_Command_Channel
              ***************************

6e12 a5 ba             LDA  FA
6e14 20 b1 ff          JSR  LISTEN
6e17 a9 ff             LDA  #$ff
6e19 20 93 ff          JSR  SECOND
6e1c a0 00             LDY  #0
6e1e 84 90             STY  STATUS
6e20 60                RTS
6e21          EndMod [Open_Command_Channel] Size = 15 [$f]

              ***************
              Module Reset_BP
              ***************

6e21 20 12 6e          JSR  Open_Command_Channel
6e24 b9 de 71 _loop    LDA  BP_ZERO,Y
6e27 f0 06             BEQ  _end
6e29 20 a8 ff          JSR  CIOUT
6e2c c8                INY
6e2d 80 f5             BRA  _loop
6e2f 4c ae ff _end     JMP  UNLSN
6e32          EndMod [Reset_BP] Size = 17 [$11]

              ************************
              Module Send_Disk_Command
              ************************

6e32 20 12 6e          JSR  Open_Command_Channel
6e35 b9 0c 04 _loop    LDA  Mon_Data,Y
6e38 f0 06             BEQ  _end
6e3a 20 a8 ff          JSR  CIOUT
6e3d c8                INY
6e3e 80 f5             BRA  _loop
6e40 4c ae ff _end     JMP  UNLSN
6e43          EndMod [Send_Disk_Command] Size = 17 [$11]

              ******************
              Module Read_Sector
              ******************

6e43 a5 ba             LDA  FA
6e45 20 b4 ff          JSR  TALK
6e48 a9 69             LDA  #$69              ; SA = 9
6e4a 20 96 ff          JSR  TKSA
6e4d a3 00             LDZ  #0
6e4f 64 90             STZ  STATUS
6e51 20 a5 ff _loop    JSR  ACPTR
6e54 ea 92 61          STA  [Long_PC],Z
6e57 1b                INZ
6e58 d0 f7             BNE  _loop
6e5a 4c ab ff          JMP  UNTALK
6e5d          EndMod [Read_Sector] Size = 26 [$1a]

              ******************
              Module Write_Sector
              ******************

6e5d 20 21 6e          JSR  Reset_BP          ; reset disk buffer pointer
6e60 a5 ba             LDA  FA
6e62 20 b1 ff          JSR  LISTEN
6e65 a9 69             LDA  #$69              ; SA = 9
6e67 20 96 ff          JSR  TKSA
6e6a a3 00             LDZ  #0
6e6c 64 90             STZ  STATUS
6e6e ea b2 61 _loop    LDA  [Long_PC],Z
6e71 20 a8 ff          JSR  CIOUT
6e74 1b                INZ
6e75 d0 f7             BNE  _loop
6e77 20 ae ff          JSR  UNLSN
6e7a 60                RTS
6e7b          EndMod [Write_Sector] Size = 30 [$1e]

              *************
              Module Set_TS
              *************

              ; Input  A = track or sector
              ;        X = string index

6e7b c9 64    _100      CMP  #100
6e7d 90 07              BCC  _10
6e7f fe 0c 04           INC  Mon_Data,X
6e82 e9 64              SBC  #100
6e84 80 f5              BRA  _100
6e86 c9 0a    _10       CMP  #10
6e88 90 07              BCC  _1
6e8a fe 0d 04           INC  Mon_Data+1,X
6e8d e9 0a              SBC  #10
6e8f 80 f5              BRA  _10
6e91 09 30    _1        ORA  #'0'
6e93 9d 0e 04           STA  Mon_Data+2,X
6e96 60                 RTS
6e97          EndMod [Set_TS] Size = 28 [$1c]

              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)

              ; U1:CHANNEL DRIVE TRACK SECTOR

              *********************
              Module Build_U_String
              *********************

6e97 a2 0e             LDX  #14
6e99 bd cf 71 _loop    LDA  U1,X
6e9c 9d 0c 04          STA  Mon_Data,X
6e9f ca                DEX
6ea0 e0 02             CPX  #2
6ea2 b0 f5             BCS  _loop
6ea4 a9 55             LDA  #'U'
6ea6 8d 0c 04          STA  Mon_Data
6ea9 ad 09 04          LDA  Disk_Track
6eac a2 07             LDX  #7
6eae 20 7b 6e          JSR  Set_TS
6eb1 ad 0a 04          LDA  Disk_Sector
6eb4 a2 0b             LDX  #11
6eb6 4c 7b 6e          JMP  Set_TS
6eb9          EndMod [Build_U_String] Size = 34 [$22]

              ***********************
              Module Open_Disk_Buffer
              ***********************

6eb9 a9 00             LDA  #0
6ebb 85 90             STA  STATUS
6ebd a5 ba             LDA  FA
6ebf 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
6ec2 a9 f9             LDA  #$f9            ; sa = 9
6ec4 20 93 ff          JSR  SECOND
6ec7 a9 23             LDA  #'#'            ; open buffer
6ec9 20 a8 ff          JSR  CIOUT
6ecc 20 ae ff          JSR  UNLSN
6ecf a5 90             LDA  STATUS
6ed1 d3 16 fe          LBNE Print_Disk_Status
6ed4 60                RTS
6ed5          EndMod [Open_Disk_Buffer] Size = 28 [$1c]

              ************************
              Module Close_Disk_Buffer
              ************************

6ed5 a9 00             LDA  #0
6ed7 85 90             STA  STATUS
6ed9 a5 ba             LDA  FA
6edb 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
6ede a9 e9             LDA  #$e9            ; sa = 9
6ee0 20 93 ff          JSR  SECOND
6ee3 20 ae ff          JSR  UNLSN
6ee6 a5 90             LDA  STATUS
6ee8 d3 ff fd          LBNE Print_Disk_Status
6eeb 60                RTS
6eec          EndMod [Close_Disk_Buffer] Size = 23 [$17]


              ; The 3 letter mnemonics are encoded as three 5-bit values
              ; and stored in a left byte MNE_L and a right byte MNE_R
              ; The 5 bit value is computed by subtracting $3f from the
              ; ASCII value, so '?'-> 0, '@'->1, 'A'->2, 'B'->3,'Z'->27
              ; For example "ADC" is encoded as 2, 5, 4
              ; ----------------
              ; 7654321076543210
              ; 00010
              ;      00101
              ;           00100
              ;                0
              ;
              ; The operator >" stores the left (high) byte of the packed value
              ; The operator <" stores the right (low) byte of the packed value

              *****
6eec          MNE_L
              *****

6eec 11                .BYTE >"ADC"
6eed 13                .BYTE >"AND"
6eee 15                .BYTE >"ASL"
6eef 15                .BYTE >"ASR"
6ef0 15                .BYTE >"ASW"
6ef1 18                .BYTE >"BBR"
6ef2 18                .BYTE >"BBS"
6ef3 19                .BYTE >"BCC"
6ef4 19                .BYTE >"BCS"
6ef5 19                .BYTE >"BEQ"
6ef6 1a                .BYTE >"BIT"
6ef7 1b                .BYTE >"BMI"
6ef8 1b                .BYTE >"BNE"
6ef9 1c                .BYTE >"BPL"
6efa 1c                .BYTE >"BRA"
6efb 1c                .BYTE >"BRK"
6efc 1d                .BYTE >"BSR"
6efd 1d                .BYTE >"BVC"
6efe 1d                .BYTE >"BVS"
6eff 23                .BYTE >"CLC"
6f00 23                .BYTE >"CLD"
6f01 23                .BYTE >"CLE"
6f02 23                .BYTE >"CLI"
6f03 23                .BYTE >"CLV"
6f04 23                .BYTE >"CMP"
6f05 24                .BYTE >"CPX"
6f06 24                .BYTE >"CPY"
6f07 24                .BYTE >"CPZ"
6f08 29                .BYTE >"DEC"
6f09 29                .BYTE >"DEW"
6f0a 29                .BYTE >"DEX"
6f0b 29                .BYTE >"DEY"
6f0c 29                .BYTE >"DEZ"
6f0d 34                .BYTE >"EOR"
6f0e 53                .BYTE >"INC"
6f0f 53                .BYTE >"INW"
6f10 53                .BYTE >"INX"
6f11 53                .BYTE >"INY"
6f12 53                .BYTE >"INZ"
6f13 5b                .BYTE >"JMP"
6f14 5d                .BYTE >"JSR"
6f15 69                .BYTE >"LDA"
6f16 69                .BYTE >"LDX"
6f17 69                .BYTE >"LDY"
6f18 69                .BYTE >"LDZ"
6f19 6d                .BYTE >"LSR"
6f1a 70                .BYTE >"MAP"
6f1b 79                .BYTE >"NEG"
6f1c 7c                .BYTE >"NOP"
6f1d 84                .BYTE >"ORA"
6f1e 8a                .BYTE >"PHA"
6f1f 8a                .BYTE >"PHP"
6f20 8a                .BYTE >"PHW"
6f21 8a                .BYTE >"PHX"
6f22 8a                .BYTE >"PHY"
6f23 8a                .BYTE >"PHZ"
6f24 8b                .BYTE >"PLA"
6f25 8b                .BYTE >"PLP"
6f26 8b                .BYTE >"PLX"
6f27 8b                .BYTE >"PLY"
6f28 8b                .BYTE >"PLZ"
6f29 9b                .BYTE >"RMB"
6f2a 9c                .BYTE >"ROL"
6f2b 9c                .BYTE >"ROR"
6f2c 9c                .BYTE >"ROW"
6f2d 9d                .BYTE >"RTI"
6f2e 9d                .BYTE >"RTS"
6f2f a0                .BYTE >"SBC"
6f30 a1                .BYTE >"SEC"
6f31 a1                .BYTE >"SED"
6f32 a1                .BYTE >"SEE"
6f33 a1                .BYTE >"SEI"
6f34 a3                .BYTE >"SMB"
6f35 a5                .BYTE >"STA"
6f36 a5                .BYTE >"STX"
6f37 a5                .BYTE >"STY"
6f38 a5                .BYTE >"STZ"
6f39 a8                .BYTE >"TAB"
6f3a a8                .BYTE >"TAX"
6f3b a8                .BYTE >"TAY"
6f3c a8                .BYTE >"TAZ"
6f3d a8                .BYTE >"TBA"
6f3e ac                .BYTE >"TRB"
6f3f ad                .BYTE >"TSB"
6f40 ad                .BYTE >"TSX"
6f41 ad                .BYTE >"TSY"
6f42 ae                .BYTE >"TXA"
6f43 ae                .BYTE >"TXS"
6f44 ae                .BYTE >"TYA"
6f45 ae                .BYTE >"TYS"
6f46 ae                .BYTE >"TZA"

              *****
6f47          MNE_R
              *****

6f47 48                .BYTE <"ADC" ; 00
6f48 ca                .BYTE <"AND" ; 01
6f49 1a                .BYTE <"ASL" ; 02
6f4a 26                .BYTE <"ASR" ; 03
6f4b 30                .BYTE <"ASW" ; 04
6f4c e6                .BYTE <"BBR" ; 05
6f4d e8                .BYTE <"BBS" ; 06
6f4e 08                .BYTE <"BCC" ; 07
6f4f 28                .BYTE <"BCS" ; 08
6f50 a4                .BYTE <"BEQ" ; 09
6f51 aa                .BYTE <"BIT" ; 0a
6f52 94                .BYTE <"BMI" ; 0b
6f53 cc                .BYTE <"BNE" ; 0c
6f54 5a                .BYTE <"BPL" ; 0d
6f55 c4                .BYTE <"BRA" ; 0e
6f56 d8                .BYTE <"BRK" ; 0f
6f57 26                .BYTE <"BSR" ; 10
6f58 c8                .BYTE <"BVC" ; 11
6f59 e8                .BYTE <"BVS" ; 12
6f5a 48                .BYTE <"CLC" ; 13
6f5b 4a                .BYTE <"CLD" ; 14
6f5c 4c                .BYTE <"CLE" ; 15
6f5d 54                .BYTE <"CLI" ; 16
6f5e 6e                .BYTE <"CLV" ; 17
6f5f a2                .BYTE <"CMP" ; 18
6f60 72                .BYTE <"CPX" ; 19
6f61 74                .BYTE <"CPY" ; 1a
6f62 76                .BYTE <"CPZ" ; 1b
6f63 88                .BYTE <"DEC" ; 1c
6f64 b0                .BYTE <"DEW" ; 1d
6f65 b2                .BYTE <"DEX" ; 1e
6f66 b4                .BYTE <"DEY" ; 1f
6f67 b6                .BYTE <"DEZ"
6f68 26                .BYTE <"EOR"
6f69 c8                .BYTE <"INC"
6f6a f0                .BYTE <"INW"
6f6b f2                .BYTE <"INX"
6f6c f4                .BYTE <"INY"
6f6d f6                .BYTE <"INZ"
6f6e a2                .BYTE <"JMP"
6f6f 26                .BYTE <"JSR"
6f70 44                .BYTE <"LDA"
6f71 72                .BYTE <"LDX"
6f72 74                .BYTE <"LDY"
6f73 76                .BYTE <"LDZ"
6f74 26                .BYTE <"LSR"
6f75 a2                .BYTE <"MAP"
6f76 90                .BYTE <"NEG"
6f77 22                .BYTE <"NOP"
6f78 c4                .BYTE <"ORA"
6f79 44                .BYTE <"PHA"
6f7a 62                .BYTE <"PHP"
6f7b 70                .BYTE <"PHW"
6f7c 72                .BYTE <"PHX"
6f7d 74                .BYTE <"PHY"
6f7e 76                .BYTE <"PHZ"
6f7f 44                .BYTE <"PLA"
6f80 62                .BYTE <"PLP"
6f81 72                .BYTE <"PLX"
6f82 74                .BYTE <"PLY"
6f83 76                .BYTE <"PLZ"
6f84 86                .BYTE <"RMB"
6f85 1a                .BYTE <"ROL"
6f86 26                .BYTE <"ROR"
6f87 30                .BYTE <"ROW"
6f88 54                .BYTE <"RTI"
6f89 68                .BYTE <"RTS"
6f8a c8                .BYTE <"SBC"
6f8b 88                .BYTE <"SEC"
6f8c 8a                .BYTE <"SED"
6f8d 8c                .BYTE <"SEE"
6f8e 94                .BYTE <"SEI"
6f8f 86                .BYTE <"SMB"
6f90 44                .BYTE <"STA"
6f91 72                .BYTE <"STX"
6f92 74                .BYTE <"STY"
6f93 76                .BYTE <"STZ"
6f94 86                .BYTE <"TAB"
6f95 b2                .BYTE <"TAX"
6f96 b4                .BYTE <"TAY"
6f97 b6                .BYTE <"TAZ"
6f98 c4                .BYTE <"TBA"
6f99 c6                .BYTE <"TRB"
6f9a 06                .BYTE <"TSB"
6f9b 32                .BYTE <"TSX"
6f9c 34                .BYTE <"TSY"
6f9d 44                .BYTE <"TXA"
6f9e 68                .BYTE <"TXS"
6f9f 84                .BYTE <"TYA"
6fa0 a8                .BYTE <"TYS"
6fa1 c4                .BYTE <"TZA"

              *********
6fa2          MNE_Index
              *********

              ; an index for all 256 opcodes, describing
              ; where to find the 3-letter mnemonic

6fa2 0f 31 15          .BYTE $0f,$31,$15,$46,$53,$31,$02,$3d
6faa 33 31 02          .BYTE $33,$31,$02,$55,$53,$31,$02,$05
6fb2 0d 31 31          .BYTE $0d,$31,$31,$0d,$52,$31,$02,$3d
6fba 13 31 22          .BYTE $13,$31,$22,$26,$52,$31,$02,$05
6fc2 28 01 28          .BYTE $28,$01,$28,$28,$0a,$01,$3e,$3d
6fca 39 01 3e          .BYTE $39,$01,$3e,$59,$0a,$01,$3e,$05
6fd2 0b 01 01          .BYTE $0b,$01,$01,$0b,$0a,$01,$3e,$3d
6fda 44 01 1c          .BYTE $44,$01,$1c,$20,$0a,$01,$3e,$05
6fe2 41 21 2f          .BYTE $41,$21,$2f,$03,$03,$21,$2d,$3d
6fea 32 21 2d          .BYTE $32,$21,$2d,$50,$27,$21,$2d,$05
6ff2 11 21 21          .BYTE $11,$21,$21,$11,$03,$21,$2d,$3d
6ffa 16 21 36          .BYTE $16,$21,$36,$4d,$2e,$21,$2d,$05
7002 42 00 42          .BYTE $42,$00,$42,$10,$4c,$00,$3f,$3d
700a 38 00 3f          .BYTE $38,$00,$3f,$5a,$27,$00,$3f,$05
7012 12 00 00          .BYTE $12,$00,$00,$12,$4c,$00,$3f,$3d
701a 47 00 3b          .BYTE $47,$00,$3b,$51,$27,$00,$3f,$05
7022 0e 49 49          .BYTE $0e,$49,$49,$0e,$4b,$49,$4a,$48
702a 1f 0a 56          .BYTE $1f,$0a,$56,$4b,$4b,$49,$4a,$06
7032 07 49 49          .BYTE $07,$49,$49,$07,$4b,$49,$4a,$48
703a 58 49 57          .BYTE $58,$49,$57,$4a,$4c,$49,$4c,$06
7042 2b 29 2a          .BYTE $2b,$29,$2a,$2c,$2b,$29,$2a,$48
704a 4f 29 4e          .BYTE $4f,$29,$4e,$2c,$2b,$29,$2a,$06
7052 08 29 29          .BYTE $08,$29,$29,$08,$2b,$29,$2a,$48
705a 17 29 54          .BYTE $17,$29,$54,$2c,$2b,$29,$2a,$06
7062 1a 18 1b          .BYTE $1a,$18,$1b,$1d,$1a,$18,$1c,$48
706a 25 18 1e          .BYTE $25,$18,$1e,$04,$1a,$18,$1c,$06
7072 0c 18 18          .BYTE $0c,$18,$18,$0c,$1b,$18,$1c,$48
707a 14 18 35          .BYTE $14,$18,$35,$37,$1b,$18,$1c,$06
7082 19 43 29          .BYTE $19,$43,$29,$23,$19,$43,$22,$48
708a 24 43 30          .BYTE $24,$43,$30,$40,$19,$43,$22,$06
7092 09 43 43          .BYTE $09,$43,$43,$09,$34,$43,$22,$48
709a 45 43 3a          .BYTE $45,$43,$3a,$3c,$34,$43,$22,$06

              *****
70a2          BRAIN
              *****

              ;              index values for branch mnemonics

              ;              BCC BCS BEQ BMI BNE BPL BRA BSR BVC BVS
70a2 07 08 09          .BYTE $07,$08,$09,$0b,$0c,$0d,$0e,$10,$11,$12

              *******
70ac          LEN_ADM
              *******

              ; a table of instruction length, flags
              ; and address mode for all 256 opcodes

              ; 7-6: operand length %00.. 0: implied
              ;                     %01.. 1: direct page, indirect
              ;                     %10.. 2: absolute, etc.
              ;                     %11.. 3: BBR and BBS

              ;   5: relative       %0110 0000 $60 short branch
              ;                     %1010 0000 $a0 long  branch

              ;   4:

              ; 3-0: index of address mode


70ac 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $00
70b4 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $08
70bc 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $10
70c4 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $18
70cc 80 44 8b          .BYTE $80,$44,$8b,$84,$40,$40,$40,$40 ; $20
70d4 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $28
70dc 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $30
70e4 00 88 00          .BYTE $00,$88,$00,$00,$87,$87,$87,$c0 ; $38
70ec 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $40
70f4 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $48
70fc 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $50
7104 00 88 00          .BYTE $00,$88,$00,$00,$00,$87,$87,$c0 ; $58
710c 00 44 41          .BYTE $00,$44,$41,$a0,$40,$40,$40,$40 ; $60
7114 00 41 00          .BYTE $00,$41,$00,$00,$8b,$80,$80,$c0 ; $68
711c 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $70
7124 00 88 00          .BYTE $00,$88,$00,$00,$84,$87,$87,$c0 ; $78
712c 60 44 4d          .BYTE $60,$44,$4d,$a0,$40,$40,$40,$40 ; $80
7134 00 41 00          .BYTE $00,$41,$00,$87,$80,$80,$80,$c0 ; $88
713c 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $90
7144 00 88 00          .BYTE $00,$88,$00,$88,$80,$87,$87,$c0 ; $98
714c 41 44 41          .BYTE $41,$44,$41,$41,$40,$40,$40,$40 ; $a0
7154 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $a8
715c 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $b0
7164 00 88 00          .BYTE $00,$88,$00,$87,$87,$87,$88,$c0 ; $b8
716c 41 44 41          .BYTE $41,$44,$41,$40,$40,$40,$40,$40 ; $c0
7174 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $c8
717c 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $d0
7184 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $d8
718c 41 44 4d          .BYTE $41,$44,$4d,$40,$40,$40,$40,$40 ; $e0
7194 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $e8
719c 60 45 46          .BYTE $60,$45,$46,$a0,$81,$47,$47,$40 ; $f0
71a4 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $f8

              ******
71ac          ADMODE
              ******

              ; printout flags for 16 address modes
              ;               76543210
              ;               --------
              ;            7  x         #
              ;            6   x        (
              ;            5    x       ,
              ;            4     x      SP
              ;            3      x     )
              ;            2       x    ,
              ;            1/0      xx  01:X  10:Y  11:Z

71ac 00                .BYTE %00000000 ; 0             implicit/direct
71ad 80                .BYTE %10000000 ; 1 #$nn        immediate
71ae 00                .BYTE %00000000 ; 2             ----------
71af 00                .BYTE %00000000 ; 3             ----------
71b0 69                .BYTE %01101001 ; 4 ($nn,X)     indirect X
71b1 4e                .BYTE %01001110 ; 5 ($nn),Y     indirect Y
71b2 4f                .BYTE %01001111 ; 6 ($nn),Z     indirect Z
71b3 05                .BYTE %00000101 ; 7 $nn,X       indexed  X
71b4 06                .BYTE %00000110 ; 8 $nn,Y       indexed  Y
71b5 05                .BYTE %00000101 ; 9 $nn,X       indexed  X
71b6 06                .BYTE %00000110 ; a $nn,Y       ----------
71b7 48                .BYTE %01001000 ; b ($nnnn,X)   JMP & JSR
71b8 69                .BYTE %01101001 ; c ($nn,X)     ----------
71b9 7e                .BYTE %01111110 ; d ($nn,SP),Y  LDA & STA
71ba 00                .BYTE %00000000 ; e
71bb 04                .BYTE %00000100 ; f

              ;              ASL INC ROL DEC LSR ROR NEG ASR
71bc 0a 1a 2a ACCUMODE .BYTE $0a,$1a,$2a,$3a,$4a,$6a,$42,$43

71c4 10 0a 08 Num_Base .BYTE 16,10, 8, 2 ; hex, dec, oct, bin
71c8 04 03 03 Num_Bits .BYTE  4, 3, 3, 1 ; hex, dec, oct, bin

71cc 58 59 5a Index_Char .BYTE "XYZ"

              ;                0123456789abcd
71cf 55 31 3a U1        .BYTE "U1:9 0 000 000",0 ; channel 9, drive, track, sector
71de 42 2d 50 BP_ZERO   .BYTE "B-P 9 0",0        ; set buffer pointer to 0

              ***************
              Module Reg_Text
              ***************
71e6 20 7d ff          JSR  PRIMM
71e9 0d 20 20          .BYTE "\r    PC   SR AC XR YR ZR BP  SP  NVEBDIZC\r; \eQ",0
7218 60                RTS
7219          EndMod [Reg_Text] Size = 51 [$33]

              ***************
              Module Mon_Help
              ***************
7219 20 7d ff    JSR PRIMM

721c 96 41 05    .BYTE LRED,"A",WHITE,"SSEMBLE     - A ADDRESS MNEMONIC OPERAND",CR
7248 96 42 05    .BYTE LRED,"B",WHITE,"ITMAPS      - B [FROM [TO]]",CR
7267 96 43 05    .BYTE LRED,"C",WHITE,"OMPARE      - C FROM TO WITH",CR
7287 96 44 05    .BYTE LRED,"D",WHITE,"ISASSEMBLE  - D [FROM [TO]]",CR
72a6 96 46 05    .BYTE LRED,"F",WHITE,"ILL         - F FROM TO FILLBYTE",CR
72ca 96 47 05    .BYTE LRED,"G",WHITE,"O           - G [ADDRESS]",CR
72e7 96 48 05    .BYTE LRED,"H",WHITE,"UNT         - H FROM TO (STRING OR BYTES)",CR
7314 96 4a 05    .BYTE LRED,"J",WHITE,"SR          - J ADDRESS",CR
732f 96 4c 05    .BYTE LRED,"L",WHITE,"OAD         - L FILENAME [UNIT [ADDRESS]]",CR
735c 96 4d 05    .BYTE LRED,"M",WHITE,"EMORY       - M [FROM [TO]]",CR
737b 96 52 05    .BYTE LRED,"R",WHITE,"EGISTERS    - R",CR
738e 96 53 05    .BYTE LRED,"S",WHITE,"AVE         - S FILENAME UNIT FROM TO",CR
73b7 96 54 05    .BYTE LRED,"T",WHITE,"RANSFER     - T FROM TO TARGET",CR
73d9 96 56 05    .BYTE LRED,"V",WHITE,"ERIFY       - V FILENAME [UNIT [ADDRESS]]",CR
7406 45 96 58    .BYTE "E",LRED,"X",WHITE,"IT         - X",CR
7419 96 2e 05    .BYTE LRED,".",WHITE,"<DOT>       - . ADDRESS MNEMONIC OPERAND",CR
7445 96 3e 05    .BYTE LRED,">",WHITE,"<GREATER>   - > ADDRESS BYTE SEQUENCE",CR
746e 96 3b 05    .BYTE LRED,";",WHITE,"<SEMICOLON> - ; REGISTER CONTENTS",CR
7493 96 40 05    .BYTE LRED,"@",WHITE,"DOS         - @ [DOS COMMAND]",CR
74b4 96 3f 05    .BYTE LRED,"?",WHITE,"HELP        - ?",CR
74c7 00          .BYTE 0
74c8 4c a5 60    JMP Main
74cb          End_Mod

74cb ff ff ff          .FILL $8000-* ($ff) ; 3749 bytes ; 2869 bytes


  445 Symbols
-------------
Bank                           $0002    28D   284    287    343    351
                                       521    523    525    772
PCH                            $0003    29D   272    280    315
PCL                            $0004    30D   278    281    313
SR                             $0005    31D   367
WHITE                          $0005    14D   470    734    742    886
                                       900   1813   2102   3195   3196
                                      3197   3198   3199   3200   3201
                                      3202   3203   3204   3205   3206
                                      3207   3208   3209   3210   3211
                                      3212   3213   3214
AC                             $0006    32D   301
XR                             $0007    33
YR                             $0008    34
ZR                             $0009    35
BP                             $000a    41
SPH                            $000b    42D   325    359
SPL                            $000c    43D   327    361    812    823
                                       827
CR                             $000d    18D   397    451   1503   3195
                                      3196   3197   3198   3199   3200
                                      3201   3202   3203   3204   3205
                                      3206   3207   3208   3209   3210
                                      3211   3212   3213   3214
REV                            $0012    19D   451
CRIGHT                         $001d    20D   428
QUOTE                          $0022    21D  1048   1055
APOSTR                         $0027    22D   985   2008
Long_AC                        $0059    56D   208    210    218    222
                                       520    522    524    535    549
                                       563    578    580    594    610
                                       622    624    632    633    635
                                       636    771    789    930    932
                                       942    944    965    967   1000
                                      1069   1078   1079   1121   1236
                                      1239   1406   1408   1409   1417
                                      1418   1473   1482   1541   1548
                                      1550   1551   1553   1750   1752
                                      1759   1760   1850   1853   1867
                                      1876   1925   1927   1938   1941
                                      1944   1949   1952   2001   2002
                                      2003   2004   2011   2044   2051
                                      2052   2053   2064   2065   2072
                                      2073   2075   2077   2536   2575
                                      2576   2577   2578   2614   2619
Long_CT                        $005d    57D   211    212    214    215
                                       219    223    550    579    596
                                       693    694    697   1401   1407
                                      1415   1416   1621   1633   1636
                                      2232   2233   2235   2236   2237
                                      2337   2338   2380   2381   2382
                                      2405   2419   2422   2441   2456
                                      2624   2642
Long_PC                        $0061    58D   536    595    611    644
                                       646    669    671    746    790
                                       792    836    838    854    856
                                       939    941    962    964   1085
                                      1104   1105   1122   1468   1471
                                      1474   1483   1489   1511   1515
                                      1549   1552   1950   1953   2094
                                      2100   2105   2108   2109   2246
                                      2247   2254   2256   2331   2344
                                      2347   2361   2374   2383   2384
                                      2385   2386   2387   2388   2389
                                      2390   2391   2392   2393   2394
                                      2410   2411   2412   2722   2739
Long_DA                        $0065    59D   564    654    655    657
                                       658    713    716    719    735
                                       743    744    927    929   1008
                                      1016   1138   1174   1175   1184
                                      1188
Adr_Flags                      $0069    63D  1698   1836   1839   1881
                                      1885   1891   1895   1900   1905
                                      1909
Mode_Flags                     $006a    64D  1232   1260   1269   1279
                                      1291   1301   1311   1324   1338
                                      1352   1366   1382   1428   1446
                                      1449   1564   1585   1594   1605
                                      1606
Op_Code                        $006b    65D  1204   1222   1223   1405
                                      1432   1462   1470   1488   1563
                                      1679   1690   1737   1747   1793
                                      1800   1818   1859
Op_Flag                        $006c    66D  1139   1159   1271   1321
                                      1434   1465   1660   1671   1688
                                      1705   1713   1741   1771   1789
                                      1799   1826   1841   1866   1874
                                      1899   1918   1957
Op_Size                        $006d    70D  1463   1464   1475   1494
                                      1495   1630   1631   1635   1704
                                      1706   1720   1833   1854   1873
                                      1929   1935   1958
Dig_Cnt                        $006e    71D  2000   2012   2038   2086
Buf_Index                      $006f    72D   401   1051   1064   1249
                                      1966   1987   2021   2192   2193
                                      2203   2211   2212   2290   2437
                                      2438   2533   2542   2607
STATUS                         $0090    77D  1039   1096   2565   2570
                                      2584   2681   2720   2738   2798
                                      2806   2816   2822
VERCK                          $0093    78D   437   1080   1089   1097
LRED                           $0096    16D   742    884    898   3195
                                      3196   3197   3198   3199   3200
                                      3201   3202   3203   3204   3205
                                      3206   3207   3208   3209   3210
                                      3211   3212   3213   3214
YELLOW                         $009e    15D   451   1735   2096
FNLEN                          $00b7    79D  1037   1058
SA                             $00b9    80D  1034   1084   1107   2562
FA                             $00ba    81D  1032   1070   2446   2467
                                      2541   2559   2676   2715   2733
                                      2799   2817
FNADR                          $00bb    82D  1041   1043   1057
BA                             $00bd    83D  1036   1074
FNBANK                         $00be    84D  1038
NDX                            $00d0    86
MODE_80                        $00d7    87D   691    795    882    896
B_Margin                       $00e4    89
T_Margin                       $00e5    90
L_Margin                       $00e6    91
R_Margin                       $00e7    92
QTSW                           $00f4    94D   852
Buffer                         $0200    96D   393    402   1052   1506
                                      1508   1517   1521   1529   2194
                                      2213   2439   2450
IIRQ                           $0314    98
IBRK                           $0316    99
EXMON                          $032e   100
X_Vector                       $0400   104D   314    316    504
Ix_Mne                         $0402   105D  1194   1390   1573
Op_Mne                         $0403   106D  1156   1162   1169
Op_Ix                          $0406   107D  1140   1242   1245   1288
                                      1322   1336   1350   1364   1380
                                      1391
Op_Len                         $0407   108D  1141   1244   1444   1450
                                      1453   1601
Disk_Unit                      $0408   109D  1031
Disk_Track                     $0409   110D  2615   2662   2785
Disk_Sector                    $040a   111D  2620   2641   2661   2788
Disk_Status                    $040b   112D  2477   2481   2482   2493
                                      2668
Mon_Data                       $040c   114D   991   1001   1013   1040
                                      1042   2606   2628   2703   2756
                                      2761   2765   2779   2784
Disk_Msg                       $0434   115D  2472   2479   2487   2491
                                      2509
header                         $1fff   167
Link                           $2029   179D   171
header_loop                    $205a   218D   221    225
Monitor_Call                   $6000   239
Monitor_Break                  $6003   245
Monitor_Switch                 $6006   251
Mon_Break                      $6009   257D   248
Mon_Break_loop                 $601f   271D   269    274
Mon_Break_nopage               $602b   281D   279
Mon_Break_bank                 $6036   286D   284
Mon_Call                       $603c   292D   242
Mon_Call_loop                  $6043   301D   303
Mon_Call_store                 $6055   313D   310
Mon_Start                      $605f   320D   288
Mon_Register                   $606d   335D   486
Mon_Register_loopa             $6072   343D   347
Mon_Register_loopb             $607d   351D   355
Mon_Register_loopc             $6096   368D   376
Mon_Register_flag              $609e   373D   371
Main                           $60a5   380D   404    431    705    759
                                       776    803    828    937    949
                                       974   1020   1024   1087   1099
                                      1102   1126   1145   1628   1638
                                      2306   2552   2647   3216
Main_A                         $60aa   389D  1534
Main_loop                      $60aa   392D   398
Main_getcomm                   $60c0   403D   406
Mon_Switch                     $60c9   410D   254
Mon_Switch_loop                $60cb   414D   417
Mon_Error                      $60d3   422D   396    689    915    917
                                       957    959    982    989   1045
                                      1049   1062   1082   1093   1098
                                      1116   1118   1134   1192   1215
                                      1217   1227   1234   1237   1323
                                      1326   1330   1337   1344   1351
                                      1356   1365   1372   1379   1381
                                      1384   1396   1400   1402   1429
                                      1445   1447   1624   1982   2292
                                      2538   2540   2603   2605   2609
                                      2613   2618
Mon_Select                     $60e0   434D   415
Print_Commands                 $60ed   447D   262    295
Command_Char                   $6107   454D   414
Cons_Prefix                    $6118   461D  2016   2296
Load_Save_Verify               $611d   467
Jump_Table                     $6123   474D   443
Mon_Exit                       $614d   501D   488
LAC_To_PC                      $6150   507D   767    811    822
LAC_To_PC_error                $615e   526D   519
LAC_To_LPC                     $615f   530D   684    732    785   1073
                                      1135   1617   2273   2359   2610
LAC_To_LPC_loop                $6162   535D   538
LAC_To_LCT                     $616b   544D  1248   2329   2371   2623
LAC_To_LCT_loop                $616e   549D   552
LAC_To_LDA                     $6177   558D  2276
LAC_To_LDA_loop                $617a   563D   566
LAC_Plus_LCT                   $6183   572D   925
LAC_Plus_LCT_loop              $6187   578D   582
LAC_Minus_LPC                  $6192   588D   688   1623   2277
LAC_Minus_LPC_loop             $6196   594D   598
LAC_Compare_LPC                $61a1   604D   920
LAC_Compare_LPC_loop           $61a5   610D   613
Inc_LAC                        $61ae   619D   946    970
Inc_LAC_return                 $61b4   625D   623
Dec_LAC                        $61b5   629D   934
Dec_LAC_skip                   $61bd   636D   634
Inc_LPC                        $61c0   641D   755    945    971   1021
                                      1123
Inc_LPC_return                 $61c6   647D   645
Dec_LDA                        $61c7   651D   933
Dec_LDA_skip                   $61cf   658D   656
Fetch                          $61d2   663D  1012   1661   1668   1678
                                      1684   1689   1716   1852   1924
Fetch_banked                   $61d9   671D   669
Mon_Memory                     $61df   678D   485
Mon_Memory_shift               $61fa   693D   691    696
Mon_Memory_row                 $6205   700D   683    686    704
Mon_Memory_exit                $6210   705D   701
Print_Bits                     $6213   709D   747
Print_Bits_loop                $6218   715D   721
Print_Bits_set                 $621f   718D   716
Mon_Bits                       $6229   727D   478
Mon_Bits_lab                   $6231   733D   731
Mon_Bits_row                   $623a   738D   758
Mon_Bits_col                   $6240   741D   753
Mon_Set_Register               $6266   763D   492
Mon_Set_Register_loop          $626e   769D   775
Mon_Set_Register_exit          $627d   776D   770
Mon_Set_Memory                 $6280   780D   491
Mon_Set_Memory_loop            $628a   787D   797
Mon_Set_Memory_banked          $6295   792D   790
Mon_Set_Memory_next            $629f   797D   795
Mon_Set_Memory_exit            $62a1   799D   784    788
Mon_Go                         $62ae   807D   482
Mon_JSR                        $62ba   818D   484
Dump_4_Bytes                   $62cc   832D   885    887
Dump_4_Bytes_loop              $62cf   836D   843
Dump_4_Bytes_banked            $62d3   838D   836
Dump_4_Chars                   $62df   848D   899    901
Dump_4_Chars_loop              $62e6   854D   866
Dump_4_Chars_banked            $62ea   856D   854
Dump_4_Chars_laba              $62f3   861D   859
Dump_Row                       $62fe   871D   702    802
Dump_Row_loop                  $6312   884D   882    889
Dump_Row_lchr                  $632d   898D   896    903
Mon_Transfer                   $6340   911D   487
Mon_Transfer_lpback            $6356   927D   936
Mon_Transfer_rb                $635a   929D   927
Mon_Transfer_wb                $6360   932D   930
Mon_Transfer_forward           $6370   939D   921    948
Mon_Transfer_rf                $6374   941D   939
Mon_Transfer_wf                $637a   944D   942
Mon_Compare                    $638a   953D   479
Mon_Compare_loop               $639b   962D   973
Mon_Compare_rf                 $639f   964D   962
Mon_Compare_cf                 $63a5   967D   965
Mon_Compare_laba               $63ac   970D   968
Mon_Hunt                       $63ba   978D   483
Mon_Hunt_lpstr                 $63d1   991D   996
Mon_Hunt_bin                   $63e0   999D   986
Mon_Hunt_lpbin                 $63e3  1000D  1006
Mon_Hunt_hunt                  $63f2  1008D   994    997   1004
Mon_Hunt_lpstart               $63f7  1011D  1023
Mon_Hunt_lpins                 $63f9  1012D  1017
Mon_Hunt_next                  $6409  1019D  1014
Load_Save                      $641a  1028D   439
Load_Save_skip                 $6435  1044D  1047
Load_Save_copyfn               $6446  1052D  1061
Load_Save_unit                 $645c  1064D  1056
Load_Save_exit                 $6492  1087D  1096
Load_Save_do                   $6495  1089D  1053   1066   1068   1072
                                      1108
Load_Save_exec                 $64a2  1095D  1091
Load_Save_load                 $64bd  1104D  1076
Mon_Fill                       $64c7  1112D   481
Mon_Fill_loop                  $64d8  1121D  1125
Mon_Assemble                   $64e8  1130D   477    490
Mon_Assemble_start             $64f1  1137D  1148
Mon_Assemble_getin             $64fd  1142D  1165
Mon_Assemble_laba              $6507  1147D  1143
Mon_Assemble_labb              $651d  1162D  1153   1155   1158
Mon_Assemble_lpenc             $6525  1169D  1179
Mon_Assemble_lpbit             $652d  1173D  1177
Mon_Assemble_lpfind            $653c  1185D  1191
Mon_Assemble_nxfind            $6548  1190D  1186
Mon_Assemble_found             $654e  1194D  1189
Mon_Assemble_lpopc             $6554  1200D  1203
Mon_Assemble_exopc             $655c  1204D  1201
Mon_Assemble_labc              $6582  1231D  1211
Mon_Assemble_labd              $6584  1232D  1263   1273   1282   1302
                                      1315   1328   1346   1358   1374
                                      1386
Mon_Assemble_labf              $659a  1242D  1240
Mon_Assemble_labg              $65aa  1249D  1235   1247
Mon_Assemble_lpnop             $65ac  1251D  1254
Mon_Assemble_lbra              $65c2  1267D  1259
Mon_Assemble_indir             $65d0  1277D  1268
Mon_Assemble_comma             $65dc  1286D  1278
Mon_Assemble_comma1            $65f9  1300D  1292   1294   1296
Mon_Assemble_stack             $65ff  1306D  1287
Mon_Assemble_rbra              $6615  1319D  1307
Mon_Assemble_error             $662e  1330D  1261   1270   1280   1289
                                      1299   1310   1313   1321
Mon_Assemble_right             $6631  1334D  1320
Mon_Assemble_right1            $664a  1345D  1340   1342
Mon_Assemble_X                 $664f  1348D  1335
Mon_Assemble_X1                $6664  1357D  1354
Mon_Assemble_Y                 $6669  1362D  1349
Mon_Assemble_Y1                $6682  1373D  1368   1370
Mon_Assemble_Z                 $6687  1378D  1363
Mon_Assemble_adjust            $669e  1390D  1252
Mon_Assemble_BB                $66b6  1401D  1398
Mon_Assemble_one               $66ce  1415D  1394
Mon_Assemble_lpbrain           $66d8  1420D  1423
Mon_Assemble_branch            $66e2  1428D  1421
Mon_Assemble_bran1             $66f6  1437D  1434
Mon_Assemble_match             $66f8  1441D  1392   1424
Mon_Assemble_lpmatch           $66fb  1442D  1452
Mon_Assemble_okmat             $6717  1453D  1443
Mon_Assemble_store             $671b  1462D  1411   1437
Mon_Assemble_storen            $673b  1478D  1465
Mon_Assemble_lpsto             $673f  1482D  1486
Mon_Assemble_store1            $6749  1488D  1480
Mon_Assemble_print             $674e  1491D  1476
Mon_Assemble_auto              $677c  1514D  1512   1526
Branch_Target                  $67a3  1538D  1404   1431   1543
Match_Mode                     $67b6  1558D  1442
Match_Mode_loop                $67ba  1565D  1574
Match_Mode_next                $67bf  1570D  1575
Match_Mode_error               $67cc  1577D  1571
Match_Mode_return              $67cd  1578D  1566
Mode_Index                     $67ce  1582D  1441
Mode_Index_loop                $67d2  1587D  1591
Mode_Index_found               $67de  1594D  1588
Size_To_Mode                   $67e0  1598D  1451
Mon_Disassemble                $67ed  1612D   480
Mon_Disassemble_nopar          $67fa  1620D  1616
range                          $6800  1623D  1619
Mon_Disassemble_loop           $6806  1626D  1622   1637
Dis_Code                       $6825  1642D  1629
Print_Code                     $682b  1650D  1493
Print_Code_nop                 $6848  1677D  1666   1670
Print_Code_normal              $6866  1693D  1682   1687
Print_Code_norm1               $687f  1707D  1705
Print_Code_blpr                $6888  1715D  1713
Print_Code_lphex               $688b  1716D  1722
Print_Code_lpfill              $689a  1726D  1731
Print_Code_long                $68a8  1735D  1719   1727
Print_Code_locate              $68bd  1747D  1740
Print_Code_lpmne               $68ce  1757D  1769
Print_Code_lplet               $68d2  1759D  1763
Print_Code_lastc               $68e5  1771D  1766
Print_Code_Q3                  $68f8  1780D  1773   1777
Print_Code_Q4                  $68ff  1783D  1775   1779
Print_Code_lbra                $6909  1788D  1771
Print_Code_biti                $691d  1800D  1796
Print_Code_mne4                $692d  1811D  1782   1798
Print_Code_mne5                $6930  1812D  1786   1789   1809
Print_Code_lpaccu              $693c  1820D  1823
Print_Code_accu                $694b  1828D  1826
Print_Code_oper                $6951  1833D  1821
Print_Code_laba                $695d  1839D  1836
Print_Code_labb                $6967  1843D  1838   1841
Print_Code_labc                $696a  1844D  1839
Print_Code_lpfop               $6973  1851D  1855
Print_Code_proper              $6997  1873D  1866
Print_Code_lpoper              $699e  1876D  1874   1879
Print_Code_labd                $69bc  1891D  1885
Print_Code_labe                $69c4  1895D  1881   1891
Print_Code_labf                $69cc  1899D  1871   1895
Print_Code_comch               $69d7  1905D  1899
Print_Code_labg                $69ec  1918D  1905   1911
Print_Code_rel                 $6a0b  1933D  1862
Print_Code_rela                $6a0d  1934D  1931
Print_Code_labh                $6a1a  1943D  1939
Print_Code_lpinw               $6a1b  1944D  1946
Print_Code_return              $6a34  1959D  1829   1834   1903   1918
                                      1957
Got_LAC                        $6a35  1963D   999
Get_LAC                        $6a37  1970D   681    685    730    766
                                       769    783    787    810    821
                                       916    958   1003   1067   1071
                                      1075   1117   1133   1615   1618
                                      2271   2274   2291   2608   2612
                                      2617   2622
Get_LAC_error                  $6a4b  1982D  1974
Get_LAC_noval                  $6a4e  1984D  1975
Get_LAC_end                    $6a50  1987D  1977
Get_LAC_ok                     $6a52  1988D  1979   1981
Read_Number                    $6a54  1993D  1233   1973   2534
Read_Number_numeric            $6a75  2015D  2009
Read_Number_prefix             $6a77  2016D  2019
Read_Number_digit              $6a82  2023D  2017   2074   2076   2078
Read_Number_valid              $6a99  2034D  2028
Read_Number_push               $6aaa  2044D  2048
Read_Number_laba               $6ab1  2050D  2041
Read_Number_shift              $6ab4  2051D  2056
Read_Number_pull               $6ac9  2063D  2068
Read_Number_labc               $6ad2  2070D  2059
Read_Number_error              $6ae2  2080D  2036   2054
Read_Number_exit               $6ae5  2082D  2007   2013   2024   2026
                                      2030   2032
Read_Number_return             $6ae6  2083D  2081
Hex_LPC                        $6aec  2091D   739    878    969   1018
                                      1655
Hex_LPC_laba                   $6b05  2105D  2095
Hex_LPC_labb                   $6b0c  2108D  2104   2106
Print_XA_Hex                   $6b10  2113D  1956
Print_Hex_Blank                $6b16  2123D   352    362    839   1717
Print_Blank                    $6b19  2130D  1811   1812   2580
Print_CR                       $6b1e  2138D   383    733    754    875
                                       960   1009   1077   1119   2507
                                      2514   2589
CR_Erase                       $6b23  2146D  1626   2295
Print_Hex                      $6b2b  2155D   344    360   1868   1877
                                      2099   2101   2107   2118   2126
A_To_Hex                       $6b37  2167D  1516   2159
A_To_Hex_nibble                $6b41  2179D  2171
A_To_Hex_lab                   $6b49  2183D  2181
Get_Glyph                      $6b4c  2188D  2006   2528
Get_Glyph_loop                 $6b4f  2192D  2195
Got_Char                       $6b59  2200D  1976
Get_Char                       $6b5b  2207D   403    984    987    993
                                      1044   1065   1142   1213   1225
                                      1251   1308   2010   2023   2543
                                      2601
Get_Char_regc                  $6b70  2221D  2216
Get_Char_return                $6b76  2224D  2218   2220   2222
Dec_LCT                        $6b77  2229D   935    947    972   1022
                                      1124
Dec_LCT_skip                   $6b7f  2236D  2234
Add_LPC                        $6b84  2242D   905   1496   1632   1673
Inc_LPC_Page                   $6b8b  2251D  2640
Add_LPC_return                 $6b91  2257D  2248   2255
Param_Range                    $6b92  2260D   914    956    981   1115
Param_Range_error              $6ba9  2281D  2272   2275   2278
Converter                      $6bab  2286D   494    495    496    497
Converter_loop                 $6bb7  2294D  2305
Conv_Tab                       $6bd0  2308D  2301
Print_Dual                     $6bd8  2315D  2311
Print_Octal                    $6bde  2323D  2310
Print_Dual_entry               $6be2  2329D  2320
Print_Dual_loopa               $6bec  2334D  2350
Print_Dual_loopb               $6bf0  2337D  2341
Print_Dual_skip                $6c01  2346D  2343
Print_Dual_next                $6c08  2349D  2345
Print_Hexval                   $6c0d  2356D  2308
Print_Decimal                  $6c16  2366D  2309   2579
Print_Decimal_clear            $6c1d  2374D  2376
Print_Decimal_loop             $6c25  2380D  2396
Print_BCD                      $6c48  2401D  2362
Print_BCD_loopa                $6c50  2408D  2428
Print_BCD_loopb                $6c54  2410D  2415
Print_BCD_skip                 $6c67  2421D  2418
Print_BCD_print                $6c71  2426D  2424
Print_BCD_next                 $6c74  2427D  2420
Mon_Disk                       $6c78  2434D  2551
Mon_Disk_lab                   $6c8b  2446D  2444
Mon_Disk_loop                  $6c94  2450D  2454
Mon_Disk_close                 $6c9f  2455D  2451
Get_Disk_Status                $6cab  2464D  2501   2656   2665
Get_Disk_Status_loop           $6cd2  2485D  2489
Print_Disk_Status              $6ce9  2498D  2440   2458   2807   2823
Print_Disk_Msg                 $6cec  2504D  2645   2667
Print_Disk_Status_loop         $6cf1  2509D  2513
Print_Disk_Status_exit         $6cfc  2514D  2510
Mon_DOS                        $6cff  2524D   489
Mon_DOS_unit                   $6d1f  2541D  2530   2532   2535
Mon_DOS_next                   $6d23  2543D  2546   2548
Mon_DOS_status                 $6d34  2551D  2544
Directory                      $6d3a  2556D  2459
Directory_loopb                $6d4c  2568D  2573   2593
Directory_loopc                $6d65  2582D  2587
Directory_cr                   $6d73  2589D  2583
Directory_exit                 $6d7f  2594D  2571   2585   2591
DOS_U                          $6d82  2598D  2550
DOS_U_loop                     $6dbe  2628D  2643
DOS_U_write                    $6dce  2636D  2630
DOS_U_next                     $6dd6  2640D  2634
DOS_U_error                    $6de0  2645D  2632   2638
Find_Next_Sector               $6de9  2651D  2631   2637
Find_Next_Sector_error         $6e0b  2667D  2659
Find_Next_Sector_return        $6e11  2669D  2657   2666
Open_Command_Channel           $6e12  2673D  2689   2702
Reset_BP                       $6e21  2686D  2732
Reset_BP_loop                  $6e24  2690D  2694
Reset_BP_end                   $6e2f  2695D  2691
Send_Disk_Command              $6e32  2699D  2655   2664
Send_Disk_Command_loop         $6e35  2703D  2707
Send_Disk_Command_end          $6e40  2708D  2704
Read_Sector                    $6e43  2712D  2633
Read_Sector_loop               $6e51  2721D  2724
Write_Sector                   $6e5d  2729D  2636
Write_Sector_loop              $6e6e  2739D  2742
Set_TS_100                     $6e7b  2754D  2758
Set_TS                         $6e7b  2748D  2787   2790
Set_TS_10                      $6e86  2759D  2755   2763
Set_TS_1                       $6e91  2764D  2760
Build_U_String                 $6e97  2774D  2654   2663
Build_U_String_loop            $6e99  2778D  2782
Open_Disk_Buffer               $6eb9  2794D  2626
Close_Disk_Buffer              $6ed5  2812D  2646
MNE_L                          $6eec  2844D  1185   1749
MNE_R                          $6f47  2940D  1187   1751
MNE_Index                      $6fa2  3036D  1200   1572   1748
BRAIN                          $70a2  3076D  1420
LEN_ADM                        $70ac  3085D  1565   1693   1738   1860
ADMODE                         $71ac  3139D  1587   1697
ACCUMODE                       $71bc  3171D  1822
Num_Base                       $71c4  3173D  2035
Num_Bits                       $71c8  3174D  2050
Index_Char                     $71cc  3176D  1913
U1                             $71cf  3179D  2778
BP_ZERO                        $71de  3180D  2690
Reg_Text                       $71e6  3183D   338
Mon_Help                       $7219  3191D   493
End_Mod                        $74cb  3217
EXIT_OLD                       $cf2e   117D   311    312
EXIT                           $cfa4   118D   268    307    308    309
SETBNK                         $ff6b   120
JSRFAR                         $ff6e   121D   825
JMPFAR                         $ff71   122D   814
LDA_FAR                        $ff74   123
STA_FAR                        $ff77   124
CMP_FAR                        $ff7a   125
PRIMM                          $ff7d   126D   260    427    450    799
                                       891   1100   1491   1502   1645
                                      1728   2149   3185   3193
CINT                           $ff81   127
IOINIT                         $ff84   128
SETMSG                         $ff90   129D   329
SECOND                         $ff93   130D  2449   2679   2802   2820
TKSA                           $ff96   131D  2470   2563   2718   2736
MEMTOP                         $ff99   132
MEMBOT                         $ff9c   133
KEY                            $ff9f   134
SETTMO                         $ffa2   135
ACPTR                          $ffa5   136D  2471   2478   2486   2569
                                      2582   2721
CIOUT                          $ffa8   137D  2452   2692   2705   2740
                                      2804
UNTALK                         $ffab   138D  2492   2594   2725
UNLSN                          $ffae   139D  2455   2695   2708   2743
                                      2805   2821
LISTEN                         $ffb1   140D  2447   2677   2734   2800
                                      2818
TALK                           $ffb4   141D  2468   2560   2716
READSS                         $ffb7   142
SETLFS                         $ffba   143
SETNAM                         $ffbd   144
OPEN                           $ffc0   145
CLOSE                          $ffc3   146
CHKIN                          $ffc6   147
CHKOUT                         $ffc9   148
CLRCHN                         $ffcc   149
CHRIN                          $ffcf   150D   392
CHROUT                         $ffd2   151D   373    718    745    835
                                       853    862    877   1518   1522
                                      1530   1715   1736   1743   1768
                                      1781   1783   1785   1788   1808
                                      1814   1828   1843   1845   1870
                                      1883   1887   1889   1893   1897
                                      1907   1914   1920   1922   2097
                                      2103   2134   2142   2160   2163
                                      2297   2348   2426   2511   2586
LOAD                           $ffd5   152D  1095
SAVE                           $ffd8   153D  1086
SETTIM                         $ffdb   154
GETTIM                         $ffde   155
STOP                           $ffe1   156D   700   1019   1627   2590
GETIN                          $ffe4   157
CLALL                          $ffe7   158
SCAN                           $ffea   159
SCRORG                         $ffed   160
PLOT                           $fff0   161
Long_AC                        $0059    56D   208    210    218    222
                                       520    522    524    535    549
                                       563    578    580    594    610
                                       622    624    632    633    635
                                       636    771    789    930    932
                                       942    944    965    967   1000
                                      1069   1078   1079   1121   1236
                                      1239   1406   1408   1409   1417
                                      1418   1473   1482   1541   1548
                                      1550   1551   1553   1750   1752
                                      1759   1760   1850   1853   1867
                                      1876   1925   1927   1938   1941
                                      1944   1949   1952   2001   2002
                                      2003   2004   2011   2044   2051
                                      2052   2053   2064   2065   2072
                                      2073   2075   2077   2536   2575
                                      2576   2577   2578   2614   2619
Long_PC                        $0061    58D   536    595    611    644
                                       646    669    671    746    790
                                       792    836    838    854    856
                                       939    941    962    964   1085
                                      1104   1105   1122   1468   1471
                                      1474   1483   1489   1511   1515
                                      1549   1552   1950   1953   2094
                                      2100   2105   2108   2109   2246
                                      2247   2254   2256   2331   2344
                                      2347   2361   2374   2383   2384
                                      2385   2386   2387   2388   2389
                                      2390   2391   2392   2393   2394
                                      2410   2411   2412   2722   2739
Long_CT                        $005d    57D   211    212    214    215
                                       219    223    550    579    596
                                       693    694    697   1401   1407
                                      1415   1416   1621   1633   1636
                                      2232   2233   2235   2236   2237
                                      2337   2338   2380   2381   2382
                                      2405   2419   2422   2441   2456
                                      2624   2642
WHITE                          $0005    14D   470    734    742    886
                                       900   1813   2102   3195   3196
                                      3197   3198   3199   3200   3201
                                      3202   3203   3204   3205   3206
                                      3207   3208   3209   3210   3211
                                      3212   3213   3214
LRED                           $0096    16D   742    884    898   3195
                                      3196   3197   3198   3199   3200
                                      3201   3202   3203   3204   3205
                                      3206   3207   3208   3209   3210
                                      3211   3212   3213   3214
CR                             $000d    18D   397    451   1503   3195
                                      3196   3197   3198   3199   3200
                                      3201   3202   3203   3204   3205
                                      3206   3207   3208   3209   3210
                                      3211   3212   3213   3214
Op_Flag                        $006c    66D  1139   1159   1271   1321
                                      1434   1465   1660   1671   1688
                                      1705   1713   1741   1771   1789
                                      1799   1826   1841   1866   1874
                                      1899   1918   1957
Mode_Flags                     $006a    64D  1232   1260   1269   1279
                                      1291   1301   1311   1324   1338
                                      1352   1366   1382   1428   1446
                                      1449   1564   1585   1594   1605
                                      1606
Long_DA                        $0065    59D   564    654    655    657
                                       658    713    716    719    735
                                       743    744    927    929   1008
                                      1016   1138   1174   1175   1184
                                      1188
Buf_Index                      $006f    72D   401   1051   1064   1249
                                      1966   1987   2021   2192   2193
                                      2203   2211   2212   2290   2437
                                      2438   2533   2542   2607
Op_Size                        $006d    70D  1463   1464   1475   1494
                                      1495   1630   1631   1635   1704
                                      1706   1720   1833   1854   1873
                                      1929   1935   1958
Op_Code                        $006b    65D  1204   1222   1223   1405
                                      1432   1462   1470   1488   1563
                                      1679   1690   1737   1747   1793
                                      1800   1818   1859
STATUS                         $0090    77D  1039   1096   2565   2570
                                      2584   2681   2720   2738   2798
                                      2806   2816   2822
FA                             $00ba    81D  1032   1070   2446   2467
                                      2541   2559   2676   2715   2733
                                      2799   2817
Adr_Flags                      $0069    63D  1698   1836   1839   1881
                                      1885   1891   1895   1900   1905
                                      1909
Bank                           $0002    28D   284    287    343    351
                                       521    523    525    772
SPL                            $000c    43D   327    361    812    823
                                       827
MODE_80                        $00d7    87D   691    795    882    896
SA                             $00b9    80D  1034   1084   1107   2562
VERCK                          $0093    78D   437   1080   1089   1097
Dig_Cnt                        $006e    71D  2000   2012   2038   2086
FNADR                          $00bb    82D  1041   1043   1057
YELLOW                         $009e    15D   451   1735   2096
PCL                            $0004    30D   278    281    313
PCH                            $0003    29D   272    280    315
BA                             $00bd    83D  1036   1074
FNLEN                          $00b7    79D  1037   1058
APOSTR                         $0027    22D   985   2008
QUOTE                          $0022    21D  1048   1055
SPH                            $000b    42D   325    359
QTSW                           $00f4    94D   852
FNBANK                         $00be    84D  1038
CRIGHT                         $001d    20D   428
REV                            $0012    19D   451
AC                             $0006    32D   301
SR                             $0005    31D   367
R_Margin                       $00e7    92
L_Margin                       $00e6    91
T_Margin                       $00e5    90
B_Margin                       $00e4    89
NDX                            $00d0    86
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
Long_AC                        $0059    56D   208    210    218    222
                                       520    522    524    535    549
                                       563    578    580    594    610
                                       622    624    632    633    635
                                       636    771    789    930    932
                                       942    944    965    967   1000
                                      1069   1078   1079   1121   1236
                                      1239   1406   1408   1409   1417
                                      1418   1473   1482   1541   1548
                                      1550   1551   1553   1750   1752
                                      1759   1760   1850   1853   1867
                                      1876   1925   1927   1938   1941
                                      1944   1949   1952   2001   2002
                                      2003   2004   2011   2044   2051
                                      2052   2053   2064   2065   2072
                                      2073   2075   2077   2536   2575
                                      2576   2577   2578   2614   2619
Long_PC                        $0061    58D   536    595    611    644
                                       646    669    671    746    790
                                       792    836    838    854    856
                                       939    941    962    964   1085
                                      1104   1105   1122   1468   1471
                                      1474   1483   1489   1511   1515
                                      1549   1552   1950   1953   2094
                                      2100   2105   2108   2109   2246
                                      2247   2254   2256   2331   2344
                                      2347   2361   2374   2383   2384
                                      2385   2386   2387   2388   2389
                                      2390   2391   2392   2393   2394
                                      2410   2411   2412   2722   2739
Long_CT                        $005d    57D   211    212    214    215
                                       219    223    550    579    596
                                       693    694    697   1401   1407
                                      1415   1416   1621   1633   1636
                                      2232   2233   2235   2236   2237
                                      2337   2338   2380   2381   2382
                                      2405   2419   2422   2441   2456
                                      2624   2642
WHITE                          $0005    14D   470    734    742    886
                                       900   1813   2102   3195   3196
                                      3197   3198   3199   3200   3201
                                      3202   3203   3204   3205   3206
                                      3207   3208   3209   3210   3211
                                      3212   3213   3214
LRED                           $0096    16D   742    884    898   3195
                                      3196   3197   3198   3199   3200
                                      3201   3202   3203   3204   3205
                                      3206   3207   3208   3209   3210
                                      3211   3212   3213   3214
CR                             $000d    18D   397    451   1503   3195
                                      3196   3197   3198   3199   3200
                                      3201   3202   3203   3204   3205
                                      3206   3207   3208   3209   3210
                                      3211   3212   3213   3214
Op_Flag                        $006c    66D  1139   1159   1271   1321
                                      1434   1465   1660   1671   1688
                                      1705   1713   1741   1771   1789
                                      1799   1826   1841   1866   1874
                                      1899   1918   1957
Mode_Flags                     $006a    64D  1232   1260   1269   1279
                                      1291   1301   1311   1324   1338
                                      1352   1366   1382   1428   1446
                                      1449   1564   1585   1594   1605
                                      1606
Long_DA                        $0065    59D   564    654    655    657
                                       658    713    716    719    735
                                       743    744    927    929   1008
                                      1016   1138   1174   1175   1184
                                      1188
Buf_Index                      $006f    72D   401   1051   1064   1249
                                      1966   1987   2021   2192   2193
                                      2203   2211   2212   2290   2437
                                      2438   2533   2542   2607
Op_Size                        $006d    70D  1463   1464   1475   1494
                                      1495   1630   1631   1635   1704
                                      1706   1720   1833   1854   1873
                                      1929   1935   1958
Op_Code                        $006b    65D  1204   1222   1223   1405
                                      1432   1462   1470   1488   1563
                                      1679   1690   1737   1747   1793
                                      1800   1818   1859
Mon_Data                       $040c   114D   991   1001   1013   1040
                                      1042   2606   2628   2703   2756
                                      2761   2765   2779   2784
Buffer                         $0200    96D   393    402   1052   1506
                                      1508   1517   1521   1529   2194
                                      2213   2439   2450
STATUS                         $0090    77D  1039   1096   2565   2570
                                      2584   2681   2720   2738   2798
                                      2806   2816   2822
FA                             $00ba    81D  1032   1070   2446   2467
                                      2541   2559   2676   2715   2733
                                      2799   2817
Op_Ix                          $0406   107D  1140   1242   1245   1288
                                      1322   1336   1350   1364   1380
                                      1391
Adr_Flags                      $0069    63D  1698   1836   1839   1881
                                      1885   1891   1895   1900   1905
                                      1909
Bank                           $0002    28D   284    287    343    351
                                       521    523    525    772
Op_Len                         $0407   108D  1141   1244   1444   1450
                                      1453   1601
Disk_Msg                       $0434   115D  2472   2479   2487   2491
                                      2509
Disk_Status                    $040b   112D  2477   2481   2482   2493
                                      2668
SPL                            $000c    43D   327    361    812    823
                                       827
Disk_Sector                    $040a   111D  2620   2641   2661   2788
MODE_80                        $00d7    87D   691    795    882    896
SA                             $00b9    80D  1034   1084   1107   2562
VERCK                          $0093    78D   437   1080   1089   1097
Dig_Cnt                        $006e    71D  2000   2012   2038   2086
Disk_Track                     $0409   110D  2615   2662   2785
Op_Mne                         $0403   106D  1156   1162   1169
Ix_Mne                         $0402   105D  1194   1390   1573
X_Vector                       $0400   104D   314    316    504
FNADR                          $00bb    82D  1041   1043   1057
YELLOW                         $009e    15D   451   1735   2096
PCL                            $0004    30D   278    281    313
PCH                            $0003    29D   272    280    315
header_loop                    $205a   218D   221    225
BA                             $00bd    83D  1036   1074
FNLEN                          $00b7    79D  1037   1058
APOSTR                         $0027    22D   985   2008
QUOTE                          $0022    21D  1048   1055
SPH                            $000b    42D   325    359
Link                           $2029   179D   171
Disk_Unit                      $0408   109D  1031
QTSW                           $00f4    94D   852
FNBANK                         $00be    84D  1038
CRIGHT                         $001d    20D   428
REV                            $0012    19D   451
AC                             $0006    32D   301
SR                             $0005    31D   367
header                         $1fff   167
EXMON                          $032e   100
IBRK                           $0316    99
IIRQ                           $0314    98
R_Margin                       $00e7    92
L_Margin                       $00e6    91
T_Margin                       $00e5    90
B_Margin                       $00e4    89
NDX                            $00d0    86
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
