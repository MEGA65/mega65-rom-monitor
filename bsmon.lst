              ***************************************************************************
              *                                                                         *
              *                          BBBBBBBBB    SSSSSSSS                          *
              *                          BBB    BBB  SSS    SSS                         *
              *                          BBB    BBB  SSS                                *
              *                          BBBBBBBBB    SSSSSSSS                          *
              *                          BBB    BBB         SSS                         *
              *                          BBB    BBB  SSS    SSS                         *
              *                          BBBBBBBBB    SSSSSSSS                          *
              *                                                                         *
              * MMM   MMM    OOOOOOO    NNN    NN  III  TTTTTTTTT  OOOOOOO    RRRRRRRR  *
              * MMMM MMMM   OOO   OOO   NNNN   NN  III     TTT    OOO   OOO   RRR   RRR *
              * MMMMMMMMM  OOO     OOO  NNNNN  NN  III     TTT   OOO     OOO  RRR   RRR *
              * MMM M MMM  OOO     OOO  NNN NN NN  III     TTT   OOO     OOO  RRRRRRRR  *
              * MMM   MMM  OOO     OOO  NNN  NNNN  III     TTT   OOO     OOO  RRR RRR   *
              * MMM   MMM   OOO   OOO   NNN   NNN  III     TTT    OOO   OOO   RRR  RRR  *
              * MMM   MMM    OOOOOOO    NNN    NN  III     TTT     OOOOOOO    RRR   RRR *
              *                                                                         *
              *             Bit Shifter's Monitor for the MEGA65 - 15-JAN-2021          *
              *                                                                         *
              ***************************************************************************

              .CPU 45GS02

              .STORE $6000,$2000,"10000-11FFF.MONITOR"

              *************
              * Constants *
              *************

0005          WHITE  = $05
009e          YELLOW = $9e
0096          LRED   = $96

000d          CR     = $0d
0012          REV    = $12
001d          CRIGHT = $1d
0022          QUOTE  = $22
0027          APOSTR = $27

              ************************************************
              * Register storage for JMPFAR and JSRFAR calls *
              ************************************************

0002          Bank       =  2
0003          PCH        =  3
0004          PCL        =  4
0005          SR         =  5
0006          AC         =  6
0007          XR         =  7
0008          YR         =  8
0009          ZR         =  9

              *************************************
              * Used direct (zero) page addresses *
              *************************************

000a          BP         = 10
000b          SPH        = 11
000c          SPL        = 12

              ; following variables overlap with the BASIC floating point area

              ; $59 - $5d : temporary floating point accumulator
              ; $5e - $62 : temporary floating point accumulator
              ; $63 - $69 : primary   floating point accumulator
              ; $6a - $6f : secondary floating point accumulator

              ; A set of 32 bit variables also used as 32 bit pointer

0059          & = $59

0059          Long_AC    .BSS 4  ; 32 bit accumulator
005d          Long_CT    .BSS 4  ; 32 bit counter
0061          Long_PC    .BSS 4  ; 32 bit program counter
0065          Long_DA    .BSS 4  ; 32 bit data pointer

              ; Flags are  used in BBR BBS instructions

0069          Adr_Flags  .BSS 1
006a          Mode_Flags .BSS 1
006b          Op_Code    .BSS 1
006c          Op_Flag    .BSS 1  ; 7: two operands
                                 ; 6: long branch
                                 ; 5: 32 bit address
                                 ; 4: Q register
006d          Op_Size    .BSS 1
006e          Dig_Cnt    .BSS 1
006f          Buf_Index  .BSS 1

              ; operating system variables


0090          STATUS     = $90
0093          VERCK      = $93
00b7          FNLEN      = $b7
00b9          SA         = $b9
00ba          FA         = $ba
00bb          FNADR      = $bb
00bd          BA         = $bd
00be          FNBANK     = $be

00d0          NDX        = $d0        ; length of keyboard buffer
00d7          MODE_80    = $d7        ; 80 column / 40 volumn flag

00e4          B_Margin   = $e4        ; SCBOT  default = 24
00e5          T_Margin   = $e5        ; SCTOP  default =  0
00e6          L_Margin   = $e6        ; SCLF   default =  0
00e7          R_Margin   = $e7        ; SCRT   default = 39 or 79

00f4          QTSW       = $f4        ; Quote switch

0100          Stack      = $0100
0200          Buffer     = $0200      ; input buffer

0314          IIRQ       = $0314
0316          IBRK       = $0316
032e          EXMON      = $032e

0400          & = $400                ; bottom of BASIC runtime stack
                                      ; should be a safe space
0400          Ix_Mne      .BSS  1     ; index to mnemonics table
0401          Op_Mne      .BSS  3     ; 3 bytes for mnemonic
0404          Op_Ix       .BSS  1     ; type of constant
0405          Op_Len      .BSS  1     ; length of operand
0406          Disk_Unit   .BSS  1     ; target unit
0407          Disk_Src    .BSS  1     ; source unit
0408          Disk_Track  .BSS  1     ; logical track  1 -> 255
0409          Disk_Sector .BSS  1     ; logical sector 0 -> 255
040a          Disk_Status .BSS  1     ; BCD value of status
040b          File_Ext    .BSS  3     ; file extension

040e          Mon_Data    .BSS 40     ; buffer for hunt and filename
0436          Disk_Msg    .BSS 40     ; disk status as text message

cfaf          EXIT       = $cfaf      ; exit address for ROM 92xxxx

ff6b          SETBNK     = $ff6b
ff6e          JSRFAR     = $ff6e
ff71          JMPFAR     = $ff71
ff74          LDA_FAR    = $ff74
ff77          STA_FAR    = $ff77
ff7a          CMP_FAR    = $ff7a
ff7d          PRIMM      = $ff7d
ff81          CINT       = $ff81
ff84          IOINIT     = $ff84
ff90          SETMSG     = $ff90
ff93          SECOND     = $ff93
ff96          TKSA       = $ff96
ff99          MEMTOP     = $ff99
ff9c          MEMBOT     = $ff9c
ff9f          KEY        = $ff9f
ffa2          SETTMO     = $ffa2
ffa5          ACPTR      = $ffa5
ffa8          CIOUT      = $ffa8
ffab          UNTALK     = $ffab
ffae          UNLSN      = $ffae
ffb1          LISTEN     = $ffb1
ffb4          TALK       = $ffb4
ffb7          READSS     = $ffb7
ffba          SETLFS     = $ffba
ffbd          SETNAM     = $ffbd
ffc0          OPEN       = $ffc0
ffc3          CLOSE      = $ffc3
ffc6          CHKIN      = $ffc6
ffc9          CHKOUT     = $ffc9
ffcc          CLRCHN     = $ffcc
ffcf          CHRIN      = $ffcf
ffd2          CHROUT     = $ffd2
ffd5          LOAD       = $ffd5
ffd8          SAVE       = $ffd8
ffdb          SETTIM     = $ffdb
ffde          GETTIM     = $ffde
ffe1          STOP       = $ffe1
ffe4          GETIN      = $ffe4
ffe7          CLALL      = $ffe7
ffea          SCAN       = $ffea
ffed          SCRORG     = $ffed
fff0          PLOT       = $fff0

ffffffff          * = $1fff
                      .STORE $1fff,$0101,"bsm.prg"

              *************
              Module header
              *************

1fff 01 20            .WORD $2001             ; load address
2001 29 20            .WORD Link              ; line link
2003 e5 07            .WORD 2021              ; line number
2005 fe 02            .BYTE $fe,$02           ; BANK token
2007 30 3a            .BYTE "0:"              ; BANK argument
2009 9e               .BYTE $9e               ; SYS  token
200a 28 38 32         .BYTE "(8235):"         ; $202d
2011 8f               .BYTE $8f               ; REM  token
2012 20 42 49         .BYTE " BIT SHIFTER 01-JAN-21",0
2029 00 00    Link    .WORD 0                 ; BASIC end marker

                      ; copy image to $030000

202b 78               SEI

              ; map memory to monitor configuration

202c a9 a0            LDA  #$a0
202e a2 82            LDX  #$82
2030 a0 00            LDY  #$00
2032 a3 83            LDZ  #$83
2034 5c               MAP
2035 ea               EOM

              ; VIC IV registers visible

2036 a9 47            LDA  #$47
2038 8d 2f d0         STA  $d02f
203b a9 53            LDA  #$53
203d 8d 2f d0         STA  $d02f

              ; toggle write protection

2040 a9 70            LDA  #$70
2042 8d 40 d6         STA  $D640
2045 ea               NOP

2046 a3 00            LDZ  #0
2048 64 59            STZ  Long_AC
204a a9 21            LDA  #$21
204c 85 5a            STA  Long_AC+1
204e 64 5d            STZ  Long_CT
2050 64 5e            STZ  Long_CT+1
2052 a9 03            LDA  #3
2054 85 5f            STA  Long_CT+2
2056 64 60            STZ  Long_CT+3
2058 a2 20            LDX  #$20

205a b2 59    _loop   LDA  (Long_AC),Z
205c ea 92 5d         STA  [Long_CT],Z
205f 1b               INZ
2060 d0 f8            BNE  _loop
2062 e6 5a            INC  Long_AC+1
2064 e6 5e            INC  Long_CT+1
2066 ca               DEX
2067 d0 f1            BNE  _loop

2069 a9 70            LDA  #$70
206b 8d 40 d6         STA  $D640              ; toggle write protection
206e ea               NOP

206f 60               RTS
2070          EndMod [header] Size = 113 [$71]

2070 00 00 00         .FILL $2100-* (0) ; 144 bytes

2100          * = $6000

              ********************
6000          Monitor_Call ; $6000
              ********************

6000 4c 36 60          JMP  Mon_Call

              *********************
6003          Monitor_Break ; $6003
              *********************

6003 4c 09 60          JMP  Mon_Break

              **********************
6006          Monitor_Switch ; $6009
              **********************

6006 4c b4 60          JMP  Mon_Switch

              ****************
              Module Mon_Break
              ****************

6009 20 7d ff          JSR  PRIMM
600c 0d 42 52          .BYTE "\rBREAK\a",0
6014 20 d8 60          JSR  Print_Commands

              ; pull BP, Z, Y, X, A,SR,PCL,PCH
              ;       7  6  5  4  3  2  1  0

6017 a2 06             LDX  #6
6019 68       _loop    PLA
601a 95 03             STA  PCH,X
601c ca                DEX
601d 10 fa             BPL  _loop

              ; decrement PC to point after BRK

601f a5 04             LDA  PCL
6021 d0 02             BNE  _nopage
6023 c6 03             DEC  PCH
6025 c6 04    _nopage  DEC  PCL

6027 ad 1d 01          LDA  $011d
602a 7f 02 03          BBR7 Bank,_bank
602d ad 1f 01          LDA  $011f
6030 29 0f    _bank    AND  #15
6032 85 02             STA  Bank
6034 80 14             BRA  Mon_Start
6036          EndMod [Mon_Break] Size = 45 [$2d]

              ***************
              Module Mon_Call
              ***************

6036 20 d8 60          JSR  Print_Commands

              ;        clear register for monitor call

6039 a9 00             LDA  #0
603b a2 06             LDX  #6
603d 95 06    _loop    STA  AC,X
603f ca                DEX
6040 10 fb             BPL  _loop

              ;        set default PC to "exit to BASIC"

6042 a9 af             LDA  #<EXIT     ; ROM 911110
6044 a2 cf             LDX  #>EXIT
6046 85 04    _store   STA  PCL
6048 86 03             STX  PCH
604a          EndMod [Mon_Call] Size = 20 [$14]

              ****************
              Module Mon_Start
              ****************

604a d8                CLD
604b 0b                TSY
604c 84 0b             STY  SPH
604e ba                TSX
604f 86 0c             STX  SPL
6051 a9 c0             LDA  #$c0
6053 20 90 ff          JSR  SETMSG
6056 58                CLI
6057 ea                NOP
6058          EndMod [Mon_Start] Size = 14 [$e]

              ***************************
              Module Mon_Register ; $6042
              ***************************

6058 20 f7 73          JSR  Reg_Text

              ; print Bank,PCH

605b a0 00             LDY  #0
605d b9 02 00 _loopa   LDA  Bank,Y
6060 20 35 6b          JSR  Print_Hex
6063 c8                INY
6064 c0 02             CPY  #2
6066 90 f5             BCC  _loopa

              ; print SR,PCL,A,X,Y,Z,BP

6068 b9 02 00 _loopb   LDA  Bank,Y
606b 20 20 6b          JSR  Print_Hex_Blank
606e c8                INY
606f c0 09             CPY  #9
6071 90 f5             BCC  _loopb

              ; print 16 bit stack pointer

6073 a5 0b             LDA  SPH
6075 20 35 6b          JSR  Print_Hex
6078 a5 0c             LDA  SPL
607a 20 20 6b          JSR  Print_Hex_Blank

              ; print flags

607d a0 08             LDY  #8
607f a5 05             LDA  SR
6081 0a       _loopc   ASL  A
6082 48                PHA
6083 a9 2d             LDA  #'-'
6085 90 02             BCC  _flag
6087 a9 31             LDA  #'1'
6089 20 d2 ff _flag    JSR  CHROUT
608c 68                PLA
608d 88                DEY
608e d0 f1             BNE  _loopc
6090          EndMod [Mon_Register] Size = 56 [$38]

              ***********
              Module Main
              ***********

6090 20 28 6b          JSR  Print_CR
6093 a2 00             LDX  #0

              ; read one line into buffer

              ******
6095          Main_A
              ******

6095 20 cf ff _loop    JSR  CHRIN
6098 9d 00 02          STA  Buffer,X
609b e8                INX
609c e0 50             CPX  #80
609e b0 1e             BCS  Mon_Error         ; input too long
60a0 c9 0d             CMP  #CR
60a2 d0 f1             BNE  _loop

60a4 a9 00             LDA  #0
60a6 85 6f             STA  Buf_Index
60a8 9d ff 01          STA  Buffer-1,X        ; terminate buffer
60ab 20 65 6b _getcomm JSR  Get_Char
60ae f0 e0             BEQ  Main
60b0 c9 20             CMP  #' '
60b2 f0 f7             BEQ  _getcomm
60b4          EndMod [Main] Size = 36 [$24]

              *****************
              Module Mon_Switch
              *****************

60b4 a2 18             LDX  #24
60b6 dd f2 60 _loop    CMP  Command_Char,X
60b9 f0 10             BEQ  Mon_Select
60bb ca                DEX
60bc 10 f8             BPL  _loop

              ;        fall through to error routine if not found

              ****************
              Module Mon_Error
              ****************

              ; put a question mark at the end of the text

60be 20 7d ff          JSR  PRIMM
60c1 1b 4f 1d          .BYTE "\eO",CRIGHT,'?',0
60c6 a2 f8             LDX  #$f8              ; reset stack pointer
60c8 9a                TXS
60c9 80 c5             BRA  Main

              *****************
              Module Mon_Select
              *****************

60cb 85 93             STA  VERCK
60cd e0 17             CPX  #23
60cf b3 3c 03          LBCS  Load_Save
60d2 8a                TXA
60d3 0a                ASL  A
60d4 aa                TAX
60d5 7c 0f 61          JMP  (Jump_Table,X)
60d8          EndMod [Mon_Select] Size = 13 [$d]

              **************
60d8          Print_Commands
              **************

60d8 20 7d ff          JSR  PRIMM
60db 0d 9e 12          .BYTE CR,YELLOW,REV,"BS MONITOR COMMANDS:"

              ************
60f2          Command_Char
              ************

                       ;      0123456789abcdef
60f2 41 42 43          .BYTE "ABCDFGHJMRTUX@.>;?"

              ***********
6104          Cons_Prefix
              ***********

6104 24 2b 26          .BYTE "$+&%'"

              ****************
6109          Load_Save_Verify
              ****************

6109 4c 53 56          .BYTE "LSV",WHITE,0
610e 60                RTS

              **********
610f          Jump_Table
              **********

610f e4 64             .WORD Mon_Assemble     ; A
6111 18 62             .WORD Mon_Bits         ; B
6113 7d 63             .WORD Mon_Compare      ; C
6115 e9 67             .WORD Mon_Disassemble  ; D
6117 ba 64             .WORD Mon_Fill         ; F
6119 a2 62             .WORD Mon_Go           ; G
611b ad 63             .WORD Mon_Hunt         ; H
611d ae 62             .WORD Mon_JSR          ; J
611f ce 61             .WORD Mon_Memory       ; M
6121 58 60             .WORD Mon_Register     ; R
6123 33 63             .WORD Mon_Transfer     ; T
6125 4b 6d             .WORD Mon_Unit_Copy    ; U
6127 af cf             .WORD EXIT             ; X
6129 10 6f             .WORD Mon_DOS          ; @
612b e4 64             .WORD Mon_Assemble     ; .
612d 74 62             .WORD Mon_Set_Memory   ; >
612f 5a 62             .WORD Mon_Set_Register ; ;
6131 2a 74             .WORD Mon_Help         ; ?
6133 b5 6b             .WORD Converter        ; $
6135 b5 6b             .WORD Converter        ; +
6137 b5 6b             .WORD Converter        ; &
6139 b5 6b             .WORD Converter        ; %
613b b5 6b             .WORD Converter        ; '

              ****************
              Module LAC_To_PC
              ****************

              ; called from Mon_Set_Register, Mon_Go and Mon_JSR
              ; as the first instruction. The carry flag was set from
              ; the routine Got_LAC if an error occured.
              ; Notice that the Bank, PCH and PCL values are stored
              ; high to low, reverse to the standard order.

              ; Bank, PCH and PCL are part of a list, that is used by
              ; the routines FAR_JMP and FAR_JSR of the operating system

613d b0 0e             BCS  _error
613f a5 59             LDA  Long_AC
6141 85 04             STA  Bank+2
6143 a5 5a             LDA  Long_AC+1
6145 85 03             STA  Bank+1
6147 a5 5b             LDA  Long_AC+2
6149 05 5c             ORA  Long_AC+3
614b 85 02             STA  Bank
614d 60       _error   RTS
614e          EndMod [LAC_To_PC] Size = 17 [$11]

              *****************
              Module LAC_To_LPC
              *****************

614e da                PHX
614f a2 03             LDX  #3
6151 b5 59    _loop    LDA  Long_AC,X
6153 95 61             STA  Long_PC,X
6155 ca                DEX
6156 10 f9             BPL  _loop
6158 fa                PLX
6159 60                RTS
615a          EndMod [LAC_To_LPC] Size = 12 [$c]

              *****************
              Module LAC_To_LCT
              *****************

615a da                PHX
615b a2 03             LDX  #3
615d b5 59    _loop    LDA  Long_AC,X
615f 95 5d             STA  Long_CT,X
6161 ca                DEX
6162 10 f9             BPL  _loop
6164 fa                PLX
6165 60                RTS
6166          EndMod [LAC_To_LCT] Size = 12 [$c]

              *****************
              Module LAC_To_LDA
              *****************

6166 da                PHX
6167 a2 03             LDX  #3
6169 b5 59    _loop    LDA  Long_AC,X
616b 95 65             STA  Long_DA,X
616d ca                DEX
616e 10 f9             BPL  _loop
6170 fa                PLX
6171 60                RTS
6172          EndMod [LAC_To_LDA] Size = 12 [$c]

              *******************
              Module LAC_Plus_LCT
              *******************

6172 da                PHX
6173 a2 fc             LDX  #252              ; use ZP wrap around
6175 18                CLC
6176 b5 5d    _loop    LDA  Long_AC+4,X
6178 75 61             ADC  Long_CT+4,X
617a 95 5d             STA  Long_AC+4,X
617c e8                INX
617d d0 f7             BNE  _loop
617f fa                PLX
6180 60                RTS
6181          EndMod [LAC_Plus_LCT] Size = 15 [$f]

              ********************
              Module LAC_Minus_LPC
              ********************

6181 da                PHX
6182 a2 fc             LDX  #252              ; use ZP wrap around
6184 38                SEC
6185 b5 5d    _loop    LDA  Long_AC+4,X
6187 f5 65             SBC  Long_PC+4,X
6189 95 61             STA  Long_CT+4,X
618b e8                INX
618c d0 f7             BNE  _loop
618e fa                PLX
618f 60                RTS
6190          EndMod [LAC_Minus_LPC] Size = 15 [$f]

              **********************
              Module LAC_Compare_LPC
              **********************

6190 da                PHX
6191 a2 fc             LDX  #252              ; use ZP wrap around
6193 38                SEC
6194 b5 5d    _loop    LDA  Long_AC+4,X
6196 f5 65             SBC  Long_PC+4,X
6198 e8                INX
6199 d0 f9             BNE  _loop
619b fa                PLX
619c 60                RTS
619d          EndMod [LAC_Compare_LPC] Size = 13 [$d]

              **************
              Module Inc_LAC
              **************

619d e3 59             INW  Long_AC
619f d0 02             BNE  _return
61a1 e3 5b             INW  Long_AC+2
61a3 60       _return  RTS
61a4          EndMod [Inc_LAC] Size = 7 [$7]

              **************
              Module Dec_LAC
              **************

61a4 a5 59             LDA  Long_AC
61a6 05 5a             ORA  Long_AC+1
61a8 d0 02             BNE  _skip
61aa c3 5b             DEW  Long_AC+2
61ac c3 59    _skip    DEW  Long_AC
61ae 60                RTS
61af          EndMod [Dec_LAC] Size = 11 [$b]

              **************
              Module Inc_LPC
              **************

61af e3 61             INW  Long_PC
61b1 d0 02             BNE  _return
61b3 e3 63             INW  Long_PC+2
61b5 60       _return  RTS
61b6          EndMod [Inc_LPC] Size = 7 [$7]

              **************
              Module Dec_LDA
              **************

61b6 a5 65             LDA  Long_DA
61b8 05 66             ORA  Long_DA+1
61ba d0 02             BNE  _skip
61bc c3 67             DEW  Long_DA+2
61be c3 65    _skip    DEW  Long_DA
61c0 60                RTS
61c1          EndMod [Dec_LDA] Size = 11 [$b]

              ************
              Module Fetch
              ************

61c1 db                PHZ
61c2 98                TYA
61c3 4b                TAZ
61c4 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
61c7 ea                NOP                    ; use LDA  [Long_PC],Z
61c8 b2 61    _banked  LDA  (Long_PC),Z
61ca fb                PLZ
61cb 29 ff             AND  #$ff
61cd 60                RTS
61ce          EndMod [Fetch] Size = 13 [$d]

              *****************
              Module Mon_Memory
              *****************

61ce 20 33 6a          JSR  Get_LAC           ; get 1st. parameter
61d1 a3 10             LDZ  #16               ; default row count
61d3 b0 1f             BCS  _row              ; no address
61d5 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = start address
61d8 20 33 6a          JSR  Get_LAC           ; Long_AC = end address
61db b0 17             BCS  _row              ; not given

61dd 20 81 61          JSR  LAC_Minus_LPC     ; Long_CT = range
61e0 93 dc fe          LBCC Mon_Error         ; negative range -> error
61e3 a2 04             LDX  #4                ; 16 bytes / line
61e5 7f d7 01          BBR7 MODE_80,_shift
61e8 ca                DEX                    ;  8 bytes / line
61e9 46 5e    _shift   LSR  Long_CT+1
61eb 66 5d             ROR  Long_CT
61ed ca                DEX
61ee d0 f9             BNE  _shift
61f0 ab 5d 00          LDZ  Long_CT           ; row count
61f3 1b                INZ

61f4 20 e1 ff _row     JSR  STOP
61f7 f0 06             BEQ  _exit
61f9 20 f2 62          JSR  Dump_Row
61fc 3b                DEZ
61fd d0 f5             BNE  _row
61ff 4c 90 60 _exit    JMP  Main
6202          EndMod [Mon_Memory] Size = 52 [$34]

              *****************
              Module Print_Bits
              *****************

6202 db                PHZ
6203 85 65             STA  Long_DA
6205 a0 08             LDY  #8
6207 a9 2a    _loop    LDA  #'*'
6209 ff 65 02          BBS7 Long_DA,_set
620c a9 2e             LDA  #'.'
620e 20 d2 ff _set     JSR  CHROUT
6211 06 65             ASL  Long_DA
6213 88                DEY
6214 d0 f1             BNE  _loop
6216 fb                PLZ
6217 60                RTS
6218          EndMod [Print_Bits] Size = 22 [$16]

              ***************
              Module Mon_Bits
              ***************

6218 20 33 6a          JSR  Get_LAC           ; get 1st. parameter
621b b0 03             BCS  _lab
621d 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = start address
6220 20 28 6b _lab     JSR  Print_CR
6223 a9 05             LDA  #WHITE
6225 85 66             STA  Long_DA+1

6227 a2 08             LDX  #8
6229 da       _row     PHX
622a 20 f6 6a          JSR  Hex_LPC
622d a3 00             LDZ  #0
622f 38       _col     SEC
6230 a9 9b             LDA  #WHITE+LRED       ; toggle colour
6232 e5 66             SBC  Long_DA+1
6234 85 66             STA  Long_DA+1
6236 20 d2 ff          JSR  CHROUT
6239 ea b2 61          LDA  [Long_PC],Z
623c 20 02 62          JSR  Print_Bits
623f 18                CLC
6240 6b                TZA
6241 69 08             ADC  #8
6243 4b                TAZ
6244 c9 40             CMP  #64
6246 7f d7 02          BBR7 MODE_80,_next
6249 c9 20             CMP  #32
624b 90 e2    _next    BCC  _col
624d 20 28 6b          JSR  Print_CR
6250 20 af 61          JSR  Inc_LPC
6253 fa                PLX
6254 ca                DEX
6255 d0 d2             BNE  _row
6257 4c 90 60          JMP  Main
625a          EndMod [Mon_Bits] Size = 66 [$42]

              ***********************
              Module Mon_Set_Register
              ***********************

625a 20 33 6a          JSR  Get_LAC           ; get 1st. parameter
625d 20 3d 61          JSR  LAC_To_PC
6260 a0 03             LDY  #3
6262 20 33 6a _loop    JSR  Get_LAC
6265 b0 0a             BCS  _exit
6267 a5 59             LDA  Long_AC
6269 99 02 00          STA  Bank,Y
626c c8                INY
626d c0 09             CPY  #9
626f 90 f1             BCC  _loop
6271 4c 90 60 _exit    JMP  Main
6274          EndMod [Mon_Set_Register] Size = 26 [$1a]

              *********************
              Module Mon_Set_Memory
              *********************

6274 20 33 6a          JSR  Get_LAC           ; get 1st. parameter
6277 b0 1c             BCS  _exit
6279 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = row address
627c a3 00             LDZ  #0
627e 20 33 6a _loop    JSR  Get_LAC
6281 b0 12             BCS  _exit
6283 a5 59             LDA  Long_AC
6285 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
6288 ea                NOP                    ; use STA  [Long_PC],Z
6289 92 61    _banked  STA  (Long_PC),Z
628b 1b                INZ
628c c2 10             CPZ  #16
628e 7f d7 02          BBR7 MODE_80,_next
6291 c2 08             CPZ  #8
6293 90 e9    _next    BCC  _loop

6295 20 7d ff _exit    JSR  PRIMM
6298 1b 4f             .BYTE "\eO"
629a 91 00             .BYTE $91,$00
629c 20 f2 62          JSR  Dump_Row
629f 4c 90 60          JMP  Main
62a2          EndMod [Mon_Set_Memory] Size = 46 [$2e]

              *************
              Module Mon_Go
              *************

62a2 20 33 6a          JSR  Get_LAC           ; get 1st. parameter
62a5 20 3d 61          JSR  LAC_To_PC
62a8 a6 0c             LDX  SPL
62aa 9a                TXS
62ab 4c 71 ff          JMP  JMPFAR
62ae          EndMod [Mon_Go] Size = 12 [$c]

              **************
              Module Mon_JSR
              **************

62ae 20 33 6a          JSR  Get_LAC           ; get 1st. parameter
62b1 20 3d 61          JSR  LAC_To_PC
62b4 a6 0c             LDX  SPL
62b6 9a                TXS
62b7 20 6e ff          JSR  JSRFAR
62ba ba                TSX
62bb 86 0c             STX  SPL
62bd 4c 90 60          JMP  Main
62c0          EndMod [Mon_JSR] Size = 18 [$12]

              *******************
              Module Dump_4_Bytes
              *******************

62c0 20 d2 ff          JSR  CHROUT            ; colour
62c3 ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62c6 ea                NOP                    ; use LDA  [Long_PC],Z
62c7 b2 61    _banked  LDA  (Long_PC),Z
62c9 20 20 6b          JSR  Print_Hex_Blank
62cc 1b                INZ
62cd 6b                TZA
62ce 29 03             AND  #3
62d0 d0 f1             BNE  _loop
62d2 60                RTS
62d3          EndMod [Dump_4_Bytes] Size = 19 [$13]

              *******************
              Module Dump_4_Chars
              *******************

62d3 a0 00             LDY  #0
62d5 84 f4             STY  QTSW              ; disable quote mode
62d7 20 d2 ff          JSR  CHROUT            ; colour
62da ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62dd ea                NOP                    ; use LDA  [Long_PC],Z
62de b2 61    _banked  LDA  (Long_PC),Z
62e0 a8                TAY
62e1 29 60             AND  #%0110 0000
62e3 d0 02             BNE  _laba
62e5 a0 2e             LDY  #'.'
62e7 98       _laba    TYA
62e8 20 d2 ff          JSR  CHROUT
62eb 1b                INZ
62ec 6b                TZA
62ed 29 03             AND  #3
62ef d0 e9             BNE  _loop
62f1 60                RTS
62f2          EndMod [Dump_4_Chars] Size = 31 [$1f]

              ***************
              Module Dump_Row
              ***************

62f2 db                PHZ
62f3 20 28 6b          JSR  Print_CR
62f6 a9 3e             LDA  #'>'
62f8 20 d2 ff          JSR  CHROUT
62fb 20 f6 6a          JSR  Hex_LPC

62fe a3 00             LDZ  #0
6300 a2 02             LDX  #2                ; 2 blocks in 80 columns
6302 7f d7 01          BBR7 MODE_80,_loop
6305 ca                DEX                    ; 1 block  in 40 columns
6306 a9 96    _loop    LDA  #LRED
6308 20 c0 62          JSR  Dump_4_Bytes
630b a9 05             LDA  #WHITE
630d 20 c0 62          JSR  Dump_4_Bytes
6310 ca                DEX
6311 d0 f3             BNE  _loop

6313 20 7d ff          JSR  PRIMM
6316 12 00             .BYTE $12,$00          ; : reverse on

6318 a3 00             LDZ  #0
631a a2 02             LDX  #2                ; 4 blocks in 80 columns
631c 7f d7 01          BBR7 MODE_80,_lchr
631f ca                DEX                    ; 2 blocks in 40 columns
6320 a9 96    _lchr    LDA  #LRED
6322 20 d3 62          JSR  Dump_4_Chars
6325 a9 05             LDA  #WHITE
6327 20 d3 62          JSR  Dump_4_Chars
632a ca                DEX
632b d0 f3             BNE  _lchr
632d 6b                TZA
632e 20 8e 6b          JSR  Add_LPC
6331 fb                PLZ
6332 60                RTS
6333          EndMod [Dump_Row] Size = 65 [$41]

              *******************
              Module Mon_Transfer
              *******************

6333 20 9c 6b          JSR  Param_Range       ; Long_PC = source
6336 b3 86 fd          LBCS Mon_Error         ; Long_CT = count
6339 20 33 6a          JSR  Get_LAC           ; Long_AC = target
633c b3 80 fd          LBCS Mon_Error

633f a3 00             LDZ  #0
6341 20 90 61          JSR  LAC_Compare_LPC   ; target - source
6344 90 1d             BCC  _forward

              ;        source < target: backward transfer

6346 20 72 61          JSR  LAC_Plus_LCT      ; Long_AC = end of target

6349 ff 68 01 _lpback  BBS7 Long_DA+3,_rb     ; bit 31 ?
634c ea                NOP                    ; LDA  [Long_DA],Z
634d b2 65    _rb      LDA  (Long_DA),Z       ; backward copy
634f ff 5c 01          BBS7 Long_AC+3,_wb     ; bit 31 ?
6352 ea                NOP                    ; STA  [Long_AC],Z
6353 92 59    _wb      STA  (Long_AC),Z
6355 20 b6 61          JSR  Dec_LDA
6358 20 a4 61          JSR  Dec_LAC
635b 20 81 6b          JSR  Dec_LCT
635e 10 e9             BPL  _lpback
6360 4c 90 60          JMP  Main

6363 ff 64 01 _forward BBS7 Long_PC+3,_rf     ; bit 31 ?
6366 ea                NOP                    ; LDA  [Long_PC],Z
6367 b2 61    _rf      LDA  (Long_PC),Z       ; backward copy
6369 ff 5c 01          BBS7 Long_AC+3,_wf     ; bit 31 ?
636c ea                NOP                    ; STA  [Long_AC],Z
636d 92 59    _wf      STA  (Long_AC),Z
636f 20 af 61          JSR  Inc_LPC
6372 20 9d 61          JSR  Inc_LAC
6375 20 81 6b          JSR  Dec_LCT
6378 10 e9             BPL  _forward
637a 4c 90 60          JMP  Main
637d          EndMod [Mon_Transfer] Size = 74 [$4a]

              ******************
              Module Mon_Compare
              ******************

637d 20 9c 6b          JSR  Param_Range       ; Long_PC = source
6380 b3 3c fd          LBCS Mon_Error         ; Long_CT = count
6383 20 33 6a          JSR  Get_LAC           ; Long_AC = target
6386 b3 36 fd          LBCS Mon_Error
6389 20 28 6b          JSR  Print_CR
638c a3 00             LDZ  #0
638e ff 64 01 _loop    BBS7 Long_PC+3,_rf     ; bit 31 ?
6391 ea                NOP                    ; LDA  [Long_PC],Z
6392 b2 61    _rf      LDA  (Long_PC),Z       ; backward copy
6394 ff 5c 01          BBS7 Long_AC+3,_cf     ; bit 31 ?
6397 ea                NOP                    ; CMP  [Long_AC],Z
6398 d2 59    _cf      CMP  (Long_AC),Z
639a f0 03             BEQ  _laba
639c 20 f6 6a          JSR  Hex_LPC
639f 20 9d 61 _laba    JSR  Inc_LAC
63a2 20 af 61          JSR  Inc_LPC
63a5 20 81 6b          JSR  Dec_LCT
63a8 10 e4             BPL  _loop
63aa 4c 90 60          JMP  Main
63ad          EndMod [Mon_Compare] Size = 48 [$30]

              ***************
              Module Mon_Hunt
              ***************

63ad 20 9c 6b          JSR  Param_Range       ; Long_PC = start
63b0 b3 0c fd          LBCS Mon_Error         ; Long_CT = count
63b3 a0 00             LDY  #0
63b5 20 65 6b          JSR  Get_Char
63b8 c9 27             CMP  #APOSTR
63ba d0 17             BNE  _bin
63bc 20 65 6b          JSR  Get_Char          ; string hunt
63bf c9 00             CMP  #0
63c1 f3 fb fc          LBEQ Mon_Error         ; null string

63c4 99 0e 04 _lpstr   STA  Mon_Data,Y
63c7 c8                INY
63c8 20 65 6b          JSR  Get_Char
63cb f0 18             BEQ  _hunt
63cd c0 20             CPY  #32               ;max. string length
63cf d0 f3             BNE  _lpstr
63d1 80 12             BRA  _hunt

63d3 20 31 6a _bin     JSR  Got_LAC
63d6 a5 59    _lpbin   LDA  Long_AC
63d8 99 0e 04          STA  Mon_Data,Y
63db c8                INY
63dc 20 33 6a          JSR  Get_LAC
63df b0 04             BCS  _hunt
63e1 c0 20             CPY  #32               ;max. data length
63e3 d0 f1             BNE  _lpbin

63e5 84 65    _hunt    STY  Long_DA           ; hunt length
63e7 20 28 6b          JSR  Print_CR

63ea a0 00    _lpstart LDY  #0
63ec 20 c1 61 _lpins   JSR  Fetch
63ef d9 0e 04          CMP  Mon_Data,Y
63f2 d0 08             BNE  _next
63f4 c8                INY
63f5 c4 65             CPY  Long_DA
63f7 d0 f3             BNE  _lpins
63f9 20 f6 6a          JSR  Hex_LPC           ; match
63fc 20 e1 ff _next    JSR  STOP
63ff f3 8f fc          LBEQ Main
6402 20 af 61          JSR  Inc_LPC
6405 20 81 6b          JSR  Dec_LCT
6408 10 e0             BPL  _lpstart
640a 4c 90 60          JMP  Main
640d          EndMod [Mon_Hunt] Size = 96 [$60]

              ****************
              Module Load_Save
              ****************

640d ac 06 04          LDY  Disk_Unit
6410 84 ba             STY  FA
6412 a0 08             LDY  #8
6414 84 b9             STY  SA
6416 a0 00             LDY  #0
6418 84 bd             STY  BA
641a 84 b7             STY  FNLEN
641c 84 be             STY  FNBANK
641e 84 90             STY  STATUS
6420 a9 04             LDA  #>Mon_Data
6422 85 bc             STA  FNADR+1
6424 a9 0e             LDA  #<Mon_Data
6426 85 bb             STA  FNADR
6428 20 65 6b _skip    JSR  Get_Char          ; skip blanks
642b f3 91 fc          LBEQ Mon_Error
642e c9 20             CMP  #' '
6430 f0 f6             BEQ  _skip
6432 c9 22             CMP  #QUOTE            ; must be quote
6434 d3 88 fc          LBNE Mon_Error

6437 a6 6f             LDX  Buf_Index
6439 bd 00 02 _copyfn  LDA  Buffer,X          ; copy filename
643c f0 4a             BEQ  _do               ; no more input
643e e8                INX
643f c9 22             CMP  #QUOTE
6441 f0 0c             BEQ  _unit             ; end of filename
6443 91 bb             STA  (FNADR),Y         ; store to filename
6445 e6 b7             INC  FNLEN
6447 c8                INY
6448 c0 13             CPY  #19               ; max = 16 plus prefix "@0:"
644a 90 ed             BCC  _copyfn
644c 4c be 60          JMP  Mon_Error         ; filename too long

644f 86 6f    _unit    STX  Buf_Index         ; update read position
6451 20 65 6b          JSR  Get_Char
6454 f0 32             BEQ  _do               ; no more parameter
6456 20 33 6a          JSR  Get_LAC
6459 b0 2d             BCS  _do
645b a5 59             LDA  Long_AC           ; unit #
645d 85 ba             STA  FA
645f 20 33 6a          JSR  Get_LAC
6462 b0 24             BCS  _do
6464 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = start address
6467 85 bd             STA  BA                ; Bank
6469 20 33 6a          JSR  Get_LAC           ; Long_AC = end address + 1
646c b0 42             BCS  _load             ; no end address -> load/verify
646e 20 28 6b          JSR  Print_CR
6471 a6 59             LDX  Long_AC           ; X/Y = end address
6473 a4 5a             LDY  Long_AC+1
6475 a5 93             LDA  VERCK             ; A = load/verify/save
6477 c9 53             CMP  #'S'
6479 d3 43 fc          LBNE Mon_Error         ; must be Save
647c a9 00             LDA  #0
647e 85 b9             STA  SA                ; set SA for PRG
6480 a9 61             LDA  #Long_PC          ; Long_PC = start address
6482 20 d8 ff          JSR  SAVE
6485 4c 90 60 _exit    JMP  Main

6488 a5 93    _do      LDA  VERCK
648a c9 56             CMP  #'V'              ; Verify
648c f0 07             BEQ  _exec
648e c9 4c             CMP  #'L'              ; Load
6490 d3 2c fc          LBNE Mon_Error
6493 a9 00             LDA  #0                ; 0 = LOAD
6495 20 d5 ff _exec    JSR  LOAD              ; A == 0 : LOAD else VERIFY
6498 4f 90 ea          BBR4 STATUS,_exit
649b a5 93             LDA  VERCK
649d f3 1f fc          LBEQ Mon_Error
64a0 b3 ee fb          LBCS Main
64a3 20 7d ff          JSR  PRIMM
64a6 20 45 52          .BYTE " ERROR",0
64ad 4c 90 60          JMP  Main

64b0 a6 61    _load    LDX  Long_PC
64b2 a4 62             LDY  Long_PC+1
64b4 a9 00             LDA  #0                ; 0 = use X/Y as load address
64b6 85 b9             STA  SA                ; and ignore load address from file
64b8 80 ce             BRA  _do
64ba          EndMod [Load_Save] Size = 173 [$ad]

              ***************
              Module Mon_Fill
              ***************

64ba 20 9c 6b          JSR  Param_Range       ; Long_PC = target
64bd b3 ff fb          LBCS Mon_Error         ; Long_CT = count
64c0 20 33 6a          JSR  Get_LAC           ; Long_AC = fill byte
64c3 b3 f9 fb          LBCS Mon_Error
64c6 a5 5a             LDA  Long_AC+1
64c8 05 5b             ORA  Long_AC+2
64ca 05 5c             ORA  Long_AC+3
64cc d3 f0 fb          LBNE Mon_Error         ; not a byte value
64cf 20 28 6b          JSR  Print_CR
64d2 a3 00             LDZ  #0
64d4 a5 59    _loop    LDA  Long_AC
64d6 ea 92 61          STA  [Long_PC],Z
64d9 20 af 61          JSR  Inc_LPC
64dc 20 81 6b          JSR  Dec_LCT
64df 10 f3             BPL  _loop
64e1 4c 90 60          JMP  Main
64e4          EndMod [Mon_Fill] Size = 42 [$2a]

              *******************
              Module Mon_Assemble
              *******************

64e4 20 33 6a          JSR  Get_LAC           ; get 1st. parameter
64e7 b3 d5 fb          LBCS Mon_Error
64ea 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = PC

64ed a2 00    _start   LDX  #0                ; mne letter counter
64ef 86 66             STX  Long_DA+1         ; clear encoded MNE
64f1 86 6c             STX  Op_Flag           ; 6:long branch 5:32 bit
64f3 8e 04 04          STX  Op_Ix             ; operand byte index
64f6 8e 05 04          STX  Op_Len            ; operand length
64f9 20 65 6b _getin   JSR  Get_Char
64fc d0 05             BNE  _laba
64fe e0 00             CPX  #0
6500 f3 8e fb          LBEQ Main

6503 c9 20    _laba    CMP  #' '
6505 f0 e6             BEQ  _start            ; restart after blank

              ;        check for long branches

6507 e0 01             CPX  #1
6509 d0 0e             BNE  _labb             ; -> not 2nd. char
650b c9 42             CMP  #'B'
650d d0 0a             BNE  _labb             ; 2nd. char != 'B'
650f ab 01 04          LDZ  Op_Mne
6512 c2 4c             CPZ  #'L'
6514 d0 03             BNE  _labb             ; 1st. Char != 'L'
6516 e7 6c             SMB6 Op_Flag           ; flag long branch
6518 ca                DEX                    ; skip 'L'

6519 9d 01 04 _labb    STA  Op_Mne,X          ; next mne character
651c e8                INX
651d e0 03             CPX  #3
651f d0 d8             BNE  _getin

              ;        encode 3 letter mnemonic

6521 bd 00 04 _lpenc   LDA  Op_Mne-1,X
6524 38                SEC
6525 e9 3f             SBC  #$3f              ; offset
6527 a0 05             LDY  #5                ; 5 bit code
6529 4a       _lpbit   LSR  A
652a 66 65             ROR  Long_DA
652c 66 66             ROR  Long_DA+1
652e 88                DEY
652f d0 f8             BNE  _lpbit
6531 ca                DEX
6532 d0 ed             BNE  _lpenc

              ;        find packed MNE code in table

6534 a2 5a             LDX  #90               ; # of mnemonics
6536 a5 65             LDA  Long_DA
6538 dd fd 70 _lpfind  CMP  MNE_L,X           ; compare left MNE
653b d0 07             BNE  _nxfind
653d bc 58 71          LDY  MNE_R,X
6540 c4 66             CPY  Long_DA+1         ; compare right MNE
6542 f0 06             BEQ  _found
6544 ca       _nxfind  DEX
6545 10 f1             BPL  _lpfind
6547 4c be 60          JMP  Mon_Error

654a 8e 00 04 _found   STX  Ix_Mne

              ;        find 1st. opcode for this mnemonic

654d 8a                TXA
654e a2 00             LDX  #0
6550 dd b3 71 _lpopc   CMP  MNE_Index,X
6553 f0 03             BEQ  _exopc
6555 e8                INX
6556 d0 f8             BNE  _lpopc
6558 86 6b    _exopc   STX  Op_Code

              ;        check for BBR BBS RMB SMB

655a 8a                TXA
655b 29 07             AND  #7
655d c9 07             CMP  #7
655f d0 1d             BNE  _labc

6561 20 65 6b          JSR  Get_Char
6564 c9 30             CMP  #'0'
6566 93 56 fb          LBCC Mon_Error
6569 c9 38             CMP  #'8'
656b b3 51 fb          LBCS Mon_Error
656e 0a                ASL  A
656f 0a                ASL  A
6570 0a                ASL  A
6571 0a                ASL  A
6572 05 6b             ORA  Op_Code
6574 85 6b             STA  Op_Code

6576 20 65 6b          JSR  Get_Char
6579 c9 20             CMP  #' '
657b d3 41 fb          LBNE Mon_Error

              ;        read operand

657e a9 00    _labc    LDA  #0
6580 85 6a    _labd    STA  Mode_Flags
6582 20 50 6a          JSR  Read_Number
6585 b3 37 fb          LBCS Mon_Error
6588 f0 1c             BEQ  _labg             ; no operand
658a a5 5b             LDA  Long_AC+2
658c d3 30 fb          LBNE Mon_Error         ; -> overflow
658f a0 02             LDY  #2                ; Y=2 word operand
6591 a5 5a             LDA  Long_AC+1
6593 d0 01             BNE  _labf             ; high byte not zero
6595 88                DEY                    ; Y=1 byte operand
6596 ae 04 04 _labf    LDX  Op_Ix             ; X = operand value #
6599 98                TYA                    ; A = 1:byte or 2:word
659a 9d 05 04          STA  Op_Len,X          ; store operand length
659d ee 04 04          INC  Op_Ix             ; ++index to operand value
65a0 8a                TXA                    ; A = current index
65a1 d0 03             BNE  _labg             ; -> at 2nd. byte
65a3 20 5a 61          JSR  LAC_To_LCT        ; Long_CT = 1st. operand
65a6 c6 6f    _labg    DEC  Buf_Index         ; back to delimiter

65a8 20 65 6b _lpnop   JSR  Get_Char          ; get delimiter
65ab f3 ed 00          LBEQ _adjust           ; end of operand
65ae c9 20             CMP  #' '
65b0 f0 f6             BEQ  _lpnop

              ;        immediate

65b2 c9 23             CMP  #'#'
65b4 d0 08             BNE  _lbra
65b6 a5 6a             LDA  Mode_Flags
65b8 d0 70             BNE  _error
65ba a9 80             LDA  #$80              ; immediate mode
65bc 80 c2             BRA  _labd

              ;        left bracket

65be c9 5b    _lbra    CMP  #'['
65c0 d0 0a             BNE  _indir
65c2 a5 6a             LDA  Mode_Flags
65c4 d0 64             BNE  _error
65c6 d7 6c             SMB5 Op_Flag           ; 32 bit mode
65c8 a9 40             LDA  #$40              ; ( flag
65ca 80 b4             BRA  _labd

              ;        left parenthesis

65cc c9 28    _indir   CMP  #'('
65ce d0 08             BNE  _comma
65d0 a5 6a             LDA  Mode_Flags
65d2 d0 56             BNE  _error
65d4 a9 40             LDA  #$40              ; ( flag
65d6 80 a8             BRA  _labd

              ;        comma

65d8 c9 2c    _comma   CMP  #','
65da d0 1f             BNE  _stack
65dc ad 04 04          LDA  Op_Ix             ; operand value #
65df f0 49             BEQ  _error
65e1 a2 04             LDX  #4                ; outside comma
65e3 a5 6a             LDA  Mode_Flags
65e5 f0 0e             BEQ  _comma1           ; no flags yet
65e7 c9 78             CMP  #$78              ; ($nn,SP)
65e9 f0 0a             BEQ  _comma1
65eb c9 48             CMP  #$48              ; ($nn)
65ed f0 06             BEQ  _comma1
65ef a2 20             LDX  #$20              ; , inside comma
65f1 c9 40             CMP  #$40              ; (
65f3 d0 35             BNE  _error
65f5 8a       _comma1  TXA
65f6 05 6a             ORA  Mode_Flags
65f8 4c 80 65          JMP  _labd

              ;        stack relative

65fb c9 53    _stack   CMP  #'S'
65fd d0 12             BNE  _rbra
65ff 20 65 6b          JSR  Get_Char
6602 c9 50             CMP  #'P'
6604 d0 24             BNE  _error
6606 a5 6a             LDA  Mode_Flags
6608 c9 60             CMP  #$60              ; ($nn,
660a d0 1e             BNE  _error
660c 09 10             ORA  #%0001 0000       ; SP flag
660e 4c 80 65          JMP  _labd

              ;        right bracket

6611 c9 5d    _rbra    CMP  #']'
6613 d0 18             BNE  _right
6615 5f 6c 12          BBR5 Op_Flag,_error
6618 ad 04 04          LDA  Op_Ix
661b f3 a1 fa          LBEQ Mon_Error         ; no value
661e a5 6a             LDA  Mode_Flags
6620 c9 40             CMP  #$40              ; (
6622 d3 9a fa          LBNE Mon_Error
6625 09 08             ORA  #%0000 1000       ; )
6627 4c 80 65          JMP  _labd

662a 4c be 60 _error   JMP  Mon_Error

              ;        right parenthesis

662d c9 29    _right   CMP  #')'
662f d0 1a             BNE  _X
6631 ad 04 04          LDA  Op_Ix
6634 f3 88 fa          LBEQ Mon_Error         ; no value
6637 a5 6a             LDA  Mode_Flags
6639 c9 40             CMP  #$40              ; (
663b f0 09             BEQ  _right1
663d c9 61             CMP  #$61              ; ($nn,X
663f f0 05             BEQ  _right1
6641 c9 70             CMP  #$70              ; ($nn,SP
6643 d3 79 fa          LBNE Mon_Error
6646 09 08    _right1  ORA  #%0000 1000       ; )
6648 4c 80 65          JMP  _labd

664b c9 58    _X       CMP  #'X'
664d d0 16             BNE  _Y
664f ad 04 04          LDA  Op_Ix
6652 f3 6a fa          LBEQ Mon_Error
6655 a5 6a             LDA  Mode_Flags
6657 c9 60             CMP  #$60
6659 f0 05             BEQ  _X1
665b c9 04             CMP  #4
665d d3 5f fa          LBNE Mon_Error
6660 09 01    _X1      ORA  #%0000 0001
6662 4c 80 65          JMP  _labd

              ;        Y

6665 c9 59    _Y       CMP  #'Y'
6667 d0 1a             BNE  _Z
6669 ad 04 04          LDA  Op_Ix
666c f3 50 fa          LBEQ Mon_Error
666f a5 6a             LDA  Mode_Flags
6671 c9 4c             CMP  #$4c             ; ($nn),
6673 f0 09             BEQ  _Y1
6675 c9 04             CMP  #4               ; $nn,
6677 f0 05             BEQ  _Y1
6679 c9 7c             CMP  #$7c             ; ($nn,SP),
667b d3 41 fa          LBNE Mon_Error
667e 09 02    _Y1      ORA  #%0000 0010      ; Y
6680 4c 80 65          JMP  _labd

              ;        Z

6683 c9 5a    _Z       CMP  #'Z'
6685 d3 37 fa          LBNE Mon_Error
6688 ad 04 04          LDA  Op_Ix
668b f3 31 fa          LBEQ Mon_Error
668e a5 6a             LDA  Mode_Flags
6690 c9 4c             CMP  #$4c              ; $nn,
6692 d3 2a fa          LBNE Mon_Error
6695 09 03             ORA  #%0000 0011       ; Z
6697 4c 80 65          JMP  _labd

              ;        BBR BBS RMB SMB  two operands

669a ad 00 04 _adjust  LDA  Ix_Mne
669d ae 04 04          LDX  Op_Ix             ; # if values
66a0 f0 52             BEQ  _match            ; -> no operand
66a2 ca                DEX
66a3 f0 25             BEQ  _one             ; ->  one operand
66a5 ca                DEX
66a6 d3 16 fa          LBNE Mon_Error         ; -> error if more than 2
66a9 c9 05             CMP  #5                ; BBR
66ab f0 05             BEQ  _BB
66ad c9 06             CMP  #6                ; BBS
66af d3 0d fa          LBNE Mon_Error
66b2 a5 5e    _BB      LDA  Long_CT+1
66b4 d3 08 fa          LBNE Mon_Error
66b7 a9 03             LDA  #3                ; offset
66b9 20 9f 67          JSR  Branch_Target
66bc a5 6b             LDA  Op_Code
66be a4 59             LDY  Long_AC
66c0 a6 5d             LDX  Long_CT
66c2 86 59             STX  Long_AC
66c4 84 5a             STY  Long_AC+1
66c6 a0 02             LDY  #2
66c8 80 4d             BRA  _store

              ;        one operand in Long_CT

66ca a6 5d    _one     LDX  Long_CT
66cc a4 5e             LDY  Long_CT+1
66ce 86 59             STX  Long_AC
66d0 84 5a             STY  Long_AC+1            ; Aval = operand
66d2 a2 0a             LDX  #10
66d4 dd b2 72 _lpbrain CMP  BRAIN-1,X
66d7 f0 05             BEQ  _branch
66d9 ca                DEX
66da d0 f8             BNE  _lpbrain
66dc 80 16             BRA  _match

              ;        branch instruction

66de a5 6a    _branch  LDA  Mode_Flags
66e0 d3 dc f9          LBNE Mon_Error         ; only value
66e3 a9 02             LDA  #2                ; branch offset
66e5 20 9f 67          JSR  Branch_Target
66e8 a5 6b             LDA  Op_Code
66ea a0 01             LDY  #1                ; short branch
66ec 6f 6c 03          BBR6 Op_Flag,_bran1
66ef c8                INY                    ; long branch
66f0 09 03             ORA  #3
66f2 80 23    _bran1   BRA  _store

              ;        find opcode matching mnemonic and address mode

66f4 20 ca 67 _match   JSR  Mode_Index
66f7 20 b2 67 _lpmatch JSR  Match_Mode
66fa f0 17             BEQ  _okmat
66fc ad 05 04          LDA  Op_Len
66ff f3 bd f9          LBEQ Mon_Error
6702 a5 6a             LDA  Mode_Flags
6704 33 b8 f9          LBMI Mon_Error
6707 29 3f             AND  #%0011 1111
6709 85 6a             STA  Mode_Flags
670b ee 05 04          INC  Op_Len
670e 20 dc 67          JSR  Size_To_Mode
6711 80 e4             BRA  _lpmatch
6713 ac 05 04 _okmat   LDY  Op_Len
6716 8a                TXA

              ;        store instruction bytes
              ;        -----------------------
              ;        A    = opcode
              ;        Y    = operand length
              ;        Long_AC = operand value

6717 85 6b    _store   STA  Op_Code
6719 84 6d             STY  Op_Size
671b e6 6d             INC  Op_Size
671d 5f 6c 17          BBR5 Op_Flag,_storen
6720 a9 ea             LDA  #$ea              ; 32 bit prefix
6722 a3 00             LDZ  #0
6724 ea 92 61          STA  [Long_PC],Z       ; store prefix
6727 1b                INZ
6728 a5 6b             LDA  Op_Code
672a ea 92 61          STA  [Long_PC],Z       ; store opcode
672d 1b                INZ
672e a5 59             LDA  Long_AC
6730 ea 92 61          STA  [Long_PC],Z       ; store address
6733 e6 6d             INC  Op_Size
6735 80 13             BRA  _print

6737 5a       _storen  PHY
6738 fb                PLZ                    ; Z = Y
6739 f0 0a             BEQ  _store1

673b b9 58 00 _lpsto   LDA  Long_AC-1,Y
673e ea 92 61          STA  [Long_PC],Z
6741 3b                DEZ
6742 88                DEY
6743 d0 f6             BNE  _lpsto

6745 a5 6b    _store1  LDA  Op_Code
6747 ea 92 61          STA  [Long_PC],Z

674a 20 7d ff _print   JSR  PRIMM
674d 0d 91 41          .BYTE 13,$91,"A \eQ",0
6754 20 27 68          JSR  Print_Code
6757 e6 6d             INC  Op_Size
6759 a5 6d             LDA  Op_Size
675b 20 8e 6b          JSR  Add_LPC

              ; print out command 'A' together with next address
              ; and put it into buffer too,
              ; for easy entry of next assembler instruction

675e 20 7d ff          JSR  PRIMM
6761 0d 41 20          .BYTE CR,"A ",0

6765 a9 41             LDA  #'A'
6767 8d 00 02          STA  Buffer
676a a9 20             LDA  #' '
676c 8d 01 02          STA  Buffer+1
676f a0 02             LDY  #2
6771 a2 02             LDX  #2                ; 6 digits
6773 b5 61             LDA  Long_PC,X
6775 d0 01             BNE  _auto
6777 ca                DEX                    ; 4 digits
6778 da       _auto    PHX
6779 b5 61             LDA  Long_PC,X
677b 20 41 6b          JSR  A_To_Hex
677e 99 00 02          STA  Buffer,Y
6781 20 d2 ff          JSR  CHROUT
6784 c8                INY
6785 8a                TXA
6786 99 00 02          STA  Buffer,Y
6789 20 d2 ff          JSR  CHROUT
678c c8                INY
678d fa                PLX
678e ca                DEX
678f 10 e7             BPL  _auto

6791 a9 20             LDA  #' '
6793 99 00 02          STA  Buffer,Y
6796 20 d2 ff          JSR  CHROUT
6799 c8                INY
679a 98                TYA
679b aa                TAX
679c 4c 95 60          JMP  Main_A
679f          EndMod [Mon_Assemble] Size = 699 [$2bb]

              ********************
              Module Branch_Target
              ********************

679f c3 59             DEW  Long_AC
67a1 3a                DEC  A
67a2 d0 fb             BNE  Branch_Target

              ;        Target - PC

67a4 38                SEC
67a5 a5 59             LDA  Long_AC
67a7 e5 61             SBC  Long_PC
67a9 85 59             STA  Long_AC
67ab a5 5a             LDA  Long_AC+1
67ad e5 62             SBC  Long_PC+1
67af 85 5a             STA  Long_AC+1
67b1 60                RTS
67b2          EndMod [Branch_Target] Size = 19 [$13]

              *****************
              Module Match_Mode
              *****************

              ;        find matching mnemonic and address mode

67b2 a6 6b             LDX  Op_Code           ; try this opcode
67b4 a5 6a             LDA  Mode_Flags         ; size and address mode
67b6 dd bd 72 _loop    CMP  LEN_ADM,X
67b9 f0 0e             BEQ  _return           ; success  ZF=1

              ;        search for next opcode with same mnemonic

67bb e8       _next    INX                    ; next opcode
67bc f0 0a             BEQ _error
67be bc b3 71          LDY  MNE_Index,X
67c1 cc 00 04          CPY  Ix_Mne            ; same mnemonic ?
67c4 f0 f0             BEQ  _loop             ; -> compare again
67c6 80 f3             BRA  _next

67c8 ca       _error   DEX                    ; X = $ff ZF=0
67c9 60       _return  RTS
67ca          EndMod [Match_Mode] Size = 24 [$18]

              *****************
              Module Mode_Index
              *****************

67ca a5 6a             LDA  Mode_Flags
67cc a2 00             LDX  #0
67ce dd bd 73 _loop    CMP  ADMODE,X
67d1 f0 07             BEQ  _found
67d3 e8                INX
67d4 e0 10             CPX  #16
67d6 90 f6             BCC  _loop
67d8 8a                TXA
67d9 60                RTS
67da 86 6a    _found   STX  Mode_Flags
67dc          EndMod [Mode_Index] Size = 18 [$12]

              *******************
              Module Size_To_Mode
              *******************

67dc ad 05 04          LDA  Op_Len
67df 4a                LSR  A
67e0 6a                ROR  A
67e1 6a                ROR  A
67e2 05 6a             ORA  Mode_Flags
67e4 85 6a             STA  Mode_Flags
67e6 a2 00             LDX  #0
67e8 60                RTS
67e9          EndMod [Size_To_Mode] Size = 13 [$d]

              **********************
              Module Mon_Disassemble
              **********************

67e9 20 33 6a          JSR  Get_LAC           ; get 1st. parameter
67ec b0 08             BCS  _nopar
67ee 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = start address
67f1 20 33 6a          JSR  Get_LAC           ; Long_AC = end address
67f4 90 06             BCC  range
67f6 a9 20    _nopar   LDA  #32               ; disassemble 32 bytes
67f8 85 5d             STA  Long_CT
67fa 80 06             BRA  _loop
67fc 20 81 61 range    JSR  LAC_Minus_LPC     ; Long_CT = range
67ff 93 bd f8          LBCC Mon_Error         ; -> negative

6802 20 2d 6b _loop    JSR  CR_Erase          ; prepare empty line
6805 20 e1 ff          JSR  STOP
6808 f3 86 f8          LBEQ Main
680b 20 21 68          JSR  Dis_Code          ; disassemble one line
680e e6 6d             INC  Op_Size
6810 a5 6d             LDA  Op_Size
6812 20 8e 6b          JSR  Add_LPC           ; advance address
6815 a5 5d             LDA  Long_CT
6817 38                SEC
6818 e5 6d             SBC  Op_Size
681a 85 5d             STA  Long_CT
681c b0 e4             BCS  _loop
681e 4c 90 60          JMP  Main
6821          EndMod [Mon_Disassemble] Size = 56 [$38]

              ***************
              Module Dis_Code
              ***************

6821 20 7d ff          JSR  PRIMM
6824 2e 20 00          .BYTE ". ",0
6827          EndMod [Dis_Code] Size = 6 [$6]

              *****************
              Module Print_Code
              *****************

              ;        print 24 bit address of instruction

6827 20 f6 6a          JSR  Hex_LPC          ; 24 bit address

              ;        read opcode and calculate length and address mode

682a a0 00             LDY  #0
682c 84 6c             STY  Op_Flag           ; clear flags
682e 20 c1 61          JSR  Fetch             ; fetch from (banked) address

              ;        check for Q instructions

6831 c9 42             CMP  #$42              ; NEG
6833 d0 0f             BNE  _nop
6835 c8                INY                    ; Y = 1
6836 20 c1 61          JSR  Fetch
6839 c9 42             CMP  #$42              ; NEG
683b d0 07             BNE  _nop
683d c7 6c             SMB4 Op_Flag           ; Q flag
683f a9 02             LDA  #2
6841 20 8e 6b          JSR  Add_LPC           ; skip NEG NEG

              ;        check for 32 bit address mode

6844 a0 00    _nop     LDY  #0
6846 20 c1 61          JSR  Fetch
6849 85 6b             STA  Op_Code
684b aa                TAX
684c c9 ea             CMP  #$ea              ; prefix ?
684e d0 12             BNE  _normal
6850 c8                INY
6851 20 c1 61          JSR  Fetch             ; opcode after prefix
6854 29 1f             AND  #%0001 1111       ; identify ($nn),Z codes
6856 c9 12             CMP  #%0001 0010
6858 d0 08             BNE  _normal
685a d7 6c             SMB5 Op_Flag           ; set extended flag
685c 20 c1 61          JSR  Fetch
685f 85 6b             STA  Op_Code           ; code after prefix
6861 aa                TAX

6862 bc bd 72 _normal  LDY  LEN_ADM,X         ; Y = length and address mode
6865 98                TYA                    ; A = length and address mode
6866 29 0f             AND  #15               ; A = address mode
6868 aa                TAX                    ; X = address mode
6869 bd bd 73          LDA  ADMODE,X          ; A = mode flags
686c 85 69             STA  Adr_Flags         ; store
686e 98                TYA                    ; A = length and address mode
686f 29 c0             AND  #%1100 0000       ; mask instruction length
6871 0a                ASL  A                 ; rotate into lower two bits
6872 2a                ROL  A
6873 2a                ROL  A
6874 85 6d             STA  Op_Size           ; store
6876 5f 6c 02          BBR5 Op_Flag,_norm1
6879 e6 6d             INC  Op_Size
687b          _norm1

              ;        print instruction and operand bytes

687b a0 00             LDY  #0
687d a9 20             LDA  #' '
687f 4f 6c 02          BBR4 Op_Flag,_blpr
6882 a9 2a             LDA  #'*'              ; print * for NEG NEG
6884 20 d2 ff _blpr    JSR  CHROUT
6887 20 c1 61 _lphex   JSR  Fetch
688a 20 20 6b          JSR  Print_Hex_Blank
688d c0 02             CPY  #2
688f f0 13             BEQ  _long             ; stop after 3 bytes
6891 c4 6d             CPY  Op_Size
6893 c8                INY
6894 90 f1             BCC  _lphex

              ;        fill up with blanks

6896 c0 03    _lpfill  CPY  #3
6898 b0 0a             BCS  _long
689a 20 7d ff          JSR  PRIMM
689d 20 20 20          .BYTE "   ",0
68a1 c8                INY
68a2 80 f2             BRA  _lpfill

              ;        detect long branches

68a4 a9 9e    _long    LDA  #YELLOW
68a6 20 d2 ff          JSR  CHROUT
68a9 a6 6b             LDX  Op_Code
68ab bd bd 72          LDA  LEN_ADM,X
68ae c9 a0             CMP  #%1010 0000        ; long branch mode
68b0 d0 07             BNE  _locate
68b2 e7 6c             SMB6 Op_Flag            ; set long branch flag
68b4 a9 4c             LDA  #'L'
68b6 20 d2 ff          JSR  CHROUT

              ;        locate mnemonic text

68b9 a6 6b    _locate  LDX  Op_Code           ; X = opcode
68bb bc b3 71          LDY  MNE_Index,X       ; Y = index to mnemonic text
68be b9 fd 70          LDA  MNE_L,Y           ; A = packed left part
68c1 85 5a             STA  Long_AC+1
68c3 b9 58 71          LDA  MNE_R,Y           ; A = packed right part
68c6 85 59             STA  Long_AC

              ;        unpack and print mnemonic text

68c8 a2 03             LDX  #3                ; 3 letters
68ca a9 00    _lpmne   LDA  #0
68cc a0 05             LDY  #5                ; 5 bits per letter
68ce 06 59    _lplet   ASL  Long_AC
68d0 26 5a             ROL  Long_AC+1
68d2 2a                ROL  A                 ; rotate letter into A
68d3 88                DEY
68d4 d0 f8             BNE  _lplet            ; next bit
68d6 69 3f             ADC  #$3f              ; add offset (C = 0)
68d8 ca                DEX
68d9 f0 06             BEQ  _lastc            ; 3rd. character
68db 4b                TAZ                    ; remember
68dc 20 d2 ff          JSR  CHROUT            ; and print it
68df 80 e9             BRA  _lpmne            ; next letter

68e1 4f 6c 21 _lastc   BBR4 Op_Flag,_lbra     ; -> no Q
68e4 c9 41             CMP  #'A'              ; LDA, STA, ORA
68e6 f0 0c             BEQ  _Q3
68e8 c9 43             CMP  #'C'              ; DEC, INC
68ea d0 0f             BNE  _Q4
68ec c2 45             CPZ  #'E'              ; DEC
68ee f0 04             BEQ  _Q3
68f0 c2 4e             CPZ  #'N'              ; INC
68f2 d0 07             BNE  _Q4
68f4 a9 51    _Q3      LDA  #'Q'              ; LDQ, STQ, ORQ, INQ, DEQ
68f6 20 d2 ff          JSR  CHROUT
68f9 80 2e             BRA  _mne4
68fb 20 d2 ff _Q4      JSR  CHROUT
68fe a9 51             LDA  #'Q'              ; add Q as 4th. char
6900 20 d2 ff          JSR  CHROUT
6903 80 27             BRA  _mne5

6905 20 d2 ff _lbra    JSR  CHROUT            ; 3rd. character
6908 ef 6c 21          BBS6 Op_Flag,_mne5     ; long branch

              ;        check for 4-letter bit instructions

690b a5 6b             LDA  Op_Code
690d 29 0f             AND  #15
690f c9 07             CMP  #7                ; RMB & SMB
6911 f0 06             BEQ  _biti
6913 c9 0f             CMP  #15               ; BBR & BBS
6915 d0 12             BNE  _mne4
6917 f7 6c             SMB7 Op_Flag           ; flag two operands
6919 a5 6b    _biti    LDA  Op_Code
691b 29 70             AND  #%0111 0000
691d 0a                ASL  A
691e 2a                ROL  A
691f 2a                ROL  A
6920 2a                ROL  A
6921 2a                ROL  A
6922 09 30             ORA  #'0'
6924 20 d2 ff          JSR  CHROUT
6927 80 03             BRA  _mne5

6929 20 23 6b _mne4    JSR  Print_Blank
692c 20 23 6b _mne5    JSR  Print_Blank
692f a9 05             LDA  #WHITE
6931 20 d2 ff          JSR  CHROUT

              ;        check for accumulator operand

6934 a5 6b             LDA  Op_Code
6936 a2 08             LDX  #8
6938 ca       _lpaccu  DEX
6939 30 12             BMI  _oper
693b dd cd 73          CMP  ACCUMODE,X
693e d0 f8             BNE  _lpaccu

6940 a9 41             LDA  #'A'
6942 4f 6c 02          BBR4 Op_Flag,_accu
6945 a9 51             LDA  #'Q'
6947 20 d2 ff _accu    JSR  CHROUT
694a 4c 30 6a          JMP  _return

              ;        fetch and decode operand

694d a6 6d    _oper    LDX  Op_Size
694f f3 df 00          LBEQ _return           ; -> no operand

6952 7f 69 04          BBR7 Adr_Flags,_laba   ; bit 7: immediate
6955 a9 23             LDA  #'#'
6957 80 0a             BRA  _labb
6959 6f 69 0a _laba    BBR6 Adr_Flags,_labc   ; bit 6: left (
695c a9 28             LDA  #'('
695e 5f 6c 02          BBR5 Op_Flag,_labb
6961 a9 5b             LDA  #'['
6963 20 d2 ff _labb    JSR  CHROUT
6966 a9 24    _labc    LDA  #'$'
6968 20 d2 ff          JSR  CHROUT

              ;        fetch operand to Long_AC

696b a0 00             LDY  #0
696d 84 5a             STY  Long_AC+1
696f c8       _lpfop   INY
6970 20 c1 61          JSR  Fetch
6973 99 58 00          STA  Long_AC-1,Y
6976 c4 6d             CPY  Op_Size
6978 90 f5             BCC  _lpfop

              ;        interpret address modes

697a a6 6b             LDX  Op_Code
697c bd bd 72          LDA  LEN_ADM,X
697f 29 20             AND  #%0010 0000       ; branches
6981 d3 84 00          LBNE _rel

              ;        print 16 bit operand hi/lo or 8 bit operand

6984 5f 6c 0c          BBR5 Op_Flag,_proper
6987 a5 5a             LDA  Long_AC+1
6989 20 35 6b          JSR  Print_Hex         ; [$nn],Z
698c a9 5d             LDA  #']'
698e 20 d2 ff          JSR  CHROUT
6991 80 35             BRA  _labf

6993 a4 6d    _proper  LDY  Op_Size
6995 7f 6c 02          BBR7 Op_Flag,_lpoper
6998 a0 01             LDY  #1
699a b9 58 00 _lpoper  LDA  Long_AC-1,Y
699d 20 35 6b          JSR  Print_Hex
69a0 88                DEY
69a1 d0 f7             BNE  _lpoper

69a3 5f 69 1a          BBR5 Adr_Flags,_labe   ; comma flag
69a6 a9 2c             LDA  #','
69a8 20 d2 ff          JSR  CHROUT

69ab 4f 69 0a          BBR4 Adr_Flags,_labd   ; SP flag
69ae a9 53             LDA  #'S'
69b0 20 d2 ff          JSR  CHROUT
69b3 a9 50             LDA  #'P'
69b5 20 d2 ff          JSR  CHROUT

69b8 0f 69 05 _labd    BBR0 Adr_Flags,_labe   ; X flag
69bb a9 58             LDA  #'X'
69bd 20 d2 ff          JSR  CHROUT

69c0 3f 69 05 _labe    BBR3 Adr_Flags,_labf   ; ) flag
69c3 a9 29             LDA  #')'
69c5 20 d2 ff          JSR  CHROUT

69c8 4f 6c 08 _labf    BBR4 Op_Flag,_comch    ; not a Q instruction
69cb a5 69             LDA  Adr_Flags
69cd 29 03             AND  #3
69cf c9 01             CMP  #1
69d1 d0 5d             BNE  _return           ; Q only with ,X

69d3 2f 69 12 _comch   BBR2 Adr_Flags,_labg   ; , flag
69d6 a9 2c             LDA  #','
69d8 20 d2 ff          JSR  CHROUT

69db a5 69             LDA  Adr_Flags
69dd 29 03             AND  #%0000 0011 ; $03
69df f0 07             BEQ  _labg
69e1 a8                TAY
69e2 b9 dc 73          LDA  Index_Char-1,Y
69e5 20 d2 ff          JSR  CHROUT

              ;        fetch 2nd. operand for BBR and BBS

69e8 7f 6c 45 _labg    BBR7 Op_Flag,_return
69eb a9 2c             LDA  #','
69ed 20 d2 ff          JSR  CHROUT
69f0 a9 24             LDA  #'$'
69f2 20 d2 ff          JSR  CHROUT
69f5 a0 02             LDY  #2
69f7 20 c1 61          JSR  Fetch
69fa 85 59             STA  Long_AC
69fc a9 00             LDA  #0
69fe 85 5a             STA  Long_AC+1
6a00 88                DEY
6a01 84 6d             STY  Op_Size           ; Op_Size = 1
6a03 a9 03             LDA  #3                ; offset for relative address
6a05 80 02             BRA  _rela

6a07 a9 02    _rel     LDA  #2                ; offset for relative address
6a09 48       _rela    PHA
6a0a a5 6d             LDA  Op_Size           ; 1:short   2:long
6a0c 4a                LSR  A
6a0d 6a                ROR  A
6a0e 25 59             AND  Long_AC
6a10 10 04             BPL  _labh
6a12 a9 ff             LDA  #$ff              ; backward branch
6a14 85 5a             STA  Long_AC+1

6a16 fa       _labh    PLX                    ; offset 2 or 3
6a17 e3 59    _lpinw   INW  Long_AC
6a19 ca                DEX
6a1a d0 fb             BNE  _lpinw

6a1c 18                CLC
6a1d a5 59             LDA  Long_AC
6a1f 65 61             ADC  Long_PC
6a21 48                PHA
6a22 a5 5a             LDA  Long_AC+1
6a24 65 62             ADC  Long_PC+1
6a26 aa                TAX
6a27 68                PLA
6a28 20 1a 6b          JSR  Print_XA_Hex
6a2b 7f 6c 02          BBR7 Op_Flag,_return
6a2e e6 6d             INC  Op_Size
6a30 60       _return  RTS
6a31          EndMod [Print_Code] Size = 522 [$20a]

              **************
              Module Got_LAC
              **************

6a31 c6 6f             DEC  Buf_Index
6a33          EndMod [Got_LAC] Size = 2 [$2]

              **************
              Module Get_LAC
              **************

6a33 20 50 6a          JSR  Read_Number
6a36 b0 0f             BCS  _error            ; illegal character
6a38 f0 10             BEQ  _noval            ; no value
6a3a 20 63 6b          JSR  Got_Char          ; delimiter ?
6a3d f0 0d             BEQ  _end              ; end of input
6a3f c9 20             CMP  #' '
6a41 f0 0b             BEQ  _ok
6a43 c9 2c             CMP  #','
6a45 f0 07             BEQ  _ok
6a47 4c be 60 _error   JMP  Mon_Error         ; stack is reset in Mon_Error

6a4a 38       _noval   SEC
6a4b 60                RTS

6a4c c6 6f    _end     DEC  Buf_Index
6a4e 18       _ok      CLC
6a4f 60                RTS
6a50          EndMod [Get_LAC] Size = 29 [$1d]

              ******************
              Module Read_Number
              ******************

6a50 da                PHX
6a51 5a                PHY
6a52 db                PHZ
6a53 a9 00             LDA  #0
6a55 85 6e             STA  Dig_Cnt           ; count columns read
6a57 85 59             STA  Long_AC           ; clear result Long_AC
6a59 85 5a             STA  Long_AC+1
6a5b 85 5b             STA  Long_AC+2
6a5d 85 5c             STA  Long_AC+3

6a5f 20 56 6b          JSR  Get_Glyph         ; get 1st. character
6a62 f3 8b 00          LBEQ _exit
6a65 c9 27             CMP  #APOSTR           ; character entry 'C
6a67 d0 0b             BNE  _numeric
6a69 20 65 6b          JSR  Get_Char          ; character after '
6a6c 85 59             STA  Long_AC
6a6e e6 6e             INC  Dig_Cnt
6a70 e6 6f             INC  Buf_Index         ; position on delimiter
6a72 80 7b             BRA  _exit

6a74 a0 03    _numeric LDY  #3                ; $ + % %
6a76 d9 04 61 _prefix  CMP  Cons_Prefix,Y     ; Y = base index
6a79 f0 06             BEQ  _digit            ; -> valid prefix
6a7b 88                DEY
6a7c 10 f8             BPL  _prefix
6a7e c8                INY                    ; Y = 0
6a7f c6 6f             DEC  Buf_Index         ; character is digit

6a81 20 65 6b _digit   JSR  Get_Char          ; hex -> BCD
6a84 f0 69             BEQ  _exit             ; ? : ; and zero terminate
6a86 c9 30             CMP  #'0'
6a88 90 65             BCC  _exit
6a8a c9 3a             CMP  #':'
6a8c 90 0a             BCC  _valid            ; 0-9
6a8e c9 41             CMP  #'A'
6a90 90 5d             BCC  _exit
6a92 c9 47             CMP  #'G'
6a94 b0 59             BCS  _exit
6a96 e9 07             SBC  #7                ; hex conversion
6a98 e9 2f    _valid   SBC  #'0'-1
6a9a d9 d5 73          CMP  Num_Base,Y
6a9d b0 4d             BCS  _error
6a9f 48                PHA                    ; push digit
6aa0 e6 6e             INC  Dig_Cnt

6aa2 c0 01             CPY  #1                ; decimal
6aa4 d0 15             BNE  _laba

6aa6 a2 03             LDX  #3                ; push Long_AC
6aa8 b5 59    _push    LDA  Long_AC,X
6aaa 48                PHA
6aab ca                DEX
6aac 10 fa             BPL  _push
6aae ba                TSX                    ; double pushed value
6aaf 1e 01 01          ASL  Stack+1,X
6ab2 3e 02 01          ROL  Stack+2,X
6ab5 3e 03 01          ROL  Stack+3,X
6ab8 3e 04 01          ROL  Stack+4,X

6abb be d9 73 _laba    LDX  Num_Bits,Y
6abe 06 59    _shift   ASL  Long_AC
6ac0 26 5a             ROL  Long_AC+1
6ac2 eb 5b 00          ROW  Long_AC+2
6ac5 b0 25             BCS  _error            ; overflow
6ac7 ca                DEX
6ac8 d0 f4             BNE  _shift

6aca c0 01             CPY  #1                ; decimal adjustment
6acc d0 0e             BNE  _labc
6ace a2 00             LDX  #0
6ad0 a3 03             LDZ  #3
6ad2 18                CLC
6ad3 68       _pull    PLA
6ad4 75 59             ADC  Long_AC,X
6ad6 95 59             STA  Long_AC,X
6ad8 e8                INX
6ad9 3b                DEZ
6ada 10 f7             BPL  _pull

6adc 68       _labc    PLA                    ; pull digit
6add 18                CLC
6ade 65 59             ADC  Long_AC
6ae0 85 59             STA  Long_AC
6ae2 90 9d             BCC  _digit
6ae4 e6 5a             INC  Long_AC+1
6ae6 d0 99             BNE  _digit
6ae8 e3 5b             INW  Long_AC+2
6aea d0 95             BNE  _digit

6aec 38       _error   SEC
6aed 80 01             BRA  _return
6aef 18       _exit    CLC
6af0 fb       _return  PLZ
6af1 7a                PLY
6af2 fa                PLX
6af3 a5 6e             LDA  Dig_Cnt           ; digits read
6af5 60                RTS
6af6          EndMod [Read_Number] Size = 166 [$a6]

              **************
              Module Hex_LPC
              **************

6af6 a6 64             LDX  Long_PC+3
6af8 f0 15             BEQ  _laba
6afa a9 9e             LDA  #YELLOW
6afc 20 d2 ff          JSR  CHROUT
6aff 8a                TXA
6b00 20 35 6b          JSR  Print_Hex
6b03 a5 63             LDA  Long_PC+2
6b05 20 35 6b          JSR  Print_Hex
6b08 a9 05             LDA  #WHITE
6b0a 20 d2 ff          JSR  CHROUT
6b0d 80 07             BRA  _labb
6b0f a5 63    _laba    LDA  Long_PC+2
6b11 f0 03             BEQ  _labb
6b13 20 35 6b          JSR  Print_Hex
6b16 a6 62    _labb    LDX  Long_PC+1
6b18 a5 61             LDA  Long_PC
6b1a          EndMod [Hex_LPC] Size = 36 [$24]

              *******************
              Module Print_XA_Hex
              *******************

6b1a 48                PHA
6b1b 8a                TXA
6b1c 20 35 6b          JSR  Print_Hex
6b1f 68                PLA
6b20          EndMod [Print_XA_Hex] Size = 6 [$6]

              **********************
              Module Print_Hex_Blank
              **********************

6b20 20 35 6b          JSR  Print_Hex
6b23          EndMod [Print_Hex_Blank] Size = 3 [$3]

              ******************
              Module Print_Blank
              ******************

6b23 a9 20             LDA  #' '
6b25 4c d2 ff          JMP  CHROUT
6b28          EndMod [Print_Blank] Size = 5 [$5]

              ***************
              Module Print_CR
              ***************

6b28 a9 0d             LDA  #13
6b2a 4c d2 ff          JMP  CHROUT
6b2d          EndMod [Print_CR] Size = 5 [$5]

              ***************
              Module CR_Erase
              ***************

6b2d 20 7d ff          JSR  PRIMM
6b30 0d 1b 51          .BYTE "\r\eQ",0
6b34 60                RTS
6b35          EndMod [CR_Erase] Size = 8 [$8]

              ****************
              Module Print_Hex
              ****************

6b35 da                PHX
6b36 20 41 6b          JSR  A_To_Hex
6b39 20 d2 ff          JSR  CHROUT
6b3c 8a                TXA
6b3d fa                PLX
6b3e 4c d2 ff          JMP  CHROUT
6b41          EndMod [Print_Hex] Size = 12 [$c]

              ***************
              Module A_To_Hex
              ***************

6b41 48                PHA
6b42 20 4b 6b          JSR  _nibble
6b45 aa                TAX
6b46 68                PLA
6b47 4a                LSR  A
6b48 4a                LSR  A
6b49 4a                LSR  A
6b4a 4a                LSR  A

6b4b 29 0f    _nibble  AND  #15
6b4d c9 0a             CMP  #10
6b4f 90 02             BCC  _lab
6b51 69 06             ADC  #6
6b53 69 30    _lab     ADC  #'0'
6b55 60                RTS
6b56          EndMod [A_To_Hex] Size = 21 [$15]

              ****************
              Module Get_Glyph
              ****************
6b56 da                PHX
6b57 a9 20             LDA  #' '
6b59 a6 6f    _loop    LDX  Buf_Index
6b5b e6 6f             INC  Buf_Index
6b5d dd 00 02          CMP  Buffer,X
6b60 f0 f7             BEQ  _loop
6b62 fa                PLX                    ; fall through
6b63          EndMod [Get_Glyph] Size = 13 [$d]

              ***************
              Module Got_Char
              ***************

6b63 c6 6f             DEC  Buf_Index
6b65          EndMod [Got_Char] Size = 2 [$2]

              ***************
              Module Get_Char
              ***************

6b65 da                PHX                  ; save X
6b66 a6 6f             LDX  Buf_Index
6b68 e6 6f             INC  Buf_Index
6b6a bd 00 02          LDA  Buffer,X
6b6d e0 01             CPX  #1              ; column index
6b6f fa                PLX
6b70 90 08             BCC  _regc           ; branch at 1st. column
6b72 c9 3b             CMP  #';'            ; register ?
6b74 f0 0a             BEQ  _return
6b76 c9 3f             CMP  #'?'            ; error marker
6b78 f0 06             BEQ  _return
6b7a c9 00    _regc    CMP  #0              ; end of buffer ?
6b7c f0 02             BEQ  _return
6b7e c9 3a             CMP  #':'            ; end of statement ?
6b80 60       _return  RTS
6b81          EndMod [Get_Char] Size = 28 [$1c]


              **************
              Module Dec_LCT
              **************

6b81 a5 5d             LDA  Long_CT
6b83 05 5e             ORA  Long_CT+1
6b85 d0 02             BNE  _skip
6b87 c3 5f             DEW  Long_CT+2
6b89 c3 5d    _skip    DEW  Long_CT
6b8b a5 60             LDA  Long_CT+3         ; set N flag
6b8d 60                RTS
6b8e          EndMod [Dec_LCT] Size = 13 [$d]

              **************
              Module Add_LPC
              **************

6b8e 18                CLC
6b8f 65 61             ADC  Long_PC
6b91 85 61             STA  Long_PC
6b93 90 06             BCC  _return

              ************
6b95          Inc_LPC_Page
              ************

6b95 e6 62             INC  Long_PC+1
6b97 d0 02             BNE  _return
6b99 e3 63             INW  Long_PC+2
6b9b 60       _return  RTS

              ******************
              Module Param_Range
              ******************

              ; read two (address) parameters

              ; Long_CT = difference (2nd. minus 1st.)
              ; Long_PC = 1st. parameter
              ; Long_DA = 2nd. parameter

              ; carry on exit flags error

6b9c 20 33 6a          JSR  Get_LAC           ; get 1st. parameter
6b9f b0 12             BCS  _error
6ba1 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = 1st. address
6ba4 20 33 6a          JSR  Get_LAC
6ba7 b0 0a             BCS  _error
6ba9 20 66 61          JSR  LAC_To_LDA        ; Long_DA = 2nd. address
6bac 20 81 61          JSR  LAC_Minus_LPC     ; Long_CT = range
6baf 90 02             BCC  _error
6bb1 18                CLC
6bb2 60                RTS
6bb3 38       _error   SEC
6bb4 60                RTS
6bb5          EndMod [Param_Range] Size = 25 [$19]

              ****************
              Module Converter
              ****************

6bb5 a2 00             LDX  #0
6bb7 86 6f             STX  Buf_Index
6bb9 20 33 6a          JSR  Get_LAC
6bbc b3 00 f5          LBCS Mon_Error
6bbf a2 00             LDX  #0
6bc1 da       _loop    PHX
6bc2 20 2d 6b          JSR  CR_Erase
6bc5 bd 04 61          LDA  Cons_Prefix,X
6bc8 20 d2 ff          JSR  CHROUT
6bcb 8a                TXA
6bcc 0a                ASL  A
6bcd aa                TAX
6bce 23 da 6b          JSR  (Conv_Tab,X)
6bd1 fa                PLX
6bd2 e8                INX
6bd3 e0 05             CPX  #5
6bd5 90 ea             BCC  _loop
6bd7 4c 90 60          JMP  Main

6bda 27 6c    Conv_Tab .WORD Print_Hexval
6bdc 30 6c             .WORD Print_Decimal
6bde f8 6b             .WORD Print_Octal
6be0 f2 6b             .WORD Print_Dual
6be2 e4 6b             .WORD Print_Char
6be4          EndMod [Converter] Size = 47 [$2f]

              *****************
              Module Print_Char
              *****************

6be4 a5 59             LDA  Long_AC
6be6 c9 20             CMP  #' '
6be8 90 07             BCC  _return
6bea c9 60             CMP  #$60
6bec b0 03             BCS  _return
6bee 4c d2 ff          JMP  CHROUT
6bf1 60       _return  RTS
6bf2          EndMod [Print_Char] Size = 14 [$e]

              *****************
              Module Print_Dual
              *****************

6bf2 a2 18             LDX  #24               ; digits
6bf4 a0 01             LDY  #1                ; bits per digit
6bf6 80 04             BRA  _entry

              ***********
6bf8          Print_Octal
              ***********

6bf8 a2 08             LDX  #8                ; digits
6bfa a0 03             LDY  #3                ; bits per digit

6bfc 20 5a 61 _entry   JSR  LAC_To_LCT
6bff a3 00             LDZ  #0
6c01 64 61             STZ  Long_PC
6c03 a3 30             LDZ  #'0'
6c05 5a                PHY                    ; save start value
6c06 7a       _loopa   PLY                    ; reinitialise
6c07 5a                PHY
6c08 a9 00             LDA  #0
6c0a 06 5d    _loopb   ASL  Long_CT
6c0c eb 5e 00          ROW  Long_CT+1
6c0f 2a                ROL  A
6c10 88                DEY
6c11 d0 f7             BNE  _loopb
6c13 e0 01             CPX  #1                ; print last character
6c15 f0 04             BEQ  _skip
6c17 05 61             ORA  Long_PC
6c19 f0 07             BEQ  _next
6c1b 09 30    _skip    ORA  #'0'
6c1d 64 61             STZ  Long_PC
6c1f 20 d2 ff          JSR  CHROUT
6c22 ca       _next    DEX
6c23 d0 e1             BNE  _loopa
6c25 7a                PLY                    ; cleanup stack
6c26 60                RTS
6c27          EndMod [Print_Dual] Size = 53 [$35]

              *******************
              Module Print_Hexval
              *******************

6c27 20 4e 61         JSR  LAC_To_LPC
6c2a a9 00            LDA  #0
6c2c 85 64            STA  Long_PC+3
6c2e 80 32            BRA  Print_BCD
6c30          EndMod [Print_Hexval] Size = 9 [$9]

              ********************
              Module Print_Decimal
              ********************

              ; max $ffffff = 16777215 (8 digits)

6c30 20 5a 61          JSR  LAC_To_LCT
6c33 a2 03             LDX  #3                ; 4 BCD bytes = 8 digits
6c35 a9 00             LDA  #0
6c37 95 61    _clear   STA  Long_PC,X
6c39 ca                DEX
6c3a 10 fb             BPL  _clear

6c3c a2 20             LDX  #32               ; source bits
6c3e f8                SED
6c3f 06 5d    _loop    ASL  Long_CT
6c41 26 5e             ROL  Long_CT+1
6c43 eb 5f 00          ROW  Long_CT+2
6c46 a5 61             LDA  Long_PC
6c48 65 61             ADC  Long_PC
6c4a 85 61             STA  Long_PC
6c4c a5 62             LDA  Long_PC+1
6c4e 65 62             ADC  Long_PC+1
6c50 85 62             STA  Long_PC+1
6c52 a5 63             LDA  Long_PC+2
6c54 65 63             ADC  Long_PC+2
6c56 85 63             STA  Long_PC+2
6c58 a5 64             LDA  Long_PC+3
6c5a 65 64             ADC  Long_PC+3
6c5c 85 64             STA  Long_PC+3
6c5e ca                DEX
6c5f d0 de             BNE  _loop
6c61 d8                CLD
6c62          EndMod [Print_Decimal] Size = 50 [$32]

              ****************
              Module Print_BCD
              ****************

6c62 a9 00             LDA  #0
6c64 85 5d             STA  Long_CT
6c66 a3 30             LDZ  #'0'
6c68 a0 08             LDY  #8                ; max. digits
6c6a a2 03    _loopa   LDX  #3                ; 4 bytes
6c6c a9 00             LDA  #0
6c6e 06 61    _loopb   ASL  Long_PC
6c70 26 62             ROL  Long_PC+1
6c72 eb 63 00          ROW  Long_PC+2
6c75 2a                ROL  A
6c76 ca                DEX
6c77 10 f5             BPL  _loopb

6c79 c0 01             CPY  #1                ; print last character
6c7b f0 04             BEQ  _skip
6c7d 05 5d             ORA  Long_CT
6c7f f0 0d             BEQ  _next
6c81 09 30    _skip    ORA  #'0'
6c83 64 5d             STZ  Long_CT
6c85 c9 3a             CMP  #$3a
6c87 90 02             BCC  _print
6c89 69 06             ADC  #6                ; + carry
6c8b 20 d2 ff _print   JSR  CHROUT
6c8e 88       _next    DEY
6c8f d0 d9             BNE  _loopa
6c91 60                RTS
6c92          EndMod [Print_BCD] Size = 48 [$30]

              ****************
              Module Read_Unit
              ****************
6c92 20 50 6a          JSR  Read_Number       ; unit
6c95 b3 27 f4          LBCS Mon_Error
6c98 a5 59             LDA  Long_AC
6c9a c9 08             CMP  #8
6c9c 93 20 f4          LBCC Mon_Error
6c9f c9 10             CMP  #16
6ca1 b3 1b f4          LBCS Mon_Error
6ca4 c6 6f             DEC  Buf_Index
6ca6 60                RTS
6ca7          EndMod [Read_Unit] Size = 21 [$15]

0870          MEM_BUF = $870
087f          MEM_DIR = $87F

              *****************
              Module Copy_Files
              *****************

              ; Input: Long_CT = directory cache

6ca7 a9 24             LDA  #$24
6ca9 85 5d             STA  Long_CT
6cab a3 00    _lpent   LDZ  #0
6cad 1b       _lpquote INZ
6cae ea b2 5d          LDA  [Long_CT],Z
6cb1 c9 42             CMP  #'B'              ; BLOCKS FREE
6cb3 f3 95 00          LBEQ _exit
6cb6 c9 20             CMP  #' '
6cb8 f0 f3             BEQ  _lpquote
6cba c9 22             CMP  #QUOTE
6cbc d3 8c 00          LBNE _exit
6cbf a0 00             LDY  #0
6cc1 1b       _lpfn    INZ
6cc2 ea b2 5d          LDA  [Long_CT],Z
6cc5 c9 22             CMP  #QUOTE
6cc7 f0 0a             BEQ  _endfn
6cc9 99 0e 04          STA  Mon_Data,Y
6ccc c8                INY
6ccd c0 10             CPY  #16
6ccf 90 f0             BCC  _lpfn
6cd1 80 77             BRA  _exit
6cd3 a9 2c    _endfn   LDA  #','
6cd5 99 0e 04          STA  Mon_Data,Y
6cd8 c8                INY
6cd9 1b       _lptype  INZ
6cda ea b2 5d          LDA  [Long_CT],Z
6cdd c9 20             CMP  #' '
6cdf f0 f8             BEQ  _lptype
6ce1 99 0e 04          STA  Mon_Data,Y
6ce4 8d 0b 04          STA  File_Ext
6ce7 1b                INZ
6ce8 ea b2 5d          LDA  [Long_CT],Z
6ceb 8d 0c 04          STA  File_Ext+1
6cee 1b                INZ
6cef ea b2 5d          LDA  [Long_CT],Z
6cf2 8d 0d 04          STA  File_Ext+2
6cf5 a9 00             LDA  #0
6cf7 c8                INY
6cf8 84 b7             STY  FNLEN
6cfa 99 0e 04          STA  Mon_Data,Y
6cfd 85 59             STA  Long_AC
6cff 85 5a             STA  Long_AC+1
6d01 a9 70             LDA  #<MEM_BUF
6d03 85 5b             STA  Long_AC+2
6d05 a9 08             LDA  #>MEM_BUF
6d07 85 5c             STA  Long_AC+3

6d09 20 d2 6d          JSR  List_Filename
6d0c ad 07 04          LDA  Disk_Src
6d0f 20 43 6e          JSR  Load_File
6d12 a5 63             LDA  Long_PC+2
6d14 29 0f             AND  #15
6d16 20 41 6b          JSR  A_To_Hex
6d19 8a                TXA
6d1a 20 d2 ff          JSR  CHROUT
6d1d a6 62             LDX  Long_PC+1
6d1f a5 61             LDA  Long_PC
6d21 20 1a 6b          JSR  Print_XA_Hex
6d24 a4 b7             LDY  FNLEN
6d26 a9 2c             LDA  #','
6d28 99 0e 04          STA  Mon_Data,Y
6d2b a9 57             LDA  #'W'
6d2d 99 0f 04          STA  Mon_Data+1,Y
6d30 a9 00             LDA  #0
6d32 99 10 04          STA  Mon_Data+2,Y
6d35 ad 06 04          LDA  Disk_Unit         ; FA
6d38 20 fe 6d          JSR  Save_File

6d3b 18                CLC
6d3c a5 5d             LDA  Long_CT
6d3e 69 20             ADC  #$20
6d40 85 5d             STA  Long_CT
6d42 93 67 ff          LBCC _lpent
6d45 e6 5e             INC  Long_CT+1
6d47 d3 62 ff          LBNE _lpent
6d4a 60       _exit    RTS
6d4b          EndMod [Copy_Files] Size = 164 [$a4]

              ********************
              Module Mon_Unit_Copy
              ********************

              ; Ut=s,pattern

6d4b 20 92 6c          JSR  Read_Unit         ; target unit
6d4e 8d 06 04          STA  Disk_Unit
6d51 20 56 6b          JSR  Get_Glyph
6d54 c9 3d             CMP  #'='
6d56 d3 66 f3          LBNE Mon_Error
6d59 20 92 6c          JSR  Read_Unit         ; source unit
6d5c 8d 07 04          STA  Disk_Src
6d5f 85 ba             STA  FA
6d61 a0 ff             LDY  #-1
6d63 c8       _loopfn  INY
6d64 b9 aa 6d          LDA  _dir,Y
6d67 99 0e 04          STA  Mon_Data,Y
6d6a d0 f7             BNE  _loopfn
6d6c 20 56 6b          JSR  Get_Glyph         ; delimiter ?
6d6f aa                TAX
6d70 f0 19             BEQ  _laba
6d72 c9 2c             CMP  #','
6d74 d3 48 f3          LBNE Mon_Error
6d77 a6 6f             LDX  Buf_Index
6d79 ca                DEX
6d7a a0 02             LDY  #2
6d7c e8       _pat     INX
6d7d c8                INY
6d7e c0 12             CPY  #18
6d80 b3 3c f3          LBCS Mon_Error
6d83 bd 00 02          LDA  Buffer,X
6d86 99 0e 04          STA  Mon_Data,Y
6d89 d0 f1             BNE  _pat
6d8b a3 00    _laba    LDZ  #0
6d8d 64 b9             STZ  SA                ; loading directory
6d8f 64 59             STZ  Long_AC
6d91 64 5a             STZ  Long_AC+1
6d93 a9 7f             LDA  #<MEM_DIR
6d95 85 5b             STA  Long_AC+2
6d97 a9 08             LDA  #>MEM_DIR
6d99 85 5c             STA  Long_AC+3
6d9b 20 5a 61          JSR  LAC_To_LCT        ; Long_CT = directory pointer
6d9e ad 07 04          LDA  Disk_Src
6da1 20 43 6e          JSR  Load_File
6da4 20 a7 6c          JSR  Copy_Files
6da7 4c 90 60          JMP  Main

6daa 24 30 3a _dir     .BYTE "$0:*",0
6daf          EndMod [Mon_Unit_Copy] Size = 100 [$64]


              ********************
              Module Send_Filename
              ********************

6daf a5 ba            LDA  FA
6db1 20 b1 ff         JSR  LISTEN
6db4 a5 b9            LDA  SA
6db6 09 f0            ORA  #$f0
6db8 20 93 ff         JSR  SECOND
6dbb a0 00            LDY  #0
6dbd 84 90            STY  STATUS
6dbf b9 0e 04 _fname  LDA  Mon_Data,Y
6dc2 f0 08            BEQ  _stop
6dc4 20 a8 ff         JSR  CIOUT
6dc7 c8               INY
6dc8 c0 14            CPY  #20
6dca 90 f3            BCC  _fname
6dcc 20 ae ff _stop   JSR  UNLSN
6dcf 4c bc 6e         JMP  Get_Disk_Status
6dd2          EndMod [Send_Filename] Size = 35 [$23]

              ********************
              Module List_Filename
              ********************
6dd2 20 2d 6b         JSR  CR_Erase
6dd5 a0 ff            LDY  #-1
6dd7 c8       _loop   INY
6dd8 b9 0e 04         LDA  Mon_Data,Y
6ddb c9 2c            CMP  #','
6ddd f0 05            BEQ  _fill
6ddf 20 d2 ff         JSR  CHROUT
6de2 80 f3            BRA  _loop
6de4 a9 20    _fill   LDA  #' '
6de6 20 d2 ff _blank  JSR  CHROUT
6de9 c8               INY
6dea c0 10            CPY  #16
6dec 90 f8            BCC  _blank
6dee a0 00            LDY  #0
6df0 b9 0b 04 _ext    LDA  File_Ext,Y
6df3 20 d2 ff         JSR  CHROUT
6df6 c8               INY
6df7 c0 03            CPY  #3
6df9 90 f5            BCC  _ext
6dfb 4c 23 6b         JMP  Print_Blank
6dfe          EndMod [List_Filename] Size = 44 [$2c]

              ****************
              Module Save_File
              ****************

              ; Input : (Long_AC) = start address
              ;         (Long_PC) = last  address

6dfe 85 ba            STA  FA
6e00 a2 01            LDX  #1
6e02 86 b9            STX  SA
6e04 20 af 6d         JSR  Send_Filename
6e07 d0 37            BNE  _error
6e09 a5 ba            LDA  FA
6e0b 20 b1 ff         JSR  LISTEN
6e0e a5 b9            LDA  SA
6e10 09 60            ORA  #$60
6e12 20 93 ff         JSR  SECOND
6e15 a3 00            LDZ  #0
6e17 64 90            STZ  STATUS
6e19 ea b2 59 _loop   LDA  [Long_AC],Z
6e1c 20 a8 ff         JSR  CIOUT
6e1f d4 61            CPZ  Long_PC
6e21 d0 0c            BNE  _cont
6e23 a5 5a            LDA  Long_AC+1
6e25 c5 62            CMP  Long_PC+1
6e27 d0 06            BNE  _cont
6e29 a5 5b            LDA  Long_AC+2
6e2b c5 63            CMP  Long_PC+2
6e2d f0 0b            BEQ  _stop

6e2f a6 90    _cont   LDX  STATUS
6e31 d0 07            BNE  _stop
6e33 1b               INZ
6e34 d0 e3            BNE  _loop
6e36 e3 5a            INW  Long_AC+1
6e38 d0 df            BNE  _loop
6e3a 20 ae ff _stop   JSR  UNLSN
6e3d 4c 77 6e         JMP  Close_File
6e40 4c fd 6e _error  JMP  Print_Disk_Msg
6e43          EndMod [Save_File] Size = 69 [$45]

              ****************
              Module Load_File
              ****************

              ; Input : (Long_AC) = start address
              ; Output: (Long_PC) = last  address

6e43 85 ba            STA  FA
6e45 a2 00            LDX  #0
6e47 86 b9            STX  SA
6e49 20 4e 61         JSR  LAC_To_LPC      ; Long_PC = load address
6e4c 20 af 6d         JSR  Send_Filename
6e4f d0 35            BNE  _error
6e51 a5 ba            LDA  FA
6e53 20 b4 ff         JSR  TALK
6e56 a5 b9            LDA  SA
6e58 09 60            ORA  #$60
6e5a 20 96 ff         JSR  TKSA
6e5d a3 00            LDZ  #0
6e5f 64 90            STZ  STATUS
6e61 20 a5 ff _loop   JSR  ACPTR
6e64 ea 92 61         STA  [Long_PC],Z
6e67 a6 90            LDX  STATUS
6e69 d0 07            BNE  _stop
6e6b 1b               INZ
6e6c d0 f3            BNE  _loop
6e6e e3 62            INW  Long_PC+1
6e70 d0 ef            BNE  _loop
6e72 64 61    _stop   STZ  Long_PC
6e74 20 ab ff         JSR  UNTALK

              **********
6e77          Close_File
              **********

6e77 a5 ba            LDA  FA
6e79 20 b1 ff         JSR  LISTEN
6e7c a5 b9            LDA  SA
6e7e 09 e0            ORA  #$e0
6e80 20 93 ff         JSR  SECOND
6e83 4c ae ff         JMP  UNLSN
6e86 4c fd 6e _error  JMP  Print_Disk_Msg
6e89          EndMod [Load_File] Size = 70 [$46]

              ***************
              Module Mon_Disk
              ***************

6e89 c6 6f             DEC  Buf_Index
6e8b a6 6f             LDX  Buf_Index
6e8d bd 00 02          LDA  Buffer,X
6e90 f0 68             BEQ  Print_Disk_Status
6e92 85 5d             STA  Long_CT           ; dir marker
6e94 a0 ff             LDY  #$ff              ; SA = 15
6e96 c9 24             CMP  #'$'
6e98 d0 02             BNE  _lab
6e9a a0 f0             LDY  #$f0              ; SA =  0
6e9c a5 ba    _lab     LDA  FA
6e9e 20 b1 ff          JSR  LISTEN
6ea1 98                TYA                    ; SA
6ea2 20 93 ff          JSR  SECOND
6ea5 bd 00 02 _loop    LDA  Buffer,X
6ea8 f0 06             BEQ  _close
6eaa 20 a8 ff          JSR  CIOUT
6ead e8                INX
6eae 80 f5             BRA  _loop
6eb0 20 ae ff _close   JSR  UNLSN
6eb3 a5 5d             LDA  Long_CT
6eb5 c9 24             CMP  #'$'
6eb7 d0 41             BNE  Print_Disk_Status
6eb9 4c 4b 6f          JMP  Directory

6ebc          EndMod [Mon_Disk] Size = 51 [$33]

              **********************
              Module Get_Disk_Status
              **********************

6ebc a5 ba             LDA  FA
6ebe 20 b4 ff          JSR  TALK
6ec1 a9 6f             LDA  #$6f
6ec3 20 96 ff          JSR  TKSA
6ec6 20 a5 ff          JSR  ACPTR             ; 1st. digit
6ec9 8d 36 04          STA  Disk_Msg
6ecc 0a                ASL  A
6ecd 0a                ASL  A
6ece 0a                ASL  A
6ecf 0a                ASL  A
6ed0 8d 0a 04          STA  Disk_Status       ; BCD
6ed3 20 a5 ff          JSR  ACPTR             ; 2nd. digit
6ed6 8d 37 04          STA  Disk_Msg+1
6ed9 29 0f             AND  #15
6edb 0d 0a 04          ORA  Disk_Status
6ede 8d 0a 04          STA  Disk_Status       ; complete BCD number

6ee1 a0 01             LDY  #1
6ee3 c8       _loop    INY
6ee4 20 a5 ff          JSR  ACPTR
6ee7 99 36 04          STA  Disk_Msg,Y
6eea c9 20             CMP  #' '
6eec b0 f5             BCS  _loop
6eee a9 00             LDA  #0
6ef0 99 36 04          STA  Disk_Msg,Y
6ef3 20 ab ff          JSR  UNTALK
6ef6 ad 0a 04          LDA  Disk_Status
6ef9 60                RTS
6efa          EndMod [Get_Disk_Status] Size = 62 [$3e]

              ************************
              Module Print_Disk_Status
              ************************

6efa 20 bc 6e          JSR  Get_Disk_Status

              **************
6efd          Print_Disk_Msg
              **************

6efd 20 28 6b          JSR  Print_CR
6f00 a0 00             LDY  #0
6f02 b9 36 04 _loop    LDA  Disk_Msg,Y
6f05 f0 06             BEQ  _exit
6f07 20 d2 ff          JSR  CHROUT
6f0a c8                INY
6f0b 80 f5             BRA  _loop
6f0d 4c 28 6b _exit    JMP  Print_CR
6f10          EndMod [Print_Disk_Status] Size = 22 [$16]

              ; @[u] : print disk status for unit u
              ; @[u],$[=pattern] : print directory
              ; @[u],command : send disk command and read status
              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)
              ; @[u],U2 mem track startsec [endsec] : write disk sector(s)

              **************
              Module Mon_DOS
              **************

6f10 a2 08             LDX  #8                ; default device
6f12 20 56 6b          JSR  Get_Glyph
6f15 c9 30             CMP  #'0'
6f17 90 17             BCC  _unit
6f19 c9 3a             CMP  #':'
6f1b b0 13             BCS  _unit
6f1d c6 6f             DEC  Buf_Index
6f1f 20 50 6a          JSR  Read_Number
6f22 b0 0c             BCS  _unit
6f24 a6 59             LDX  Long_AC           ; unit
6f26 e0 04             CPX  #4
6f28 93 94 f1          LBCC Mon_Error
6f2b e0 1f             CPX  #31
6f2d b3 8f f1          LBCS Mon_Error
6f30 86 ba    _unit    STX  FA
6f32 c6 6f             DEC  Buf_Index
6f34 20 65 6b _next    JSR  Get_Char
6f37 f0 0c             BEQ  _status           ; only @u
6f39 c9 20             CMP  #' '
6f3b f0 f7             BEQ  _next
6f3d c9 2c             CMP  #','
6f3f f0 f3             BEQ  _next
6f41 c9 55             CMP  #'U'              ; sector read/write
6f43 f0 4e             BEQ  DOS_U
6f45 20 89 6e _status  JSR  Mon_Disk
6f48 4c 90 60          JMP  Main
6f4b          EndMod [Mon_DOS] Size = 59 [$3b]

              ****************
              Module Directory
              ****************

6f4b a5 ba             LDA  FA
6f4d 20 b4 ff          JSR  TALK
6f50 a9 60             LDA  #$60
6f52 85 b9             STA  SA
6f54 20 96 ff          JSR  TKSA
6f57 a9 00             LDA  #0
6f59 85 90             STA  STATUS

6f5b a3 06             LDZ  #6                ; load address, pseudo link, pseudo number
6f5d aa       _loopb   TAX                    ; X = previous byte
6f5e 20 a5 ff          JSR  ACPTR             ; A = current  byte
6f61 a4 90             LDY  STATUS
6f63 d0 2b             BNE  _exit
6f65 3b                DEZ
6f66 d0 f5             BNE  _loopb            ; X/A = last read word

6f68 86 59             STX  Long_AC
6f6a 85 5a             STA  Long_AC+1
6f6c 64 5b             STZ  Long_AC+2
6f6e 64 5c             STZ  Long_AC+3
6f70 20 30 6c          JSR  Print_Decimal     ; file size
6f73 20 23 6b          JSR  Print_Blank

6f76 20 a5 ff _loopc   JSR  ACPTR             ; print file entry
6f79 f0 09             BEQ  _cr
6f7b a4 90             LDY  STATUS
6f7d d0 11             BNE  _exit
6f7f 20 d2 ff          JSR  CHROUT
6f82 90 f2             BCC  _loopc

6f84 20 28 6b _cr      JSR  Print_CR
6f87 20 e1 ff          JSR  STOP
6f8a f0 04             BEQ  _exit
6f8c a3 04             LDZ  #4
6f8e 80 cd             BRA  _loopb            ; next file
6f90 4c ab ff _exit    JMP  UNTALK
6f93          EndMod [Directory] Size = 72 [$48]

              ************
              Module DOS_U
              ************

6f93 20 65 6b          JSR  Get_Char
6f96 c9 31             CMP  #'1'            ; U1: read
6f98 93 24 f1          LBCC Mon_Error
6f9b c9 33             CMP  #'3'            ; U2: write
6f9d b3 1f f1          LBCS Mon_Error
6fa0 8d 0f 04          STA  Mon_Data+1      ; U type
6fa3 e6 6f             INC  Buf_Index
6fa5 20 33 6a          JSR  Get_LAC
6fa8 b3 14 f1          LBCS Mon_Error
6fab 20 4e 61          JSR  LAC_To_LPC      ; Long_PC = memory address

6fae 20 33 6a          JSR  Get_LAC
6fb1 b3 0b f1          LBCS Mon_Error
6fb4 a5 59             LDA  Long_AC
6fb6 8d 08 04          STA  Disk_Track

6fb9 20 33 6a          JSR  Get_LAC
6fbc b3 00 f1          LBCS Mon_Error
6fbf a5 59             LDA  Long_AC
6fc1 8d 09 04          STA  Disk_Sector

6fc4 20 33 6a          JSR  Get_LAC
6fc7 20 5a 61          JSR  LAC_To_LCT        ; Long_CT = sector count
6fca c3 5d             DEW  Long_CT           ; Long_CT = -1 for single

6fcc 20 ca 70          JSR  Open_Disk_Buffer

6fcf ad 0f 04 _loop    LDA  Mon_Data+1
6fd2 4a                LSR  A
6fd3 f0 0a             BEQ  _write
6fd5 20 fa 6f          JSR  Find_Next_Sector
6fd8 d0 17             BNE  _error
6fda 20 54 70          JSR  Read_Sector
6fdd 80 08             BRA  _next

6fdf 20 6e 70 _write   JSR  Write_Sector
6fe2 20 fa 6f          JSR  Find_Next_Sector
6fe5 d0 0a             BNE  _error

6fe7 20 95 6b _next    JSR  Inc_LPC_Page
6fea ee 09 04          INC  Disk_Sector
6fed c3 5d             DEW  Long_CT
6fef 10 de             BPL  _loop

6ff1 20 fd 6e _error   JSR  Print_Disk_Msg
6ff4 20 e6 70          JSR  Close_Disk_Buffer
6ff7 4c 90 60          JMP  Main
6ffa          EndMod [DOS_U] Size = 103 [$67]

              ***********************
              Module Find_Next_Sector
              ***********************

6ffa 20 a8 70          JSR  Build_U_String
6ffd 20 43 70          JSR  Send_Disk_Command
7000 20 bc 6e          JSR  Get_Disk_Status
7003 f0 1d             BEQ  _return           ; OK
7005 c9 66             CMP  #$66              ; illegal track or sector
7007 d0 13             BNE  _error            ; error
7009 a9 00             LDA  #0
700b 8d 09 04          STA  Disk_Sector
700e ee 08 04          INC  Disk_Track        ; try next track
7011 20 a8 70          JSR  Build_U_String
7014 20 43 70          JSR  Send_Disk_Command
7017 20 bc 6e          JSR  Get_Disk_Status
701a f0 06             BEQ  _return
701c 20 fd 6e _error   JSR  Print_Disk_Msg
701f ad 0a 04          LDA  Disk_Status
7022 60       _return  RTS
7023          EndMod [Find_Next_Sector] Size = 41 [$29]

              ***************************
              Module Open_Command_Channel
              ***************************

7023 a5 ba             LDA  FA
7025 20 b1 ff          JSR  LISTEN
7028 a9 ff             LDA  #$ff
702a 20 93 ff          JSR  SECOND
702d a0 00             LDY  #0
702f 84 90             STY  STATUS
7031 60                RTS
7032          EndMod [Open_Command_Channel] Size = 15 [$f]

              ***************
              Module Reset_BP
              ***************

7032 20 23 70          JSR  Open_Command_Channel
7035 b9 ef 73 _loop    LDA  BP_ZERO,Y
7038 f0 06             BEQ  _end
703a 20 a8 ff          JSR  CIOUT
703d c8                INY
703e 80 f5             BRA  _loop
7040 4c ae ff _end     JMP  UNLSN
7043          EndMod [Reset_BP] Size = 17 [$11]

              ************************
              Module Send_Disk_Command
              ************************

7043 20 23 70          JSR  Open_Command_Channel
7046 b9 0e 04 _loop    LDA  Mon_Data,Y
7049 f0 06             BEQ  _end
704b 20 a8 ff          JSR  CIOUT
704e c8                INY
704f 80 f5             BRA  _loop
7051 4c ae ff _end     JMP  UNLSN
7054          EndMod [Send_Disk_Command] Size = 17 [$11]

              ******************
              Module Read_Sector
              ******************

7054 a5 ba             LDA  FA
7056 20 b4 ff          JSR  TALK
7059 a9 69             LDA  #$69              ; SA = 9
705b 20 96 ff          JSR  TKSA
705e a3 00             LDZ  #0
7060 64 90             STZ  STATUS
7062 20 a5 ff _loop    JSR  ACPTR
7065 ea 92 61          STA  [Long_PC],Z
7068 1b                INZ
7069 d0 f7             BNE  _loop
706b 4c ab ff          JMP  UNTALK
706e          EndMod [Read_Sector] Size = 26 [$1a]

              ******************
              Module Write_Sector
              ******************

706e 20 32 70          JSR  Reset_BP          ; reset disk buffer pointer
7071 a5 ba             LDA  FA
7073 20 b1 ff          JSR  LISTEN
7076 a9 69             LDA  #$69              ; SA = 9
7078 20 96 ff          JSR  TKSA
707b a3 00             LDZ  #0
707d 64 90             STZ  STATUS
707f ea b2 61 _loop    LDA  [Long_PC],Z
7082 20 a8 ff          JSR  CIOUT
7085 1b                INZ
7086 d0 f7             BNE  _loop
7088 20 ae ff          JSR  UNLSN
708b 60                RTS
708c          EndMod [Write_Sector] Size = 30 [$1e]

              *************
              Module Set_TS
              *************

              ; Input  A = track or sector
              ;        X = string index

708c c9 64    _100      CMP  #100
708e 90 07              BCC  _10
7090 fe 0e 04           INC  Mon_Data,X
7093 e9 64              SBC  #100
7095 80 f5              BRA  _100
7097 c9 0a    _10       CMP  #10
7099 90 07              BCC  _1
709b fe 0f 04           INC  Mon_Data+1,X
709e e9 0a              SBC  #10
70a0 80 f5              BRA  _10
70a2 09 30    _1        ORA  #'0'
70a4 9d 10 04           STA  Mon_Data+2,X
70a7 60                 RTS
70a8          EndMod [Set_TS] Size = 28 [$1c]

              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)

              ; U1:CHANNEL DRIVE TRACK SECTOR

              *********************
              Module Build_U_String
              *********************

70a8 a2 0e             LDX  #14
70aa bd e0 73 _loop    LDA  U1,X
70ad 9d 0e 04          STA  Mon_Data,X
70b0 ca                DEX
70b1 e0 02             CPX  #2
70b3 b0 f5             BCS  _loop
70b5 a9 55             LDA  #'U'
70b7 8d 0e 04          STA  Mon_Data
70ba ad 08 04          LDA  Disk_Track
70bd a2 07             LDX  #7
70bf 20 8c 70          JSR  Set_TS
70c2 ad 09 04          LDA  Disk_Sector
70c5 a2 0b             LDX  #11
70c7 4c 8c 70          JMP  Set_TS
70ca          EndMod [Build_U_String] Size = 34 [$22]

              ***********************
              Module Open_Disk_Buffer
              ***********************

70ca a9 00             LDA  #0
70cc 85 90             STA  STATUS
70ce a5 ba             LDA  FA
70d0 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
70d3 a9 f9             LDA  #$f9            ; sa = 9
70d5 20 93 ff          JSR  SECOND
70d8 a9 23             LDA  #'#'            ; open buffer
70da 20 a8 ff          JSR  CIOUT
70dd 20 ae ff          JSR  UNLSN
70e0 a5 90             LDA  STATUS
70e2 d3 16 fe          LBNE Print_Disk_Status
70e5 60                RTS
70e6          EndMod [Open_Disk_Buffer] Size = 28 [$1c]

              ************************
              Module Close_Disk_Buffer
              ************************

70e6 a9 00             LDA  #0
70e8 85 90             STA  STATUS
70ea a5 ba             LDA  FA
70ec 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
70ef a9 e9             LDA  #$e9            ; sa = 9
70f1 20 93 ff          JSR  SECOND
70f4 20 ae ff          JSR  UNLSN
70f7 a5 90             LDA  STATUS
70f9 d3 ff fd          LBNE Print_Disk_Status
70fc 60                RTS
70fd          EndMod [Close_Disk_Buffer] Size = 23 [$17]


              ; The 3 letter mnemonics are encoded as three 5-bit values
              ; and stored in a left byte MNE_L and a right byte MNE_R
              ; The 5 bit value is computed by subtracting $3f from the
              ; ASCII value, so '?'-> 0, '@'->1, 'A'->2, 'B'->3,'Z'->27
              ; For example "ADC" is encoded as 2, 5, 4
              ; ----------------
              ; 7654321076543210
              ; 00010
              ;      00101
              ;           00100
              ;                0
              ;
              ; The operator >" stores the left (high) byte of the packed value
              ; The operator <" stores the right (low) byte of the packed value

              *****
70fd          MNE_L
              *****

70fd 11                .BYTE >"ADC"
70fe 13                .BYTE >"AND"
70ff 15                .BYTE >"ASL"
7100 15                .BYTE >"ASR"
7101 15                .BYTE >"ASW"
7102 18                .BYTE >"BBR"
7103 18                .BYTE >"BBS"
7104 19                .BYTE >"BCC"
7105 19                .BYTE >"BCS"
7106 19                .BYTE >"BEQ"
7107 1a                .BYTE >"BIT"
7108 1b                .BYTE >"BMI"
7109 1b                .BYTE >"BNE"
710a 1c                .BYTE >"BPL"
710b 1c                .BYTE >"BRA"
710c 1c                .BYTE >"BRK"
710d 1d                .BYTE >"BSR"
710e 1d                .BYTE >"BVC"
710f 1d                .BYTE >"BVS"
7110 23                .BYTE >"CLC"
7111 23                .BYTE >"CLD"
7112 23                .BYTE >"CLE"
7113 23                .BYTE >"CLI"
7114 23                .BYTE >"CLV"
7115 23                .BYTE >"CMP"
7116 24                .BYTE >"CPX"
7117 24                .BYTE >"CPY"
7118 24                .BYTE >"CPZ"
7119 29                .BYTE >"DEC"
711a 29                .BYTE >"DEW"
711b 29                .BYTE >"DEX"
711c 29                .BYTE >"DEY"
711d 29                .BYTE >"DEZ"
711e 34                .BYTE >"EOR"
711f 53                .BYTE >"INC"
7120 53                .BYTE >"INW"
7121 53                .BYTE >"INX"
7122 53                .BYTE >"INY"
7123 53                .BYTE >"INZ"
7124 5b                .BYTE >"JMP"
7125 5d                .BYTE >"JSR"
7126 69                .BYTE >"LDA"
7127 69                .BYTE >"LDX"
7128 69                .BYTE >"LDY"
7129 69                .BYTE >"LDZ"
712a 6d                .BYTE >"LSR"
712b 70                .BYTE >"MAP"
712c 79                .BYTE >"NEG"
712d 7c                .BYTE >"NOP"
712e 84                .BYTE >"ORA"
712f 8a                .BYTE >"PHA"
7130 8a                .BYTE >"PHP"
7131 8a                .BYTE >"PHW"
7132 8a                .BYTE >"PHX"
7133 8a                .BYTE >"PHY"
7134 8a                .BYTE >"PHZ"
7135 8b                .BYTE >"PLA"
7136 8b                .BYTE >"PLP"
7137 8b                .BYTE >"PLX"
7138 8b                .BYTE >"PLY"
7139 8b                .BYTE >"PLZ"
713a 9b                .BYTE >"RMB"
713b 9c                .BYTE >"ROL"
713c 9c                .BYTE >"ROR"
713d 9c                .BYTE >"ROW"
713e 9d                .BYTE >"RTI"
713f 9d                .BYTE >"RTS"
7140 a0                .BYTE >"SBC"
7141 a1                .BYTE >"SEC"
7142 a1                .BYTE >"SED"
7143 a1                .BYTE >"SEE"
7144 a1                .BYTE >"SEI"
7145 a3                .BYTE >"SMB"
7146 a5                .BYTE >"STA"
7147 a5                .BYTE >"STX"
7148 a5                .BYTE >"STY"
7149 a5                .BYTE >"STZ"
714a a8                .BYTE >"TAB"
714b a8                .BYTE >"TAX"
714c a8                .BYTE >"TAY"
714d a8                .BYTE >"TAZ"
714e a8                .BYTE >"TBA"
714f ac                .BYTE >"TRB"
7150 ad                .BYTE >"TSB"
7151 ad                .BYTE >"TSX"
7152 ad                .BYTE >"TSY"
7153 ae                .BYTE >"TXA"
7154 ae                .BYTE >"TXS"
7155 ae                .BYTE >"TYA"
7156 ae                .BYTE >"TYS"
7157 ae                .BYTE >"TZA"

              *****
7158          MNE_R
              *****

7158 48                .BYTE <"ADC" ; 00
7159 ca                .BYTE <"AND" ; 01
715a 1a                .BYTE <"ASL" ; 02
715b 26                .BYTE <"ASR" ; 03
715c 30                .BYTE <"ASW" ; 04
715d e6                .BYTE <"BBR" ; 05
715e e8                .BYTE <"BBS" ; 06
715f 08                .BYTE <"BCC" ; 07
7160 28                .BYTE <"BCS" ; 08
7161 a4                .BYTE <"BEQ" ; 09
7162 aa                .BYTE <"BIT" ; 0a
7163 94                .BYTE <"BMI" ; 0b
7164 cc                .BYTE <"BNE" ; 0c
7165 5a                .BYTE <"BPL" ; 0d
7166 c4                .BYTE <"BRA" ; 0e
7167 d8                .BYTE <"BRK" ; 0f
7168 26                .BYTE <"BSR" ; 10
7169 c8                .BYTE <"BVC" ; 11
716a e8                .BYTE <"BVS" ; 12
716b 48                .BYTE <"CLC" ; 13
716c 4a                .BYTE <"CLD" ; 14
716d 4c                .BYTE <"CLE" ; 15
716e 54                .BYTE <"CLI" ; 16
716f 6e                .BYTE <"CLV" ; 17
7170 a2                .BYTE <"CMP" ; 18
7171 72                .BYTE <"CPX" ; 19
7172 74                .BYTE <"CPY" ; 1a
7173 76                .BYTE <"CPZ" ; 1b
7174 88                .BYTE <"DEC" ; 1c
7175 b0                .BYTE <"DEW" ; 1d
7176 b2                .BYTE <"DEX" ; 1e
7177 b4                .BYTE <"DEY" ; 1f
7178 b6                .BYTE <"DEZ"
7179 26                .BYTE <"EOR"
717a c8                .BYTE <"INC"
717b f0                .BYTE <"INW"
717c f2                .BYTE <"INX"
717d f4                .BYTE <"INY"
717e f6                .BYTE <"INZ"
717f a2                .BYTE <"JMP"
7180 26                .BYTE <"JSR"
7181 44                .BYTE <"LDA"
7182 72                .BYTE <"LDX"
7183 74                .BYTE <"LDY"
7184 76                .BYTE <"LDZ"
7185 26                .BYTE <"LSR"
7186 a2                .BYTE <"MAP"
7187 90                .BYTE <"NEG"
7188 22                .BYTE <"NOP"
7189 c4                .BYTE <"ORA"
718a 44                .BYTE <"PHA"
718b 62                .BYTE <"PHP"
718c 70                .BYTE <"PHW"
718d 72                .BYTE <"PHX"
718e 74                .BYTE <"PHY"
718f 76                .BYTE <"PHZ"
7190 44                .BYTE <"PLA"
7191 62                .BYTE <"PLP"
7192 72                .BYTE <"PLX"
7193 74                .BYTE <"PLY"
7194 76                .BYTE <"PLZ"
7195 86                .BYTE <"RMB"
7196 1a                .BYTE <"ROL"
7197 26                .BYTE <"ROR"
7198 30                .BYTE <"ROW"
7199 54                .BYTE <"RTI"
719a 68                .BYTE <"RTS"
719b c8                .BYTE <"SBC"
719c 88                .BYTE <"SEC"
719d 8a                .BYTE <"SED"
719e 8c                .BYTE <"SEE"
719f 94                .BYTE <"SEI"
71a0 86                .BYTE <"SMB"
71a1 44                .BYTE <"STA"
71a2 72                .BYTE <"STX"
71a3 74                .BYTE <"STY"
71a4 76                .BYTE <"STZ"
71a5 86                .BYTE <"TAB"
71a6 b2                .BYTE <"TAX"
71a7 b4                .BYTE <"TAY"
71a8 b6                .BYTE <"TAZ"
71a9 c4                .BYTE <"TBA"
71aa c6                .BYTE <"TRB"
71ab 06                .BYTE <"TSB"
71ac 32                .BYTE <"TSX"
71ad 34                .BYTE <"TSY"
71ae 44                .BYTE <"TXA"
71af 68                .BYTE <"TXS"
71b0 84                .BYTE <"TYA"
71b1 a8                .BYTE <"TYS"
71b2 c4                .BYTE <"TZA"

              *********
71b3          MNE_Index
              *********

              ; an index for all 256 opcodes, describing
              ; where to find the 3-letter mnemonic

71b3 0f 31 15          .BYTE $0f,$31,$15,$46,$53,$31,$02,$3d
71bb 33 31 02          .BYTE $33,$31,$02,$55,$53,$31,$02,$05
71c3 0d 31 31          .BYTE $0d,$31,$31,$0d,$52,$31,$02,$3d
71cb 13 31 22          .BYTE $13,$31,$22,$26,$52,$31,$02,$05
71d3 28 01 28          .BYTE $28,$01,$28,$28,$0a,$01,$3e,$3d
71db 39 01 3e          .BYTE $39,$01,$3e,$59,$0a,$01,$3e,$05
71e3 0b 01 01          .BYTE $0b,$01,$01,$0b,$0a,$01,$3e,$3d
71eb 44 01 1c          .BYTE $44,$01,$1c,$20,$0a,$01,$3e,$05
71f3 41 21 2f          .BYTE $41,$21,$2f,$03,$03,$21,$2d,$3d
71fb 32 21 2d          .BYTE $32,$21,$2d,$50,$27,$21,$2d,$05
7203 11 21 21          .BYTE $11,$21,$21,$11,$03,$21,$2d,$3d
720b 16 21 36          .BYTE $16,$21,$36,$4d,$2e,$21,$2d,$05
7213 42 00 42          .BYTE $42,$00,$42,$10,$4c,$00,$3f,$3d
721b 38 00 3f          .BYTE $38,$00,$3f,$5a,$27,$00,$3f,$05
7223 12 00 00          .BYTE $12,$00,$00,$12,$4c,$00,$3f,$3d
722b 47 00 3b          .BYTE $47,$00,$3b,$51,$27,$00,$3f,$05
7233 0e 49 49          .BYTE $0e,$49,$49,$0e,$4b,$49,$4a,$48
723b 1f 0a 56          .BYTE $1f,$0a,$56,$4b,$4b,$49,$4a,$06
7243 07 49 49          .BYTE $07,$49,$49,$07,$4b,$49,$4a,$48
724b 58 49 57          .BYTE $58,$49,$57,$4a,$4c,$49,$4c,$06
7253 2b 29 2a          .BYTE $2b,$29,$2a,$2c,$2b,$29,$2a,$48
725b 4f 29 4e          .BYTE $4f,$29,$4e,$2c,$2b,$29,$2a,$06
7263 08 29 29          .BYTE $08,$29,$29,$08,$2b,$29,$2a,$48
726b 17 29 54          .BYTE $17,$29,$54,$2c,$2b,$29,$2a,$06
7273 1a 18 1b          .BYTE $1a,$18,$1b,$1d,$1a,$18,$1c,$48
727b 25 18 1e          .BYTE $25,$18,$1e,$04,$1a,$18,$1c,$06
7283 0c 18 18          .BYTE $0c,$18,$18,$0c,$1b,$18,$1c,$48
728b 14 18 35          .BYTE $14,$18,$35,$37,$1b,$18,$1c,$06
7293 19 43 29          .BYTE $19,$43,$29,$23,$19,$43,$22,$48
729b 24 43 30          .BYTE $24,$43,$30,$40,$19,$43,$22,$06
72a3 09 43 43          .BYTE $09,$43,$43,$09,$34,$43,$22,$48
72ab 45 43 3a          .BYTE $45,$43,$3a,$3c,$34,$43,$22,$06

              *****
72b3          BRAIN
              *****

              ;              index values for branch mnemonics

              ;              BCC BCS BEQ BMI BNE BPL BRA BSR BVC BVS
72b3 07 08 09          .BYTE $07,$08,$09,$0b,$0c,$0d,$0e,$10,$11,$12

              *******
72bd          LEN_ADM
              *******

              ; a table of instruction length, flags
              ; and address mode for all 256 opcodes

              ; 7-6: operand length %00.. 0: implied
              ;                     %01.. 1: direct page, indirect
              ;                     %10.. 2: absolute, etc.
              ;                     %11.. 3: BBR and BBS

              ;   5: relative       %0110 0000 $60 short branch
              ;                     %1010 0000 $a0 long  branch

              ;   4:

              ; 3-0: index of address mode


72bd 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $00
72c5 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $08
72cd 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $10
72d5 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $18
72dd 80 44 8b          .BYTE $80,$44,$8b,$84,$40,$40,$40,$40 ; $20
72e5 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $28
72ed 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $30
72f5 00 88 00          .BYTE $00,$88,$00,$00,$87,$87,$87,$c0 ; $38
72fd 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $40
7305 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $48
730d 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $50
7315 00 88 00          .BYTE $00,$88,$00,$00,$00,$87,$87,$c0 ; $58
731d 00 44 41          .BYTE $00,$44,$41,$a0,$40,$40,$40,$40 ; $60
7325 00 41 00          .BYTE $00,$41,$00,$00,$8b,$80,$80,$c0 ; $68
732d 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $70
7335 00 88 00          .BYTE $00,$88,$00,$00,$84,$87,$87,$c0 ; $78
733d 60 44 4d          .BYTE $60,$44,$4d,$a0,$40,$40,$40,$40 ; $80
7345 00 41 00          .BYTE $00,$41,$00,$87,$80,$80,$80,$c0 ; $88
734d 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $90
7355 00 88 00          .BYTE $00,$88,$00,$88,$80,$87,$87,$c0 ; $98
735d 41 44 41          .BYTE $41,$44,$41,$41,$40,$40,$40,$40 ; $a0
7365 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $a8
736d 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $b0
7375 00 88 00          .BYTE $00,$88,$00,$87,$87,$87,$88,$c0 ; $b8
737d 41 44 41          .BYTE $41,$44,$41,$40,$40,$40,$40,$40 ; $c0
7385 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $c8
738d 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $d0
7395 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $d8
739d 41 44 4d          .BYTE $41,$44,$4d,$40,$40,$40,$40,$40 ; $e0
73a5 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $e8
73ad 60 45 46          .BYTE $60,$45,$46,$a0,$81,$47,$47,$40 ; $f0
73b5 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $f8

              ******
73bd          ADMODE
              ******

              ; printout flags for 16 address modes
              ;               76543210
              ;               --------
              ;            7  x         #
              ;            6   x        (
              ;            5    x       ,
              ;            4     x      SP
              ;            3      x     )
              ;            2       x    ,
              ;            1/0      xx  01:X  10:Y  11:Z

73bd 00                .BYTE %00000000 ; 0             implicit/direct
73be 80                .BYTE %10000000 ; 1 #$nn        immediate
73bf 00                .BYTE %00000000 ; 2             ----------
73c0 00                .BYTE %00000000 ; 3             ----------
73c1 69                .BYTE %01101001 ; 4 ($nn,X)     indirect X
73c2 4e                .BYTE %01001110 ; 5 ($nn),Y     indirect Y
73c3 4f                .BYTE %01001111 ; 6 ($nn),Z     indirect Z
73c4 05                .BYTE %00000101 ; 7 $nn,X       indexed  X
73c5 06                .BYTE %00000110 ; 8 $nn,Y       indexed  Y
73c6 05                .BYTE %00000101 ; 9 $nn,X       indexed  X
73c7 06                .BYTE %00000110 ; a $nn,Y       ----------
73c8 48                .BYTE %01001000 ; b ($nnnn,X)   JMP & JSR
73c9 69                .BYTE %01101001 ; c ($nn,X)     ----------
73ca 7e                .BYTE %01111110 ; d ($nn,SP),Y  LDA & STA
73cb 00                .BYTE %00000000 ; e
73cc 04                .BYTE %00000100 ; f

              ;              ASL INC ROL DEC LSR ROR NEG ASR
73cd 0a 1a 2a ACCUMODE .BYTE $0a,$1a,$2a,$3a,$4a,$6a,$42,$43

73d5 10 0a 08 Num_Base .BYTE 16,10, 8, 2 ; hex, dec, oct, bin
73d9 04 03 03 Num_Bits .BYTE  4, 3, 3, 1 ; hex, dec, oct, bin

73dd 58 59 5a Index_Char .BYTE "XYZ"

              ;                0123456789abcd
73e0 55 31 3a U1        .BYTE "U1:9 0 000 000",0 ; channel 9, drive, track, sector
73ef 42 2d 50 BP_ZERO   .BYTE "B-P 9 0",0        ; set buffer pointer to 0

              ***************
              Module Reg_Text
              ***************
73f7 20 7d ff          JSR  PRIMM
73fa 0d 20 20          .BYTE "\r    PC   SR AC XR YR ZR BP  SP  NVEBDIZC\r; \eQ",0
7429 60                RTS
742a          EndMod [Reg_Text] Size = 51 [$33]

              ***************
              Module Mon_Help
              ***************
742a 20 7d ff    JSR PRIMM

742d 96 41 05    .BYTE LRED,"A",WHITE,"SSEMBLE     - A ADDRESS MNEMONIC OPERAND",CR
7459 96 42 05    .BYTE LRED,"B",WHITE,"ITMAPS      - B [FROM]",CR
7473 96 43 05    .BYTE LRED,"C",WHITE,"OMPARE      - C FROM TO WITH",CR
7493 96 44 05    .BYTE LRED,"D",WHITE,"ISASSEMBLE  - D [FROM [TO]]",CR
74b2 96 46 05    .BYTE LRED,"F",WHITE,"ILL         - F FROM TO FILLBYTE",CR
74d6 96 47 05    .BYTE LRED,"G",WHITE,"O           - G [ADDRESS]",CR
74f3 96 48 05    .BYTE LRED,"H",WHITE,"UNT         - H FROM TO (STRING OR BYTES)",CR
7520 96 4a 05    .BYTE LRED,"J",WHITE,"SR          - J ADDRESS",CR
753b 96 4c 05    .BYTE LRED,"L",WHITE,"OAD         - L FILENAME [UNIT [ADDRESS]]",CR
7568 96 4d 05    .BYTE LRED,"M",WHITE,"EMORY       - M [FROM [TO]]",CR
7587 96 52 05    .BYTE LRED,"R",WHITE,"EGISTERS    - R",CR
759a 96 53 05    .BYTE LRED,"S",WHITE,"AVE         - S FILENAME UNIT FROM TO",CR
75c3 96 54 05    .BYTE LRED,"T",WHITE,"RANSFER     - T FROM TO TARGET",CR
75e5 96 56 05    .BYTE LRED,"V",WHITE,"ERIFY       - V FILENAME [UNIT [ADDRESS]]",CR
7612 45 96 58    .BYTE "E",LRED,"X",WHITE,"IT         - X",CR
7625 96 2e 05    .BYTE LRED,".",WHITE,"<DOT>       - . ADDRESS MNEMONIC OPERAND",CR
7651 96 3e 05    .BYTE LRED,">",WHITE,"<GREATER>   - > ADDRESS BYTE SEQUENCE",CR
767a 96 3b 05    .BYTE LRED,";",WHITE,"<SEMICOLON> - ; REGISTER CONTENTS",CR
769f 96 40 05    .BYTE LRED,"@",WHITE,"DOS         - @ [DOS COMMAND]",CR
76c0 96 3f 05    .BYTE LRED,"?",WHITE,"HELP        - ?",CR
76d3 00          .BYTE 0
76d4 4c 90 60    JMP Main
76d7          End_Mod

76d7 ff ff ff          .FILL $8000-* ($ff) ; 2345 bytes


  481 Symbols
-------------
Bank                           $0002    45D   299    302    352    360
                                       525    527    530    779
PCH                            $0003    46D   287    295    325
PCL                            $0004    47D   293    296    324
SR                             $0005    48D   376
WHITE                          $0005    31D   479    739    747    893
                                       907   1824   2118   3508   3509
                                      3510   3511   3512   3513   3514
                                      3515   3516   3517   3518   3519
                                      3520   3521   3522   3523   3524
                                      3525   3526   3527
AC                             $0006    49D   316
XR                             $0007    50
YR                             $0008    51
ZR                             $0009    52
BP                             $000a    58
SPH                            $000b    59D   334    368
SPL                            $000c    60D   336    370    819    830
                                       834
CR                             $000d    35D   406    460   1514   3508
                                      3509   3510   3511   3512   3513
                                      3514   3515   3516   3517   3518
                                      3519   3520   3521   3522   3523
                                      3524   3525   3526   3527
REV                            $0012    36D   460
CRIGHT                         $001d    37D   437
QUOTE                          $0022    38D  1055   1062   2494   2499
APOSTR                         $0027    39D   992   2019
Long_AC                        $0059    73D   226    228    236    240
                                       524    526    528    529    540
                                       554    568    583    585    599
                                       615    627    629    637    638
                                       640    641    778    796    937
                                       939    949    951    972    974
                                      1007   1076   1085   1086   1126
                                      1127   1128   1132   1247   1250
                                      1417   1419   1420   1428   1429
                                      1484   1493   1552   1559   1561
                                      1562   1564   1761   1763   1770
                                      1771   1861   1864   1878   1887
                                      1936   1938   1949   1952   1955
                                      1960   1963   2012   2013   2014
                                      2015   2022   2056   2067   2068
                                      2069   2080   2081   2088   2089
                                      2091   2093   2335   2467   2525
                                      2526   2528   2530   2599   2600
                                      2602   2604   2680   2684   2687
                                      2695   2849   2888   2889   2890
                                      2891   2927   2932
Long_CT                        $005d    74D   229    230    232    233
                                       237    241    555    584    601
                                       698    699    702   1412   1418
                                      1426   1427   1632   1644   1647
                                      2248   2249   2251   2252   2253
                                      2367   2368   2410   2411   2412
                                      2435   2449   2452   2486   2489
                                      2498   2510   2516   2519   2554
                                      2556   2558   2754   2769   2937
                                      2955
Long_PC                        $0061    75D   541    600    616    649
                                       651    674    676    751    797
                                       799    843    845    861    863
                                       946    948    969    971   1092
                                      1111   1112   1133   1479   1482
                                      1485   1494   1500   1522   1526
                                      1560   1563   1961   1964   2110
                                      2116   2121   2124   2125   2262
                                      2263   2270   2272   2361   2374
                                      2377   2391   2404   2413   2414
                                      2415   2416   2417   2418   2419
                                      2420   2421   2422   2423   2424
                                      2440   2441   2442   2535   2540
                                      2541   2682   2685   2688   2723
                                      2728   2730   3035   3052
Long_DA                        $0065    76D   569    659    660    662
                                       663    718    721    724    740
                                       748    749    934    936   1015
                                      1023   1149   1185   1186   1195
                                      1199
Adr_Flags                      $0069    80D  1709   1847   1850   1892
                                      1896   1902   1906   1911   1916
                                      1920
Mode_Flags                     $006a    81D  1243   1271   1280   1290
                                      1302   1312   1322   1335   1349
                                      1363   1377   1393   1439   1457
                                      1460   1575   1596   1605   1616
                                      1617
Op_Code                        $006b    82D  1215   1233   1234   1416
                                      1443   1473   1481   1499   1574
                                      1690   1701   1748   1758   1804
                                      1811   1829   1870
Op_Flag                        $006c    83D  1150   1170   1282   1332
                                      1445   1476   1671   1682   1699
                                      1716   1724   1752   1782   1800
                                      1810   1837   1852   1877   1885
                                      1910   1929   1968
Op_Size                        $006d    87D  1474   1475   1486   1505
                                      1506   1641   1642   1646   1715
                                      1717   1731   1844   1865   1884
                                      1940   1946   1969
Dig_Cnt                        $006e    88D  2011   2023   2050   2102
Buf_Index                      $006f    89D   410   1058   1071   1260
                                      1977   1998   2024   2033   2208
                                      2209   2219   2227   2228   2306
                                      2472   2587   2750   2751   2846
                                      2855   2920
STATUS                         $0090    94D  1046   1103   2625   2679
                                      2691   2721   2724   2878   2883
                                      2897   2994   3033   3051   3111
                                      3119   3129   3135
VERCK                          $0093    95D   446   1087   1096   1104
LRED                           $0096    33D   747    891    905   3508
                                      3509   3510   3511   3512   3513
                                      3514   3515   3516   3517   3518
                                      3519   3520   3521   3522   3523
                                      3524   3525   3526   3527
YELLOW                         $009e    32D   460   1746   2112
FNLEN                          $00b7    96D  1044   1065   2523   2543
SA                             $00b9    97D  1041   1091   1114   2598
                                      2621   2670   2675   2711   2717
                                      2739   2875
FA                             $00ba    98D  1039   1077   2576   2619
                                      2668   2673   2709   2715   2737
                                      2759   2780   2854   2872   2989
                                      3028   3046   3112   3130
FNADR                          $00bb    99D  1048   1050   1064
BA                             $00bd   100D  1043   1081
FNBANK                         $00be   101D  1045
NDX                            $00d0   103
MODE_80                        $00d7   104D   696    758    802    889
                                       903
B_Margin                       $00e4   106
T_Margin                       $00e5   107
L_Margin                       $00e6   108
R_Margin                       $00e7   109
QTSW                           $00f4   111D   859
Stack                          $0100   113D  2061   2062   2063   2064
Buffer                         $0200   114D   402    411   1059   1517
                                      1519   1528   1532   1540   2210
                                      2229   2594   2752   2763
IIRQ                           $0314   116
IBRK                           $0316   117
EXMON                          $032e   118
Ix_Mne                         $0400   122D  1205   1401   1584
Op_Mne                         $0401   123D  1167   1173   1180
Op_Ix                          $0404   124D  1151   1253   1256   1299
                                      1333   1347   1361   1375   1391
                                      1402
Op_Len                         $0405   125D  1152   1255   1455   1461
                                      1464   1612
Disk_Unit                      $0406   126D  1038   2550   2570
Disk_Src                       $0407   127D  2533   2575   2606
Disk_Track                     $0408   128D  2928   2975   3098
Disk_Sector                    $0409   129D  2933   2954   2974   3101
Disk_Status                    $040a   130D  2790   2794   2795   2806
                                      2981
File_Ext                       $040b   131D  2514   2517   2520   2653
Mon_Data                       $040e   133D   998   1008   1020   1047
                                      1049   2501   2507   2513   2524
                                      2545   2547   2549   2580   2595
                                      2626   2642   2919   2941   3016
                                      3069   3074   3078   3092   3097
Disk_Msg                       $0436   134D  2785   2792   2800   2804
                                      2822
MEM_BUF                        $0870  2476D  2527   2529
MEM_DIR                        $087f  2477D  2601   2603
header                         $1fff   185
Link                           $2029   197D   189
header_loop                    $205a   236D   239    243
Monitor_Call                   $6000   257
Monitor_Break                  $6003   263
Monitor_Switch                 $6006   269
Mon_Break                      $6009   275D   266
Mon_Break_loop                 $6019   286D   289
Mon_Break_nopage               $6025   296D   294
Mon_Break_bank                 $6030   301D   299
Mon_Call                       $6036   307D   260
Mon_Call_loop                  $603d   316D   318
Mon_Call_store                 $6046   324
Mon_Start                      $604a   329D   303
Mon_Register                   $6058   344D   495
Mon_Register_loopa             $605d   352D   356
Mon_Register_loopb             $6068   360D   364
Mon_Register_loopc             $6081   377D   385
Mon_Register_flag              $6089   382D   380
Main                           $6090   389D   413    440    710    766
                                       783    810    835    944    956
                                       981   1027   1031   1094   1106
                                      1109   1137   1156   1639   1649
                                      2322   2609   2865   2960   3529
Main_A                         $6095   398D  1545
Main_loop                      $6095   401D   407
Main_getcomm                   $60ab   412D   415
Mon_Switch                     $60b4   419D   272
Mon_Switch_loop                $60b6   423D   426
Mon_Error                      $60be   431D   405    694    922    924
                                       964    966    989    996   1052
                                      1056   1069   1089   1100   1105
                                      1123   1125   1129   1145   1203
                                      1226   1228   1238   1245   1248
                                      1334   1337   1341   1348   1355
                                      1362   1367   1376   1383   1390
                                      1392   1395   1407   1411   1413
                                      1440   1456   1458   1635   1993
                                      2308   2466   2469   2471   2573
                                      2586   2593   2851   2853   2916
                                      2918   2922   2926   2931
Mon_Select                     $60cb   443D   424
Print_Commands                 $60d8   456D   280    310
Command_Char                   $60f2   463D   423
Cons_Prefix                    $6104   470D  2028   2312
Load_Save_Verify               $6109   476
Jump_Table                     $610f   483D   452
LAC_To_PC                      $613d   511D   774    818    829
LAC_To_PC_error                $614d   531D   523
LAC_To_LPC                     $614e   535D   689    737    792   1080
                                      1146   1628   2289   2389   2712
                                      2923
LAC_To_LPC_loop                $6151   540D   543
LAC_To_LCT                     $615a   549D  1259   2359   2401   2605
                                      2936
LAC_To_LCT_loop                $615d   554D   557
LAC_To_LDA                     $6166   563D  2292
LAC_To_LDA_loop                $6169   568D   571
LAC_Plus_LCT                   $6172   577D   932
LAC_Plus_LCT_loop              $6176   583D   587
LAC_Minus_LPC                  $6181   593D   693   1634   2293
LAC_Minus_LPC_loop             $6185   599D   603
LAC_Compare_LPC                $6190   609D   927
LAC_Compare_LPC_loop           $6194   615D   618
Inc_LAC                        $619d   624D   953    977
Inc_LAC_return                 $61a3   630D   628
Dec_LAC                        $61a4   634D   941
Dec_LAC_skip                   $61ac   641D   639
Inc_LPC                        $61af   646D   762    952    978   1028
                                      1134
Inc_LPC_return                 $61b5   652D   650
Dec_LDA                        $61b6   656D   940
Dec_LDA_skip                   $61be   663D   661
Fetch                          $61c1   668D  1019   1672   1679   1689
                                      1695   1700   1727   1863   1935
Fetch_banked                   $61c8   676D   674
Mon_Memory                     $61ce   683D   494
Mon_Memory_shift               $61e9   698D   696    701
Mon_Memory_row                 $61f4   705D   688    691    709
Mon_Memory_exit                $61ff   710D   706
Print_Bits                     $6202   714D   752
Print_Bits_loop                $6207   720D   726
Print_Bits_set                 $620e   723D   721
Mon_Bits                       $6218   732D   487
Mon_Bits_lab                   $6220   738D   736
Mon_Bits_row                   $6229   743D   765
Mon_Bits_col                   $622f   746D   760
Mon_Bits_next                  $624b   760D   758
Mon_Set_Register               $625a   770D   502
Mon_Set_Register_loop          $6262   776D   782
Mon_Set_Register_exit          $6271   783D   777
Mon_Set_Memory                 $6274   787D   501
Mon_Set_Memory_loop            $627e   794D   804
Mon_Set_Memory_banked          $6289   799D   797
Mon_Set_Memory_next            $6293   804D   802
Mon_Set_Memory_exit            $6295   806D   791    795
Mon_Go                         $62a2   814D   491
Mon_JSR                        $62ae   825D   493
Dump_4_Bytes                   $62c0   839D   892    894
Dump_4_Bytes_loop              $62c3   843D   850
Dump_4_Bytes_banked            $62c7   845D   843
Dump_4_Chars                   $62d3   855D   906    908
Dump_4_Chars_loop              $62da   861D   873
Dump_4_Chars_banked            $62de   863D   861
Dump_4_Chars_laba              $62e7   868D   866
Dump_Row                       $62f2   878D   707    809
Dump_Row_loop                  $6306   891D   889    896
Dump_Row_lchr                  $6320   905D   903    910
Mon_Transfer                   $6333   918D   496
Mon_Transfer_lpback            $6349   934D   943
Mon_Transfer_rb                $634d   936D   934
Mon_Transfer_wb                $6353   939D   937
Mon_Transfer_forward           $6363   946D   928    955
Mon_Transfer_rf                $6367   948D   946
Mon_Transfer_wf                $636d   951D   949
Mon_Compare                    $637d   960D   488
Mon_Compare_loop               $638e   969D   980
Mon_Compare_rf                 $6392   971D   969
Mon_Compare_cf                 $6398   974D   972
Mon_Compare_laba               $639f   977D   975
Mon_Hunt                       $63ad   985D   492
Mon_Hunt_lpstr                 $63c4   998D  1003
Mon_Hunt_bin                   $63d3  1006D   993
Mon_Hunt_lpbin                 $63d6  1007D  1013
Mon_Hunt_hunt                  $63e5  1015D  1001   1004   1011
Mon_Hunt_lpstart               $63ea  1018D  1030
Mon_Hunt_lpins                 $63ec  1019D  1024
Mon_Hunt_next                  $63fc  1026D  1021
Load_Save                      $640d  1035D   448
Load_Save_skip                 $6428  1051D  1054
Load_Save_copyfn               $6439  1059D  1068
Load_Save_unit                 $644f  1071D  1063
Load_Save_exit                 $6485  1094D  1103
Load_Save_do                   $6488  1096D  1060   1073   1075   1079
                                      1115
Load_Save_exec                 $6495  1102D  1098
Load_Save_load                 $64b0  1111D  1083
Mon_Fill                       $64ba  1119D   490
Mon_Fill_loop                  $64d4  1132D  1136
Mon_Assemble                   $64e4  1141D   486    500
Mon_Assemble_start             $64ed  1148D  1159
Mon_Assemble_getin             $64f9  1153D  1176
Mon_Assemble_laba              $6503  1158D  1154
Mon_Assemble_labb              $6519  1173D  1164   1166   1169
Mon_Assemble_lpenc             $6521  1180D  1190
Mon_Assemble_lpbit             $6529  1184D  1188
Mon_Assemble_lpfind            $6538  1196D  1202
Mon_Assemble_nxfind            $6544  1201D  1197
Mon_Assemble_found             $654a  1205D  1200
Mon_Assemble_lpopc             $6550  1211D  1214
Mon_Assemble_exopc             $6558  1215D  1212
Mon_Assemble_labc              $657e  1242D  1222
Mon_Assemble_labd              $6580  1243D  1274   1284   1293   1313
                                      1326   1339   1357   1369   1385
                                      1397
Mon_Assemble_labf              $6596  1253D  1251
Mon_Assemble_labg              $65a6  1260D  1246   1258
Mon_Assemble_lpnop             $65a8  1262D  1265
Mon_Assemble_lbra              $65be  1278D  1270
Mon_Assemble_indir             $65cc  1288D  1279
Mon_Assemble_comma             $65d8  1297D  1289
Mon_Assemble_comma1            $65f5  1311D  1303   1305   1307
Mon_Assemble_stack             $65fb  1317D  1298
Mon_Assemble_rbra              $6611  1330D  1318
Mon_Assemble_error             $662a  1341D  1272   1281   1291   1300
                                      1310   1321   1324   1332
Mon_Assemble_right             $662d  1345D  1331
Mon_Assemble_right1            $6646  1356D  1351   1353
Mon_Assemble_X                 $664b  1359D  1346
Mon_Assemble_X1                $6660  1368D  1365
Mon_Assemble_Y                 $6665  1373D  1360
Mon_Assemble_Y1                $667e  1384D  1379   1381
Mon_Assemble_Z                 $6683  1389D  1374
Mon_Assemble_adjust            $669a  1401D  1263
Mon_Assemble_BB                $66b2  1412D  1409
Mon_Assemble_one               $66ca  1426D  1405
Mon_Assemble_lpbrain           $66d4  1431D  1434
Mon_Assemble_branch            $66de  1439D  1432
Mon_Assemble_bran1             $66f2  1448D  1445
Mon_Assemble_match             $66f4  1452D  1403   1435
Mon_Assemble_lpmatch           $66f7  1453D  1463
Mon_Assemble_okmat             $6713  1464D  1454
Mon_Assemble_store             $6717  1473D  1422   1448
Mon_Assemble_storen            $6737  1489D  1476
Mon_Assemble_lpsto             $673b  1493D  1497
Mon_Assemble_store1            $6745  1499D  1491
Mon_Assemble_print             $674a  1502D  1487
Mon_Assemble_auto              $6778  1525D  1523   1537
Branch_Target                  $679f  1549D  1415   1442   1554
Match_Mode                     $67b2  1569D  1453
Match_Mode_loop                $67b6  1576D  1585
Match_Mode_next                $67bb  1581D  1586
Match_Mode_error               $67c8  1588D  1582
Match_Mode_return              $67c9  1589D  1577
Mode_Index                     $67ca  1593D  1452
Mode_Index_loop                $67ce  1598D  1602
Mode_Index_found               $67da  1605D  1599
Size_To_Mode                   $67dc  1609D  1462
Mon_Disassemble                $67e9  1623D   489
Mon_Disassemble_nopar          $67f6  1631D  1627
range                          $67fc  1634D  1630
Mon_Disassemble_loop           $6802  1637D  1633   1648
Dis_Code                       $6821  1653D  1640
Print_Code                     $6827  1661D  1504
Print_Code_nop                 $6844  1688D  1677   1681
Print_Code_normal              $6862  1704D  1693   1698
Print_Code_norm1               $687b  1718D  1716
Print_Code_blpr                $6884  1726D  1724
Print_Code_lphex               $6887  1727D  1733
Print_Code_lpfill              $6896  1737D  1742
Print_Code_long                $68a4  1746D  1730   1738
Print_Code_locate              $68b9  1758D  1751
Print_Code_lpmne               $68ca  1768D  1780
Print_Code_lplet               $68ce  1770D  1774
Print_Code_lastc               $68e1  1782D  1777
Print_Code_Q3                  $68f4  1791D  1784   1788
Print_Code_Q4                  $68fb  1794D  1786   1790
Print_Code_lbra                $6905  1799D  1782
Print_Code_biti                $6919  1811D  1807
Print_Code_mne4                $6929  1822D  1793   1809
Print_Code_mne5                $692c  1823D  1797   1800   1820
Print_Code_lpaccu              $6938  1831D  1834
Print_Code_accu                $6947  1839D  1837
Print_Code_oper                $694d  1844D  1832
Print_Code_laba                $6959  1850D  1847
Print_Code_labb                $6963  1854D  1849   1852
Print_Code_labc                $6966  1855D  1850
Print_Code_lpfop               $696f  1862D  1866
Print_Code_proper              $6993  1884D  1877
Print_Code_lpoper              $699a  1887D  1885   1890
Print_Code_labd                $69b8  1902D  1896
Print_Code_labe                $69c0  1906D  1892   1902
Print_Code_labf                $69c8  1910D  1882   1906
Print_Code_comch               $69d3  1916D  1910
Print_Code_labg                $69e8  1929D  1916   1922
Print_Code_rel                 $6a07  1944D  1873
Print_Code_rela                $6a09  1945D  1942
Print_Code_labh                $6a16  1954D  1950
Print_Code_lpinw               $6a17  1955D  1957
Print_Code_return              $6a30  1970D  1840   1845   1914   1929
                                      1968
Got_LAC                        $6a31  1974D  1006
Get_LAC                        $6a33  1981D   686    690    735    773
                                       776    790    794    817    828
                                       923    965   1010   1074   1078
                                      1082   1124   1144   1626   1629
                                      2287   2290   2307   2921   2925
                                      2930   2935
Get_LAC_error                  $6a47  1993D  1985
Get_LAC_noval                  $6a4a  1995D  1986
Get_LAC_end                    $6a4c  1998D  1988
Get_LAC_ok                     $6a4e  1999D  1990   1992
Read_Number                    $6a50  2004D  1244   1984   2465   2847
Read_Number_numeric            $6a74  2027D  2020
Read_Number_prefix             $6a76  2028D  2031
Read_Number_digit              $6a81  2035D  2029   2090   2092   2094
Read_Number_valid              $6a98  2046D  2040
Read_Number_push               $6aa8  2056D  2059
Read_Number_laba               $6abb  2066D  2053
Read_Number_shift              $6abe  2067D  2072
Read_Number_pull               $6ad3  2079D  2084
Read_Number_labc               $6adc  2086D  2075
Read_Number_error              $6aec  2096D  2048   2070
Read_Number_exit               $6aef  2098D  2018   2025   2036   2038
                                      2042   2044
Read_Number_return             $6af0  2099D  2097
Hex_LPC                        $6af6  2107D   744    885    976   1025
                                      1666
Hex_LPC_laba                   $6b0f  2121D  2111
Hex_LPC_labb                   $6b16  2124D  2120   2122
Print_XA_Hex                   $6b1a  2129D  1967   2542
Print_Hex_Blank                $6b20  2139D   361    371    846   1728
Print_Blank                    $6b23  2146D  1822   1823   2658   2893
Print_CR                       $6b28  2154D   392    738    761    882
                                       967   1016   1084   1130   2820
                                      2827   2902
CR_Erase                       $6b2d  2162D  1637   2311   2639
Print_Hex                      $6b35  2171D   353    369   1879   1888
                                      2115   2117   2123   2134   2142
A_To_Hex                       $6b41  2183D  1527   2175   2537
A_To_Hex_nibble                $6b4b  2195D  2187
A_To_Hex_lab                   $6b53  2199D  2197
Get_Glyph                      $6b56  2204D  2017   2571   2582   2841
Get_Glyph_loop                 $6b59  2208D  2211
Got_Char                       $6b63  2216D  1987
Get_Char                       $6b65  2223D   412    991    994   1000
                                      1051   1072   1153   1224   1236
                                      1262   1319   2021   2035   2856
                                      2914
Get_Char_regc                  $6b7a  2237D  2232
Get_Char_return                $6b80  2240D  2234   2236   2238
Dec_LCT                        $6b81  2245D   942    954    979   1029
                                      1135
Dec_LCT_skip                   $6b89  2252D  2250
Add_LPC                        $6b8e  2258D   912   1507   1643   1684
Inc_LPC_Page                   $6b95  2267D  2953
Add_LPC_return                 $6b9b  2273D  2264   2271
Param_Range                    $6b9c  2276D   921    963    988   1122
Param_Range_error              $6bb3  2297D  2288   2291   2294
Converter                      $6bb5  2302D   504    505    506    507
                                       508
Converter_loop                 $6bc1  2310D  2321
Conv_Tab                       $6bda  2324D  2317
Print_Char                     $6be4  2332D  2328
Print_Char_return              $6bf1  2341D  2337   2339
Print_Dual                     $6bf2  2345D  2327
Print_Octal                    $6bf8  2353D  2326
Print_Dual_entry               $6bfc  2359D  2350
Print_Dual_loopa               $6c06  2364D  2380
Print_Dual_loopb               $6c0a  2367D  2371
Print_Dual_skip                $6c1b  2376D  2373
Print_Dual_next                $6c22  2379D  2375
Print_Hexval                   $6c27  2386D  2324
Print_Decimal                  $6c30  2396D  2325   2892
Print_Decimal_clear            $6c37  2404D  2406
Print_Decimal_loop             $6c3f  2410D  2426
Print_BCD                      $6c62  2431D  2392
Print_BCD_loopa                $6c6a  2438D  2458
Print_BCD_loopb                $6c6e  2440D  2445
Print_BCD_skip                 $6c81  2451D  2448
Print_BCD_print                $6c8b  2456D  2454
Print_BCD_next                 $6c8e  2457D  2450
Read_Unit                      $6c92  2463D  2569   2574
Copy_Files                     $6ca7  2480D  2608
Copy_Files_lpent               $6cab  2487D  2557   2559
Copy_Files_lpquote             $6cad  2488D  2493
Copy_Files_lpfn                $6cc1  2497D  2504
Copy_Files_endfn               $6cd3  2506D  2500
Copy_Files_lptype              $6cd9  2509D  2512
Copy_Files_exit                $6d4a  2560D  2491   2495   2505
Mon_Unit_Copy                  $6d4b  2564D   497
Mon_Unit_Copy_loopfn           $6d63  2578D  2581
Mon_Unit_Copy_pat              $6d7c  2590D  2596
Mon_Unit_Copy_laba             $6d8b  2597D  2584
Mon_Unit_Copy_dir              $6daa  2611D  2579
Send_Filename                  $6daf  2616D  2671   2713
Send_Filename_fname            $6dbf  2626D  2631
Send_Filename_stop             $6dcc  2632D  2627
List_Filename                  $6dd2  2637D  2532
List_Filename_loop             $6dd7  2641D  2646
List_Filename_fill             $6de4  2647D  2644
List_Filename_blank            $6de6  2648D  2651
List_Filename_ext              $6df0  2653D  2657
Save_File                      $6dfe  2662D  2551
Save_File_loop                 $6e19  2680D  2694   2696
Save_File_cont                 $6e2f  2691D  2683   2686
Save_File_stop                 $6e3a  2697D  2689   2692
Save_File_error                $6e40  2699D  2672
Load_File                      $6e43  2703D  2534   2607
Load_File_loop                 $6e61  2722D  2727   2729
Load_File_stop                 $6e72  2730D  2725
Close_File                     $6e77  2734D  2698
Load_File_error                $6e86  2743D  2714
Mon_Disk                       $6e89  2747D  2864
Mon_Disk_lab                   $6e9c  2759D  2757
Mon_Disk_loop                  $6ea5  2763D  2767
Mon_Disk_close                 $6eb0  2768D  2764
Get_Disk_Status                $6ebc  2777D  2633   2814   2969   2978
Get_Disk_Status_loop           $6ee3  2798D  2802
Print_Disk_Status              $6efa  2811D  2753   2771   3120   3136
Print_Disk_Msg                 $6efd  2817D  2699   2743   2958   2980
Print_Disk_Status_loop         $6f02  2822D  2826
Print_Disk_Status_exit         $6f0d  2827D  2823
Mon_DOS                        $6f10  2837D   499
Mon_DOS_unit                   $6f30  2854D  2843   2845   2848
Mon_DOS_next                   $6f34  2856D  2859   2861
Mon_DOS_status                 $6f45  2864D  2857
Directory                      $6f4b  2869D  2772
Directory_loopb                $6f5d  2881D  2886   2906
Directory_loopc                $6f76  2895D  2900
Directory_cr                   $6f84  2902D  2896
Directory_exit                 $6f90  2907D  2884   2898   2904
DOS_U                          $6f93  2911D  2863
DOS_U_loop                     $6fcf  2941D  2956
DOS_U_write                    $6fdf  2949D  2943
DOS_U_next                     $6fe7  2953D  2947
DOS_U_error                    $6ff1  2958D  2945   2951
Find_Next_Sector               $6ffa  2964D  2944   2950
Find_Next_Sector_error         $701c  2980D  2972
Find_Next_Sector_return        $7022  2982D  2970   2979
Open_Command_Channel           $7023  2986D  3002   3015
Reset_BP                       $7032  2999D  3045
Reset_BP_loop                  $7035  3003D  3007
Reset_BP_end                   $7040  3008D  3004
Send_Disk_Command              $7043  3012D  2968   2977
Send_Disk_Command_loop         $7046  3016D  3020
Send_Disk_Command_end          $7051  3021D  3017
Read_Sector                    $7054  3025D  2946
Read_Sector_loop               $7062  3034D  3037
Write_Sector                   $706e  3042D  2949
Write_Sector_loop              $707f  3052D  3055
Set_TS_100                     $708c  3067D  3071
Set_TS                         $708c  3061D  3100   3103
Set_TS_10                      $7097  3072D  3068   3076
Set_TS_1                       $70a2  3077D  3073
Build_U_String                 $70a8  3087D  2967   2976
Build_U_String_loop            $70aa  3091D  3095
Open_Disk_Buffer               $70ca  3107D  2939
Close_Disk_Buffer              $70e6  3125D  2959
MNE_L                          $70fd  3157D  1196   1760
MNE_R                          $7158  3253D  1198   1762
MNE_Index                      $71b3  3349D  1211   1583   1759
BRAIN                          $72b3  3389D  1431
LEN_ADM                        $72bd  3398D  1576   1704   1749   1871
ADMODE                         $73bd  3452D  1598   1708
ACCUMODE                       $73cd  3484D  1833
Num_Base                       $73d5  3486D  2047
Num_Bits                       $73d9  3487D  2066
Index_Char                     $73dd  3489D  1924
U1                             $73e0  3492D  3091
BP_ZERO                        $73ef  3493D  3003
Reg_Text                       $73f7  3496D   347
Mon_Help                       $742a  3504D   503
End_Mod                        $76d7  3530
EXIT                           $cfaf   136D   322    323    498
SETBNK                         $ff6b   138
JSRFAR                         $ff6e   139D   832
JMPFAR                         $ff71   140D   821
LDA_FAR                        $ff74   141
STA_FAR                        $ff77   142
CMP_FAR                        $ff7a   143
PRIMM                          $ff7d   144D   278    436    459    806
                                       898   1107   1502   1513   1656
                                      1739   2165   3498   3506
CINT                           $ff81   145
IOINIT                         $ff84   146
SETMSG                         $ff90   147D   338
SECOND                         $ff93   148D  2623   2677   2741   2762
                                      2992   3115   3133
TKSA                           $ff96   149D  2719   2783   2876   3031
                                      3049
MEMTOP                         $ff99   150
MEMBOT                         $ff9c   151
KEY                            $ff9f   152
SETTMO                         $ffa2   153
ACPTR                          $ffa5   154D  2722   2784   2791   2799
                                      2882   2895   3034
CIOUT                          $ffa8   155D  2628   2681   2765   3005
                                      3018   3053   3117
UNTALK                         $ffab   156D  2731   2805   2907   3038
UNLSN                          $ffae   157D  2632   2697   2742   2768
                                      3008   3021   3056   3118   3134
LISTEN                         $ffb1   158D  2620   2674   2738   2760
                                      2990   3047   3113   3131
TALK                           $ffb4   159D  2716   2781   2873   3029
READSS                         $ffb7   160
SETLFS                         $ffba   161
SETNAM                         $ffbd   162
OPEN                           $ffc0   163
CLOSE                          $ffc3   164
CHKIN                          $ffc6   165
CHKOUT                         $ffc9   166
CLRCHN                         $ffcc   167
CHRIN                          $ffcf   168D   401
CHROUT                         $ffd2   169D   382    723    750    842
                                       860    869    884   1529   1533
                                      1541   1726   1747   1754   1779
                                      1792   1794   1796   1799   1819
                                      1825   1839   1854   1856   1881
                                      1894   1898   1900   1904   1908
                                      1918   1925   1931   1933   2113
                                      2119   2150   2158   2176   2179
                                      2313   2340   2378   2456   2539
                                      2645   2648   2654   2824   2899
LOAD                           $ffd5   170D  1102
SAVE                           $ffd8   171D  1093
SETTIM                         $ffdb   172
GETTIM                         $ffde   173
STOP                           $ffe1   174D   705   1026   1638   2903
GETIN                          $ffe4   175
CLALL                          $ffe7   176
SCAN                           $ffea   177
SCRORG                         $ffed   178
PLOT                           $fff0   179
Long_AC                        $0059    73D   226    228    236    240
                                       524    526    528    529    540
                                       554    568    583    585    599
                                       615    627    629    637    638
                                       640    641    778    796    937
                                       939    949    951    972    974
                                      1007   1076   1085   1086   1126
                                      1127   1128   1132   1247   1250
                                      1417   1419   1420   1428   1429
                                      1484   1493   1552   1559   1561
                                      1562   1564   1761   1763   1770
                                      1771   1861   1864   1878   1887
                                      1936   1938   1949   1952   1955
                                      1960   1963   2012   2013   2014
                                      2015   2022   2056   2067   2068
                                      2069   2080   2081   2088   2089
                                      2091   2093   2335   2467   2525
                                      2526   2528   2530   2599   2600
                                      2602   2604   2680   2684   2687
                                      2695   2849   2888   2889   2890
                                      2891   2927   2932
Long_PC                        $0061    75D   541    600    616    649
                                       651    674    676    751    797
                                       799    843    845    861    863
                                       946    948    969    971   1092
                                      1111   1112   1133   1479   1482
                                      1485   1494   1500   1522   1526
                                      1560   1563   1961   1964   2110
                                      2116   2121   2124   2125   2262
                                      2263   2270   2272   2361   2374
                                      2377   2391   2404   2413   2414
                                      2415   2416   2417   2418   2419
                                      2420   2421   2422   2423   2424
                                      2440   2441   2442   2535   2540
                                      2541   2682   2685   2688   2723
                                      2728   2730   3035   3052
Long_CT                        $005d    74D   229    230    232    233
                                       237    241    555    584    601
                                       698    699    702   1412   1418
                                      1426   1427   1632   1644   1647
                                      2248   2249   2251   2252   2253
                                      2367   2368   2410   2411   2412
                                      2435   2449   2452   2486   2489
                                      2498   2510   2516   2519   2554
                                      2556   2558   2754   2769   2937
                                      2955
WHITE                          $0005    31D   479    739    747    893
                                       907   1824   2118   3508   3509
                                      3510   3511   3512   3513   3514
                                      3515   3516   3517   3518   3519
                                      3520   3521   3522   3523   3524
                                      3525   3526   3527
LRED                           $0096    33D   747    891    905   3508
                                      3509   3510   3511   3512   3513
                                      3514   3515   3516   3517   3518
                                      3519   3520   3521   3522   3523
                                      3524   3525   3526   3527
CR                             $000d    35D   406    460   1514   3508
                                      3509   3510   3511   3512   3513
                                      3514   3515   3516   3517   3518
                                      3519   3520   3521   3522   3523
                                      3524   3525   3526   3527
Op_Flag                        $006c    83D  1150   1170   1282   1332
                                      1445   1476   1671   1682   1699
                                      1716   1724   1752   1782   1800
                                      1810   1837   1852   1877   1885
                                      1910   1929   1968
Buf_Index                      $006f    89D   410   1058   1071   1260
                                      1977   1998   2024   2033   2208
                                      2209   2219   2227   2228   2306
                                      2472   2587   2750   2751   2846
                                      2855   2920
Mode_Flags                     $006a    81D  1243   1271   1280   1290
                                      1302   1312   1322   1335   1349
                                      1363   1377   1393   1439   1457
                                      1460   1575   1596   1605   1616
                                      1617
Long_DA                        $0065    76D   569    659    660    662
                                       663    718    721    724    740
                                       748    749    934    936   1015
                                      1023   1149   1185   1186   1195
                                      1199
FA                             $00ba    98D  1039   1077   2576   2619
                                      2668   2673   2709   2715   2737
                                      2759   2780   2854   2872   2989
                                      3028   3046   3112   3130
STATUS                         $0090    94D  1046   1103   2625   2679
                                      2691   2721   2724   2878   2883
                                      2897   2994   3033   3051   3111
                                      3119   3129   3135
Op_Size                        $006d    87D  1474   1475   1486   1505
                                      1506   1641   1642   1646   1715
                                      1717   1731   1844   1865   1884
                                      1940   1946   1969
Op_Code                        $006b    82D  1215   1233   1234   1416
                                      1443   1473   1481   1499   1574
                                      1690   1701   1748   1758   1804
                                      1811   1829   1870
SA                             $00b9    97D  1041   1091   1114   2598
                                      2621   2670   2675   2711   2717
                                      2739   2875
Adr_Flags                      $0069    80D  1709   1847   1850   1892
                                      1896   1902   1906   1911   1916
                                      1920
Bank                           $0002    45D   299    302    352    360
                                       525    527    530    779
MODE_80                        $00d7   104D   696    758    802    889
                                       903
SPL                            $000c    60D   336    370    819    830
                                       834
FNLEN                          $00b7    96D  1044   1065   2523   2543
VERCK                          $0093    95D   446   1087   1096   1104
Dig_Cnt                        $006e    88D  2011   2023   2050   2102
QUOTE                          $0022    38D  1055   1062   2494   2499
FNADR                          $00bb    99D  1048   1050   1064
YELLOW                         $009e    32D   460   1746   2112
PCL                            $0004    47D   293    296    324
PCH                            $0003    46D   287    295    325
BA                             $00bd   100D  1043   1081
APOSTR                         $0027    39D   992   2019
SPH                            $000b    59D   334    368
QTSW                           $00f4   111D   859
FNBANK                         $00be   101D  1045
CRIGHT                         $001d    37D   437
REV                            $0012    36D   460
AC                             $0006    49D   316
SR                             $0005    48D   376
R_Margin                       $00e7   109
L_Margin                       $00e6   108
T_Margin                       $00e5   107
B_Margin                       $00e4   106
NDX                            $00d0   103
BP                             $000a    58
ZR                             $0009    52
YR                             $0008    51
XR                             $0007    50
Long_AC                        $0059    73D   226    228    236    240
                                       524    526    528    529    540
                                       554    568    583    585    599
                                       615    627    629    637    638
                                       640    641    778    796    937
                                       939    949    951    972    974
                                      1007   1076   1085   1086   1126
                                      1127   1128   1132   1247   1250
                                      1417   1419   1420   1428   1429
                                      1484   1493   1552   1559   1561
                                      1562   1564   1761   1763   1770
                                      1771   1861   1864   1878   1887
                                      1936   1938   1949   1952   1955
                                      1960   1963   2012   2013   2014
                                      2015   2022   2056   2067   2068
                                      2069   2080   2081   2088   2089
                                      2091   2093   2335   2467   2525
                                      2526   2528   2530   2599   2600
                                      2602   2604   2680   2684   2687
                                      2695   2849   2888   2889   2890
                                      2891   2927   2932
Long_PC                        $0061    75D   541    600    616    649
                                       651    674    676    751    797
                                       799    843    845    861    863
                                       946    948    969    971   1092
                                      1111   1112   1133   1479   1482
                                      1485   1494   1500   1522   1526
                                      1560   1563   1961   1964   2110
                                      2116   2121   2124   2125   2262
                                      2263   2270   2272   2361   2374
                                      2377   2391   2404   2413   2414
                                      2415   2416   2417   2418   2419
                                      2420   2421   2422   2423   2424
                                      2440   2441   2442   2535   2540
                                      2541   2682   2685   2688   2723
                                      2728   2730   3035   3052
Long_CT                        $005d    74D   229    230    232    233
                                       237    241    555    584    601
                                       698    699    702   1412   1418
                                      1426   1427   1632   1644   1647
                                      2248   2249   2251   2252   2253
                                      2367   2368   2410   2411   2412
                                      2435   2449   2452   2486   2489
                                      2498   2510   2516   2519   2554
                                      2556   2558   2754   2769   2937
                                      2955
WHITE                          $0005    31D   479    739    747    893
                                       907   1824   2118   3508   3509
                                      3510   3511   3512   3513   3514
                                      3515   3516   3517   3518   3519
                                      3520   3521   3522   3523   3524
                                      3525   3526   3527
Mon_Data                       $040e   133D   998   1008   1020   1047
                                      1049   2501   2507   2513   2524
                                      2545   2547   2549   2580   2595
                                      2626   2642   2919   2941   3016
                                      3069   3074   3078   3092   3097
LRED                           $0096    33D   747    891    905   3508
                                      3509   3510   3511   3512   3513
                                      3514   3515   3516   3517   3518
                                      3519   3520   3521   3522   3523
                                      3524   3525   3526   3527
CR                             $000d    35D   406    460   1514   3508
                                      3509   3510   3511   3512   3513
                                      3514   3515   3516   3517   3518
                                      3519   3520   3521   3522   3523
                                      3524   3525   3526   3527
Op_Flag                        $006c    83D  1150   1170   1282   1332
                                      1445   1476   1671   1682   1699
                                      1716   1724   1752   1782   1800
                                      1810   1837   1852   1877   1885
                                      1910   1929   1968
Buf_Index                      $006f    89D   410   1058   1071   1260
                                      1977   1998   2024   2033   2208
                                      2209   2219   2227   2228   2306
                                      2472   2587   2750   2751   2846
                                      2855   2920
Mode_Flags                     $006a    81D  1243   1271   1280   1290
                                      1302   1312   1322   1335   1349
                                      1363   1377   1393   1439   1457
                                      1460   1575   1596   1605   1616
                                      1617
Long_DA                        $0065    76D   569    659    660    662
                                       663    718    721    724    740
                                       748    749    934    936   1015
                                      1023   1149   1185   1186   1195
                                      1199
FA                             $00ba    98D  1039   1077   2576   2619
                                      2668   2673   2709   2715   2737
                                      2759   2780   2854   2872   2989
                                      3028   3046   3112   3130
STATUS                         $0090    94D  1046   1103   2625   2679
                                      2691   2721   2724   2878   2883
                                      2897   2994   3033   3051   3111
                                      3119   3129   3135
Op_Size                        $006d    87D  1474   1475   1486   1505
                                      1506   1641   1642   1646   1715
                                      1717   1731   1844   1865   1884
                                      1940   1946   1969
Op_Code                        $006b    82D  1215   1233   1234   1416
                                      1443   1473   1481   1499   1574
                                      1690   1701   1748   1758   1804
                                      1811   1829   1870
Buffer                         $0200   114D   402    411   1059   1517
                                      1519   1528   1532   1540   2210
                                      2229   2594   2752   2763
SA                             $00b9    97D  1041   1091   1114   2598
                                      2621   2670   2675   2711   2717
                                      2739   2875
Op_Ix                          $0404   124D  1151   1253   1256   1299
                                      1333   1347   1361   1375   1391
                                      1402
Adr_Flags                      $0069    80D  1709   1847   1850   1892
                                      1896   1902   1906   1911   1916
                                      1920
Bank                           $0002    45D   299    302    352    360
                                       525    527    530    779
Op_Len                         $0405   125D  1152   1255   1455   1461
                                      1464   1612
Disk_Msg                       $0436   134D  2785   2792   2800   2804
                                      2822
Disk_Status                    $040a   130D  2790   2794   2795   2806
                                      2981
MODE_80                        $00d7   104D   696    758    802    889
                                       903
SPL                            $000c    60D   336    370    819    830
                                       834
File_Ext                       $040b   131D  2514   2517   2520   2653
Disk_Sector                    $0409   129D  2933   2954   2974   3101
Stack                          $0100   113D  2061   2062   2063   2064
FNLEN                          $00b7    96D  1044   1065   2523   2543
VERCK                          $0093    95D   446   1087   1096   1104
Dig_Cnt                        $006e    88D  2011   2023   2050   2102
QUOTE                          $0022    38D  1055   1062   2494   2499
Disk_Track                     $0408   128D  2928   2975   3098
Disk_Src                       $0407   127D  2533   2575   2606
Disk_Unit                      $0406   126D  1038   2550   2570
Op_Mne                         $0401   123D  1167   1173   1180
Ix_Mne                         $0400   122D  1205   1401   1584
FNADR                          $00bb    99D  1048   1050   1064
YELLOW                         $009e    32D   460   1746   2112
PCL                            $0004    47D   293    296    324
PCH                            $0003    46D   287    295    325
header_loop                    $205a   236D   239    243
MEM_DIR                        $087f  2477D  2601   2603
MEM_BUF                        $0870  2476D  2527   2529
BA                             $00bd   100D  1043   1081
APOSTR                         $0027    39D   992   2019
SPH                            $000b    59D   334    368
Link                           $2029   197D   189
QTSW                           $00f4   111D   859
FNBANK                         $00be   101D  1045
CRIGHT                         $001d    37D   437
REV                            $0012    36D   460
AC                             $0006    49D   316
SR                             $0005    48D   376
header                         $1fff   185
EXMON                          $032e   118
IBRK                           $0316   117
IIRQ                           $0314   116
R_Margin                       $00e7   109
L_Margin                       $00e6   108
T_Margin                       $00e5   107
B_Margin                       $00e4   106
NDX                            $00d0   103
BP                             $000a    58
ZR                             $0009    52
YR                             $0008    51
XR                             $0007    50
