              *******************************
              * BSM = Bit Shifter's Monitor *
              * for The MEGA65  01-Jan-2021 *
              *******************************

              .CPU 45GS02

              .STORE $6000,$2000,"bsmon.rom"

              *************
              * Constants *
              *************

0005          WHITE  = $05
009e          YELLOW = $9e
0096          LRED   = $96

000d          CR     = $0d
0012          REV    = $12
001d          CRIGHT = $1d
0022          QUOTE  = $22
0027          APOSTR = $27

              ************************************************
              * Register storage for JMPFAR and JSRFAR calls *
              ************************************************

0002          Bank       =  2
0003          PCH        =  3
0004          PCL        =  4
0005          SR         =  5
0006          AC         =  6
0007          XR         =  7
0008          YR         =  8
0009          ZR         =  9

              *************************************
              * Used direct (zero) page addresses *
              *************************************

000a          BP         = 10
000b          SPH        = 11
000c          SPL        = 12

              ; following variables overlap with the BASIC floating point area

              ; $59 - $5d : temporary floating point accumulator
              ; $5e - $62 : temporary floating point accumulator
              ; $63 - $69 : primary   floating point accumulator
              ; $6a - $6f : secondary floating point accumulator

              ; A set of 32 bit variables also used as 32 bit pointer

0059          & = $59

0059          Long_AC    .BSS 4  ; 32 bit accumulator
005d          Long_CT    .BSS 4  ; 32 bit counter
0061          Long_PC    .BSS 4  ; 32 bit program counter
0065          Long_DA    .BSS 4  ; 32 bit data pointer

              ; Flags are  used in BBR BBS instructions

0069          Adr_Flags  .BSS 1
006a          Mode_Flags .BSS 1
006b          Op_Code    .BSS 1
006c          Op_Flag    .BSS 1  ; 7: two operands
                                 ; 6: long branch
                                 ; 5: 32 bit address
                                 ; 4: Q register
006d          Op_Size    .BSS 1
006e          Dig_Cnt    .BSS 1
006f          Buf_Index  .BSS 1

              ; operating system variables


0090          STATUS     = $90
0093          VERCK      = $93
00b7          FNLEN      = $b7
00b9          SA         = $b9
00ba          FA         = $ba
00bb          FNADR      = $bb
00bd          BA         = $bd
00be          FNBANK     = $be

00d0          NDX        = $d0        ; length of keyboard buffer
00d7          MODE_80    = $d7        ; 80 column / 40 volumn flag

00e4          B_Margin   = $e4        ; SCBOT  default = 24
00e5          T_Margin   = $e5        ; SCTOP  default =  0
00e6          L_Margin   = $e6        ; SCLF   default =  0
00e7          R_Margin   = $e7        ; SCRT   default = 39 or 79

00f4          QTSW       = $f4        ; Quote switch

0100          Stack      = $0100
0200          Buffer     = $0200      ; input buffer

0314          IIRQ       = $0314
0316          IBRK       = $0316
032e          EXMON      = $032e

0400          & = $400                ; bottom of BASIC runtime stack
                                      ; should be a safe space
0400          X_Vector    .BSS  2     ; exit vector (ROM version dependent)
0402          Ix_Mne      .BSS  1     ; index to mnemonics table
0403          Op_Mne      .BSS  3     ; 3 bytes for mnemonic
0406          Op_Ix       .BSS  1     ; type of constant
0407          Op_Len      .BSS  1     ; length of operand
0408          Disk_Unit   .BSS  1     ; target unit
0409          Disk_Src    .BSS  1     ; source unit
040a          Disk_Track  .BSS  1     ; logical track  1 -> 255
040b          Disk_Sector .BSS  1     ; logical sector 0 -> 255
040c          Disk_Status .BSS  1     ; BCD value of status
040d          File_Ext    .BSS  3     ; file extension

0410          Mon_Data    .BSS 40     ; buffer for hunt and filename
0438          Disk_Msg    .BSS 40     ; disk status as text message

cf2e          EXIT_OLD   = $cf2e      ; exit address for ROM 910110
cfa4          EXIT       = $cfa4      ; exit address for ROM 911001

ff6b          SETBNK     = $ff6b
ff6e          JSRFAR     = $ff6e
ff71          JMPFAR     = $ff71
ff74          LDA_FAR    = $ff74
ff77          STA_FAR    = $ff77
ff7a          CMP_FAR    = $ff7a
ff7d          PRIMM      = $ff7d
ff81          CINT       = $ff81
ff84          IOINIT     = $ff84
ff90          SETMSG     = $ff90
ff93          SECOND     = $ff93
ff96          TKSA       = $ff96
ff99          MEMTOP     = $ff99
ff9c          MEMBOT     = $ff9c
ff9f          KEY        = $ff9f
ffa2          SETTMO     = $ffa2
ffa5          ACPTR      = $ffa5
ffa8          CIOUT      = $ffa8
ffab          UNTALK     = $ffab
ffae          UNLSN      = $ffae
ffb1          LISTEN     = $ffb1
ffb4          TALK       = $ffb4
ffb7          READSS     = $ffb7
ffba          SETLFS     = $ffba
ffbd          SETNAM     = $ffbd
ffc0          OPEN       = $ffc0
ffc3          CLOSE      = $ffc3
ffc6          CHKIN      = $ffc6
ffc9          CHKOUT     = $ffc9
ffcc          CLRCHN     = $ffcc
ffcf          CHRIN      = $ffcf
ffd2          CHROUT     = $ffd2
ffd5          LOAD       = $ffd5
ffd8          SAVE       = $ffd8
ffdb          SETTIM     = $ffdb
ffde          GETTIM     = $ffde
ffe1          STOP       = $ffe1
ffe4          GETIN      = $ffe4
ffe7          CLALL      = $ffe7
ffea          SCAN       = $ffea
ffed          SCRORG     = $ffed
fff0          PLOT       = $fff0

1fff          * = $1fff
                      .STORE $1fff,$0101,"bsm.prg"

              *************
              Module header
              *************

1fff 01 20            .WORD $2001             ; load address
2001 29 20            .WORD Link              ; line link
2003 e5 07            .WORD 2021              ; line number
2005 fe 02            .BYTE $fe,$02           ; BANK token
2007 30 3a            .BYTE "0:"              ; BANK argument
2009 9e               .BYTE $9e               ; SYS  token
200a 28 38 32         .BYTE "(8235):"         ; $202d
2011 8f               .BYTE $8f               ; REM  token
2012 20 42 49         .BYTE " BIT SHIFTER 01-JAN-21",0
2029 00 00    Link    .WORD 0                 ; BASIC end marker

                      ; copy image to $030000

202b 78               SEI

              ; map memory to monitor configuration

202c a9 a0            LDA  #$a0
202e a2 82            LDX  #$82
2030 a0 00            LDY  #$00
2032 a3 83            LDZ  #$83
2034 5c               MAP
2035 ea               EOM

              ; VIC IV registers visible

2036 a9 47            LDA  #$47
2038 8d 2f d0         STA  $d02f
203b a9 53            LDA  #$53
203d 8d 2f d0         STA  $d02f

              ; toggle write protection

2040 a9 70            LDA  #$70
2042 8d 40 d6         STA  $D640
2045 ea               NOP

2046 a3 00            LDZ  #0
2048 64 59            STZ  Long_AC
204a a9 21            LDA  #$21
204c 85 5a            STA  Long_AC+1
204e 64 5d            STZ  Long_CT
2050 64 5e            STZ  Long_CT+1
2052 a9 03            LDA  #3
2054 85 5f            STA  Long_CT+2
2056 64 60            STZ  Long_CT+3
2058 a2 20            LDX  #$20

205a b2 59    _loop   LDA  (Long_AC),Z
205c ea 92 5d         STA  [Long_CT],Z
205f 1b               INZ
2060 d0 f8            BNE  _loop
2062 e6 5a            INC  Long_AC+1
2064 e6 5e            INC  Long_CT+1
2066 ca               DEX
2067 d0 f1            BNE  _loop

2069 a9 70            LDA  #$70
206b 8d 40 d6         STA  $D640              ; toggle write protection
206e ea               NOP

206f 60               RTS
2070          EndMod [header] Size = 113 [$71]

2070 00 00 00         .FILL $2100-* (0) ; 144 bytes

6000          * = $6000

              ********************
6000          Monitor_Call ; $6000
              ********************

6000 4c 3c 60          JMP  Mon_Call

              *********************
6003          Monitor_Break ; $6003
              *********************

6003 4c 09 60          JMP  Mon_Break

              **********************
6006          Monitor_Switch ; $6009
              **********************

6006 4c c9 60          JMP  Mon_Switch

              ****************
              Module Mon_Break
              ****************

6009 20 7d ff          JSR  PRIMM
600c 0d 42 52          .BYTE "\rBREAK\a",0
6014 20 ed 60          JSR  Print_Commands

              ; pull BP, Z, Y, X, A,SR,PCL,PCH
              ;       7  6  5  4  3  2  1  0

6017 a2 07             LDX  #7
6019 2c a4 cf          BIT  EXIT      ; version
601c 10 01             BPL  _loop
601e ca                DEX
601f 68       _loop    PLA
6020 95 03             STA  PCH,X
6022 ca                DEX
6023 10 fa             BPL  _loop

              ; decrement PC to point after BRK

6025 a5 04             LDA  PCL
6027 d0 02             BNE  _nopage
6029 c6 03             DEC  PCH
602b c6 04    _nopage  DEC  PCL

602d ad 1d 01          LDA  $011d
6030 7f 02 03          BBR7 Bank,_bank
6033 ad 1f 01          LDA  $011f
6036 29 0f    _bank    AND  #15
6038 85 02             STA  Bank
603a 80 23             BRA  Mon_Start
603c          EndMod [Mon_Break] Size = 51 [$33]

              ***************
              Module Mon_Call
              ***************

603c 20 ed 60          JSR  Print_Commands

              ;        clear register for monitor call

603f a9 00             LDA  #0
6041 a2 06             LDX  #6
6043 95 06    _loop    STA  AC,X
6045 ca                DEX
6046 10 fb             BPL  _loop

              ;        set default PC to "exit to BASIC"

6048 a9 a4             LDA  #<EXIT     ; ROM 911110
604a a2 cf             LDX  #>EXIT
604c 2c a4 cf          BIT  EXIT       ; $20 (JSR) or $ff ?
604f 10 04             BPL  _store
6051 a9 2e             LDA  #<EXIT_OLD ; ROM 910111
6053 a2 cf             LDX  #>EXIT_OLD
6055 85 04    _store   STA  PCL
6057 8d 00 04          STA  X_Vector
605a 86 03             STX  PCH
605c 8e 01 04          STX  X_Vector+1
605f          EndMod [Mon_Call] Size = 35 [$23]

              ****************
              Module Mon_Start
              ****************

605f d8                CLD
6060 0b                TSY
6061 84 0b             STY  SPH
6063 ba                TSX
6064 86 0c             STX  SPL
6066 a9 c0             LDA  #$c0
6068 20 90 ff          JSR  SETMSG
606b 58                CLI
606c ea                NOP
606d          EndMod [Mon_Start] Size = 14 [$e]

              ***************************
              Module Mon_Register ; $6042
              ***************************

606d 20 02 74          JSR  Reg_Text

              ; print Bank,PCH

6070 a0 00             LDY  #0
6072 b9 02 00 _loopa   LDA  Bank,Y
6075 20 40 6b          JSR  Print_Hex
6078 c8                INY
6079 c0 02             CPY  #2
607b 90 f5             BCC  _loopa

              ; print SR,PCL,A,X,Y,Z,BP

607d b9 02 00 _loopb   LDA  Bank,Y
6080 20 2b 6b          JSR  Print_Hex_Blank
6083 c8                INY
6084 c0 09             CPY  #9
6086 90 f5             BCC  _loopb

              ; print 16 bit stack pointer

6088 a5 0b             LDA  SPH
608a 20 40 6b          JSR  Print_Hex
608d a5 0c             LDA  SPL
608f 20 2b 6b          JSR  Print_Hex_Blank

              ; print flags

6092 a0 08             LDY  #8
6094 a5 05             LDA  SR
6096 0a       _loopc   ASL  A
6097 48                PHA
6098 a9 2d             LDA  #'-'
609a 90 02             BCC  _flag
609c a9 31             LDA  #'1'
609e 20 d2 ff _flag    JSR  CHROUT
60a1 68                PLA
60a2 88                DEY
60a3 d0 f1             BNE  _loopc
60a5          EndMod [Mon_Register] Size = 56 [$38]

              ***********
              Module Main
              ***********

60a5 20 33 6b          JSR  Print_CR
60a8 a2 00             LDX  #0

              ; read one line into buffer

              ******
60aa          Main_A
              ******

60aa 20 cf ff _loop    JSR  CHRIN
60ad 9d 00 02          STA  Buffer,X
60b0 e8                INX
60b1 e0 50             CPX  #80
60b3 b0 1e             BCS  Mon_Error         ; input too long
60b5 c9 0d             CMP  #CR
60b7 d0 f1             BNE  _loop

60b9 a9 00             LDA  #0
60bb 85 6f             STA  Buf_Index
60bd 9d ff 01          STA  Buffer-1,X        ; terminate buffer
60c0 20 70 6b _getcomm JSR  Get_Char
60c3 f0 e0             BEQ  Main
60c5 c9 20             CMP  #' '
60c7 f0 f7             BEQ  _getcomm
60c9          EndMod [Main] Size = 36 [$24]

              *****************
              Module Mon_Switch
              *****************

60c9 a2 18             LDX  #24
60cb dd 07 61 _loop    CMP  Command_Char,X
60ce f0 10             BEQ  Mon_Select
60d0 ca                DEX
60d1 10 f8             BPL  _loop

              ;        fall through to error routine if not found

              ****************
              Module Mon_Error
              ****************

              ; put a question mark at the end of the text

60d3 20 7d ff          JSR  PRIMM
60d6 1b 4f 1d          .BYTE "\eO",CRIGHT,'?',0
60db a2 f8             LDX  #$f8              ; reset stack pointer
60dd 9a                TXS
60de 80 c5             BRA  Main

              *****************
              Module Mon_Select
              *****************

60e0 85 93             STA  VERCK
60e2 e0 17             CPX  #23
60e4 b3 3b 03          LBCS  Load_Save
60e7 8a                TXA
60e8 0a                ASL  A
60e9 aa                TAX
60ea 7c 24 61          JMP  (Jump_Table,X)
60ed          EndMod [Mon_Select] Size = 13 [$d]

              **************
60ed          Print_Commands
              **************

60ed 20 7d ff          JSR  PRIMM
60f0 0d 9e 12          .BYTE CR,YELLOW,REV,"BS MONITOR COMMANDS:"

              ************
6107          Command_Char
              ************

                       ;      0123456789abcdef
6107 41 42 43          .BYTE "ABCDFGHJMRTUX@.>;?"

              ***********
6119          Cons_Prefix
              ***********

6119 24 2b 26          .BYTE "$+&%'"

              ****************
611e          Load_Save_Verify
              ****************

611e 4c 53 56          .BYTE "LSV",WHITE,0
6123 60                RTS

              **********
6124          Jump_Table
              **********

6124 ef 64             .WORD Mon_Assemble     ; A
6126 30 62             .WORD Mon_Bits         ; B
6128 91 63             .WORD Mon_Compare      ; C
612a f4 67             .WORD Mon_Disassemble  ; D
612c ce 64             .WORD Mon_Fill         ; F
612e b5 62             .WORD Mon_Go           ; G
6130 c1 63             .WORD Mon_Hunt         ; H
6132 c1 62             .WORD Mon_JSR          ; J
6134 e6 61             .WORD Mon_Memory       ; M
6136 6d 60             .WORD Mon_Register     ; R
6138 47 63             .WORD Mon_Transfer     ; T
613a 56 6d             .WORD Mon_Unit_Copy    ; U
613c 52 61             .WORD Mon_Exit         ; X
613e 1b 6f             .WORD Mon_DOS          ; @
6140 ef 64             .WORD Mon_Assemble     ; .
6142 87 62             .WORD Mon_Set_Memory   ; >
6144 6d 62             .WORD Mon_Set_Register ; ;
6146 35 74             .WORD Mon_Help         ; ?
6148 c0 6b             .WORD Converter        ; $
614a c0 6b             .WORD Converter        ; +
614c c0 6b             .WORD Converter        ; &
614e c0 6b             .WORD Converter        ; %
6150 c0 6b             .WORD Converter        ; '


              ***************
              Module Mon_Exit
              ***************

6152 6c 00 04          JMP  (X_Vector)

              ****************
              Module LAC_To_PC
              ****************

              ; called from Mon_Set_Register, Mon_Go and Mon_JSR
              ; as the first instruction. The carry flag was set from
              ; the routine Got_LAC if an error occured.
              ; Notice that the Bank, PCH and PCL values are stored
              ; high to low, reverse to the standard order.

              ; Bank, PCH and PCL are part of a list, that is used by
              ; the routines FAR_JMP and FAR_JSR of the operating system

6155 b0 0e             BCS  _error
6157 a5 59             LDA  Long_AC
6159 85 04             STA  Bank+2
615b a5 5a             LDA  Long_AC+1
615d 85 03             STA  Bank+1
615f a5 5b             LDA  Long_AC+2
6161 05 5c             ORA  Long_AC+3
6163 85 02             STA  Bank
6165 60       _error   RTS
6166          EndMod [LAC_To_PC] Size = 17 [$11]

              *****************
              Module LAC_To_LPC
              *****************

6166 da                PHX
6167 a2 03             LDX  #3
6169 b5 59    _loop    LDA  Long_AC,X
616b 95 61             STA  Long_PC,X
616d ca                DEX
616e 10 f9             BPL  _loop
6170 fa                PLX
6171 60                RTS
6172          EndMod [LAC_To_LPC] Size = 12 [$c]

              *****************
              Module LAC_To_LCT
              *****************

6172 da                PHX
6173 a2 03             LDX  #3
6175 b5 59    _loop    LDA  Long_AC,X
6177 95 5d             STA  Long_CT,X
6179 ca                DEX
617a 10 f9             BPL  _loop
617c fa                PLX
617d 60                RTS
617e          EndMod [LAC_To_LCT] Size = 12 [$c]

              *****************
              Module LAC_To_LDA
              *****************

617e da                PHX
617f a2 03             LDX  #3
6181 b5 59    _loop    LDA  Long_AC,X
6183 95 65             STA  Long_DA,X
6185 ca                DEX
6186 10 f9             BPL  _loop
6188 fa                PLX
6189 60                RTS
618a          EndMod [LAC_To_LDA] Size = 12 [$c]

              *******************
              Module LAC_Plus_LCT
              *******************

618a da                PHX
618b a2 fc             LDX  #252              ; use ZP wrap around
618d 18                CLC
618e b5 5d    _loop    LDA  Long_AC+4,X
6190 75 61             ADC  Long_CT+4,X
6192 95 5d             STA  Long_AC+4,X
6194 e8                INX
6195 d0 f7             BNE  _loop
6197 fa                PLX
6198 60                RTS
6199          EndMod [LAC_Plus_LCT] Size = 15 [$f]

              ********************
              Module LAC_Minus_LPC
              ********************

6199 da                PHX
619a a2 fc             LDX  #252              ; use ZP wrap around
619c 38                SEC
619d b5 5d    _loop    LDA  Long_AC+4,X
619f f5 65             SBC  Long_PC+4,X
61a1 95 61             STA  Long_CT+4,X
61a3 e8                INX
61a4 d0 f7             BNE  _loop
61a6 fa                PLX
61a7 60                RTS
61a8          EndMod [LAC_Minus_LPC] Size = 15 [$f]

              **********************
              Module LAC_Compare_LPC
              **********************

61a8 da                PHX
61a9 a2 fc             LDX  #252              ; use ZP wrap around
61ab 38                SEC
61ac b5 5d    _loop    LDA  Long_AC+4,X
61ae f5 65             SBC  Long_PC+4,X
61b0 e8                INX
61b1 d0 f9             BNE  _loop
61b3 fa                PLX
61b4 60                RTS
61b5          EndMod [LAC_Compare_LPC] Size = 13 [$d]

              **************
              Module Inc_LAC
              **************

61b5 e3 59             INW  Long_AC
61b7 d0 02             BNE  _return
61b9 e3 5b             INW  Long_AC+2
61bb 60       _return  RTS
61bc          EndMod [Inc_LAC] Size = 7 [$7]

              **************
              Module Dec_LAC
              **************

61bc a5 59             LDA  Long_AC
61be 05 5a             ORA  Long_AC+1
61c0 d0 02             BNE  _skip
61c2 c3 5b             DEW  Long_AC+2
61c4 c3 59    _skip    DEW  Long_AC
61c6 60                RTS
61c7          EndMod [Dec_LAC] Size = 11 [$b]

              **************
              Module Inc_LPC
              **************

61c7 e3 61             INW  Long_PC
61c9 d0 02             BNE  _return
61cb e3 63             INW  Long_PC+2
61cd 60       _return  RTS
61ce          EndMod [Inc_LPC] Size = 7 [$7]

              **************
              Module Dec_LDA
              **************

61ce a5 65             LDA  Long_DA
61d0 05 66             ORA  Long_DA+1
61d2 d0 02             BNE  _skip
61d4 c3 67             DEW  Long_DA+2
61d6 c3 65    _skip    DEW  Long_DA
61d8 60                RTS
61d9          EndMod [Dec_LDA] Size = 11 [$b]

              ************
              Module Fetch
              ************

61d9 db                PHZ
61da 98                TYA
61db 4b                TAZ
61dc ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
61df ea                NOP                    ; use LDA  [Long_PC],Z
61e0 b2 61    _banked  LDA  (Long_PC),Z
61e2 fb                PLZ
61e3 29 ff             AND  #$ff
61e5 60                RTS
61e6          EndMod [Fetch] Size = 13 [$d]

              *****************
              Module Mon_Memory
              *****************

61e6 20 3e 6a          JSR  Get_LAC           ; get 1st. parameter
61e9 a3 10             LDZ  #16               ; default row count
61eb b0 1f             BCS  _row              ; no address
61ed 20 66 61          JSR  LAC_To_LPC        ; Long_PC = start address
61f0 20 3e 6a          JSR  Get_LAC           ; Long_AC = end address
61f3 b0 17             BCS  _row              ; not given

61f5 20 99 61          JSR  LAC_Minus_LPC     ; Long_CT = range
61f8 93 d9 fe          LBCC Mon_Error         ; negative range -> error
61fb a2 04             LDX  #4                ; 16 bytes / line
61fd 7f d7 01          BBR7 MODE_80,_shift
6200 ca                DEX                    ;  8 bytes / line
6201 46 5e    _shift   LSR  Long_CT+1
6203 66 5d             ROR  Long_CT
6205 ca                DEX
6206 d0 f9             BNE  _shift
6208 ab 5d 00          LDZ  Long_CT           ; row count
620b 1b                INZ

620c 20 e1 ff _row     JSR  STOP
620f f0 06             BEQ  _exit
6211 20 05 63          JSR  Dump_Row
6214 3b                DEZ
6215 d0 f5             BNE  _row
6217 4c a5 60 _exit    JMP  Main
621a          EndMod [Mon_Memory] Size = 52 [$34]

              *****************
              Module Print_Bits
              *****************

621a db                PHZ
621b 85 65             STA  Long_DA
621d a0 08             LDY  #8
621f a9 2a    _loop    LDA  #'*'
6221 ff 65 02          BBS7 Long_DA,_set
6224 a9 2e             LDA  #'.'
6226 20 d2 ff _set     JSR  CHROUT
6229 06 65             ASL  Long_DA
622b 88                DEY
622c d0 f1             BNE  _loop
622e fb                PLZ
622f 60                RTS
6230          EndMod [Print_Bits] Size = 22 [$16]

              ***************
              Module Mon_Bits
              ***************

6230 20 3e 6a          JSR  Get_LAC           ; get 1st. parameter
6233 b0 03             BCS  _lab
6235 20 66 61          JSR  LAC_To_LPC        ; Long_PC = start address
6238 20 33 6b _lab     JSR  Print_CR
623b a9 05             LDA  #WHITE
623d 85 66             STA  Long_DA+1

623f a2 08             LDX  #8
6241 da       _row     PHX
6242 20 01 6b          JSR  Hex_LPC
6245 a3 00             LDZ  #0
6247 38       _col     SEC
6248 a9 9b             LDA  #WHITE+LRED       ; toggle colour
624a e5 66             SBC  Long_DA+1
624c 85 66             STA  Long_DA+1
624e 20 d2 ff          JSR  CHROUT
6251 ea b2 61          LDA  [Long_PC],Z
6254 20 1a 62          JSR  Print_Bits
6257 18                CLC
6258 6b                TZA
6259 69 08             ADC  #8
625b 4b                TAZ
625c c9 40             CMP  #64
625e 90 e7             BCC  _col
6260 20 33 6b          JSR  Print_CR
6263 20 c7 61          JSR  Inc_LPC
6266 fa                PLX
6267 ca                DEX
6268 d0 d7             BNE  _row
626a 4c a5 60          JMP  Main
626d          EndMod [Mon_Bits] Size = 61 [$3d]

              ***********************
              Module Mon_Set_Register
              ***********************

626d 20 3e 6a          JSR  Get_LAC           ; get 1st. parameter
6270 20 55 61          JSR  LAC_To_PC
6273 a0 03             LDY  #3
6275 20 3e 6a _loop    JSR  Get_LAC
6278 b0 0a             BCS  _exit
627a a5 59             LDA  Long_AC
627c 99 02 00          STA  Bank,Y
627f c8                INY
6280 c0 09             CPY  #9
6282 90 f1             BCC  _loop
6284 4c a5 60 _exit    JMP  Main
6287          EndMod [Mon_Set_Register] Size = 26 [$1a]

              *********************
              Module Mon_Set_Memory
              *********************

6287 20 3e 6a          JSR  Get_LAC           ; get 1st. parameter
628a b0 1c             BCS  _exit
628c 20 66 61          JSR  LAC_To_LPC        ; Long_PC = row address
628f a3 00             LDZ  #0
6291 20 3e 6a _loop    JSR  Get_LAC
6294 b0 12             BCS  _exit
6296 a5 59             LDA  Long_AC
6298 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
629b ea                NOP                    ; use STA  [Long_PC],Z
629c 92 61    _banked  STA  (Long_PC),Z
629e 1b                INZ
629f c2 10             CPZ  #16
62a1 7f d7 02          BBR7 MODE_80,_next
62a4 c2 08             CPZ  #8
62a6 90 e9    _next    BCC  _loop

62a8 20 7d ff _exit    JSR  PRIMM
62ab 1b 4f             .BYTE "\eO"
62ad 91 00             .BYTE $91,$00
62af 20 05 63          JSR  Dump_Row
62b2 4c a5 60          JMP  Main
62b5          EndMod [Mon_Set_Memory] Size = 46 [$2e]

              *************
              Module Mon_Go
              *************

62b5 20 3e 6a          JSR  Get_LAC           ; get 1st. parameter
62b8 20 55 61          JSR  LAC_To_PC
62bb a6 0c             LDX  SPL
62bd 9a                TXS
62be 4c 71 ff          JMP  JMPFAR
62c1          EndMod [Mon_Go] Size = 12 [$c]

              **************
              Module Mon_JSR
              **************

62c1 20 3e 6a          JSR  Get_LAC           ; get 1st. parameter
62c4 20 55 61          JSR  LAC_To_PC
62c7 a6 0c             LDX  SPL
62c9 9a                TXS
62ca 20 6e ff          JSR  JSRFAR
62cd ba                TSX
62ce 86 0c             STX  SPL
62d0 4c a5 60          JMP  Main
62d3          EndMod [Mon_JSR] Size = 18 [$12]

              *******************
              Module Dump_4_Bytes
              *******************

62d3 20 d2 ff          JSR  CHROUT            ; colour
62d6 ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62d9 ea                NOP                    ; use LDA  [Long_PC],Z
62da b2 61    _banked  LDA  (Long_PC),Z
62dc 20 2b 6b          JSR  Print_Hex_Blank
62df 1b                INZ
62e0 6b                TZA
62e1 29 03             AND  #3
62e3 d0 f1             BNE  _loop
62e5 60                RTS
62e6          EndMod [Dump_4_Bytes] Size = 19 [$13]

              *******************
              Module Dump_4_Chars
              *******************

62e6 a0 00             LDY  #0
62e8 84 f4             STY  QTSW              ; disable quote mode
62ea 20 d2 ff          JSR  CHROUT            ; colour
62ed ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62f0 ea                NOP                    ; use LDA  [Long_PC],Z
62f1 b2 61    _banked  LDA  (Long_PC),Z
62f3 a8                TAY
62f4 29 60             AND  #%0110 0000
62f6 d0 02             BNE  _laba
62f8 a0 2e             LDY  #'.'
62fa 98       _laba    TYA
62fb 20 d2 ff          JSR  CHROUT
62fe 1b                INZ
62ff 6b                TZA
6300 29 03             AND  #3
6302 d0 e9             BNE  _loop
6304 60                RTS
6305          EndMod [Dump_4_Chars] Size = 31 [$1f]

              ***************
              Module Dump_Row
              ***************

6305 db                PHZ
6306 20 33 6b          JSR  Print_CR
6309 a9 3e             LDA  #'>'
630b 20 d2 ff          JSR  CHROUT
630e 20 01 6b          JSR  Hex_LPC

6311 a3 00             LDZ  #0
6313 a2 02             LDX  #2                ; 2 blocks in 80 columns
6315 7f d7 01          BBR7 MODE_80,_loop
6318 ca                DEX                    ; 1 block  in 40 columns
6319 a9 96    _loop    LDA  #LRED
631b 20 d3 62          JSR  Dump_4_Bytes
631e a9 05             LDA  #WHITE
6320 20 d3 62          JSR  Dump_4_Bytes
6323 ca                DEX
6324 d0 f3             BNE  _loop

6326 20 7d ff          JSR  PRIMM
6329 3a 12 00          .BYTE $3a,$12,$00      ; : reverse on

632c a3 00             LDZ  #0
632e a2 02             LDX  #2                ; 4 blocks in 80 columns
6330 7f d7 01          BBR7 MODE_80,_lchr
6333 ca                DEX                    ; 2 blocks in 40 columns
6334 a9 96    _lchr    LDA  #LRED
6336 20 e6 62          JSR  Dump_4_Chars
6339 a9 05             LDA  #WHITE
633b 20 e6 62          JSR  Dump_4_Chars
633e ca                DEX
633f d0 f3             BNE  _lchr
6341 6b                TZA
6342 20 99 6b          JSR  Add_LPC
6345 fb                PLZ
6346 60                RTS
6347          EndMod [Dump_Row] Size = 66 [$42]

              *******************
              Module Mon_Transfer
              *******************

6347 20 a7 6b          JSR  Param_Range       ; Long_PC = source
634a b3 87 fd          LBCS Mon_Error         ; Long_CT = count
634d 20 3e 6a          JSR  Get_LAC           ; Long_AC = target
6350 b3 81 fd          LBCS Mon_Error

6353 a3 00             LDZ  #0
6355 20 a8 61          JSR  LAC_Compare_LPC   ; target - source
6358 90 1d             BCC  _forward

              ;        source < target: backward transfer

635a 20 8a 61          JSR  LAC_Plus_LCT      ; Long_AC = end of target

635d ff 68 01 _lpback  BBS7 Long_DA+3,_rb     ; bit 31 ?
6360 ea                NOP                    ; LDA  [Long_DA],Z
6361 b2 65    _rb      LDA  (Long_DA),Z       ; backward copy
6363 ff 5c 01          BBS7 Long_AC+3,_wb     ; bit 31 ?
6366 ea                NOP                    ; STA  [Long_AC],Z
6367 92 59    _wb      STA  (Long_AC),Z
6369 20 ce 61          JSR  Dec_LDA
636c 20 bc 61          JSR  Dec_LAC
636f 20 8c 6b          JSR  Dec_LCT
6372 10 e9             BPL  _lpback
6374 4c a5 60          JMP  Main

6377 ff 64 01 _forward BBS7 Long_PC+3,_rf     ; bit 31 ?
637a ea                NOP                    ; LDA  [Long_PC],Z
637b b2 61    _rf      LDA  (Long_PC),Z       ; backward copy
637d ff 5c 01          BBS7 Long_AC+3,_wf     ; bit 31 ?
6380 ea                NOP                    ; STA  [Long_AC],Z
6381 92 59    _wf      STA  (Long_AC),Z
6383 20 c7 61          JSR  Inc_LPC
6386 20 b5 61          JSR  Inc_LAC
6389 20 8c 6b          JSR  Dec_LCT
638c 10 e9             BPL  _forward
638e 4c a5 60          JMP  Main
6391          EndMod [Mon_Transfer] Size = 74 [$4a]

              ******************
              Module Mon_Compare
              ******************

6391 20 a7 6b          JSR  Param_Range       ; Long_PC = source
6394 b3 3d fd          LBCS Mon_Error         ; Long_CT = count
6397 20 3e 6a          JSR  Get_LAC           ; Long_AC = target
639a b3 37 fd          LBCS Mon_Error
639d 20 33 6b          JSR  Print_CR
63a0 a3 00             LDZ  #0
63a2 ff 64 01 _loop    BBS7 Long_PC+3,_rf     ; bit 31 ?
63a5 ea                NOP                    ; LDA  [Long_PC],Z
63a6 b2 61    _rf      LDA  (Long_PC),Z       ; backward copy
63a8 ff 5c 01          BBS7 Long_AC+3,_cf     ; bit 31 ?
63ab ea                NOP                    ; CMP  [Long_AC],Z
63ac d2 59    _cf      CMP  (Long_AC),Z
63ae f0 03             BEQ  _laba
63b0 20 01 6b          JSR  Hex_LPC
63b3 20 b5 61 _laba    JSR  Inc_LAC
63b6 20 c7 61          JSR  Inc_LPC
63b9 20 8c 6b          JSR  Dec_LCT
63bc 10 e4             BPL  _loop
63be 4c a5 60          JMP  Main
63c1          EndMod [Mon_Compare] Size = 48 [$30]

              ***************
              Module Mon_Hunt
              ***************

63c1 20 a7 6b          JSR  Param_Range       ; Long_PC = start
63c4 b3 0d fd          LBCS Mon_Error         ; Long_CT = count
63c7 a0 00             LDY  #0
63c9 20 70 6b          JSR  Get_Char
63cc c9 27             CMP  #APOSTR
63ce d0 17             BNE  _bin
63d0 20 70 6b          JSR  Get_Char          ; string hunt
63d3 c9 00             CMP  #0
63d5 f3 fc fc          LBEQ Mon_Error         ; null string

63d8 99 10 04 _lpstr   STA  Mon_Data,Y
63db c8                INY
63dc 20 70 6b          JSR  Get_Char
63df f0 18             BEQ  _hunt
63e1 c0 20             CPY  #32               ;max. string length
63e3 d0 f3             BNE  _lpstr
63e5 80 12             BRA  _hunt

63e7 20 3c 6a _bin     JSR  Got_LAC
63ea a5 59    _lpbin   LDA  Long_AC
63ec 99 10 04          STA  Mon_Data,Y
63ef c8                INY
63f0 20 3e 6a          JSR  Get_LAC
63f3 b0 04             BCS  _hunt
63f5 c0 20             CPY  #32               ;max. data length
63f7 d0 f1             BNE  _lpbin

63f9 84 65    _hunt    STY  Long_DA           ; hunt length
63fb 20 33 6b          JSR  Print_CR

63fe a0 00    _lpstart LDY  #0
6400 20 d9 61 _lpins   JSR  Fetch
6403 d9 10 04          CMP  Mon_Data,Y
6406 d0 08             BNE  _next
6408 c8                INY
6409 c4 65             CPY  Long_DA
640b d0 f3             BNE  _lpins
640d 20 01 6b          JSR  Hex_LPC           ; match
6410 20 e1 ff _next    JSR  STOP
6413 f3 90 fc          LBEQ Main
6416 20 c7 61          JSR  Inc_LPC
6419 20 8c 6b          JSR  Dec_LCT
641c 10 e0             BPL  _lpstart
641e 4c a5 60          JMP  Main
6421          EndMod [Mon_Hunt] Size = 96 [$60]

              ****************
              Module Load_Save
              ****************

6421 ac 08 04          LDY  Disk_Unit
6424 84 ba             STY  FA
6426 a0 08             LDY  #8
6428 84 b9             STY  SA
642a a0 00             LDY  #0
642c 84 bd             STY  BA
642e 84 b7             STY  FNLEN
6430 84 be             STY  FNBANK
6432 84 90             STY  STATUS
6434 a9 04             LDA  #>Mon_Data
6436 85 bc             STA  FNADR+1
6438 a9 10             LDA  #<Mon_Data
643a 85 bb             STA  FNADR
643c 20 70 6b _skip    JSR  Get_Char          ; skip blanks
643f f3 92 fc          LBEQ Mon_Error
6442 c9 20             CMP  #' '
6444 f0 f6             BEQ  _skip
6446 c9 22             CMP  #QUOTE            ; must be quote
6448 d3 89 fc          LBNE Mon_Error

644b a6 6f             LDX  Buf_Index
644d bd 00 02 _copyfn  LDA  Buffer,X          ; copy filename
6450 f0 4a             BEQ  _do               ; no more input
6452 e8                INX
6453 c9 22             CMP  #QUOTE
6455 f0 0c             BEQ  _unit             ; end of filename
6457 91 bb             STA  (FNADR),Y         ; store to filename
6459 e6 b7             INC  FNLEN
645b c8                INY
645c c0 13             CPY  #19               ; max = 16 plus prefix "@0:"
645e 90 ed             BCC  _copyfn
6460 4c d3 60          JMP  Mon_Error         ; filename too long

6463 86 6f    _unit    STX  Buf_Index         ; update read position
6465 20 70 6b          JSR  Get_Char
6468 f0 32             BEQ  _do               ; no more parameter
646a 20 3e 6a          JSR  Get_LAC
646d b0 2d             BCS  _do
646f a5 59             LDA  Long_AC           ; unit #
6471 85 ba             STA  FA
6473 20 3e 6a          JSR  Get_LAC
6476 b0 24             BCS  _do
6478 20 66 61          JSR  LAC_To_LPC        ; Long_PC = start address
647b 85 bd             STA  BA                ; Bank
647d 20 3e 6a          JSR  Get_LAC           ; Long_AC = end address + 1
6480 b0 42             BCS  _load             ; no end address -> load/verify
6482 20 33 6b          JSR  Print_CR
6485 a6 59             LDX  Long_AC           ; X/Y = end address
6487 a4 5a             LDY  Long_AC+1
6489 a5 93             LDA  VERCK             ; A = load/verify/save
648b c9 53             CMP  #'S'
648d d3 44 fc          LBNE Mon_Error         ; must be Save
6490 a9 00             LDA  #0
6492 85 b9             STA  SA                ; set SA for PRG
6494 a9 61             LDA  #Long_PC          ; Long_PC = start address
6496 20 d8 ff          JSR  SAVE
6499 4c a5 60 _exit    JMP  Main

649c a5 93    _do      LDA  VERCK
649e c9 56             CMP  #'V'              ; Verify
64a0 f0 07             BEQ  _exec
64a2 c9 4c             CMP  #'L'              ; Load
64a4 d3 2d fc          LBNE Mon_Error
64a7 a9 00             LDA  #0                ; 0 = LOAD
64a9 20 d5 ff _exec    JSR  LOAD              ; A == 0 : LOAD else VERIFY
64ac 4f 90 ea          BBR4 STATUS,_exit
64af a5 93             LDA  VERCK
64b1 f3 20 fc          LBEQ Mon_Error
64b4 b3 ef fb          LBCS Main
64b7 20 7d ff          JSR  PRIMM
64ba 20 45 52          .BYTE " ERROR",0
64c1 4c a5 60          JMP  Main

64c4 a6 61    _load    LDX  Long_PC
64c6 a4 62             LDY  Long_PC+1
64c8 a9 00             LDA  #0                ; 0 = use X/Y as load address
64ca 85 b9             STA  SA                ; and ignore load address from file
64cc 80 ce             BRA  _do
64ce          EndMod [Load_Save] Size = 173 [$ad]

              ***************
              Module Mon_Fill
              ***************

64ce 20 a7 6b          JSR  Param_Range       ; Long_PC = target
64d1 b3 00 fc          LBCS Mon_Error         ; Long_CT = count
64d4 20 3e 6a          JSR  Get_LAC           ; Long_AC = fill byte
64d7 b3 fa fb          LBCS Mon_Error
64da 20 33 6b          JSR  Print_CR
64dd a3 00             LDZ  #0
64df a5 59    _loop    LDA  Long_AC
64e1 ea 92 61          STA  [Long_PC],Z
64e4 20 c7 61          JSR  Inc_LPC
64e7 20 8c 6b          JSR  Dec_LCT
64ea 10 f3             BPL  _loop
64ec 4c a5 60          JMP  Main
64ef          EndMod [Mon_Fill] Size = 33 [$21]

              *******************
              Module Mon_Assemble
              *******************

64ef 20 3e 6a          JSR  Get_LAC           ; get 1st. parameter
64f2 b3 df fb          LBCS Mon_Error
64f5 20 66 61          JSR  LAC_To_LPC        ; Long_PC = PC

64f8 a2 00    _start   LDX  #0                ; mne letter counter
64fa 86 66             STX  Long_DA+1         ; clear encoded MNE
64fc 86 6c             STX  Op_Flag           ; 6:long branch 5:32 bit
64fe 8e 06 04          STX  Op_Ix             ; operand byte index
6501 8e 07 04          STX  Op_Len            ; operand length
6504 20 70 6b _getin   JSR  Get_Char
6507 d0 05             BNE  _laba
6509 e0 00             CPX  #0
650b f3 98 fb          LBEQ Main

650e c9 20    _laba    CMP  #' '
6510 f0 e6             BEQ  _start            ; restart after blank

              ;        check for long branches

6512 e0 01             CPX  #1
6514 d0 0e             BNE  _labb             ; -> not 2nd. char
6516 c9 42             CMP  #'B'
6518 d0 0a             BNE  _labb             ; 2nd. char != 'B'
651a ab 03 04          LDZ  Op_Mne
651d c2 4c             CPZ  #'L'
651f d0 03             BNE  _labb             ; 1st. Char != 'L'
6521 e7 6c             SMB6 Op_Flag           ; flag long branch
6523 ca                DEX                    ; skip 'L'

6524 9d 03 04 _labb    STA  Op_Mne,X          ; next mne character
6527 e8                INX
6528 e0 03             CPX  #3
652a d0 d8             BNE  _getin

              ;        encode 3 letter mnemonic

652c bd 02 04 _lpenc   LDA  Op_Mne-1,X
652f 38                SEC
6530 e9 3f             SBC  #$3f              ; offset
6532 a0 05             LDY  #5                ; 5 bit code
6534 4a       _lpbit   LSR  A
6535 66 65             ROR  Long_DA
6537 66 66             ROR  Long_DA+1
6539 88                DEY
653a d0 f8             BNE  _lpbit
653c ca                DEX
653d d0 ed             BNE  _lpenc

              ;        find packed MNE code in table

653f a2 5a             LDX  #90               ; # of mnemonics
6541 a5 65             LDA  Long_DA
6543 dd 08 71 _lpfind  CMP  MNE_L,X           ; compare left MNE
6546 d0 07             BNE  _nxfind
6548 bc 63 71          LDY  MNE_R,X
654b c4 66             CPY  Long_DA+1         ; compare right MNE
654d f0 06             BEQ  _found
654f ca       _nxfind  DEX
6550 10 f1             BPL  _lpfind
6552 4c d3 60          JMP  Mon_Error

6555 8e 02 04 _found   STX  Ix_Mne

              ;        find 1st. opcode for this mnemonic

6558 8a                TXA
6559 a2 00             LDX  #0
655b dd be 71 _lpopc   CMP  MNE_Index,X
655e f0 03             BEQ  _exopc
6560 e8                INX
6561 d0 f8             BNE  _lpopc
6563 86 6b    _exopc   STX  Op_Code

              ;        check for BBR BBS RMB SMB

6565 8a                TXA
6566 29 07             AND  #7
6568 c9 07             CMP  #7
656a d0 1d             BNE  _labc

656c 20 70 6b          JSR  Get_Char
656f c9 30             CMP  #'0'
6571 93 60 fb          LBCC Mon_Error
6574 c9 38             CMP  #'8'
6576 b3 5b fb          LBCS Mon_Error
6579 0a                ASL  A
657a 0a                ASL  A
657b 0a                ASL  A
657c 0a                ASL  A
657d 05 6b             ORA  Op_Code
657f 85 6b             STA  Op_Code

6581 20 70 6b          JSR  Get_Char
6584 c9 20             CMP  #' '
6586 d3 4b fb          LBNE Mon_Error

              ;        read operand

6589 a9 00    _labc    LDA  #0
658b 85 6a    _labd    STA  Mode_Flags
658d 20 5b 6a          JSR  Read_Number
6590 b3 41 fb          LBCS Mon_Error
6593 f0 1c             BEQ  _labg             ; no operand
6595 a5 5b             LDA  Long_AC+2
6597 d3 3a fb          LBNE Mon_Error         ; -> overflow
659a a0 02             LDY  #2                ; Y=2 word operand
659c a5 5a             LDA  Long_AC+1
659e d0 01             BNE  _labf             ; high byte not zero
65a0 88                DEY                    ; Y=1 byte operand
65a1 ae 06 04 _labf    LDX  Op_Ix             ; X = operand value #
65a4 98                TYA                    ; A = 1:byte or 2:word
65a5 9d 07 04          STA  Op_Len,X          ; store operand length
65a8 ee 06 04          INC  Op_Ix             ; ++index to operand value
65ab 8a                TXA                    ; A = current index
65ac d0 03             BNE  _labg             ; -> at 2nd. byte
65ae 20 72 61          JSR  LAC_To_LCT        ; Long_CT = 1st. operand
65b1 c6 6f    _labg    DEC  Buf_Index         ; back to delimiter

65b3 20 70 6b _lpnop   JSR  Get_Char          ; get delimiter
65b6 f3 ed 00          LBEQ _adjust           ; end of operand
65b9 c9 20             CMP  #' '
65bb f0 f6             BEQ  _lpnop

              ;        immediate

65bd c9 23             CMP  #'#'
65bf d0 08             BNE  _lbra
65c1 a5 6a             LDA  Mode_Flags
65c3 d0 70             BNE  _error
65c5 a9 80             LDA  #$80              ; immediate mode
65c7 80 c2             BRA  _labd

              ;        left bracket

65c9 c9 5b    _lbra    CMP  #'['
65cb d0 0a             BNE  _indir
65cd a5 6a             LDA  Mode_Flags
65cf d0 64             BNE  _error
65d1 d7 6c             SMB5 Op_Flag           ; 32 bit mode
65d3 a9 40             LDA  #$40              ; ( flag
65d5 80 b4             BRA  _labd

              ;        left parenthesis

65d7 c9 28    _indir   CMP  #'('
65d9 d0 08             BNE  _comma
65db a5 6a             LDA  Mode_Flags
65dd d0 56             BNE  _error
65df a9 40             LDA  #$40              ; ( flag
65e1 80 a8             BRA  _labd

              ;        comma

65e3 c9 2c    _comma   CMP  #','
65e5 d0 1f             BNE  _stack
65e7 ad 06 04          LDA  Op_Ix             ; operand value #
65ea f0 49             BEQ  _error
65ec a2 04             LDX  #4                ; outside comma
65ee a5 6a             LDA  Mode_Flags
65f0 f0 0e             BEQ  _comma1           ; no flags yet
65f2 c9 78             CMP  #$78              ; ($nn,SP)
65f4 f0 0a             BEQ  _comma1
65f6 c9 48             CMP  #$48              ; ($nn)
65f8 f0 06             BEQ  _comma1
65fa a2 20             LDX  #$20              ; , inside comma
65fc c9 40             CMP  #$40              ; (
65fe d0 35             BNE  _error
6600 8a       _comma1  TXA
6601 05 6a             ORA  Mode_Flags
6603 4c 8b 65          JMP  _labd

              ;        stack relative

6606 c9 53    _stack   CMP  #'S'
6608 d0 12             BNE  _rbra
660a 20 70 6b          JSR  Get_Char
660d c9 50             CMP  #'P'
660f d0 24             BNE  _error
6611 a5 6a             LDA  Mode_Flags
6613 c9 60             CMP  #$60              ; ($nn,
6615 d0 1e             BNE  _error
6617 09 10             ORA  #%0001 0000       ; SP flag
6619 4c 8b 65          JMP  _labd

              ;        right bracket

661c c9 5d    _rbra    CMP  #']'
661e d0 18             BNE  _right
6620 5f 6c 12          BBR5 Op_Flag,_error
6623 ad 06 04          LDA  Op_Ix
6626 f3 ab fa          LBEQ Mon_Error         ; no value
6629 a5 6a             LDA  Mode_Flags
662b c9 40             CMP  #$40              ; (
662d d3 a4 fa          LBNE Mon_Error
6630 09 08             ORA  #%0000 1000       ; )
6632 4c 8b 65          JMP  _labd

6635 4c d3 60 _error   JMP  Mon_Error

              ;        right parenthesis

6638 c9 29    _right   CMP  #')'
663a d0 1a             BNE  _X
663c ad 06 04          LDA  Op_Ix
663f f3 92 fa          LBEQ Mon_Error         ; no value
6642 a5 6a             LDA  Mode_Flags
6644 c9 40             CMP  #$40              ; (
6646 f0 09             BEQ  _right1
6648 c9 61             CMP  #$61              ; ($nn,X
664a f0 05             BEQ  _right1
664c c9 70             CMP  #$70              ; ($nn,SP
664e d3 83 fa          LBNE Mon_Error
6651 09 08    _right1  ORA  #%0000 1000       ; )
6653 4c 8b 65          JMP  _labd

6656 c9 58    _X       CMP  #'X'
6658 d0 16             BNE  _Y
665a ad 06 04          LDA  Op_Ix
665d f3 74 fa          LBEQ Mon_Error
6660 a5 6a             LDA  Mode_Flags
6662 c9 60             CMP  #$60
6664 f0 05             BEQ  _X1
6666 c9 04             CMP  #4
6668 d3 69 fa          LBNE Mon_Error
666b 09 01    _X1      ORA  #%0000 0001
666d 4c 8b 65          JMP  _labd

              ;        Y

6670 c9 59    _Y       CMP  #'Y'
6672 d0 1a             BNE  _Z
6674 ad 06 04          LDA  Op_Ix
6677 f3 5a fa          LBEQ Mon_Error
667a a5 6a             LDA  Mode_Flags
667c c9 4c             CMP  #$4c             ; ($nn),
667e f0 09             BEQ  _Y1
6680 c9 04             CMP  #4               ; $nn,
6682 f0 05             BEQ  _Y1
6684 c9 7c             CMP  #$7c             ; ($nn,SP),
6686 d3 4b fa          LBNE Mon_Error
6689 09 02    _Y1      ORA  #%0000 0010      ; Y
668b 4c 8b 65          JMP  _labd

              ;        Z

668e c9 5a    _Z       CMP  #'Z'
6690 d3 41 fa          LBNE Mon_Error
6693 ad 06 04          LDA  Op_Ix
6696 f3 3b fa          LBEQ Mon_Error
6699 a5 6a             LDA  Mode_Flags
669b c9 4c             CMP  #$4c              ; $nn,
669d d3 34 fa          LBNE Mon_Error
66a0 09 03             ORA  #%0000 0011       ; Z
66a2 4c 8b 65          JMP  _labd

              ;        BBR BBS RMB SMB  two operands

66a5 ad 02 04 _adjust  LDA  Ix_Mne
66a8 ae 06 04          LDX  Op_Ix             ; # if values
66ab f0 52             BEQ  _match            ; -> no operand
66ad ca                DEX
66ae f0 25             BEQ  _one             ; ->  one operand
66b0 ca                DEX
66b1 d3 20 fa          LBNE Mon_Error         ; -> error if more than 2
66b4 c9 05             CMP  #5                ; BBR
66b6 f0 05             BEQ  _BB
66b8 c9 06             CMP  #6                ; BBS
66ba d3 17 fa          LBNE Mon_Error
66bd a5 5e    _BB      LDA  Long_CT+1
66bf d3 12 fa          LBNE Mon_Error
66c2 a9 03             LDA  #3                ; offset
66c4 20 aa 67          JSR  Branch_Target
66c7 a5 6b             LDA  Op_Code
66c9 a4 59             LDY  Long_AC
66cb a6 5d             LDX  Long_CT
66cd 86 59             STX  Long_AC
66cf 84 5a             STY  Long_AC+1
66d1 a0 02             LDY  #2
66d3 80 4d             BRA  _store

              ;        one operand in Long_CT

66d5 a6 5d    _one     LDX  Long_CT
66d7 a4 5e             LDY  Long_CT+1
66d9 86 59             STX  Long_AC
66db 84 5a             STY  Long_AC+1            ; Aval = operand
66dd a2 0a             LDX  #10
66df dd bd 72 _lpbrain CMP  BRAIN-1,X
66e2 f0 05             BEQ  _branch
66e4 ca                DEX
66e5 d0 f8             BNE  _lpbrain
66e7 80 16             BRA  _match

              ;        branch instruction

66e9 a5 6a    _branch  LDA  Mode_Flags
66eb d3 e6 f9          LBNE Mon_Error         ; only value
66ee a9 02             LDA  #2                ; branch offset
66f0 20 aa 67          JSR  Branch_Target
66f3 a5 6b             LDA  Op_Code
66f5 a0 01             LDY  #1                ; short branch
66f7 6f 6c 03          BBR6 Op_Flag,_bran1
66fa c8                INY                    ; long branch
66fb 09 03             ORA  #3
66fd 80 23    _bran1   BRA  _store

              ;        find opcode matching mnemonic and address mode

66ff 20 d5 67 _match   JSR  Mode_Index
6702 20 bd 67 _lpmatch JSR  Match_Mode
6705 f0 17             BEQ  _okmat
6707 ad 07 04          LDA  Op_Len
670a f3 c7 f9          LBEQ Mon_Error
670d a5 6a             LDA  Mode_Flags
670f 33 c2 f9          LBMI Mon_Error
6712 29 3f             AND  #%0011 1111
6714 85 6a             STA  Mode_Flags
6716 ee 07 04          INC  Op_Len
6719 20 e7 67          JSR  Size_To_Mode
671c 80 e4             BRA  _lpmatch
671e ac 07 04 _okmat   LDY  Op_Len
6721 8a                TXA

              ;        store instruction bytes
              ;        -----------------------
              ;        A    = opcode
              ;        Y    = operand length
              ;        Long_AC = operand value

6722 85 6b    _store   STA  Op_Code
6724 84 6d             STY  Op_Size
6726 e6 6d             INC  Op_Size
6728 5f 6c 17          BBR5 Op_Flag,_storen
672b a9 ea             LDA  #$ea              ; 32 bit prefix
672d a3 00             LDZ  #0
672f ea 92 61          STA  [Long_PC],Z       ; store prefix
6732 1b                INZ
6733 a5 6b             LDA  Op_Code
6735 ea 92 61          STA  [Long_PC],Z       ; store opcode
6738 1b                INZ
6739 a5 59             LDA  Long_AC
673b ea 92 61          STA  [Long_PC],Z       ; store address
673e e6 6d             INC  Op_Size
6740 80 13             BRA  _print

6742 5a       _storen  PHY
6743 fb                PLZ                    ; Z = Y
6744 f0 0a             BEQ  _store1

6746 b9 58 00 _lpsto   LDA  Long_AC-1,Y
6749 ea 92 61          STA  [Long_PC],Z
674c 3b                DEZ
674d 88                DEY
674e d0 f6             BNE  _lpsto

6750 a5 6b    _store1  LDA  Op_Code
6752 ea 92 61          STA  [Long_PC],Z

6755 20 7d ff _print   JSR  PRIMM
6758 0d 91 41          .BYTE 13,$91,"A \eQ",0
675f 20 32 68          JSR  Print_Code
6762 e6 6d             INC  Op_Size
6764 a5 6d             LDA  Op_Size
6766 20 99 6b          JSR  Add_LPC

              ; print out command 'A' together with next address
              ; and put it into buffer too,
              ; for easy entry of next assembler instruction

6769 20 7d ff          JSR  PRIMM
676c 0d 41 20          .BYTE CR,"A ",0

6770 a9 41             LDA  #'A'
6772 8d 00 02          STA  Buffer
6775 a9 20             LDA  #' '
6777 8d 01 02          STA  Buffer+1
677a a0 02             LDY  #2
677c a2 02             LDX  #2                ; 6 digits
677e b5 61             LDA  Long_PC,X
6780 d0 01             BNE  _auto
6782 ca                DEX                    ; 4 digits
6783 da       _auto    PHX
6784 b5 61             LDA  Long_PC,X
6786 20 4c 6b          JSR  A_To_Hex
6789 99 00 02          STA  Buffer,Y
678c 20 d2 ff          JSR  CHROUT
678f c8                INY
6790 8a                TXA
6791 99 00 02          STA  Buffer,Y
6794 20 d2 ff          JSR  CHROUT
6797 c8                INY
6798 fa                PLX
6799 ca                DEX
679a 10 e7             BPL  _auto

679c a9 20             LDA  #' '
679e 99 00 02          STA  Buffer,Y
67a1 20 d2 ff          JSR  CHROUT
67a4 c8                INY
67a5 98                TYA
67a6 aa                TAX
67a7 4c aa 60          JMP  Main_A
67aa          EndMod [Mon_Assemble] Size = 699 [$2bb]

              ********************
              Module Branch_Target
              ********************

67aa c3 59             DEW  Long_AC
67ac 3a                DEC  A
67ad d0 fb             BNE  Branch_Target

              ;        Target - PC

67af 38                SEC
67b0 a5 59             LDA  Long_AC
67b2 e5 61             SBC  Long_PC
67b4 85 59             STA  Long_AC
67b6 a5 5a             LDA  Long_AC+1
67b8 e5 62             SBC  Long_PC+1
67ba 85 5a             STA  Long_AC+1
67bc 60                RTS
67bd          EndMod [Branch_Target] Size = 19 [$13]

              *****************
              Module Match_Mode
              *****************

              ;        find matching mnemonic and address mode

67bd a6 6b             LDX  Op_Code           ; try this opcode
67bf a5 6a             LDA  Mode_Flags         ; size and address mode
67c1 dd c8 72 _loop    CMP  LEN_ADM,X
67c4 f0 0e             BEQ  _return           ; success  ZF=1

              ;        search for next opcode with same mnemonic

67c6 e8       _next    INX                    ; next opcode
67c7 f0 0a             BEQ _error
67c9 bc be 71          LDY  MNE_Index,X
67cc cc 02 04          CPY  Ix_Mne            ; same mnemonic ?
67cf f0 f0             BEQ  _loop             ; -> compare again
67d1 80 f3             BRA  _next

67d3 ca       _error   DEX                    ; X = $ff ZF=0
67d4 60       _return  RTS
67d5          EndMod [Match_Mode] Size = 24 [$18]

              *****************
              Module Mode_Index
              *****************

67d5 a5 6a             LDA  Mode_Flags
67d7 a2 00             LDX  #0
67d9 dd c8 73 _loop    CMP  ADMODE,X
67dc f0 07             BEQ  _found
67de e8                INX
67df e0 10             CPX  #16
67e1 90 f6             BCC  _loop
67e3 8a                TXA
67e4 60                RTS
67e5 86 6a    _found   STX  Mode_Flags
67e7          EndMod [Mode_Index] Size = 18 [$12]

              *******************
              Module Size_To_Mode
              *******************

67e7 ad 07 04          LDA  Op_Len
67ea 4a                LSR  A
67eb 6a                ROR  A
67ec 6a                ROR  A
67ed 05 6a             ORA  Mode_Flags
67ef 85 6a             STA  Mode_Flags
67f1 a2 00             LDX  #0
67f3 60                RTS
67f4          EndMod [Size_To_Mode] Size = 13 [$d]

              **********************
              Module Mon_Disassemble
              **********************

67f4 20 3e 6a          JSR  Get_LAC           ; get 1st. parameter
67f7 b0 08             BCS  _nopar
67f9 20 66 61          JSR  LAC_To_LPC        ; Long_PC = start address
67fc 20 3e 6a          JSR  Get_LAC           ; Long_AC = end address
67ff 90 06             BCC  range
6801 a9 20    _nopar   LDA  #32               ; disassemble 32 bytes
6803 85 5d             STA  Long_CT
6805 80 06             BRA  _loop
6807 20 99 61 range    JSR  LAC_Minus_LPC     ; Long_CT = range
680a 93 c7 f8          LBCC Mon_Error         ; -> negative

680d 20 38 6b _loop    JSR  CR_Erase          ; prepare empty line
6810 20 e1 ff          JSR  STOP
6813 f3 90 f8          LBEQ Main
6816 20 2c 68          JSR  Dis_Code          ; disassemble one line
6819 e6 6d             INC  Op_Size
681b a5 6d             LDA  Op_Size
681d 20 99 6b          JSR  Add_LPC           ; advance address
6820 a5 5d             LDA  Long_CT
6822 38                SEC
6823 e5 6d             SBC  Op_Size
6825 85 5d             STA  Long_CT
6827 b0 e4             BCS  _loop
6829 4c a5 60          JMP  Main
682c          EndMod [Mon_Disassemble] Size = 56 [$38]

              ***************
              Module Dis_Code
              ***************

682c 20 7d ff          JSR  PRIMM
682f 2e 20 00          .BYTE ". ",0
6832          EndMod [Dis_Code] Size = 6 [$6]

              *****************
              Module Print_Code
              *****************

              ;        print 24 bit address of instruction

6832 20 01 6b          JSR  Hex_LPC          ; 24 bit address

              ;        read opcode and calculate length and address mode

6835 a0 00             LDY  #0
6837 84 6c             STY  Op_Flag           ; clear flags
6839 20 d9 61          JSR  Fetch             ; fetch from (banked) address

              ;        check for Q instructions

683c c9 42             CMP  #$42              ; NEG
683e d0 0f             BNE  _nop
6840 c8                INY                    ; Y = 1
6841 20 d9 61          JSR  Fetch
6844 c9 42             CMP  #$42              ; NEG
6846 d0 07             BNE  _nop
6848 c7 6c             SMB4 Op_Flag           ; Q flag
684a a9 02             LDA  #2
684c 20 99 6b          JSR  Add_LPC           ; skip NEG NEG

              ;        check for 32 bit address mode

684f a0 00    _nop     LDY  #0
6851 20 d9 61          JSR  Fetch
6854 85 6b             STA  Op_Code
6856 aa                TAX
6857 c9 ea             CMP  #$ea              ; prefix ?
6859 d0 12             BNE  _normal
685b c8                INY
685c 20 d9 61          JSR  Fetch             ; opcode after prefix
685f 29 1f             AND  #%0001 1111       ; identify ($nn),Z codes
6861 c9 12             CMP  #%0001 0010
6863 d0 08             BNE  _normal
6865 d7 6c             SMB5 Op_Flag           ; set extended flag
6867 20 d9 61          JSR  Fetch
686a 85 6b             STA  Op_Code           ; code after prefix
686c aa                TAX

686d bc c8 72 _normal  LDY  LEN_ADM,X         ; Y = length and address mode
6870 98                TYA                    ; A = length and address mode
6871 29 0f             AND  #15               ; A = address mode
6873 aa                TAX                    ; X = address mode
6874 bd c8 73          LDA  ADMODE,X          ; A = mode flags
6877 85 69             STA  Adr_Flags         ; store
6879 98                TYA                    ; A = length and address mode
687a 29 c0             AND  #%1100 0000       ; mask instruction length
687c 0a                ASL  A                 ; rotate into lower two bits
687d 2a                ROL  A
687e 2a                ROL  A
687f 85 6d             STA  Op_Size           ; store
6881 5f 6c 02          BBR5 Op_Flag,_norm1
6884 e6 6d             INC  Op_Size
6886          _norm1

              ;        print instruction and operand bytes

6886 a0 00             LDY  #0
6888 a9 20             LDA  #' '
688a 4f 6c 02          BBR4 Op_Flag,_blpr
688d a9 2a             LDA  #'*'              ; print * for NEG NEG
688f 20 d2 ff _blpr    JSR  CHROUT
6892 20 d9 61 _lphex   JSR  Fetch
6895 20 2b 6b          JSR  Print_Hex_Blank
6898 c0 02             CPY  #2
689a f0 13             BEQ  _long             ; stop after 3 bytes
689c c4 6d             CPY  Op_Size
689e c8                INY
689f 90 f1             BCC  _lphex

              ;        fill up with blanks

68a1 c0 03    _lpfill  CPY  #3
68a3 b0 0a             BCS  _long
68a5 20 7d ff          JSR  PRIMM
68a8 20 20 20          .BYTE "   ",0
68ac c8                INY
68ad 80 f2             BRA  _lpfill

              ;        detect long branches

68af a9 9e    _long    LDA  #YELLOW
68b1 20 d2 ff          JSR  CHROUT
68b4 a6 6b             LDX  Op_Code
68b6 bd c8 72          LDA  LEN_ADM,X
68b9 c9 a0             CMP  #%1010 0000        ; long branch mode
68bb d0 07             BNE  _locate
68bd e7 6c             SMB6 Op_Flag            ; set long branch flag
68bf a9 4c             LDA  #'L'
68c1 20 d2 ff          JSR  CHROUT

              ;        locate mnemonic text

68c4 a6 6b    _locate  LDX  Op_Code           ; X = opcode
68c6 bc be 71          LDY  MNE_Index,X       ; Y = index to mnemonic text
68c9 b9 08 71          LDA  MNE_L,Y           ; A = packed left part
68cc 85 5a             STA  Long_AC+1
68ce b9 63 71          LDA  MNE_R,Y           ; A = packed right part
68d1 85 59             STA  Long_AC

              ;        unpack and print mnemonic text

68d3 a2 03             LDX  #3                ; 3 letters
68d5 a9 00    _lpmne   LDA  #0
68d7 a0 05             LDY  #5                ; 5 bits per letter
68d9 06 59    _lplet   ASL  Long_AC
68db 26 5a             ROL  Long_AC+1
68dd 2a                ROL  A                 ; rotate letter into A
68de 88                DEY
68df d0 f8             BNE  _lplet            ; next bit
68e1 69 3f             ADC  #$3f              ; add offset (C = 0)
68e3 ca                DEX
68e4 f0 06             BEQ  _lastc            ; 3rd. character
68e6 4b                TAZ                    ; remember
68e7 20 d2 ff          JSR  CHROUT            ; and print it
68ea 80 e9             BRA  _lpmne            ; next letter

68ec 4f 6c 21 _lastc   BBR4 Op_Flag,_lbra     ; -> no Q
68ef c9 41             CMP  #'A'              ; LDA, STA, ORA
68f1 f0 0c             BEQ  _Q3
68f3 c9 43             CMP  #'C'              ; DEC, INC
68f5 d0 0f             BNE  _Q4
68f7 c2 45             CPZ  #'E'              ; DEC
68f9 f0 04             BEQ  _Q3
68fb c2 4e             CPZ  #'N'              ; INC
68fd d0 07             BNE  _Q4
68ff a9 51    _Q3      LDA  #'Q'              ; LDQ, STQ, ORQ, INQ, DEQ
6901 20 d2 ff          JSR  CHROUT
6904 80 2e             BRA  _mne4
6906 20 d2 ff _Q4      JSR  CHROUT
6909 a9 51             LDA  #'Q'              ; add Q as 4th. char
690b 20 d2 ff          JSR  CHROUT
690e 80 27             BRA  _mne5

6910 20 d2 ff _lbra    JSR  CHROUT            ; 3rd. character
6913 ef 6c 21          BBS6 Op_Flag,_mne5     ; long branch

              ;        check for 4-letter bit instructions

6916 a5 6b             LDA  Op_Code
6918 29 0f             AND  #15
691a c9 07             CMP  #7                ; RMB & SMB
691c f0 06             BEQ  _biti
691e c9 0f             CMP  #15               ; BBR & BBS
6920 d0 12             BNE  _mne4
6922 f7 6c             SMB7 Op_Flag           ; flag two operands
6924 a5 6b    _biti    LDA  Op_Code
6926 29 70             AND  #%0111 0000
6928 0a                ASL  A
6929 2a                ROL  A
692a 2a                ROL  A
692b 2a                ROL  A
692c 2a                ROL  A
692d 09 30             ORA  #'0'
692f 20 d2 ff          JSR  CHROUT
6932 80 03             BRA  _mne5

6934 20 2e 6b _mne4    JSR  Print_Blank
6937 20 2e 6b _mne5    JSR  Print_Blank
693a a9 05             LDA  #WHITE
693c 20 d2 ff          JSR  CHROUT

              ;        check for accumulator operand

693f a5 6b             LDA  Op_Code
6941 a2 08             LDX  #8
6943 ca       _lpaccu  DEX
6944 30 12             BMI  _oper
6946 dd d8 73          CMP  ACCUMODE,X
6949 d0 f8             BNE  _lpaccu

694b a9 41             LDA  #'A'
694d 4f 6c 02          BBR4 Op_Flag,_accu
6950 a9 51             LDA  #'Q'
6952 20 d2 ff _accu    JSR  CHROUT
6955 4c 3b 6a          JMP  _return

              ;        fetch and decode operand

6958 a6 6d    _oper    LDX  Op_Size
695a f3 df 00          LBEQ _return           ; -> no operand

695d 7f 69 04          BBR7 Adr_Flags,_laba   ; bit 7: immediate
6960 a9 23             LDA  #'#'
6962 80 0a             BRA  _labb
6964 6f 69 0a _laba    BBR6 Adr_Flags,_labc   ; bit 6: left (
6967 a9 28             LDA  #'('
6969 5f 6c 02          BBR5 Op_Flag,_labb
696c a9 5b             LDA  #'['
696e 20 d2 ff _labb    JSR  CHROUT
6971 a9 24    _labc    LDA  #'$'
6973 20 d2 ff          JSR  CHROUT

              ;        fetch operand to Long_AC

6976 a0 00             LDY  #0
6978 84 5a             STY  Long_AC+1
697a c8       _lpfop   INY
697b 20 d9 61          JSR  Fetch
697e 99 58 00          STA  Long_AC-1,Y
6981 c4 6d             CPY  Op_Size
6983 90 f5             BCC  _lpfop

              ;        interpret address modes

6985 a6 6b             LDX  Op_Code
6987 bd c8 72          LDA  LEN_ADM,X
698a 29 20             AND  #%0010 0000       ; branches
698c d3 84 00          LBNE _rel

              ;        print 16 bit operand hi/lo or 8 bit operand

698f 5f 6c 0c          BBR5 Op_Flag,_proper
6992 a5 5a             LDA  Long_AC+1
6994 20 40 6b          JSR  Print_Hex         ; [$nn],Z
6997 a9 5d             LDA  #']'
6999 20 d2 ff          JSR  CHROUT
699c 80 35             BRA  _labf

699e a4 6d    _proper  LDY  Op_Size
69a0 7f 6c 02          BBR7 Op_Flag,_lpoper
69a3 a0 01             LDY  #1
69a5 b9 58 00 _lpoper  LDA  Long_AC-1,Y
69a8 20 40 6b          JSR  Print_Hex
69ab 88                DEY
69ac d0 f7             BNE  _lpoper

69ae 5f 69 1a          BBR5 Adr_Flags,_labe   ; comma flag
69b1 a9 2c             LDA  #','
69b3 20 d2 ff          JSR  CHROUT

69b6 4f 69 0a          BBR4 Adr_Flags,_labd   ; SP flag
69b9 a9 53             LDA  #'S'
69bb 20 d2 ff          JSR  CHROUT
69be a9 50             LDA  #'P'
69c0 20 d2 ff          JSR  CHROUT

69c3 0f 69 05 _labd    BBR0 Adr_Flags,_labe   ; X flag
69c6 a9 58             LDA  #'X'
69c8 20 d2 ff          JSR  CHROUT

69cb 3f 69 05 _labe    BBR3 Adr_Flags,_labf   ; ) flag
69ce a9 29             LDA  #')'
69d0 20 d2 ff          JSR  CHROUT

69d3 4f 6c 08 _labf    BBR4 Op_Flag,_comch    ; not a Q instruction
69d6 a5 69             LDA  Adr_Flags
69d8 29 03             AND  #3
69da c9 01             CMP  #1
69dc d0 5d             BNE  _return           ; Q only with ,X

69de 2f 69 12 _comch   BBR2 Adr_Flags,_labg   ; , flag
69e1 a9 2c             LDA  #','
69e3 20 d2 ff          JSR  CHROUT

69e6 a5 69             LDA  Adr_Flags
69e8 29 03             AND  #%0000 0011 ; $03
69ea f0 07             BEQ  _labg
69ec a8                TAY
69ed b9 e7 73          LDA  Index_Char-1,Y
69f0 20 d2 ff          JSR  CHROUT

              ;        fetch 2nd. operand for BBR and BBS

69f3 7f 6c 45 _labg    BBR7 Op_Flag,_return
69f6 a9 2c             LDA  #','
69f8 20 d2 ff          JSR  CHROUT
69fb a9 24             LDA  #'$'
69fd 20 d2 ff          JSR  CHROUT
6a00 a0 02             LDY  #2
6a02 20 d9 61          JSR  Fetch
6a05 85 59             STA  Long_AC
6a07 a9 00             LDA  #0
6a09 85 5a             STA  Long_AC+1
6a0b 88                DEY
6a0c 84 6d             STY  Op_Size           ; Op_Size = 1
6a0e a9 03             LDA  #3                ; offset for relative address
6a10 80 02             BRA  _rela

6a12 a9 02    _rel     LDA  #2                ; offset for relative address
6a14 48       _rela    PHA
6a15 a5 6d             LDA  Op_Size           ; 1:short   2:long
6a17 4a                LSR  A
6a18 6a                ROR  A
6a19 25 59             AND  Long_AC
6a1b 10 04             BPL  _labh
6a1d a9 ff             LDA  #$ff              ; backward branch
6a1f 85 5a             STA  Long_AC+1

6a21 fa       _labh    PLX                    ; offset 2 or 3
6a22 e3 59    _lpinw   INW  Long_AC
6a24 ca                DEX
6a25 d0 fb             BNE  _lpinw

6a27 18                CLC
6a28 a5 59             LDA  Long_AC
6a2a 65 61             ADC  Long_PC
6a2c 48                PHA
6a2d a5 5a             LDA  Long_AC+1
6a2f 65 62             ADC  Long_PC+1
6a31 aa                TAX
6a32 68                PLA
6a33 20 25 6b          JSR  Print_XA_Hex
6a36 7f 6c 02          BBR7 Op_Flag,_return
6a39 e6 6d             INC  Op_Size
6a3b 60       _return  RTS
6a3c          EndMod [Print_Code] Size = 522 [$20a]

              **************
              Module Got_LAC
              **************

6a3c c6 6f             DEC  Buf_Index
6a3e          EndMod [Got_LAC] Size = 2 [$2]

              **************
              Module Get_LAC
              **************

6a3e 20 5b 6a          JSR  Read_Number
6a41 b0 0f             BCS  _error            ; illegal character
6a43 f0 10             BEQ  _noval            ; no value
6a45 20 6e 6b          JSR  Got_Char          ; delimiter ?
6a48 f0 0d             BEQ  _end              ; end of input
6a4a c9 20             CMP  #' '
6a4c f0 0b             BEQ  _ok
6a4e c9 2c             CMP  #','
6a50 f0 07             BEQ  _ok
6a52 4c d3 60 _error   JMP  Mon_Error         ; stack is reset in Mon_Error

6a55 38       _noval   SEC
6a56 60                RTS

6a57 c6 6f    _end     DEC  Buf_Index
6a59 18       _ok      CLC
6a5a 60                RTS
6a5b          EndMod [Get_LAC] Size = 29 [$1d]

              ******************
              Module Read_Number
              ******************

6a5b da                PHX
6a5c 5a                PHY
6a5d db                PHZ
6a5e a9 00             LDA  #0
6a60 85 6e             STA  Dig_Cnt           ; count columns read
6a62 85 59             STA  Long_AC           ; clear result Long_AC
6a64 85 5a             STA  Long_AC+1
6a66 85 5b             STA  Long_AC+2
6a68 85 5c             STA  Long_AC+3

6a6a 20 61 6b          JSR  Get_Glyph         ; get 1st. character
6a6d f3 8b 00          LBEQ _exit
6a70 c9 27             CMP  #APOSTR           ; character entry 'C
6a72 d0 0b             BNE  _numeric
6a74 20 70 6b          JSR  Get_Char          ; character after '
6a77 85 59             STA  Long_AC
6a79 e6 6e             INC  Dig_Cnt
6a7b e6 6f             INC  Buf_Index         ; position on delimiter
6a7d 80 7b             BRA  _exit

6a7f a0 03    _numeric LDY  #3                ; $ + % %
6a81 d9 19 61 _prefix  CMP  Cons_Prefix,Y     ; Y = base index
6a84 f0 06             BEQ  _digit            ; -> valid prefix
6a86 88                DEY
6a87 10 f8             BPL  _prefix
6a89 c8                INY                    ; Y = 0
6a8a c6 6f             DEC  Buf_Index         ; character is digit

6a8c 20 70 6b _digit   JSR  Get_Char          ; hex -> BCD
6a8f f0 69             BEQ  _exit             ; ? : ; and zero terminate
6a91 c9 30             CMP  #'0'
6a93 90 65             BCC  _exit
6a95 c9 3a             CMP  #':'
6a97 90 0a             BCC  _valid            ; 0-9
6a99 c9 41             CMP  #'A'
6a9b 90 5d             BCC  _exit
6a9d c9 47             CMP  #'G'
6a9f b0 59             BCS  _exit
6aa1 e9 07             SBC  #7                ; hex conversion
6aa3 e9 2f    _valid   SBC  #'0'-1
6aa5 d9 e0 73          CMP  Num_Base,Y
6aa8 b0 4d             BCS  _error
6aaa 48                PHA                    ; push digit
6aab e6 6e             INC  Dig_Cnt

6aad c0 01             CPY  #1                ; decimal
6aaf d0 15             BNE  _laba

6ab1 a2 03             LDX  #3                ; push Long_AC
6ab3 b5 59    _push    LDA  Long_AC,X
6ab5 48                PHA
6ab6 ca                DEX
6ab7 10 fa             BPL  _push
6ab9 ba                TSX                    ; double pushed value
6aba 1e 01 01          ASL  Stack+1,X
6abd 3e 02 01          ROL  Stack+2,X
6ac0 3e 03 01          ROL  Stack+3,X
6ac3 3e 04 01          ROL  Stack+4,X

6ac6 be e4 73 _laba    LDX  Num_Bits,Y
6ac9 06 59    _shift   ASL  Long_AC
6acb 26 5a             ROL  Long_AC+1
6acd eb 5b 00          ROW  Long_AC+2
6ad0 b0 25             BCS  _error            ; overflow
6ad2 ca                DEX
6ad3 d0 f4             BNE  _shift

6ad5 c0 01             CPY  #1                ; decimal adjustment
6ad7 d0 0e             BNE  _labc
6ad9 a2 00             LDX  #0
6adb a3 03             LDZ  #3
6add 18                CLC
6ade 68       _pull    PLA
6adf 75 59             ADC  Long_AC,X
6ae1 95 59             STA  Long_AC,X
6ae3 e8                INX
6ae4 3b                DEZ
6ae5 10 f7             BPL  _pull

6ae7 68       _labc    PLA                    ; pull digit
6ae8 18                CLC
6ae9 65 59             ADC  Long_AC
6aeb 85 59             STA  Long_AC
6aed 90 9d             BCC  _digit
6aef e6 5a             INC  Long_AC+1
6af1 d0 99             BNE  _digit
6af3 e3 5b             INW  Long_AC+2
6af5 d0 95             BNE  _digit

6af7 38       _error   SEC
6af8 80 01             BRA  _return
6afa 18       _exit    CLC
6afb fb       _return  PLZ
6afc 7a                PLY
6afd fa                PLX
6afe a5 6e             LDA  Dig_Cnt           ; digits read
6b00 60                RTS
6b01          EndMod [Read_Number] Size = 166 [$a6]

              **************
              Module Hex_LPC
              **************

6b01 a6 64             LDX  Long_PC+3
6b03 f0 15             BEQ  _laba
6b05 a9 9e             LDA  #YELLOW
6b07 20 d2 ff          JSR  CHROUT
6b0a 8a                TXA
6b0b 20 40 6b          JSR  Print_Hex
6b0e a5 63             LDA  Long_PC+2
6b10 20 40 6b          JSR  Print_Hex
6b13 a9 05             LDA  #WHITE
6b15 20 d2 ff          JSR  CHROUT
6b18 80 07             BRA  _labb
6b1a a5 63    _laba    LDA  Long_PC+2
6b1c f0 03             BEQ  _labb
6b1e 20 40 6b          JSR  Print_Hex
6b21 a6 62    _labb    LDX  Long_PC+1
6b23 a5 61             LDA  Long_PC
6b25          EndMod [Hex_LPC] Size = 36 [$24]

              *******************
              Module Print_XA_Hex
              *******************

6b25 48                PHA
6b26 8a                TXA
6b27 20 40 6b          JSR  Print_Hex
6b2a 68                PLA
6b2b          EndMod [Print_XA_Hex] Size = 6 [$6]

              **********************
              Module Print_Hex_Blank
              **********************

6b2b 20 40 6b          JSR  Print_Hex
6b2e          EndMod [Print_Hex_Blank] Size = 3 [$3]

              ******************
              Module Print_Blank
              ******************

6b2e a9 20             LDA  #' '
6b30 4c d2 ff          JMP  CHROUT
6b33          EndMod [Print_Blank] Size = 5 [$5]

              ***************
              Module Print_CR
              ***************

6b33 a9 0d             LDA  #13
6b35 4c d2 ff          JMP  CHROUT
6b38          EndMod [Print_CR] Size = 5 [$5]

              ***************
              Module CR_Erase
              ***************

6b38 20 7d ff          JSR  PRIMM
6b3b 0d 1b 51          .BYTE "\r\eQ",0
6b3f 60                RTS
6b40          EndMod [CR_Erase] Size = 8 [$8]

              ****************
              Module Print_Hex
              ****************

6b40 da                PHX
6b41 20 4c 6b          JSR  A_To_Hex
6b44 20 d2 ff          JSR  CHROUT
6b47 8a                TXA
6b48 fa                PLX
6b49 4c d2 ff          JMP  CHROUT
6b4c          EndMod [Print_Hex] Size = 12 [$c]

              ***************
              Module A_To_Hex
              ***************

6b4c 48                PHA
6b4d 20 56 6b          JSR  _nibble
6b50 aa                TAX
6b51 68                PLA
6b52 4a                LSR  A
6b53 4a                LSR  A
6b54 4a                LSR  A
6b55 4a                LSR  A

6b56 29 0f    _nibble  AND  #15
6b58 c9 0a             CMP  #10
6b5a 90 02             BCC  _lab
6b5c 69 06             ADC  #6
6b5e 69 30    _lab     ADC  #'0'
6b60 60                RTS
6b61          EndMod [A_To_Hex] Size = 21 [$15]

              ****************
              Module Get_Glyph
              ****************
6b61 da                PHX
6b62 a9 20             LDA  #' '
6b64 a6 6f    _loop    LDX  Buf_Index
6b66 e6 6f             INC  Buf_Index
6b68 dd 00 02          CMP  Buffer,X
6b6b f0 f7             BEQ  _loop
6b6d fa                PLX                    ; fall through
6b6e          EndMod [Get_Glyph] Size = 13 [$d]

              ***************
              Module Got_Char
              ***************

6b6e c6 6f             DEC  Buf_Index
6b70          EndMod [Got_Char] Size = 2 [$2]

              ***************
              Module Get_Char
              ***************

6b70 da                PHX                  ; save X
6b71 a6 6f             LDX  Buf_Index
6b73 e6 6f             INC  Buf_Index
6b75 bd 00 02          LDA  Buffer,X
6b78 e0 01             CPX  #1              ; column index
6b7a fa                PLX
6b7b 90 08             BCC  _regc           ; branch at 1st. column
6b7d c9 3b             CMP  #';'            ; register ?
6b7f f0 0a             BEQ  _return
6b81 c9 3f             CMP  #'?'            ; error marker
6b83 f0 06             BEQ  _return
6b85 c9 00    _regc    CMP  #0              ; end of buffer ?
6b87 f0 02             BEQ  _return
6b89 c9 3a             CMP  #':'            ; end of statement ?
6b8b 60       _return  RTS
6b8c          EndMod [Get_Char] Size = 28 [$1c]


              **************
              Module Dec_LCT
              **************

6b8c a5 5d             LDA  Long_CT
6b8e 05 5e             ORA  Long_CT+1
6b90 d0 02             BNE  _skip
6b92 c3 5f             DEW  Long_CT+2
6b94 c3 5d    _skip    DEW  Long_CT
6b96 a5 60             LDA  Long_CT+3         ; set N flag
6b98 60                RTS
6b99          EndMod [Dec_LCT] Size = 13 [$d]

              **************
              Module Add_LPC
              **************

6b99 18                CLC
6b9a 65 61             ADC  Long_PC
6b9c 85 61             STA  Long_PC
6b9e 90 06             BCC  _return

              ************
6ba0          Inc_LPC_Page
              ************

6ba0 e6 62             INC  Long_PC+1
6ba2 d0 02             BNE  _return
6ba4 e3 63             INW  Long_PC+2
6ba6 60       _return  RTS

              ******************
              Module Param_Range
              ******************

              ; read two (address) parameters

              ; Long_CT = difference (2nd. minus 1st.)
              ; Long_PC = 1st. parameter
              ; Long_DA = 2nd. parameter

              ; carry on exit flags error

6ba7 20 3e 6a          JSR  Get_LAC           ; get 1st. parameter
6baa b0 12             BCS  _error
6bac 20 66 61          JSR  LAC_To_LPC        ; Long_PC = 1st. address
6baf 20 3e 6a          JSR  Get_LAC
6bb2 b0 0a             BCS  _error
6bb4 20 7e 61          JSR  LAC_To_LDA        ; Long_DA = 2nd. address
6bb7 20 99 61          JSR  LAC_Minus_LPC     ; Long_CT = range
6bba 90 02             BCC  _error
6bbc 18                CLC
6bbd 60                RTS
6bbe 38       _error   SEC
6bbf 60                RTS
6bc0          EndMod [Param_Range] Size = 25 [$19]

              ****************
              Module Converter
              ****************

6bc0 a2 00             LDX  #0
6bc2 86 6f             STX  Buf_Index
6bc4 20 3e 6a          JSR  Get_LAC
6bc7 b3 0a f5          LBCS Mon_Error
6bca a2 00             LDX  #0
6bcc da       _loop    PHX
6bcd 20 38 6b          JSR  CR_Erase
6bd0 bd 19 61          LDA  Cons_Prefix,X
6bd3 20 d2 ff          JSR  CHROUT
6bd6 8a                TXA
6bd7 0a                ASL  A
6bd8 aa                TAX
6bd9 23 e5 6b          JSR  (Conv_Tab,X)
6bdc fa                PLX
6bdd e8                INX
6bde e0 05             CPX  #5
6be0 90 ea             BCC  _loop
6be2 4c a5 60          JMP  Main

6be5 32 6c    Conv_Tab .WORD Print_Hexval
6be7 3b 6c             .WORD Print_Decimal
6be9 03 6c             .WORD Print_Octal
6beb fd 6b             .WORD Print_Dual
6bed ef 6b             .WORD Print_Char
6bef          EndMod [Converter] Size = 47 [$2f]

              *****************
              Module Print_Char
              *****************

6bef a5 59             LDA  Long_AC
6bf1 c9 20             CMP  #' '
6bf3 90 07             BCC  _return
6bf5 c9 60             CMP  #$60
6bf7 b0 03             BCS  _return
6bf9 4c d2 ff          JMP  CHROUT
6bfc 60       _return  RTS
6bfd          EndMod [Print_Char] Size = 14 [$e]

              *****************
              Module Print_Dual
              *****************

6bfd a2 18             LDX  #24               ; digits
6bff a0 01             LDY  #1                ; bits per digit
6c01 80 04             BRA  _entry

              ***********
6c03          Print_Octal
              ***********

6c03 a2 08             LDX  #8                ; digits
6c05 a0 03             LDY  #3                ; bits per digit

6c07 20 72 61 _entry   JSR  LAC_To_LCT
6c0a a3 00             LDZ  #0
6c0c 64 61             STZ  Long_PC
6c0e a3 30             LDZ  #'0'
6c10 5a                PHY                    ; save start value
6c11 7a       _loopa   PLY                    ; reinitialise
6c12 5a                PHY
6c13 a9 00             LDA  #0
6c15 06 5d    _loopb   ASL  Long_CT
6c17 eb 5e 00          ROW  Long_CT+1
6c1a 2a                ROL  A
6c1b 88                DEY
6c1c d0 f7             BNE  _loopb
6c1e e0 01             CPX  #1                ; print last character
6c20 f0 04             BEQ  _skip
6c22 05 61             ORA  Long_PC
6c24 f0 07             BEQ  _next
6c26 09 30    _skip    ORA  #'0'
6c28 64 61             STZ  Long_PC
6c2a 20 d2 ff          JSR  CHROUT
6c2d ca       _next    DEX
6c2e d0 e1             BNE  _loopa
6c30 7a                PLY                    ; cleanup stack
6c31 60                RTS
6c32          EndMod [Print_Dual] Size = 53 [$35]

              *******************
              Module Print_Hexval
              *******************

6c32 20 66 61         JSR  LAC_To_LPC
6c35 a9 00            LDA  #0
6c37 85 64            STA  Long_PC+3
6c39 80 32            BRA  Print_BCD
6c3b          EndMod [Print_Hexval] Size = 9 [$9]

              ********************
              Module Print_Decimal
              ********************

              ; max $ffffff = 16777215 (8 digits)

6c3b 20 72 61          JSR  LAC_To_LCT
6c3e a2 03             LDX  #3                ; 4 BCD bytes = 8 digits
6c40 a9 00             LDA  #0
6c42 95 61    _clear   STA  Long_PC,X
6c44 ca                DEX
6c45 10 fb             BPL  _clear

6c47 a2 20             LDX  #32               ; source bits
6c49 f8                SED
6c4a 06 5d    _loop    ASL  Long_CT
6c4c 26 5e             ROL  Long_CT+1
6c4e eb 5f 00          ROW  Long_CT+2
6c51 a5 61             LDA  Long_PC
6c53 65 61             ADC  Long_PC
6c55 85 61             STA  Long_PC
6c57 a5 62             LDA  Long_PC+1
6c59 65 62             ADC  Long_PC+1
6c5b 85 62             STA  Long_PC+1
6c5d a5 63             LDA  Long_PC+2
6c5f 65 63             ADC  Long_PC+2
6c61 85 63             STA  Long_PC+2
6c63 a5 64             LDA  Long_PC+3
6c65 65 64             ADC  Long_PC+3
6c67 85 64             STA  Long_PC+3
6c69 ca                DEX
6c6a d0 de             BNE  _loop
6c6c d8                CLD
6c6d          EndMod [Print_Decimal] Size = 50 [$32]

              ****************
              Module Print_BCD
              ****************

6c6d a9 00             LDA  #0
6c6f 85 5d             STA  Long_CT
6c71 a3 30             LDZ  #'0'
6c73 a0 08             LDY  #8                ; max. digits
6c75 a2 03    _loopa   LDX  #3                ; 4 bytes
6c77 a9 00             LDA  #0
6c79 06 61    _loopb   ASL  Long_PC
6c7b 26 62             ROL  Long_PC+1
6c7d eb 63 00          ROW  Long_PC+2
6c80 2a                ROL  A
6c81 ca                DEX
6c82 10 f5             BPL  _loopb

6c84 c0 01             CPY  #1                ; print last character
6c86 f0 04             BEQ  _skip
6c88 05 5d             ORA  Long_CT
6c8a f0 0d             BEQ  _next
6c8c 09 30    _skip    ORA  #'0'
6c8e 64 5d             STZ  Long_CT
6c90 c9 3a             CMP  #$3a
6c92 90 02             BCC  _print
6c94 69 06             ADC  #6                ; + carry
6c96 20 d2 ff _print   JSR  CHROUT
6c99 88       _next    DEY
6c9a d0 d9             BNE  _loopa
6c9c 60                RTS
6c9d          EndMod [Print_BCD] Size = 48 [$30]

              ****************
              Module Read_Unit
              ****************
6c9d 20 5b 6a          JSR  Read_Number       ; unit
6ca0 b3 31 f4          LBCS Mon_Error
6ca3 a5 59             LDA  Long_AC
6ca5 c9 08             CMP  #8
6ca7 93 2a f4          LBCC Mon_Error
6caa c9 10             CMP  #16
6cac b3 25 f4          LBCS Mon_Error
6caf c6 6f             DEC  Buf_Index
6cb1 60                RTS
6cb2          EndMod [Read_Unit] Size = 21 [$15]

0870          MEM_BUF = $870
087f          MEM_DIR = $87F

              *****************
              Module Copy_Files
              *****************

              ; Input: Long_CT = directory cache

6cb2 a9 24             LDA  #$24
6cb4 85 5d             STA  Long_CT
6cb6 a3 00    _lpent   LDZ  #0
6cb8 1b       _lpquote INZ
6cb9 ea b2 5d          LDA  [Long_CT],Z
6cbc c9 42             CMP  #'B'              ; BLOCKS FREE
6cbe f3 95 00          LBEQ _exit
6cc1 c9 20             CMP  #' '
6cc3 f0 f3             BEQ  _lpquote
6cc5 c9 22             CMP  #QUOTE
6cc7 d3 8c 00          LBNE _exit
6cca a0 00             LDY  #0
6ccc 1b       _lpfn    INZ
6ccd ea b2 5d          LDA  [Long_CT],Z
6cd0 c9 22             CMP  #QUOTE
6cd2 f0 0a             BEQ  _endfn
6cd4 99 10 04          STA  Mon_Data,Y
6cd7 c8                INY
6cd8 c0 10             CPY  #16
6cda 90 f0             BCC  _lpfn
6cdc 80 77             BRA  _exit
6cde a9 2c    _endfn   LDA  #','
6ce0 99 10 04          STA  Mon_Data,Y
6ce3 c8                INY
6ce4 1b       _lptype  INZ
6ce5 ea b2 5d          LDA  [Long_CT],Z
6ce8 c9 20             CMP  #' '
6cea f0 f8             BEQ  _lptype
6cec 99 10 04          STA  Mon_Data,Y
6cef 8d 0d 04          STA  File_Ext
6cf2 1b                INZ
6cf3 ea b2 5d          LDA  [Long_CT],Z
6cf6 8d 0e 04          STA  File_Ext+1
6cf9 1b                INZ
6cfa ea b2 5d          LDA  [Long_CT],Z
6cfd 8d 0f 04          STA  File_Ext+2
6d00 a9 00             LDA  #0
6d02 c8                INY
6d03 84 b7             STY  FNLEN
6d05 99 10 04          STA  Mon_Data,Y
6d08 85 59             STA  Long_AC
6d0a 85 5a             STA  Long_AC+1
6d0c a9 70             LDA  #<MEM_BUF
6d0e 85 5b             STA  Long_AC+2
6d10 a9 08             LDA  #>MEM_BUF
6d12 85 5c             STA  Long_AC+3

6d14 20 dd 6d          JSR  List_Filename
6d17 ad 09 04          LDA  Disk_Src
6d1a 20 4e 6e          JSR  Load_File
6d1d a5 63             LDA  Long_PC+2
6d1f 29 0f             AND  #15
6d21 20 4c 6b          JSR  A_To_Hex
6d24 8a                TXA
6d25 20 d2 ff          JSR  CHROUT
6d28 a6 62             LDX  Long_PC+1
6d2a a5 61             LDA  Long_PC
6d2c 20 25 6b          JSR  Print_XA_Hex
6d2f a4 b7             LDY  FNLEN
6d31 a9 2c             LDA  #','
6d33 99 10 04          STA  Mon_Data,Y
6d36 a9 57             LDA  #'W'
6d38 99 11 04          STA  Mon_Data+1,Y
6d3b a9 00             LDA  #0
6d3d 99 12 04          STA  Mon_Data+2,Y
6d40 ad 08 04          LDA  Disk_Unit         ; FA
6d43 20 09 6e          JSR  Save_File

6d46 18                CLC
6d47 a5 5d             LDA  Long_CT
6d49 69 20             ADC  #$20
6d4b 85 5d             STA  Long_CT
6d4d 93 67 ff          LBCC _lpent
6d50 e6 5e             INC  Long_CT+1
6d52 d3 62 ff          LBNE _lpent
6d55 60       _exit    RTS
6d56          EndMod [Copy_Files] Size = 164 [$a4]

              ********************
              Module Mon_Unit_Copy
              ********************

              ; Ut=s,pattern

6d56 20 9d 6c          JSR  Read_Unit         ; target unit
6d59 8d 08 04          STA  Disk_Unit
6d5c 20 61 6b          JSR  Get_Glyph
6d5f c9 3d             CMP  #'='
6d61 d3 70 f3          LBNE Mon_Error
6d64 20 9d 6c          JSR  Read_Unit         ; source unit
6d67 8d 09 04          STA  Disk_Src
6d6a 85 ba             STA  FA
6d6c a0 ff             LDY  #-1
6d6e c8       _loopfn  INY
6d6f b9 b5 6d          LDA  _dir,Y
6d72 99 10 04          STA  Mon_Data,Y
6d75 d0 f7             BNE  _loopfn
6d77 20 61 6b          JSR  Get_Glyph         ; delimiter ?
6d7a aa                TAX
6d7b f0 19             BEQ  _laba
6d7d c9 2c             CMP  #','
6d7f d3 52 f3          LBNE Mon_Error
6d82 a6 6f             LDX  Buf_Index
6d84 ca                DEX
6d85 a0 02             LDY  #2
6d87 e8       _pat     INX
6d88 c8                INY
6d89 c0 12             CPY  #18
6d8b b3 46 f3          LBCS Mon_Error
6d8e bd 00 02          LDA  Buffer,X
6d91 99 10 04          STA  Mon_Data,Y
6d94 d0 f1             BNE  _pat
6d96 a3 00    _laba    LDZ  #0
6d98 64 b9             STZ  SA                ; loading directory
6d9a 64 59             STZ  Long_AC
6d9c 64 5a             STZ  Long_AC+1
6d9e a9 7f             LDA  #<MEM_DIR
6da0 85 5b             STA  Long_AC+2
6da2 a9 08             LDA  #>MEM_DIR
6da4 85 5c             STA  Long_AC+3
6da6 20 72 61          JSR  LAC_To_LCT        ; Long_CT = directory pointer
6da9 ad 09 04          LDA  Disk_Src
6dac 20 4e 6e          JSR  Load_File
6daf 20 b2 6c          JSR  Copy_Files
6db2 4c a5 60          JMP  Main

6db5 24 30 3a _dir     .BYTE "$0:*",0
6dba          EndMod [Mon_Unit_Copy] Size = 100 [$64]


              ********************
              Module Send_Filename
              ********************

6dba a5 ba            LDA  FA
6dbc 20 b1 ff         JSR  LISTEN
6dbf a5 b9            LDA  SA
6dc1 09 f0            ORA  #$f0
6dc3 20 93 ff         JSR  SECOND
6dc6 a0 00            LDY  #0
6dc8 84 90            STY  STATUS
6dca b9 10 04 _fname  LDA  Mon_Data,Y
6dcd f0 08            BEQ  _stop
6dcf 20 a8 ff         JSR  CIOUT
6dd2 c8               INY
6dd3 c0 14            CPY  #20
6dd5 90 f3            BCC  _fname
6dd7 20 ae ff _stop   JSR  UNLSN
6dda 4c c7 6e         JMP  Get_Disk_Status
6ddd          EndMod [Send_Filename] Size = 35 [$23]

              ********************
              Module List_Filename
              ********************
6ddd 20 38 6b         JSR  CR_Erase
6de0 a0 ff            LDY  #-1
6de2 c8       _loop   INY
6de3 b9 10 04         LDA  Mon_Data,Y
6de6 c9 2c            CMP  #','
6de8 f0 05            BEQ  _fill
6dea 20 d2 ff         JSR  CHROUT
6ded 80 f3            BRA  _loop
6def a9 20    _fill   LDA  #' '
6df1 20 d2 ff _blank  JSR  CHROUT
6df4 c8               INY
6df5 c0 10            CPY  #16
6df7 90 f8            BCC  _blank
6df9 a0 00            LDY  #0
6dfb b9 0d 04 _ext    LDA  File_Ext,Y
6dfe 20 d2 ff         JSR  CHROUT
6e01 c8               INY
6e02 c0 03            CPY  #3
6e04 90 f5            BCC  _ext
6e06 4c 2e 6b         JMP  Print_Blank
6e09          EndMod [List_Filename] Size = 44 [$2c]

              ****************
              Module Save_File
              ****************

              ; Input : (Long_AC) = start address
              ;         (Long_PC) = last  address

6e09 85 ba            STA  FA
6e0b a2 01            LDX  #1
6e0d 86 b9            STX  SA
6e0f 20 ba 6d         JSR  Send_Filename
6e12 d0 37            BNE  _error
6e14 a5 ba            LDA  FA
6e16 20 b1 ff         JSR  LISTEN
6e19 a5 b9            LDA  SA
6e1b 09 60            ORA  #$60
6e1d 20 93 ff         JSR  SECOND
6e20 a3 00            LDZ  #0
6e22 64 90            STZ  STATUS
6e24 ea b2 59 _loop   LDA  [Long_AC],Z
6e27 20 a8 ff         JSR  CIOUT
6e2a d4 61            CPZ  Long_PC
6e2c d0 0c            BNE  _cont
6e2e a5 5a            LDA  Long_AC+1
6e30 c5 62            CMP  Long_PC+1
6e32 d0 06            BNE  _cont
6e34 a5 5b            LDA  Long_AC+2
6e36 c5 63            CMP  Long_PC+2
6e38 f0 0b            BEQ  _stop

6e3a a6 90    _cont   LDX  STATUS
6e3c d0 07            BNE  _stop
6e3e 1b               INZ
6e3f d0 e3            BNE  _loop
6e41 e3 5a            INW  Long_AC+1
6e43 d0 df            BNE  _loop
6e45 20 ae ff _stop   JSR  UNLSN
6e48 4c 82 6e         JMP  Close_File
6e4b 4c 08 6f _error  JMP  Print_Disk_Msg
6e4e          EndMod [Save_File] Size = 69 [$45]

              ****************
              Module Load_File
              ****************

              ; Input : (Long_AC) = start address
              ; Output: (Long_PC) = last  address

6e4e 85 ba            STA  FA
6e50 a2 00            LDX  #0
6e52 86 b9            STX  SA
6e54 20 66 61         JSR  LAC_To_LPC      ; Long_PC = load address
6e57 20 ba 6d         JSR  Send_Filename
6e5a d0 35            BNE  _error
6e5c a5 ba            LDA  FA
6e5e 20 b4 ff         JSR  TALK
6e61 a5 b9            LDA  SA
6e63 09 60            ORA  #$60
6e65 20 96 ff         JSR  TKSA
6e68 a3 00            LDZ  #0
6e6a 64 90            STZ  STATUS
6e6c 20 a5 ff _loop   JSR  ACPTR
6e6f ea 92 61         STA  [Long_PC],Z
6e72 a6 90            LDX  STATUS
6e74 d0 07            BNE  _stop
6e76 1b               INZ
6e77 d0 f3            BNE  _loop
6e79 e3 62            INW  Long_PC+1
6e7b d0 ef            BNE  _loop
6e7d 64 61    _stop   STZ  Long_PC
6e7f 20 ab ff         JSR  UNTALK

              **********
6e82          Close_File
              **********

6e82 a5 ba            LDA  FA
6e84 20 b1 ff         JSR  LISTEN
6e87 a5 b9            LDA  SA
6e89 09 e0            ORA  #$e0
6e8b 20 93 ff         JSR  SECOND
6e8e 4c ae ff         JMP  UNLSN
6e91 4c 08 6f _error  JMP  Print_Disk_Msg
6e94          EndMod [Load_File] Size = 70 [$46]

              ***************
              Module Mon_Disk
              ***************

6e94 c6 6f             DEC  Buf_Index
6e96 a6 6f             LDX  Buf_Index
6e98 bd 00 02          LDA  Buffer,X
6e9b f0 68             BEQ  Print_Disk_Status
6e9d 85 5d             STA  Long_CT           ; dir marker
6e9f a0 ff             LDY  #$ff              ; SA = 15
6ea1 c9 24             CMP  #'$'
6ea3 d0 02             BNE  _lab
6ea5 a0 f0             LDY  #$f0              ; SA =  0
6ea7 a5 ba    _lab     LDA  FA
6ea9 20 b1 ff          JSR  LISTEN
6eac 98                TYA                    ; SA
6ead 20 93 ff          JSR  SECOND
6eb0 bd 00 02 _loop    LDA  Buffer,X
6eb3 f0 06             BEQ  _close
6eb5 20 a8 ff          JSR  CIOUT
6eb8 e8                INX
6eb9 80 f5             BRA  _loop
6ebb 20 ae ff _close   JSR  UNLSN
6ebe a5 5d             LDA  Long_CT
6ec0 c9 24             CMP  #'$'
6ec2 d0 41             BNE  Print_Disk_Status
6ec4 4c 56 6f          JMP  Directory

6ec7          EndMod [Mon_Disk] Size = 51 [$33]

              **********************
              Module Get_Disk_Status
              **********************

6ec7 a5 ba             LDA  FA
6ec9 20 b4 ff          JSR  TALK
6ecc a9 6f             LDA  #$6f
6ece 20 96 ff          JSR  TKSA
6ed1 20 a5 ff          JSR  ACPTR             ; 1st. digit
6ed4 8d 38 04          STA  Disk_Msg
6ed7 0a                ASL  A
6ed8 0a                ASL  A
6ed9 0a                ASL  A
6eda 0a                ASL  A
6edb 8d 0c 04          STA  Disk_Status       ; BCD
6ede 20 a5 ff          JSR  ACPTR             ; 2nd. digit
6ee1 8d 39 04          STA  Disk_Msg+1
6ee4 29 0f             AND  #15
6ee6 0d 0c 04          ORA  Disk_Status
6ee9 8d 0c 04          STA  Disk_Status       ; complete BCD number

6eec a0 01             LDY  #1
6eee c8       _loop    INY
6eef 20 a5 ff          JSR  ACPTR
6ef2 99 38 04          STA  Disk_Msg,Y
6ef5 c9 20             CMP  #' '
6ef7 b0 f5             BCS  _loop
6ef9 a9 00             LDA  #0
6efb 99 38 04          STA  Disk_Msg,Y
6efe 20 ab ff          JSR  UNTALK
6f01 ad 0c 04          LDA  Disk_Status
6f04 60                RTS
6f05          EndMod [Get_Disk_Status] Size = 62 [$3e]

              ************************
              Module Print_Disk_Status
              ************************

6f05 20 c7 6e          JSR  Get_Disk_Status

              **************
6f08          Print_Disk_Msg
              **************

6f08 20 33 6b          JSR  Print_CR
6f0b a0 00             LDY  #0
6f0d b9 38 04 _loop    LDA  Disk_Msg,Y
6f10 f0 06             BEQ  _exit
6f12 20 d2 ff          JSR  CHROUT
6f15 c8                INY
6f16 80 f5             BRA  _loop
6f18 4c 33 6b _exit    JMP  Print_CR
6f1b          EndMod [Print_Disk_Status] Size = 22 [$16]

              ; @[u] : print disk status for unit u
              ; @[u],$[=pattern] : print directory
              ; @[u],command : send disk command and read status
              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)
              ; @[u],U2 mem track startsec [endsec] : write disk sector(s)

              **************
              Module Mon_DOS
              **************

6f1b a2 08             LDX  #8                ; default device
6f1d 20 61 6b          JSR  Get_Glyph
6f20 c9 30             CMP  #'0'
6f22 90 17             BCC  _unit
6f24 c9 3a             CMP  #':'
6f26 b0 13             BCS  _unit
6f28 c6 6f             DEC  Buf_Index
6f2a 20 5b 6a          JSR  Read_Number
6f2d b0 0c             BCS  _unit
6f2f a6 59             LDX  Long_AC           ; unit
6f31 e0 04             CPX  #4
6f33 93 9e f1          LBCC Mon_Error
6f36 e0 1f             CPX  #31
6f38 b3 99 f1          LBCS Mon_Error
6f3b 86 ba    _unit    STX  FA
6f3d c6 6f             DEC  Buf_Index
6f3f 20 70 6b _next    JSR  Get_Char
6f42 f0 0c             BEQ  _status           ; only @u
6f44 c9 20             CMP  #' '
6f46 f0 f7             BEQ  _next
6f48 c9 2c             CMP  #','
6f4a f0 f3             BEQ  _next
6f4c c9 55             CMP  #'U'              ; sector read/write
6f4e f0 4e             BEQ  DOS_U
6f50 20 94 6e _status  JSR  Mon_Disk
6f53 4c a5 60          JMP  Main
6f56          EndMod [Mon_DOS] Size = 59 [$3b]

              ****************
              Module Directory
              ****************

6f56 a5 ba             LDA  FA
6f58 20 b4 ff          JSR  TALK
6f5b a9 60             LDA  #$60
6f5d 85 b9             STA  SA
6f5f 20 96 ff          JSR  TKSA
6f62 a9 00             LDA  #0
6f64 85 90             STA  STATUS

6f66 a3 06             LDZ  #6                ; load address, pseudo link, pseudo number
6f68 aa       _loopb   TAX                    ; X = previous byte
6f69 20 a5 ff          JSR  ACPTR             ; A = current  byte
6f6c a4 90             LDY  STATUS
6f6e d0 2b             BNE  _exit
6f70 3b                DEZ
6f71 d0 f5             BNE  _loopb            ; X/A = last read word

6f73 86 59             STX  Long_AC
6f75 85 5a             STA  Long_AC+1
6f77 64 5b             STZ  Long_AC+2
6f79 64 5c             STZ  Long_AC+3
6f7b 20 3b 6c          JSR  Print_Decimal     ; file size
6f7e 20 2e 6b          JSR  Print_Blank

6f81 20 a5 ff _loopc   JSR  ACPTR             ; print file entry
6f84 f0 09             BEQ  _cr
6f86 a4 90             LDY  STATUS
6f88 d0 11             BNE  _exit
6f8a 20 d2 ff          JSR  CHROUT
6f8d 90 f2             BCC  _loopc

6f8f 20 33 6b _cr      JSR  Print_CR
6f92 20 e1 ff          JSR  STOP
6f95 f0 04             BEQ  _exit
6f97 a3 04             LDZ  #4
6f99 80 cd             BRA  _loopb            ; next file
6f9b 4c ab ff _exit    JMP  UNTALK
6f9e          EndMod [Directory] Size = 72 [$48]

              ************
              Module DOS_U
              ************

6f9e 20 70 6b          JSR  Get_Char
6fa1 c9 31             CMP  #'1'            ; U1: read
6fa3 93 2e f1          LBCC Mon_Error
6fa6 c9 33             CMP  #'3'            ; U2: write
6fa8 b3 29 f1          LBCS Mon_Error
6fab 8d 11 04          STA  Mon_Data+1      ; U type
6fae e6 6f             INC  Buf_Index
6fb0 20 3e 6a          JSR  Get_LAC
6fb3 b3 1e f1          LBCS Mon_Error
6fb6 20 66 61          JSR  LAC_To_LPC      ; Long_PC = memory address

6fb9 20 3e 6a          JSR  Get_LAC
6fbc b3 15 f1          LBCS Mon_Error
6fbf a5 59             LDA  Long_AC
6fc1 8d 0a 04          STA  Disk_Track

6fc4 20 3e 6a          JSR  Get_LAC
6fc7 b3 0a f1          LBCS Mon_Error
6fca a5 59             LDA  Long_AC
6fcc 8d 0b 04          STA  Disk_Sector

6fcf 20 3e 6a          JSR  Get_LAC
6fd2 20 72 61          JSR  LAC_To_LCT        ; Long_CT = sector count
6fd5 c3 5d             DEW  Long_CT           ; Long_CT = -1 for single

6fd7 20 d5 70          JSR  Open_Disk_Buffer

6fda ad 11 04 _loop    LDA  Mon_Data+1
6fdd 4a                LSR  A
6fde f0 0a             BEQ  _write
6fe0 20 05 70          JSR  Find_Next_Sector
6fe3 d0 17             BNE  _error
6fe5 20 5f 70          JSR  Read_Sector
6fe8 80 08             BRA  _next

6fea 20 79 70 _write   JSR  Write_Sector
6fed 20 05 70          JSR  Find_Next_Sector
6ff0 d0 0a             BNE  _error

6ff2 20 a0 6b _next    JSR  Inc_LPC_Page
6ff5 ee 0b 04          INC  Disk_Sector
6ff8 c3 5d             DEW  Long_CT
6ffa 10 de             BPL  _loop

6ffc 20 08 6f _error   JSR  Print_Disk_Msg
6fff 20 f1 70          JSR  Close_Disk_Buffer
7002 4c a5 60          JMP  Main
7005          EndMod [DOS_U] Size = 103 [$67]

              ***********************
              Module Find_Next_Sector
              ***********************

7005 20 b3 70          JSR  Build_U_String
7008 20 4e 70          JSR  Send_Disk_Command
700b 20 c7 6e          JSR  Get_Disk_Status
700e f0 1d             BEQ  _return           ; OK
7010 c9 66             CMP  #$66              ; illegal track or sector
7012 d0 13             BNE  _error            ; error
7014 a9 00             LDA  #0
7016 8d 0b 04          STA  Disk_Sector
7019 ee 0a 04          INC  Disk_Track        ; try next track
701c 20 b3 70          JSR  Build_U_String
701f 20 4e 70          JSR  Send_Disk_Command
7022 20 c7 6e          JSR  Get_Disk_Status
7025 f0 06             BEQ  _return
7027 20 08 6f _error   JSR  Print_Disk_Msg
702a ad 0c 04          LDA  Disk_Status
702d 60       _return  RTS
702e          EndMod [Find_Next_Sector] Size = 41 [$29]

              ***************************
              Module Open_Command_Channel
              ***************************

702e a5 ba             LDA  FA
7030 20 b1 ff          JSR  LISTEN
7033 a9 ff             LDA  #$ff
7035 20 93 ff          JSR  SECOND
7038 a0 00             LDY  #0
703a 84 90             STY  STATUS
703c 60                RTS
703d          EndMod [Open_Command_Channel] Size = 15 [$f]

              ***************
              Module Reset_BP
              ***************

703d 20 2e 70          JSR  Open_Command_Channel
7040 b9 fa 73 _loop    LDA  BP_ZERO,Y
7043 f0 06             BEQ  _end
7045 20 a8 ff          JSR  CIOUT
7048 c8                INY
7049 80 f5             BRA  _loop
704b 4c ae ff _end     JMP  UNLSN
704e          EndMod [Reset_BP] Size = 17 [$11]

              ************************
              Module Send_Disk_Command
              ************************

704e 20 2e 70          JSR  Open_Command_Channel
7051 b9 10 04 _loop    LDA  Mon_Data,Y
7054 f0 06             BEQ  _end
7056 20 a8 ff          JSR  CIOUT
7059 c8                INY
705a 80 f5             BRA  _loop
705c 4c ae ff _end     JMP  UNLSN
705f          EndMod [Send_Disk_Command] Size = 17 [$11]

              ******************
              Module Read_Sector
              ******************

705f a5 ba             LDA  FA
7061 20 b4 ff          JSR  TALK
7064 a9 69             LDA  #$69              ; SA = 9
7066 20 96 ff          JSR  TKSA
7069 a3 00             LDZ  #0
706b 64 90             STZ  STATUS
706d 20 a5 ff _loop    JSR  ACPTR
7070 ea 92 61          STA  [Long_PC],Z
7073 1b                INZ
7074 d0 f7             BNE  _loop
7076 4c ab ff          JMP  UNTALK
7079          EndMod [Read_Sector] Size = 26 [$1a]

              ******************
              Module Write_Sector
              ******************

7079 20 3d 70          JSR  Reset_BP          ; reset disk buffer pointer
707c a5 ba             LDA  FA
707e 20 b1 ff          JSR  LISTEN
7081 a9 69             LDA  #$69              ; SA = 9
7083 20 96 ff          JSR  TKSA
7086 a3 00             LDZ  #0
7088 64 90             STZ  STATUS
708a ea b2 61 _loop    LDA  [Long_PC],Z
708d 20 a8 ff          JSR  CIOUT
7090 1b                INZ
7091 d0 f7             BNE  _loop
7093 20 ae ff          JSR  UNLSN
7096 60                RTS
7097          EndMod [Write_Sector] Size = 30 [$1e]

              *************
              Module Set_TS
              *************

              ; Input  A = track or sector
              ;        X = string index

7097 c9 64    _100      CMP  #100
7099 90 07              BCC  _10
709b fe 10 04           INC  Mon_Data,X
709e e9 64              SBC  #100
70a0 80 f5              BRA  _100
70a2 c9 0a    _10       CMP  #10
70a4 90 07              BCC  _1
70a6 fe 11 04           INC  Mon_Data+1,X
70a9 e9 0a              SBC  #10
70ab 80 f5              BRA  _10
70ad 09 30    _1        ORA  #'0'
70af 9d 12 04           STA  Mon_Data+2,X
70b2 60                 RTS
70b3          EndMod [Set_TS] Size = 28 [$1c]

              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)

              ; U1:CHANNEL DRIVE TRACK SECTOR

              *********************
              Module Build_U_String
              *********************

70b3 a2 0e             LDX  #14
70b5 bd eb 73 _loop    LDA  U1,X
70b8 9d 10 04          STA  Mon_Data,X
70bb ca                DEX
70bc e0 02             CPX  #2
70be b0 f5             BCS  _loop
70c0 a9 55             LDA  #'U'
70c2 8d 10 04          STA  Mon_Data
70c5 ad 0a 04          LDA  Disk_Track
70c8 a2 07             LDX  #7
70ca 20 97 70          JSR  Set_TS
70cd ad 0b 04          LDA  Disk_Sector
70d0 a2 0b             LDX  #11
70d2 4c 97 70          JMP  Set_TS
70d5          EndMod [Build_U_String] Size = 34 [$22]

              ***********************
              Module Open_Disk_Buffer
              ***********************

70d5 a9 00             LDA  #0
70d7 85 90             STA  STATUS
70d9 a5 ba             LDA  FA
70db 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
70de a9 f9             LDA  #$f9            ; sa = 9
70e0 20 93 ff          JSR  SECOND
70e3 a9 23             LDA  #'#'            ; open buffer
70e5 20 a8 ff          JSR  CIOUT
70e8 20 ae ff          JSR  UNLSN
70eb a5 90             LDA  STATUS
70ed d3 16 fe          LBNE Print_Disk_Status
70f0 60                RTS
70f1          EndMod [Open_Disk_Buffer] Size = 28 [$1c]

              ************************
              Module Close_Disk_Buffer
              ************************

70f1 a9 00             LDA  #0
70f3 85 90             STA  STATUS
70f5 a5 ba             LDA  FA
70f7 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
70fa a9 e9             LDA  #$e9            ; sa = 9
70fc 20 93 ff          JSR  SECOND
70ff 20 ae ff          JSR  UNLSN
7102 a5 90             LDA  STATUS
7104 d3 ff fd          LBNE Print_Disk_Status
7107 60                RTS
7108          EndMod [Close_Disk_Buffer] Size = 23 [$17]


              ; The 3 letter mnemonics are encoded as three 5-bit values
              ; and stored in a left byte MNE_L and a right byte MNE_R
              ; The 5 bit value is computed by subtracting $3f from the
              ; ASCII value, so '?'-> 0, '@'->1, 'A'->2, 'B'->3,'Z'->27
              ; For example "ADC" is encoded as 2, 5, 4
              ; ----------------
              ; 7654321076543210
              ; 00010
              ;      00101
              ;           00100
              ;                0
              ;
              ; The operator >" stores the left (high) byte of the packed value
              ; The operator <" stores the right (low) byte of the packed value

              *****
7108          MNE_L
              *****

7108 11                .BYTE >"ADC"
7109 13                .BYTE >"AND"
710a 15                .BYTE >"ASL"
710b 15                .BYTE >"ASR"
710c 15                .BYTE >"ASW"
710d 18                .BYTE >"BBR"
710e 18                .BYTE >"BBS"
710f 19                .BYTE >"BCC"
7110 19                .BYTE >"BCS"
7111 19                .BYTE >"BEQ"
7112 1a                .BYTE >"BIT"
7113 1b                .BYTE >"BMI"
7114 1b                .BYTE >"BNE"
7115 1c                .BYTE >"BPL"
7116 1c                .BYTE >"BRA"
7117 1c                .BYTE >"BRK"
7118 1d                .BYTE >"BSR"
7119 1d                .BYTE >"BVC"
711a 1d                .BYTE >"BVS"
711b 23                .BYTE >"CLC"
711c 23                .BYTE >"CLD"
711d 23                .BYTE >"CLE"
711e 23                .BYTE >"CLI"
711f 23                .BYTE >"CLV"
7120 23                .BYTE >"CMP"
7121 24                .BYTE >"CPX"
7122 24                .BYTE >"CPY"
7123 24                .BYTE >"CPZ"
7124 29                .BYTE >"DEC"
7125 29                .BYTE >"DEW"
7126 29                .BYTE >"DEX"
7127 29                .BYTE >"DEY"
7128 29                .BYTE >"DEZ"
7129 34                .BYTE >"EOR"
712a 53                .BYTE >"INC"
712b 53                .BYTE >"INW"
712c 53                .BYTE >"INX"
712d 53                .BYTE >"INY"
712e 53                .BYTE >"INZ"
712f 5b                .BYTE >"JMP"
7130 5d                .BYTE >"JSR"
7131 69                .BYTE >"LDA"
7132 69                .BYTE >"LDX"
7133 69                .BYTE >"LDY"
7134 69                .BYTE >"LDZ"
7135 6d                .BYTE >"LSR"
7136 70                .BYTE >"MAP"
7137 79                .BYTE >"NEG"
7138 7c                .BYTE >"NOP"
7139 84                .BYTE >"ORA"
713a 8a                .BYTE >"PHA"
713b 8a                .BYTE >"PHP"
713c 8a                .BYTE >"PHW"
713d 8a                .BYTE >"PHX"
713e 8a                .BYTE >"PHY"
713f 8a                .BYTE >"PHZ"
7140 8b                .BYTE >"PLA"
7141 8b                .BYTE >"PLP"
7142 8b                .BYTE >"PLX"
7143 8b                .BYTE >"PLY"
7144 8b                .BYTE >"PLZ"
7145 9b                .BYTE >"RMB"
7146 9c                .BYTE >"ROL"
7147 9c                .BYTE >"ROR"
7148 9c                .BYTE >"ROW"
7149 9d                .BYTE >"RTI"
714a 9d                .BYTE >"RTS"
714b a0                .BYTE >"SBC"
714c a1                .BYTE >"SEC"
714d a1                .BYTE >"SED"
714e a1                .BYTE >"SEE"
714f a1                .BYTE >"SEI"
7150 a3                .BYTE >"SMB"
7151 a5                .BYTE >"STA"
7152 a5                .BYTE >"STX"
7153 a5                .BYTE >"STY"
7154 a5                .BYTE >"STZ"
7155 a8                .BYTE >"TAB"
7156 a8                .BYTE >"TAX"
7157 a8                .BYTE >"TAY"
7158 a8                .BYTE >"TAZ"
7159 a8                .BYTE >"TBA"
715a ac                .BYTE >"TRB"
715b ad                .BYTE >"TSB"
715c ad                .BYTE >"TSX"
715d ad                .BYTE >"TSY"
715e ae                .BYTE >"TXA"
715f ae                .BYTE >"TXS"
7160 ae                .BYTE >"TYA"
7161 ae                .BYTE >"TYS"
7162 ae                .BYTE >"TZA"

              *****
7163          MNE_R
              *****

7163 48                .BYTE <"ADC" ; 00
7164 ca                .BYTE <"AND" ; 01
7165 1a                .BYTE <"ASL" ; 02
7166 26                .BYTE <"ASR" ; 03
7167 30                .BYTE <"ASW" ; 04
7168 e6                .BYTE <"BBR" ; 05
7169 e8                .BYTE <"BBS" ; 06
716a 08                .BYTE <"BCC" ; 07
716b 28                .BYTE <"BCS" ; 08
716c a4                .BYTE <"BEQ" ; 09
716d aa                .BYTE <"BIT" ; 0a
716e 94                .BYTE <"BMI" ; 0b
716f cc                .BYTE <"BNE" ; 0c
7170 5a                .BYTE <"BPL" ; 0d
7171 c4                .BYTE <"BRA" ; 0e
7172 d8                .BYTE <"BRK" ; 0f
7173 26                .BYTE <"BSR" ; 10
7174 c8                .BYTE <"BVC" ; 11
7175 e8                .BYTE <"BVS" ; 12
7176 48                .BYTE <"CLC" ; 13
7177 4a                .BYTE <"CLD" ; 14
7178 4c                .BYTE <"CLE" ; 15
7179 54                .BYTE <"CLI" ; 16
717a 6e                .BYTE <"CLV" ; 17
717b a2                .BYTE <"CMP" ; 18
717c 72                .BYTE <"CPX" ; 19
717d 74                .BYTE <"CPY" ; 1a
717e 76                .BYTE <"CPZ" ; 1b
717f 88                .BYTE <"DEC" ; 1c
7180 b0                .BYTE <"DEW" ; 1d
7181 b2                .BYTE <"DEX" ; 1e
7182 b4                .BYTE <"DEY" ; 1f
7183 b6                .BYTE <"DEZ"
7184 26                .BYTE <"EOR"
7185 c8                .BYTE <"INC"
7186 f0                .BYTE <"INW"
7187 f2                .BYTE <"INX"
7188 f4                .BYTE <"INY"
7189 f6                .BYTE <"INZ"
718a a2                .BYTE <"JMP"
718b 26                .BYTE <"JSR"
718c 44                .BYTE <"LDA"
718d 72                .BYTE <"LDX"
718e 74                .BYTE <"LDY"
718f 76                .BYTE <"LDZ"
7190 26                .BYTE <"LSR"
7191 a2                .BYTE <"MAP"
7192 90                .BYTE <"NEG"
7193 22                .BYTE <"NOP"
7194 c4                .BYTE <"ORA"
7195 44                .BYTE <"PHA"
7196 62                .BYTE <"PHP"
7197 70                .BYTE <"PHW"
7198 72                .BYTE <"PHX"
7199 74                .BYTE <"PHY"
719a 76                .BYTE <"PHZ"
719b 44                .BYTE <"PLA"
719c 62                .BYTE <"PLP"
719d 72                .BYTE <"PLX"
719e 74                .BYTE <"PLY"
719f 76                .BYTE <"PLZ"
71a0 86                .BYTE <"RMB"
71a1 1a                .BYTE <"ROL"
71a2 26                .BYTE <"ROR"
71a3 30                .BYTE <"ROW"
71a4 54                .BYTE <"RTI"
71a5 68                .BYTE <"RTS"
71a6 c8                .BYTE <"SBC"
71a7 88                .BYTE <"SEC"
71a8 8a                .BYTE <"SED"
71a9 8c                .BYTE <"SEE"
71aa 94                .BYTE <"SEI"
71ab 86                .BYTE <"SMB"
71ac 44                .BYTE <"STA"
71ad 72                .BYTE <"STX"
71ae 74                .BYTE <"STY"
71af 76                .BYTE <"STZ"
71b0 86                .BYTE <"TAB"
71b1 b2                .BYTE <"TAX"
71b2 b4                .BYTE <"TAY"
71b3 b6                .BYTE <"TAZ"
71b4 c4                .BYTE <"TBA"
71b5 c6                .BYTE <"TRB"
71b6 06                .BYTE <"TSB"
71b7 32                .BYTE <"TSX"
71b8 34                .BYTE <"TSY"
71b9 44                .BYTE <"TXA"
71ba 68                .BYTE <"TXS"
71bb 84                .BYTE <"TYA"
71bc a8                .BYTE <"TYS"
71bd c4                .BYTE <"TZA"

              *********
71be          MNE_Index
              *********

              ; an index for all 256 opcodes, describing
              ; where to find the 3-letter mnemonic

71be 0f 31 15          .BYTE $0f,$31,$15,$46,$53,$31,$02,$3d
71c6 33 31 02          .BYTE $33,$31,$02,$55,$53,$31,$02,$05
71ce 0d 31 31          .BYTE $0d,$31,$31,$0d,$52,$31,$02,$3d
71d6 13 31 22          .BYTE $13,$31,$22,$26,$52,$31,$02,$05
71de 28 01 28          .BYTE $28,$01,$28,$28,$0a,$01,$3e,$3d
71e6 39 01 3e          .BYTE $39,$01,$3e,$59,$0a,$01,$3e,$05
71ee 0b 01 01          .BYTE $0b,$01,$01,$0b,$0a,$01,$3e,$3d
71f6 44 01 1c          .BYTE $44,$01,$1c,$20,$0a,$01,$3e,$05
71fe 41 21 2f          .BYTE $41,$21,$2f,$03,$03,$21,$2d,$3d
7206 32 21 2d          .BYTE $32,$21,$2d,$50,$27,$21,$2d,$05
720e 11 21 21          .BYTE $11,$21,$21,$11,$03,$21,$2d,$3d
7216 16 21 36          .BYTE $16,$21,$36,$4d,$2e,$21,$2d,$05
721e 42 00 42          .BYTE $42,$00,$42,$10,$4c,$00,$3f,$3d
7226 38 00 3f          .BYTE $38,$00,$3f,$5a,$27,$00,$3f,$05
722e 12 00 00          .BYTE $12,$00,$00,$12,$4c,$00,$3f,$3d
7236 47 00 3b          .BYTE $47,$00,$3b,$51,$27,$00,$3f,$05
723e 0e 49 49          .BYTE $0e,$49,$49,$0e,$4b,$49,$4a,$48
7246 1f 0a 56          .BYTE $1f,$0a,$56,$4b,$4b,$49,$4a,$06
724e 07 49 49          .BYTE $07,$49,$49,$07,$4b,$49,$4a,$48
7256 58 49 57          .BYTE $58,$49,$57,$4a,$4c,$49,$4c,$06
725e 2b 29 2a          .BYTE $2b,$29,$2a,$2c,$2b,$29,$2a,$48
7266 4f 29 4e          .BYTE $4f,$29,$4e,$2c,$2b,$29,$2a,$06
726e 08 29 29          .BYTE $08,$29,$29,$08,$2b,$29,$2a,$48
7276 17 29 54          .BYTE $17,$29,$54,$2c,$2b,$29,$2a,$06
727e 1a 18 1b          .BYTE $1a,$18,$1b,$1d,$1a,$18,$1c,$48
7286 25 18 1e          .BYTE $25,$18,$1e,$04,$1a,$18,$1c,$06
728e 0c 18 18          .BYTE $0c,$18,$18,$0c,$1b,$18,$1c,$48
7296 14 18 35          .BYTE $14,$18,$35,$37,$1b,$18,$1c,$06
729e 19 43 29          .BYTE $19,$43,$29,$23,$19,$43,$22,$48
72a6 24 43 30          .BYTE $24,$43,$30,$40,$19,$43,$22,$06
72ae 09 43 43          .BYTE $09,$43,$43,$09,$34,$43,$22,$48
72b6 45 43 3a          .BYTE $45,$43,$3a,$3c,$34,$43,$22,$06

              *****
72be          BRAIN
              *****

              ;              index values for branch mnemonics

              ;              BCC BCS BEQ BMI BNE BPL BRA BSR BVC BVS
72be 07 08 09          .BYTE $07,$08,$09,$0b,$0c,$0d,$0e,$10,$11,$12

              *******
72c8          LEN_ADM
              *******

              ; a table of instruction length, flags
              ; and address mode for all 256 opcodes

              ; 7-6: operand length %00.. 0: implied
              ;                     %01.. 1: direct page, indirect
              ;                     %10.. 2: absolute, etc.
              ;                     %11.. 3: BBR and BBS

              ;   5: relative       %0110 0000 $60 short branch
              ;                     %1010 0000 $a0 long  branch

              ;   4:

              ; 3-0: index of address mode


72c8 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $00
72d0 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $08
72d8 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $10
72e0 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $18
72e8 80 44 8b          .BYTE $80,$44,$8b,$84,$40,$40,$40,$40 ; $20
72f0 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $28
72f8 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $30
7300 00 88 00          .BYTE $00,$88,$00,$00,$87,$87,$87,$c0 ; $38
7308 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $40
7310 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $48
7318 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $50
7320 00 88 00          .BYTE $00,$88,$00,$00,$00,$87,$87,$c0 ; $58
7328 00 44 41          .BYTE $00,$44,$41,$a0,$40,$40,$40,$40 ; $60
7330 00 41 00          .BYTE $00,$41,$00,$00,$8b,$80,$80,$c0 ; $68
7338 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $70
7340 00 88 00          .BYTE $00,$88,$00,$00,$84,$87,$87,$c0 ; $78
7348 60 44 4d          .BYTE $60,$44,$4d,$a0,$40,$40,$40,$40 ; $80
7350 00 41 00          .BYTE $00,$41,$00,$87,$80,$80,$80,$c0 ; $88
7358 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $90
7360 00 88 00          .BYTE $00,$88,$00,$88,$80,$87,$87,$c0 ; $98
7368 41 44 41          .BYTE $41,$44,$41,$41,$40,$40,$40,$40 ; $a0
7370 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $a8
7378 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $b0
7380 00 88 00          .BYTE $00,$88,$00,$87,$87,$87,$88,$c0 ; $b8
7388 41 44 41          .BYTE $41,$44,$41,$40,$40,$40,$40,$40 ; $c0
7390 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $c8
7398 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $d0
73a0 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $d8
73a8 41 44 4d          .BYTE $41,$44,$4d,$40,$40,$40,$40,$40 ; $e0
73b0 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $e8
73b8 60 45 46          .BYTE $60,$45,$46,$a0,$81,$47,$47,$40 ; $f0
73c0 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $f8

              ******
73c8          ADMODE
              ******

              ; printout flags for 16 address modes
              ;               76543210
              ;               --------
              ;            7  x         #
              ;            6   x        (
              ;            5    x       ,
              ;            4     x      SP
              ;            3      x     )
              ;            2       x    ,
              ;            1/0      xx  01:X  10:Y  11:Z

73c8 00                .BYTE %00000000 ; 0             implicit/direct
73c9 80                .BYTE %10000000 ; 1 #$nn        immediate
73ca 00                .BYTE %00000000 ; 2             ----------
73cb 00                .BYTE %00000000 ; 3             ----------
73cc 69                .BYTE %01101001 ; 4 ($nn,X)     indirect X
73cd 4e                .BYTE %01001110 ; 5 ($nn),Y     indirect Y
73ce 4f                .BYTE %01001111 ; 6 ($nn),Z     indirect Z
73cf 05                .BYTE %00000101 ; 7 $nn,X       indexed  X
73d0 06                .BYTE %00000110 ; 8 $nn,Y       indexed  Y
73d1 05                .BYTE %00000101 ; 9 $nn,X       indexed  X
73d2 06                .BYTE %00000110 ; a $nn,Y       ----------
73d3 48                .BYTE %01001000 ; b ($nnnn,X)   JMP & JSR
73d4 69                .BYTE %01101001 ; c ($nn,X)     ----------
73d5 7e                .BYTE %01111110 ; d ($nn,SP),Y  LDA & STA
73d6 00                .BYTE %00000000 ; e
73d7 04                .BYTE %00000100 ; f

              ;              ASL INC ROL DEC LSR ROR NEG ASR
73d8 0a 1a 2a ACCUMODE .BYTE $0a,$1a,$2a,$3a,$4a,$6a,$42,$43

73e0 10 0a 08 Num_Base .BYTE 16,10, 8, 2 ; hex, dec, oct, bin
73e4 04 03 03 Num_Bits .BYTE  4, 3, 3, 1 ; hex, dec, oct, bin

73e8 58 59 5a Index_Char .BYTE "XYZ"

              ;                0123456789abcd
73eb 55 31 3a U1        .BYTE "U1:9 0 000 000",0 ; channel 9, drive, track, sector
73fa 42 2d 50 BP_ZERO   .BYTE "B-P 9 0",0        ; set buffer pointer to 0

              ***************
              Module Reg_Text
              ***************
7402 20 7d ff          JSR  PRIMM
7405 0d 20 20          .BYTE "\r    PC   SR AC XR YR ZR BP  SP  NVEBDIZC\r; \eQ",0
7434 60                RTS
7435          EndMod [Reg_Text] Size = 51 [$33]

              ***************
              Module Mon_Help
              ***************
7435 20 7d ff    JSR PRIMM

7438 96 41 05    .BYTE LRED,"A",WHITE,"SSEMBLE     - A ADDRESS MNEMONIC OPERAND",CR
7464 96 42 05    .BYTE LRED,"B",WHITE,"ITMAPS      - B [FROM [TO]]",CR
7483 96 43 05    .BYTE LRED,"C",WHITE,"OMPARE      - C FROM TO WITH",CR
74a3 96 44 05    .BYTE LRED,"D",WHITE,"ISASSEMBLE  - D [FROM [TO]]",CR
74c2 96 46 05    .BYTE LRED,"F",WHITE,"ILL         - F FROM TO FILLBYTE",CR
74e6 96 47 05    .BYTE LRED,"G",WHITE,"O           - G [ADDRESS]",CR
7503 96 48 05    .BYTE LRED,"H",WHITE,"UNT         - H FROM TO (STRING OR BYTES)",CR
7530 96 4a 05    .BYTE LRED,"J",WHITE,"SR          - J ADDRESS",CR
754b 96 4c 05    .BYTE LRED,"L",WHITE,"OAD         - L FILENAME [UNIT [ADDRESS]]",CR
7578 96 4d 05    .BYTE LRED,"M",WHITE,"EMORY       - M [FROM [TO]]",CR
7597 96 52 05    .BYTE LRED,"R",WHITE,"EGISTERS    - R",CR
75aa 96 53 05    .BYTE LRED,"S",WHITE,"AVE         - S FILENAME UNIT FROM TO",CR
75d3 96 54 05    .BYTE LRED,"T",WHITE,"RANSFER     - T FROM TO TARGET",CR
75f5 96 56 05    .BYTE LRED,"V",WHITE,"ERIFY       - V FILENAME [UNIT [ADDRESS]]",CR
7622 45 96 58    .BYTE "E",LRED,"X",WHITE,"IT         - X",CR
7635 96 2e 05    .BYTE LRED,".",WHITE,"<DOT>       - . ADDRESS MNEMONIC OPERAND",CR
7661 96 3e 05    .BYTE LRED,">",WHITE,"<GREATER>   - > ADDRESS BYTE SEQUENCE",CR
768a 96 3b 05    .BYTE LRED,";",WHITE,"<SEMICOLON> - ; REGISTER CONTENTS",CR
76af 96 40 05    .BYTE LRED,"@",WHITE,"DOS         - @ [DOS COMMAND]",CR
76d0 96 3f 05    .BYTE LRED,"?",WHITE,"HELP        - ?",CR
76e3 00          .BYTE 0
76e4 4c a5 60    JMP Main
76e7          End_Mod

76e7 ff ff ff          .FILL $8000-* ($ff) ; 2329 bytes


  483 Symbols
-------------
Bank                           $0002    28D   287    290    346    354
                                       526    528    531    778
PCH                            $0003    29D   275    283    318
PCL                            $0004    30D   281    284    316
SR                             $0005    31D   370
WHITE                          $0005    14D   473    740    748    892
                                       906   1819   2113   3503   3504
                                      3505   3506   3507   3508   3509
                                      3510   3511   3512   3513   3514
                                      3515   3516   3517   3518   3519
                                      3520   3521   3522
AC                             $0006    32D   304
XR                             $0007    33
YR                             $0008    34
ZR                             $0009    35
BP                             $000a    41
SPH                            $000b    42D   328    362
SPL                            $000c    43D   330    364    818    829
                                       833
CR                             $000d    18D   400    454   1509   3503
                                      3504   3505   3506   3507   3508
                                      3509   3510   3511   3512   3513
                                      3514   3515   3516   3517   3518
                                      3519   3520   3521   3522
REV                            $0012    19D   454
CRIGHT                         $001d    20D   431
QUOTE                          $0022    21D  1054   1061   2489   2494
APOSTR                         $0027    22D   991   2014
Long_AC                        $0059    56D   211    213    221    225
                                       525    527    529    530    541
                                       555    569    584    586    600
                                       616    628    630    638    639
                                       641    642    777    795    936
                                       938    948    950    971    973
                                      1006   1075   1084   1085   1127
                                      1242   1245   1412   1414   1415
                                      1423   1424   1479   1488   1547
                                      1554   1556   1557   1559   1756
                                      1758   1765   1766   1856   1859
                                      1873   1882   1931   1933   1944
                                      1947   1950   1955   1958   2007
                                      2008   2009   2010   2017   2051
                                      2062   2063   2064   2075   2076
                                      2083   2084   2086   2088   2330
                                      2462   2520   2521   2523   2525
                                      2594   2595   2597   2599   2675
                                      2679   2682   2690   2844   2883
                                      2884   2885   2886   2922   2927
Long_CT                        $005d    57D   214    215    217    218
                                       222    226    556    585    602
                                       699    700    703   1407   1413
                                      1421   1422   1627   1639   1642
                                      2243   2244   2246   2247   2248
                                      2362   2363   2405   2406   2407
                                      2430   2444   2447   2481   2484
                                      2493   2505   2511   2514   2549
                                      2551   2553   2749   2764   2932
                                      2950
Long_PC                        $0061    58D   542    601    617    650
                                       652    675    677    752    796
                                       798    842    844    860    862
                                       945    947    968    970   1091
                                      1110   1111   1128   1474   1477
                                      1480   1489   1495   1517   1521
                                      1555   1558   1956   1959   2105
                                      2111   2116   2119   2120   2257
                                      2258   2265   2267   2356   2369
                                      2372   2386   2399   2408   2409
                                      2410   2411   2412   2413   2414
                                      2415   2416   2417   2418   2419
                                      2435   2436   2437   2530   2535
                                      2536   2677   2680   2683   2718
                                      2723   2725   3030   3047
Long_DA                        $0065    59D   570    660    661    663
                                       664    719    722    725    741
                                       749    750    933    935   1014
                                      1022   1144   1180   1181   1190
                                      1194
Adr_Flags                      $0069    63D  1704   1842   1845   1887
                                      1891   1897   1901   1906   1911
                                      1915
Mode_Flags                     $006a    64D  1238   1266   1275   1285
                                      1297   1307   1317   1330   1344
                                      1358   1372   1388   1434   1452
                                      1455   1570   1591   1600   1611
                                      1612
Op_Code                        $006b    65D  1210   1228   1229   1411
                                      1438   1468   1476   1494   1569
                                      1685   1696   1743   1753   1799
                                      1806   1824   1865
Op_Flag                        $006c    66D  1145   1165   1277   1327
                                      1440   1471   1666   1677   1694
                                      1711   1719   1747   1777   1795
                                      1805   1832   1847   1872   1880
                                      1905   1924   1963
Op_Size                        $006d    70D  1469   1470   1481   1500
                                      1501   1636   1637   1641   1710
                                      1712   1726   1839   1860   1879
                                      1935   1941   1964
Dig_Cnt                        $006e    71D  2006   2018   2045   2097
Buf_Index                      $006f    72D   404   1057   1070   1255
                                      1972   1993   2019   2028   2203
                                      2204   2214   2222   2223   2301
                                      2467   2582   2745   2746   2841
                                      2850   2915
STATUS                         $0090    77D  1045   1102   2620   2674
                                      2686   2716   2719   2873   2878
                                      2892   2989   3028   3046   3106
                                      3114   3124   3130
VERCK                          $0093    78D   440   1086   1095   1103
LRED                           $0096    16D   748    890    904   3503
                                      3504   3505   3506   3507   3508
                                      3509   3510   3511   3512   3513
                                      3514   3515   3516   3517   3518
                                      3519   3520   3521   3522
YELLOW                         $009e    15D   454   1741   2107
FNLEN                          $00b7    79D  1043   1064   2518   2538
SA                             $00b9    80D  1040   1090   1113   2593
                                      2616   2665   2670   2706   2712
                                      2734   2870
FA                             $00ba    81D  1038   1076   2571   2614
                                      2663   2668   2704   2710   2732
                                      2754   2775   2849   2867   2984
                                      3023   3041   3107   3125
FNADR                          $00bb    82D  1047   1049   1063
BA                             $00bd    83D  1042   1080
FNBANK                         $00be    84D  1044
NDX                            $00d0    86
MODE_80                        $00d7    87D   697    801    888    902
B_Margin                       $00e4    89
T_Margin                       $00e5    90
L_Margin                       $00e6    91
R_Margin                       $00e7    92
QTSW                           $00f4    94D   858
Stack                          $0100    96D  2056   2057   2058   2059
Buffer                         $0200    97D   396    405   1058   1512
                                      1514   1523   1527   1535   2205
                                      2224   2589   2747   2758
IIRQ                           $0314    99
IBRK                           $0316   100
EXMON                          $032e   101
X_Vector                       $0400   105D   317    319    509
Ix_Mne                         $0402   106D  1200   1396   1579
Op_Mne                         $0403   107D  1162   1168   1175
Op_Ix                          $0406   108D  1146   1248   1251   1294
                                      1328   1342   1356   1370   1386
                                      1397
Op_Len                         $0407   109D  1147   1250   1450   1456
                                      1459   1607
Disk_Unit                      $0408   110D  1037   2545   2565
Disk_Src                       $0409   111D  2528   2570   2601
Disk_Track                     $040a   112D  2923   2970   3093
Disk_Sector                    $040b   113D  2928   2949   2969   3096
Disk_Status                    $040c   114D  2785   2789   2790   2801
                                      2976
File_Ext                       $040d   115D  2509   2512   2515   2648
Mon_Data                       $0410   117D   997   1007   1019   1046
                                      1048   2496   2502   2508   2519
                                      2540   2542   2544   2575   2590
                                      2621   2637   2914   2936   3011
                                      3064   3069   3073   3087   3092
Disk_Msg                       $0438   118D  2780   2787   2795   2799
                                      2817
MEM_BUF                        $0870  2471D  2522   2524
MEM_DIR                        $087f  2472D  2596   2598
header                         $1fff   170
Link                           $2029   182D   174
header_loop                    $205a   221D   224    228
Monitor_Call                   $6000   242
Monitor_Break                  $6003   248
Monitor_Switch                 $6006   254
Mon_Break                      $6009   260D   251
Mon_Break_loop                 $601f   274D   272    277
Mon_Break_nopage               $602b   284D   282
Mon_Break_bank                 $6036   289D   287
Mon_Call                       $603c   295D   245
Mon_Call_loop                  $6043   304D   306
Mon_Call_store                 $6055   316D   313
Mon_Start                      $605f   323D   291
Mon_Register                   $606d   338D   489
Mon_Register_loopa             $6072   346D   350
Mon_Register_loopb             $607d   354D   358
Mon_Register_loopc             $6096   371D   379
Mon_Register_flag              $609e   376D   374
Main                           $60a5   383D   407    434    711    765
                                       782    809    834    943    955
                                       980   1026   1030   1093   1105
                                      1108   1132   1151   1634   1644
                                      2317   2604   2860   2955   3524
Main_loop                      $60aa   395D   401
Main_A                         $60aa   392D  1540
Main_getcomm                   $60c0   406D   409
Mon_Switch                     $60c9   413D   257
Mon_Switch_loop                $60cb   417D   420
Mon_Error                      $60d3   425D   399    695    921    923
                                       963    965    988    995   1051
                                      1055   1068   1088   1099   1104
                                      1122   1124   1140   1198   1221
                                      1223   1233   1240   1243   1329
                                      1332   1336   1343   1350   1357
                                      1362   1371   1378   1385   1387
                                      1390   1402   1406   1408   1435
                                      1451   1453   1630   1988   2303
                                      2461   2464   2466   2568   2581
                                      2588   2846   2848   2911   2913
                                      2917   2921   2926
Mon_Select                     $60e0   437D   418
Print_Commands                 $60ed   450D   265    298
Command_Char                   $6107   457D   417
Cons_Prefix                    $6119   464D  2023   2307
Load_Save_Verify               $611e   470
Jump_Table                     $6124   477D   446
Mon_Exit                       $6152   506D   492
LAC_To_PC                      $6155   512D   773    817    828
LAC_To_PC_error                $6165   532D   524
LAC_To_LPC                     $6166   536D   690    738    791   1079
                                      1141   1623   2284   2384   2707
                                      2918
LAC_To_LPC_loop                $6169   541D   544
LAC_To_LCT                     $6172   550D  1254   2354   2396   2600
                                      2931
LAC_To_LCT_loop                $6175   555D   558
LAC_To_LDA                     $617e   564D  2287
LAC_To_LDA_loop                $6181   569D   572
LAC_Plus_LCT                   $618a   578D   931
LAC_Plus_LCT_loop              $618e   584D   588
LAC_Minus_LPC                  $6199   594D   694   1629   2288
LAC_Minus_LPC_loop             $619d   600D   604
LAC_Compare_LPC                $61a8   610D   926
LAC_Compare_LPC_loop           $61ac   616D   619
Inc_LAC                        $61b5   625D   952    976
Inc_LAC_return                 $61bb   631D   629
Dec_LAC                        $61bc   635D   940
Dec_LAC_skip                   $61c4   642D   640
Inc_LPC                        $61c7   647D   761    951    977   1027
                                      1129
Inc_LPC_return                 $61cd   653D   651
Dec_LDA                        $61ce   657D   939
Dec_LDA_skip                   $61d6   664D   662
Fetch                          $61d9   669D  1018   1667   1674   1684
                                      1690   1695   1722   1858   1930
Fetch_banked                   $61e0   677D   675
Mon_Memory                     $61e6   684D   488
Mon_Memory_shift               $6201   699D   697    702
Mon_Memory_row                 $620c   706D   689    692    710
Mon_Memory_exit                $6217   711D   707
Print_Bits                     $621a   715D   753
Print_Bits_loop                $621f   721D   727
Print_Bits_set                 $6226   724D   722
Mon_Bits                       $6230   733D   481
Mon_Bits_lab                   $6238   739D   737
Mon_Bits_row                   $6241   744D   764
Mon_Bits_col                   $6247   747D   759
Mon_Set_Register               $626d   769D   496
Mon_Set_Register_loop          $6275   775D   781
Mon_Set_Register_exit          $6284   782D   776
Mon_Set_Memory                 $6287   786D   495
Mon_Set_Memory_loop            $6291   793D   803
Mon_Set_Memory_banked          $629c   798D   796
Mon_Set_Memory_next            $62a6   803D   801
Mon_Set_Memory_exit            $62a8   805D   790    794
Mon_Go                         $62b5   813D   485
Mon_JSR                        $62c1   824D   487
Dump_4_Bytes                   $62d3   838D   891    893
Dump_4_Bytes_loop              $62d6   842D   849
Dump_4_Bytes_banked            $62da   844D   842
Dump_4_Chars                   $62e6   854D   905    907
Dump_4_Chars_loop              $62ed   860D   872
Dump_4_Chars_banked            $62f1   862D   860
Dump_4_Chars_laba              $62fa   867D   865
Dump_Row                       $6305   877D   708    808
Dump_Row_loop                  $6319   890D   888    895
Dump_Row_lchr                  $6334   904D   902    909
Mon_Transfer                   $6347   917D   490
Mon_Transfer_lpback            $635d   933D   942
Mon_Transfer_rb                $6361   935D   933
Mon_Transfer_wb                $6367   938D   936
Mon_Transfer_forward           $6377   945D   927    954
Mon_Transfer_rf                $637b   947D   945
Mon_Transfer_wf                $6381   950D   948
Mon_Compare                    $6391   959D   482
Mon_Compare_loop               $63a2   968D   979
Mon_Compare_rf                 $63a6   970D   968
Mon_Compare_cf                 $63ac   973D   971
Mon_Compare_laba               $63b3   976D   974
Mon_Hunt                       $63c1   984D   486
Mon_Hunt_lpstr                 $63d8   997D  1002
Mon_Hunt_bin                   $63e7  1005D   992
Mon_Hunt_lpbin                 $63ea  1006D  1012
Mon_Hunt_hunt                  $63f9  1014D  1000   1003   1010
Mon_Hunt_lpstart               $63fe  1017D  1029
Mon_Hunt_lpins                 $6400  1018D  1023
Mon_Hunt_next                  $6410  1025D  1020
Load_Save                      $6421  1034D   442
Load_Save_skip                 $643c  1050D  1053
Load_Save_copyfn               $644d  1058D  1067
Load_Save_unit                 $6463  1070D  1062
Load_Save_exit                 $6499  1093D  1102
Load_Save_do                   $649c  1095D  1059   1072   1074   1078
                                      1114
Load_Save_exec                 $64a9  1101D  1097
Load_Save_load                 $64c4  1110D  1082
Mon_Fill                       $64ce  1118D   484
Mon_Fill_loop                  $64df  1127D  1131
Mon_Assemble                   $64ef  1136D   480    494
Mon_Assemble_start             $64f8  1143D  1154
Mon_Assemble_getin             $6504  1148D  1171
Mon_Assemble_laba              $650e  1153D  1149
Mon_Assemble_labb              $6524  1168D  1159   1161   1164
Mon_Assemble_lpenc             $652c  1175D  1185
Mon_Assemble_lpbit             $6534  1179D  1183
Mon_Assemble_lpfind            $6543  1191D  1197
Mon_Assemble_nxfind            $654f  1196D  1192
Mon_Assemble_found             $6555  1200D  1195
Mon_Assemble_lpopc             $655b  1206D  1209
Mon_Assemble_exopc             $6563  1210D  1207
Mon_Assemble_labc              $6589  1237D  1217
Mon_Assemble_labd              $658b  1238D  1269   1279   1288   1308
                                      1321   1334   1352   1364   1380
                                      1392
Mon_Assemble_labf              $65a1  1248D  1246
Mon_Assemble_labg              $65b1  1255D  1241   1253
Mon_Assemble_lpnop             $65b3  1257D  1260
Mon_Assemble_lbra              $65c9  1273D  1265
Mon_Assemble_indir             $65d7  1283D  1274
Mon_Assemble_comma             $65e3  1292D  1284
Mon_Assemble_comma1            $6600  1306D  1298   1300   1302
Mon_Assemble_stack             $6606  1312D  1293
Mon_Assemble_rbra              $661c  1325D  1313
Mon_Assemble_error             $6635  1336D  1267   1276   1286   1295
                                      1305   1316   1319   1327
Mon_Assemble_right             $6638  1340D  1326
Mon_Assemble_right1            $6651  1351D  1346   1348
Mon_Assemble_X                 $6656  1354D  1341
Mon_Assemble_X1                $666b  1363D  1360
Mon_Assemble_Y                 $6670  1368D  1355
Mon_Assemble_Y1                $6689  1379D  1374   1376
Mon_Assemble_Z                 $668e  1384D  1369
Mon_Assemble_adjust            $66a5  1396D  1258
Mon_Assemble_BB                $66bd  1407D  1404
Mon_Assemble_one               $66d5  1421D  1400
Mon_Assemble_lpbrain           $66df  1426D  1429
Mon_Assemble_branch            $66e9  1434D  1427
Mon_Assemble_bran1             $66fd  1443D  1440
Mon_Assemble_match             $66ff  1447D  1398   1430
Mon_Assemble_lpmatch           $6702  1448D  1458
Mon_Assemble_okmat             $671e  1459D  1449
Mon_Assemble_store             $6722  1468D  1417   1443
Mon_Assemble_storen            $6742  1484D  1471
Mon_Assemble_lpsto             $6746  1488D  1492
Mon_Assemble_store1            $6750  1494D  1486
Mon_Assemble_print             $6755  1497D  1482
Mon_Assemble_auto              $6783  1520D  1518   1532
Branch_Target                  $67aa  1544D  1410   1437   1549
Match_Mode                     $67bd  1564D  1448
Match_Mode_loop                $67c1  1571D  1580
Match_Mode_next                $67c6  1576D  1581
Match_Mode_error               $67d3  1583D  1577
Match_Mode_return              $67d4  1584D  1572
Mode_Index                     $67d5  1588D  1447
Mode_Index_loop                $67d9  1593D  1597
Mode_Index_found               $67e5  1600D  1594
Size_To_Mode                   $67e7  1604D  1457
Mon_Disassemble                $67f4  1618D   483
Mon_Disassemble_nopar          $6801  1626D  1622
range                          $6807  1629D  1625
Mon_Disassemble_loop           $680d  1632D  1628   1643
Dis_Code                       $682c  1648D  1635
Print_Code                     $6832  1656D  1499
Print_Code_nop                 $684f  1683D  1672   1676
Print_Code_normal              $686d  1699D  1688   1693
Print_Code_norm1               $6886  1713D  1711
Print_Code_blpr                $688f  1721D  1719
Print_Code_lphex               $6892  1722D  1728
Print_Code_lpfill              $68a1  1732D  1737
Print_Code_long                $68af  1741D  1725   1733
Print_Code_locate              $68c4  1753D  1746
Print_Code_lpmne               $68d5  1763D  1775
Print_Code_lplet               $68d9  1765D  1769
Print_Code_lastc               $68ec  1777D  1772
Print_Code_Q3                  $68ff  1786D  1779   1783
Print_Code_Q4                  $6906  1789D  1781   1785
Print_Code_lbra                $6910  1794D  1777
Print_Code_biti                $6924  1806D  1802
Print_Code_mne4                $6934  1817D  1788   1804
Print_Code_mne5                $6937  1818D  1792   1795   1815
Print_Code_lpaccu              $6943  1826D  1829
Print_Code_accu                $6952  1834D  1832
Print_Code_oper                $6958  1839D  1827
Print_Code_laba                $6964  1845D  1842
Print_Code_labb                $696e  1849D  1844   1847
Print_Code_labc                $6971  1850D  1845
Print_Code_lpfop               $697a  1857D  1861
Print_Code_proper              $699e  1879D  1872
Print_Code_lpoper              $69a5  1882D  1880   1885
Print_Code_labd                $69c3  1897D  1891
Print_Code_labe                $69cb  1901D  1887   1897
Print_Code_labf                $69d3  1905D  1877   1901
Print_Code_comch               $69de  1911D  1905
Print_Code_labg                $69f3  1924D  1911   1917
Print_Code_rel                 $6a12  1939D  1868
Print_Code_rela                $6a14  1940D  1937
Print_Code_labh                $6a21  1949D  1945
Print_Code_lpinw               $6a22  1950D  1952
Print_Code_return              $6a3b  1965D  1835   1840   1909   1924
                                      1963
Got_LAC                        $6a3c  1969D  1005
Get_LAC                        $6a3e  1976D   687    691    736    772
                                       775    789    793    816    827
                                       922    964   1009   1073   1077
                                      1081   1123   1139   1621   1624
                                      2282   2285   2302   2916   2920
                                      2925   2930
Get_LAC_error                  $6a52  1988D  1980
Get_LAC_noval                  $6a55  1990D  1981
Get_LAC_end                    $6a57  1993D  1983
Get_LAC_ok                     $6a59  1994D  1985   1987
Read_Number                    $6a5b  1999D  1239   1979   2460   2842
Read_Number_numeric            $6a7f  2022D  2015
Read_Number_prefix             $6a81  2023D  2026
Read_Number_digit              $6a8c  2030D  2024   2085   2087   2089
Read_Number_valid              $6aa3  2041D  2035
Read_Number_push               $6ab3  2051D  2054
Read_Number_laba               $6ac6  2061D  2048
Read_Number_shift              $6ac9  2062D  2067
Read_Number_pull               $6ade  2074D  2079
Read_Number_labc               $6ae7  2081D  2070
Read_Number_error              $6af7  2091D  2043   2065
Read_Number_exit               $6afa  2093D  2013   2020   2031   2033
                                      2037   2039
Read_Number_return             $6afb  2094D  2092
Hex_LPC                        $6b01  2102D   745    884    975   1024
                                      1661
Hex_LPC_laba                   $6b1a  2116D  2106
Hex_LPC_labb                   $6b21  2119D  2115   2117
Print_XA_Hex                   $6b25  2124D  1962   2537
Print_Hex_Blank                $6b2b  2134D   355    365    845   1723
Print_Blank                    $6b2e  2141D  1817   1818   2653   2888
Print_CR                       $6b33  2149D   386    739    760    881
                                       966   1015   1083   1125   2815
                                      2822   2897
CR_Erase                       $6b38  2157D  1632   2306   2634
Print_Hex                      $6b40  2166D   347    363   1874   1883
                                      2110   2112   2118   2129   2137
A_To_Hex                       $6b4c  2178D  1522   2170   2532
A_To_Hex_nibble                $6b56  2190D  2182
A_To_Hex_lab                   $6b5e  2194D  2192
Get_Glyph                      $6b61  2199D  2012   2566   2577   2836
Get_Glyph_loop                 $6b64  2203D  2206
Got_Char                       $6b6e  2211D  1982
Get_Char                       $6b70  2218D   406    990    993    999
                                      1050   1071   1148   1219   1231
                                      1257   1314   2016   2030   2851
                                      2909
Get_Char_regc                  $6b85  2232D  2227
Get_Char_return                $6b8b  2235D  2229   2231   2233
Dec_LCT                        $6b8c  2240D   941    953    978   1028
                                      1130
Dec_LCT_skip                   $6b94  2247D  2245
Add_LPC                        $6b99  2253D   911   1502   1638   1679
Inc_LPC_Page                   $6ba0  2262D  2948
Add_LPC_return                 $6ba6  2268D  2259   2266
Param_Range                    $6ba7  2271D   920    962    987   1121
Param_Range_error              $6bbe  2292D  2283   2286   2289
Converter                      $6bc0  2297D   498    499    500    501
                                       502
Converter_loop                 $6bcc  2305D  2316
Conv_Tab                       $6be5  2319D  2312
Print_Char                     $6bef  2327D  2323
Print_Char_return              $6bfc  2336D  2332   2334
Print_Dual                     $6bfd  2340D  2322
Print_Octal                    $6c03  2348D  2321
Print_Dual_entry               $6c07  2354D  2345
Print_Dual_loopa               $6c11  2359D  2375
Print_Dual_loopb               $6c15  2362D  2366
Print_Dual_skip                $6c26  2371D  2368
Print_Dual_next                $6c2d  2374D  2370
Print_Hexval                   $6c32  2381D  2319
Print_Decimal                  $6c3b  2391D  2320   2887
Print_Decimal_clear            $6c42  2399D  2401
Print_Decimal_loop             $6c4a  2405D  2421
Print_BCD                      $6c6d  2426D  2387
Print_BCD_loopa                $6c75  2433D  2453
Print_BCD_loopb                $6c79  2435D  2440
Print_BCD_skip                 $6c8c  2446D  2443
Print_BCD_print                $6c96  2451D  2449
Print_BCD_next                 $6c99  2452D  2445
Read_Unit                      $6c9d  2458D  2564   2569
Copy_Files                     $6cb2  2475D  2603
Copy_Files_lpent               $6cb6  2482D  2552   2554
Copy_Files_lpquote             $6cb8  2483D  2488
Copy_Files_lpfn                $6ccc  2492D  2499
Copy_Files_endfn               $6cde  2501D  2495
Copy_Files_lptype              $6ce4  2504D  2507
Copy_Files_exit                $6d55  2555D  2486   2490   2500
Mon_Unit_Copy                  $6d56  2559D   491
Mon_Unit_Copy_loopfn           $6d6e  2573D  2576
Mon_Unit_Copy_pat              $6d87  2585D  2591
Mon_Unit_Copy_laba             $6d96  2592D  2579
Mon_Unit_Copy_dir              $6db5  2606D  2574
Send_Filename                  $6dba  2611D  2666   2708
Send_Filename_fname            $6dca  2621D  2626
Send_Filename_stop             $6dd7  2627D  2622
List_Filename                  $6ddd  2632D  2527
List_Filename_loop             $6de2  2636D  2641
List_Filename_fill             $6def  2642D  2639
List_Filename_blank            $6df1  2643D  2646
List_Filename_ext              $6dfb  2648D  2652
Save_File                      $6e09  2657D  2546
Save_File_loop                 $6e24  2675D  2689   2691
Save_File_cont                 $6e3a  2686D  2678   2681
Save_File_stop                 $6e45  2692D  2684   2687
Save_File_error                $6e4b  2694D  2667
Load_File                      $6e4e  2698D  2529   2602
Load_File_loop                 $6e6c  2717D  2722   2724
Load_File_stop                 $6e7d  2725D  2720
Close_File                     $6e82  2729D  2693
Load_File_error                $6e91  2738D  2709
Mon_Disk                       $6e94  2742D  2859
Mon_Disk_lab                   $6ea7  2754D  2752
Mon_Disk_loop                  $6eb0  2758D  2762
Mon_Disk_close                 $6ebb  2763D  2759
Get_Disk_Status                $6ec7  2772D  2628   2809   2964   2973
Get_Disk_Status_loop           $6eee  2793D  2797
Print_Disk_Status              $6f05  2806D  2748   2766   3115   3131
Print_Disk_Msg                 $6f08  2812D  2694   2738   2953   2975
Print_Disk_Status_loop         $6f0d  2817D  2821
Print_Disk_Status_exit         $6f18  2822D  2818
Mon_DOS                        $6f1b  2832D   493
Mon_DOS_unit                   $6f3b  2849D  2838   2840   2843
Mon_DOS_next                   $6f3f  2851D  2854   2856
Mon_DOS_status                 $6f50  2859D  2852
Directory                      $6f56  2864D  2767
Directory_loopb                $6f68  2876D  2881   2901
Directory_loopc                $6f81  2890D  2895
Directory_cr                   $6f8f  2897D  2891
Directory_exit                 $6f9b  2902D  2879   2893   2899
DOS_U                          $6f9e  2906D  2858
DOS_U_loop                     $6fda  2936D  2951
DOS_U_write                    $6fea  2944D  2938
DOS_U_next                     $6ff2  2948D  2942
DOS_U_error                    $6ffc  2953D  2940   2946
Find_Next_Sector               $7005  2959D  2939   2945
Find_Next_Sector_error         $7027  2975D  2967
Find_Next_Sector_return        $702d  2977D  2965   2974
Open_Command_Channel           $702e  2981D  2997   3010
Reset_BP                       $703d  2994D  3040
Reset_BP_loop                  $7040  2998D  3002
Reset_BP_end                   $704b  3003D  2999
Send_Disk_Command              $704e  3007D  2963   2972
Send_Disk_Command_loop         $7051  3011D  3015
Send_Disk_Command_end          $705c  3016D  3012
Read_Sector                    $705f  3020D  2941
Read_Sector_loop               $706d  3029D  3032
Write_Sector                   $7079  3037D  2944
Write_Sector_loop              $708a  3047D  3050
Set_TS                         $7097  3056D  3095   3098
Set_TS_100                     $7097  3062D  3066
Set_TS_10                      $70a2  3067D  3063   3071
Set_TS_1                       $70ad  3072D  3068
Build_U_String                 $70b3  3082D  2962   2971
Build_U_String_loop            $70b5  3086D  3090
Open_Disk_Buffer               $70d5  3102D  2934
Close_Disk_Buffer              $70f1  3120D  2954
MNE_L                          $7108  3152D  1191   1755
MNE_R                          $7163  3248D  1193   1757
MNE_Index                      $71be  3344D  1206   1578   1754
BRAIN                          $72be  3384D  1426
LEN_ADM                        $72c8  3393D  1571   1699   1744   1866
ADMODE                         $73c8  3447D  1593   1703
ACCUMODE                       $73d8  3479D  1828
Num_Base                       $73e0  3481D  2042
Num_Bits                       $73e4  3482D  2061
Index_Char                     $73e8  3484D  1919
U1                             $73eb  3487D  3086
BP_ZERO                        $73fa  3488D  2998
Reg_Text                       $7402  3491D   341
Mon_Help                       $7435  3499D   497
End_Mod                        $76e7  3525
EXIT_OLD                       $cf2e   120D   314    315
EXIT                           $cfa4   121D   271    310    311    312
SETBNK                         $ff6b   123
JSRFAR                         $ff6e   124D   831
JMPFAR                         $ff71   125D   820
LDA_FAR                        $ff74   126
STA_FAR                        $ff77   127
CMP_FAR                        $ff7a   128
PRIMM                          $ff7d   129D   263    430    453    805
                                       897   1106   1497   1508   1651
                                      1734   2160   3493   3501
CINT                           $ff81   130
IOINIT                         $ff84   131
SETMSG                         $ff90   132D   332
SECOND                         $ff93   133D  2618   2672   2736   2757
                                      2987   3110   3128
TKSA                           $ff96   134D  2714   2778   2871   3026
                                      3044
MEMTOP                         $ff99   135
MEMBOT                         $ff9c   136
KEY                            $ff9f   137
SETTMO                         $ffa2   138
ACPTR                          $ffa5   139D  2717   2779   2786   2794
                                      2877   2890   3029
CIOUT                          $ffa8   140D  2623   2676   2760   3000
                                      3013   3048   3112
UNTALK                         $ffab   141D  2726   2800   2902   3033
UNLSN                          $ffae   142D  2627   2692   2737   2763
                                      3003   3016   3051   3113   3129
LISTEN                         $ffb1   143D  2615   2669   2733   2755
                                      2985   3042   3108   3126
TALK                           $ffb4   144D  2711   2776   2868   3024
READSS                         $ffb7   145
SETLFS                         $ffba   146
SETNAM                         $ffbd   147
OPEN                           $ffc0   148
CLOSE                          $ffc3   149
CHKIN                          $ffc6   150
CHKOUT                         $ffc9   151
CLRCHN                         $ffcc   152
CHRIN                          $ffcf   153D   395
CHROUT                         $ffd2   154D   376    724    751    841
                                       859    868    883   1524   1528
                                      1536   1721   1742   1749   1774
                                      1787   1789   1791   1794   1814
                                      1820   1834   1849   1851   1876
                                      1889   1893   1895   1899   1903
                                      1913   1920   1926   1928   2108
                                      2114   2145   2153   2171   2174
                                      2308   2335   2373   2451   2534
                                      2640   2643   2649   2819   2894
LOAD                           $ffd5   155D  1101
SAVE                           $ffd8   156D  1092
SETTIM                         $ffdb   157
GETTIM                         $ffde   158
STOP                           $ffe1   159D   706   1025   1633   2898
GETIN                          $ffe4   160
CLALL                          $ffe7   161
SCAN                           $ffea   162
SCRORG                         $ffed   163
PLOT                           $fff0   164
Long_AC                        $0059    56D   211    213    221    225
                                       525    527    529    530    541
                                       555    569    584    586    600
                                       616    628    630    638    639
                                       641    642    777    795    936
                                       938    948    950    971    973
                                      1006   1075   1084   1085   1127
                                      1242   1245   1412   1414   1415
                                      1423   1424   1479   1488   1547
                                      1554   1556   1557   1559   1756
                                      1758   1765   1766   1856   1859
                                      1873   1882   1931   1933   1944
                                      1947   1950   1955   1958   2007
                                      2008   2009   2010   2017   2051
                                      2062   2063   2064   2075   2076
                                      2083   2084   2086   2088   2330
                                      2462   2520   2521   2523   2525
                                      2594   2595   2597   2599   2675
                                      2679   2682   2690   2844   2883
                                      2884   2885   2886   2922   2927
Long_PC                        $0061    58D   542    601    617    650
                                       652    675    677    752    796
                                       798    842    844    860    862
                                       945    947    968    970   1091
                                      1110   1111   1128   1474   1477
                                      1480   1489   1495   1517   1521
                                      1555   1558   1956   1959   2105
                                      2111   2116   2119   2120   2257
                                      2258   2265   2267   2356   2369
                                      2372   2386   2399   2408   2409
                                      2410   2411   2412   2413   2414
                                      2415   2416   2417   2418   2419
                                      2435   2436   2437   2530   2535
                                      2536   2677   2680   2683   2718
                                      2723   2725   3030   3047
Long_CT                        $005d    57D   214    215    217    218
                                       222    226    556    585    602
                                       699    700    703   1407   1413
                                      1421   1422   1627   1639   1642
                                      2243   2244   2246   2247   2248
                                      2362   2363   2405   2406   2407
                                      2430   2444   2447   2481   2484
                                      2493   2505   2511   2514   2549
                                      2551   2553   2749   2764   2932
                                      2950
WHITE                          $0005    14D   473    740    748    892
                                       906   1819   2113   3503   3504
                                      3505   3506   3507   3508   3509
                                      3510   3511   3512   3513   3514
                                      3515   3516   3517   3518   3519
                                      3520   3521   3522
LRED                           $0096    16D   748    890    904   3503
                                      3504   3505   3506   3507   3508
                                      3509   3510   3511   3512   3513
                                      3514   3515   3516   3517   3518
                                      3519   3520   3521   3522
CR                             $000d    18D   400    454   1509   3503
                                      3504   3505   3506   3507   3508
                                      3509   3510   3511   3512   3513
                                      3514   3515   3516   3517   3518
                                      3519   3520   3521   3522
Op_Flag                        $006c    66D  1145   1165   1277   1327
                                      1440   1471   1666   1677   1694
                                      1711   1719   1747   1777   1795
                                      1805   1832   1847   1872   1880
                                      1905   1924   1963
Buf_Index                      $006f    72D   404   1057   1070   1255
                                      1972   1993   2019   2028   2203
                                      2204   2214   2222   2223   2301
                                      2467   2582   2745   2746   2841
                                      2850   2915
Mode_Flags                     $006a    64D  1238   1266   1275   1285
                                      1297   1307   1317   1330   1344
                                      1358   1372   1388   1434   1452
                                      1455   1570   1591   1600   1611
                                      1612
Long_DA                        $0065    59D   570    660    661    663
                                       664    719    722    725    741
                                       749    750    933    935   1014
                                      1022   1144   1180   1181   1190
                                      1194
FA                             $00ba    81D  1038   1076   2571   2614
                                      2663   2668   2704   2710   2732
                                      2754   2775   2849   2867   2984
                                      3023   3041   3107   3125
STATUS                         $0090    77D  1045   1102   2620   2674
                                      2686   2716   2719   2873   2878
                                      2892   2989   3028   3046   3106
                                      3114   3124   3130
Op_Size                        $006d    70D  1469   1470   1481   1500
                                      1501   1636   1637   1641   1710
                                      1712   1726   1839   1860   1879
                                      1935   1941   1964
Op_Code                        $006b    65D  1210   1228   1229   1411
                                      1438   1468   1476   1494   1569
                                      1685   1696   1743   1753   1799
                                      1806   1824   1865
SA                             $00b9    80D  1040   1090   1113   2593
                                      2616   2665   2670   2706   2712
                                      2734   2870
Adr_Flags                      $0069    63D  1704   1842   1845   1887
                                      1891   1897   1901   1906   1911
                                      1915
Bank                           $0002    28D   287    290    346    354
                                       526    528    531    778
SPL                            $000c    43D   330    364    818    829
                                       833
MODE_80                        $00d7    87D   697    801    888    902
FNLEN                          $00b7    79D  1043   1064   2518   2538
VERCK                          $0093    78D   440   1086   1095   1103
Dig_Cnt                        $006e    71D  2006   2018   2045   2097
QUOTE                          $0022    21D  1054   1061   2489   2494
FNADR                          $00bb    82D  1047   1049   1063
YELLOW                         $009e    15D   454   1741   2107
PCL                            $0004    30D   281    284    316
PCH                            $0003    29D   275    283    318
BA                             $00bd    83D  1042   1080
APOSTR                         $0027    22D   991   2014
SPH                            $000b    42D   328    362
QTSW                           $00f4    94D   858
FNBANK                         $00be    84D  1044
CRIGHT                         $001d    20D   431
REV                            $0012    19D   454
AC                             $0006    32D   304
SR                             $0005    31D   370
R_Margin                       $00e7    92
L_Margin                       $00e6    91
T_Margin                       $00e5    90
B_Margin                       $00e4    89
NDX                            $00d0    86
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
Long_AC                        $0059    56D   211    213    221    225
                                       525    527    529    530    541
                                       555    569    584    586    600
                                       616    628    630    638    639
                                       641    642    777    795    936
                                       938    948    950    971    973
                                      1006   1075   1084   1085   1127
                                      1242   1245   1412   1414   1415
                                      1423   1424   1479   1488   1547
                                      1554   1556   1557   1559   1756
                                      1758   1765   1766   1856   1859
                                      1873   1882   1931   1933   1944
                                      1947   1950   1955   1958   2007
                                      2008   2009   2010   2017   2051
                                      2062   2063   2064   2075   2076
                                      2083   2084   2086   2088   2330
                                      2462   2520   2521   2523   2525
                                      2594   2595   2597   2599   2675
                                      2679   2682   2690   2844   2883
                                      2884   2885   2886   2922   2927
Long_PC                        $0061    58D   542    601    617    650
                                       652    675    677    752    796
                                       798    842    844    860    862
                                       945    947    968    970   1091
                                      1110   1111   1128   1474   1477
                                      1480   1489   1495   1517   1521
                                      1555   1558   1956   1959   2105
                                      2111   2116   2119   2120   2257
                                      2258   2265   2267   2356   2369
                                      2372   2386   2399   2408   2409
                                      2410   2411   2412   2413   2414
                                      2415   2416   2417   2418   2419
                                      2435   2436   2437   2530   2535
                                      2536   2677   2680   2683   2718
                                      2723   2725   3030   3047
Long_CT                        $005d    57D   214    215    217    218
                                       222    226    556    585    602
                                       699    700    703   1407   1413
                                      1421   1422   1627   1639   1642
                                      2243   2244   2246   2247   2248
                                      2362   2363   2405   2406   2407
                                      2430   2444   2447   2481   2484
                                      2493   2505   2511   2514   2549
                                      2551   2553   2749   2764   2932
                                      2950
WHITE                          $0005    14D   473    740    748    892
                                       906   1819   2113   3503   3504
                                      3505   3506   3507   3508   3509
                                      3510   3511   3512   3513   3514
                                      3515   3516   3517   3518   3519
                                      3520   3521   3522
Mon_Data                       $0410   117D   997   1007   1019   1046
                                      1048   2496   2502   2508   2519
                                      2540   2542   2544   2575   2590
                                      2621   2637   2914   2936   3011
                                      3064   3069   3073   3087   3092
LRED                           $0096    16D   748    890    904   3503
                                      3504   3505   3506   3507   3508
                                      3509   3510   3511   3512   3513
                                      3514   3515   3516   3517   3518
                                      3519   3520   3521   3522
CR                             $000d    18D   400    454   1509   3503
                                      3504   3505   3506   3507   3508
                                      3509   3510   3511   3512   3513
                                      3514   3515   3516   3517   3518
                                      3519   3520   3521   3522
Op_Flag                        $006c    66D  1145   1165   1277   1327
                                      1440   1471   1666   1677   1694
                                      1711   1719   1747   1777   1795
                                      1805   1832   1847   1872   1880
                                      1905   1924   1963
Buf_Index                      $006f    72D   404   1057   1070   1255
                                      1972   1993   2019   2028   2203
                                      2204   2214   2222   2223   2301
                                      2467   2582   2745   2746   2841
                                      2850   2915
Mode_Flags                     $006a    64D  1238   1266   1275   1285
                                      1297   1307   1317   1330   1344
                                      1358   1372   1388   1434   1452
                                      1455   1570   1591   1600   1611
                                      1612
Long_DA                        $0065    59D   570    660    661    663
                                       664    719    722    725    741
                                       749    750    933    935   1014
                                      1022   1144   1180   1181   1190
                                      1194
FA                             $00ba    81D  1038   1076   2571   2614
                                      2663   2668   2704   2710   2732
                                      2754   2775   2849   2867   2984
                                      3023   3041   3107   3125
STATUS                         $0090    77D  1045   1102   2620   2674
                                      2686   2716   2719   2873   2878
                                      2892   2989   3028   3046   3106
                                      3114   3124   3130
Op_Size                        $006d    70D  1469   1470   1481   1500
                                      1501   1636   1637   1641   1710
                                      1712   1726   1839   1860   1879
                                      1935   1941   1964
Op_Code                        $006b    65D  1210   1228   1229   1411
                                      1438   1468   1476   1494   1569
                                      1685   1696   1743   1753   1799
                                      1806   1824   1865
Buffer                         $0200    97D   396    405   1058   1512
                                      1514   1523   1527   1535   2205
                                      2224   2589   2747   2758
SA                             $00b9    80D  1040   1090   1113   2593
                                      2616   2665   2670   2706   2712
                                      2734   2870
Op_Ix                          $0406   108D  1146   1248   1251   1294
                                      1328   1342   1356   1370   1386
                                      1397
Adr_Flags                      $0069    63D  1704   1842   1845   1887
                                      1891   1897   1901   1906   1911
                                      1915
Bank                           $0002    28D   287    290    346    354
                                       526    528    531    778
Op_Len                         $0407   109D  1147   1250   1450   1456
                                      1459   1607
Disk_Msg                       $0438   118D  2780   2787   2795   2799
                                      2817
Disk_Status                    $040c   114D  2785   2789   2790   2801
                                      2976
SPL                            $000c    43D   330    364    818    829
                                       833
File_Ext                       $040d   115D  2509   2512   2515   2648
Disk_Sector                    $040b   113D  2928   2949   2969   3096
Stack                          $0100    96D  2056   2057   2058   2059
MODE_80                        $00d7    87D   697    801    888    902
FNLEN                          $00b7    79D  1043   1064   2518   2538
VERCK                          $0093    78D   440   1086   1095   1103
Dig_Cnt                        $006e    71D  2006   2018   2045   2097
QUOTE                          $0022    21D  1054   1061   2489   2494
Disk_Track                     $040a   112D  2923   2970   3093
Disk_Src                       $0409   111D  2528   2570   2601
Disk_Unit                      $0408   110D  1037   2545   2565
Op_Mne                         $0403   107D  1162   1168   1175
Ix_Mne                         $0402   106D  1200   1396   1579
X_Vector                       $0400   105D   317    319    509
FNADR                          $00bb    82D  1047   1049   1063
YELLOW                         $009e    15D   454   1741   2107
PCL                            $0004    30D   281    284    316
PCH                            $0003    29D   275    283    318
header_loop                    $205a   221D   224    228
MEM_DIR                        $087f  2472D  2596   2598
MEM_BUF                        $0870  2471D  2522   2524
BA                             $00bd    83D  1042   1080
APOSTR                         $0027    22D   991   2014
SPH                            $000b    42D   328    362
Link                           $2029   182D   174
QTSW                           $00f4    94D   858
FNBANK                         $00be    84D  1044
CRIGHT                         $001d    20D   431
REV                            $0012    19D   454
AC                             $0006    32D   304
SR                             $0005    31D   370
header                         $1fff   170
EXMON                          $032e   101
IBRK                           $0316   100
IIRQ                           $0314    99
R_Margin                       $00e7    92
L_Margin                       $00e6    91
T_Margin                       $00e5    90
B_Margin                       $00e4    89
NDX                            $00d0    86
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
