              *******************************
              * BSM = Bit Shifter's Monitor *
              * for The MEGA65  08-Dec_2020 *
              *******************************

              .CPU 45GS02

              .STORE $6000,$2000,"bsmon.rom"

              *************
              * Constants *
              *************

0005          WHITE  = $05
009e          YELLOW = $9e
0096          LRED   = $96

000d          CR     = $0d
0012          REV    = $12
001d          CRIGHT = $1d
0022          QUOTE  = $22
0027          APOSTR = $27

              ************************************************
              * Register storage for JMPFAR and JSRFAR calls *
              ************************************************

0002          Bank       =  2
0003          PCH        =  3
0004          PCL        =  4
0005          SR         =  5
0006          AC         =  6
0007          XR         =  7
0008          YR         =  8
0009          ZR         =  9

              *************************************
              * Used direct (zero) page addresses *
              *************************************

000a          BP         = 10
000b          SPH        = 11
000c          SPL        = 12

              ; following variables overlap with the BASIC floating point area

              ; $59 - $5d : temporary floating point accumulator
              ; $5e - $62 : temporary floating point accumulator
              ; $63 - $69 : primary   floating point accumulator
              ; $6a - $6f : secondary floating point accumulator

              ; A set of 32 bit variables also used as 32 bit pointer

0059          & = $59

0059          Long_AC    .BSS 4  ; 32 bit accumulator
005d          Long_CT    .BSS 4  ; 32 bit counter
0061          Long_PC    .BSS 4  ; 32 bit program counter
0065          Long_DA    .BSS 4  ; 32 bit data pointer

              ; Flags are  used in BBR BBS instructions

0069          Adr_Flags  .BSS 1
006a          Mode_Flags .BSS 1
006b          Op_Code    .BSS 1
006c          Op_Flag    .BSS 1
006d          Op_Size    .BSS 1
006e          Dig_Cnt    .BSS 1
006f          Buf_Index  .BSS 1

              ; operating system variables


0090          STATUS     = $90
0093          VERCK      = $93
00b7          FNLEN      = $b7
00b9          SA         = $b9
00ba          FA         = $ba
00bb          FNADR      = $bb
00bd          BA         = $bd
00be          FNBANK     = $be

00d0          NDX        = $d0        ; length of keyboard buffer
00d7          MODE_80    = $d7        ; 80 column / 40 volumn flag

00e4          B_Margin   = $e4        ; SCBOT  default = 24
00e5          T_Margin   = $e5        ; SCTOP  default =  0
00e6          L_Margin   = $e6        ; SCLF   default =  0
00e7          R_Margin   = $e7        ; SCRT   default = 39 or 79

00f4          QTSW       = $f4        ; Quote switch

0200          Buffer     = $0200      ; input buffer

0314          IIRQ       = $0314
0316          IBRK       = $0316
032e          EXMON      = $032e

0400          & = $400                ; bottom of BASIC runtime stack
                                      ; should be a safe space
0400          X_Vector    .BSS  2     ; exit vector (ROM version dependent)
0402          Ix_Mne      .BSS  1     ; index to mnemonics table
0403          Op_Mne      .BSS  3     ; 3 bytes for mnemonic
0406          Op_Ix       .BSS  1     ; type of constant
0407          Op_Len      .BSS  1     ; length of operand
0408          Disk_Unit   .BSS  1     ; unit = device
0409          Disk_Track  .BSS  1     ; logical track  1 -> 255
040a          Disk_Sector .BSS  1     ; logical sector 0 -> 255
040b          Disk_Status .BSS  1     ; BCD value of status

040c          Mon_Data    .BSS 40     ; buffer for hunt and filename
0434          Disk_Msg    .BSS 40     ; disk status as text message

cf2e          EXIT_OLD   = $cf2e      ; exit address for ROM 910110
cfa4          EXIT       = $cfa4      ; exit address for ROM 911001

ff6b          SETBNK     = $ff6b
ff6e          JSRFAR     = $ff6e
ff71          JMPFAR     = $ff71
ff74          LDA_FAR    = $ff74
ff77          STA_FAR    = $ff77
ff7a          CMP_FAR    = $ff7a
ff7d          PRIMM      = $ff7d
ff81          CINT       = $ff81
ff84          IOINIT     = $ff84
ff90          SETMSG     = $ff90
ff93          SECOND     = $ff93
ff96          TKSA       = $ff96
ff99          MEMTOP     = $ff99
ff9c          MEMBOT     = $ff9c
ff9f          KEY        = $ff9f
ffa2          SETTMO     = $ffa2
ffa5          ACPTR      = $ffa5
ffa8          CIOUT      = $ffa8
ffab          UNTALK     = $ffab
ffae          UNLSN      = $ffae
ffb1          LISTEN     = $ffb1
ffb4          TALK       = $ffb4
ffb7          READSS     = $ffb7
ffba          SETLFS     = $ffba
ffbd          SETNAM     = $ffbd
ffc0          OPEN       = $ffc0
ffc3          CLOSE      = $ffc3
ffc6          CHKIN      = $ffc6
ffc9          CHKOUT     = $ffc9
ffcc          CLRCHN     = $ffcc
ffcf          CHRIN      = $ffcf
ffd2          CHROUT     = $ffd2
ffd5          LOAD       = $ffd5
ffd8          SAVE       = $ffd8
ffdb          SETTIM     = $ffdb
ffde          GETTIM     = $ffde
ffe1          STOP       = $ffe1
ffe4          GETIN      = $ffe4
ffe7          CLALL      = $ffe7
ffea          SCAN       = $ffea
ffed          SCRORG     = $ffed
fff0          PLOT       = $fff0

1fff          * = $1fff
                      .STORE $1fff,$0101,"bsm.prg"

              *************
              Module header
              *************

1fff 01 20            .WORD $2001             ; load address
2001 29 20            .WORD Link              ; line link
2003 e4 07            .WORD 2020              ; line number
2005 fe 02            .BYTE $fe,$02           ; BANK token
2007 30 3a            .BYTE "0:"              ; BANK argument
2009 9e               .BYTE $9e               ; SYS  token
200a 28 38 32         .BYTE "(8235):"         ; $202d
2011 8f               .BYTE $8f               ; REM  token
2012 20 42 49         .BYTE " BIT SHIFTER 08-DEC-20",0
2029 00 00    Link    .WORD 0                 ; BASIC end marker

                      ; copy image to $030000

202b 78               SEI

              ; map memory to monitor configuration

202c a9 a0            LDA  #$a0
202e a2 82            LDX  #$82
2030 a0 00            LDY  #$00
2032 a3 83            LDZ  #$83
2034 5c               MAP
2035 ea               EOM

              ; VIC IV registers visible

2036 a9 47            LDA  #$47
2038 8d 2f d0         STA  $d02f
203b a9 53            LDA  #$53
203d 8d 2f d0         STA  $d02f

              ; toggle write protection

2040 a9 70            LDA  #$70
2042 8d 40 d6         STA  $D640
2045 ea               NOP

2046 a3 00            LDZ  #0
2048 64 59            STZ  Long_AC
204a a9 21            LDA  #$21
204c 85 5a            STA  Long_AC+1
204e 64 5d            STZ  Long_CT
2050 64 5e            STZ  Long_CT+1
2052 a9 03            LDA  #3
2054 85 5f            STA  Long_CT+2
2056 64 60            STZ  Long_CT+3
2058 a2 20            LDX  #$20

205a b2 59    _loop   LDA  (Long_AC),Z
205c ea 92 5d         STA  [Long_CT],Z
205f 1b               INZ
2060 d0 f8            BNE  _loop
2062 e6 5a            INC  Long_AC+1
2064 e6 5e            INC  Long_CT+1
2066 ca               DEX
2067 d0 f1            BNE  _loop

2069 a9 70            LDA  #$70
206b 8d 40 d6         STA  $D640              ; toggle write protection
206e ea               NOP

206f 60               RTS
2070          EndMod [header] Size = 113 [$71]

2070 00 00 00         .FILL $2100-* (0) ; 144 bytes

6000          * = $6000

              ********************
6000          Monitor_Call ; $6000
              ********************

6000 4c 3c 60          JMP  Mon_Call

              *********************
6003          Monitor_Break ; $6003
              *********************

6003 4c 09 60          JMP  Mon_Break

              **********************
6006          Monitor_Switch ; $6009
              **********************

6006 4c c9 60          JMP  Mon_Switch

              ****************
              Module Mon_Break
              ****************

6009 20 7d ff          JSR  PRIMM
600c 0d 42 52          .BYTE "\rBREAK\a",0
6014 20 ed 60          JSR  Print_Commands

              ; pull BP, Z, Y, X, A,SR,PCL,PCH
              ;       7  6  5  4  3  2  1  0

6017 a2 07             LDX  #7
6019 2c a4 cf          BIT  EXIT      ; version
601c 10 01             BPL  _loop
601e ca                DEX
601f 68       _loop    PLA
6020 95 03             STA  PCH,X
6022 ca                DEX
6023 10 fa             BPL  _loop

              ; decrement PC to point after BRK

6025 a5 04             LDA  PCL
6027 d0 02             BNE  _nopage
6029 c6 03             DEC  PCH
602b c6 04    _nopage  DEC  PCL

602d ad 1d 01          LDA  $011d
6030 7f 02 03          BBR7 Bank,_bank
6033 ad 1f 01          LDA  $011f
6036 29 0f    _bank    AND  #15
6038 85 02             STA  Bank
603a 80 23             BRA  Mon_Start
603c          EndMod [Mon_Break] Size = 51 [$33]

              ***************
              Module Mon_Call
              ***************

603c 20 ed 60          JSR  Print_Commands

              ;        clear register for monitor call

603f a9 00             LDA  #0
6041 a2 06             LDX  #6
6043 95 06    _loop    STA  AC,X
6045 ca                DEX
6046 10 fb             BPL  _loop

              ;        set default PC to "exit to BASIC"

6048 a9 a4             LDA  #<EXIT     ; ROM 911110
604a a2 cf             LDX  #>EXIT
604c 2c a4 cf          BIT  EXIT       ; $20 (JSR) or $ff ?
604f 10 04             BPL  _store
6051 a9 2e             LDA  #<EXIT_OLD ; ROM 910111
6053 a2 cf             LDX  #>EXIT_OLD
6055 85 04    _store   STA  PCL
6057 8d 00 04          STA  X_Vector
605a 86 03             STX  PCH
605c 8e 01 04          STX  X_Vector+1
605f          EndMod [Mon_Call] Size = 35 [$23]

              ****************
              Module Mon_Start
              ****************

605f d8                CLD
6060 0b                TSY
6061 84 0b             STY  SPH
6063 ba                TSX
6064 86 0c             STX  SPL
6066 a9 c0             LDA  #$c0
6068 20 90 ff          JSR  SETMSG
606b 58                CLI
606c ea                NOP
606d          EndMod [Mon_Start] Size = 14 [$e]

              ***************************
              Module Mon_Register ; $6042
              ***************************

606d 20 7a 71          JSR  Reg_Text

              ; print Bank,PCH

6070 a0 00             LDY  #0
6072 b9 02 00 _loopa   LDA  Bank,Y
6075 20 bf 6a          JSR  Print_Hex
6078 c8                INY
6079 c0 02             CPY  #2
607b 90 f5             BCC  _loopa

              ; print SR,PCL,A,X,Y,Z,BP

607d b9 02 00 _loopb   LDA  Bank,Y
6080 20 aa 6a          JSR  Print_Hex_Blank
6083 c8                INY
6084 c0 09             CPY  #9
6086 90 f5             BCC  _loopb

              ; print 16 bit stack pointer

6088 a5 0b             LDA  SPH
608a 20 bf 6a          JSR  Print_Hex
608d a5 0c             LDA  SPL
608f 20 aa 6a          JSR  Print_Hex_Blank

              ; print flags

6092 a0 08             LDY  #8
6094 a5 05             LDA  SR
6096 0a       _loopc   ASL  A
6097 48                PHA
6098 a9 2d             LDA  #'-'
609a 90 02             BCC  _flag
609c a9 31             LDA  #'1'
609e 20 d2 ff _flag    JSR  CHROUT
60a1 68                PLA
60a2 88                DEY
60a3 d0 f1             BNE  _loopc
60a5          EndMod [Mon_Register] Size = 56 [$38]

              ***********
              Module Main
              ***********

60a5 20 b2 6a          JSR  Print_CR
60a8 a2 00             LDX  #0

              ; read one line into buffer

              ******
60aa          Main_A
              ******

60aa 20 cf ff _loop    JSR  CHRIN
60ad 9d 00 02          STA  Buffer,X
60b0 e8                INX
60b1 e0 50             CPX  #80
60b3 b0 1e             BCS  Mon_Error         ; input too long
60b5 c9 0d             CMP  #CR
60b7 d0 f1             BNE  _loop

60b9 a9 00             LDA  #0
60bb 85 6f             STA  Buf_Index
60bd 9d ff 01          STA  Buffer-1,X        ; terminate buffer
60c0 20 ef 6a _getcomm JSR  Get_Char
60c3 f0 e0             BEQ  Main
60c5 c9 20             CMP  #' '
60c7 f0 f7             BEQ  _getcomm
60c9          EndMod [Main] Size = 36 [$24]

              *****************
              Module Mon_Switch
              *****************

60c9 a2 18             LDX  #24
60cb dd 07 61 _loop    CMP  Command_Char,X
60ce f0 10             BEQ  Mon_Select
60d0 ca                DEX
60d1 10 f8             BPL  _loop

              ;        fall through to error routine if not found

              ****************
              Module Mon_Error
              ****************

              ; put a question mark at the end of the text

60d3 20 7d ff          JSR  PRIMM
60d6 1b 4f 1d          .BYTE "\eO",CRIGHT,'?',0
60db a2 f8             LDX  #$f8              ; reset stack pointer
60dd 9a                TXS
60de 80 c5             BRA  Main

              *****************
              Module Mon_Select
              *****************

60e0 85 93             STA  VERCK
60e2 e0 16             CPX  #22
60e4 b3 22 03          LBCS  Load_Save
60e7 8a                TXA
60e8 0a                ASL  A
60e9 aa                TAX
60ea 7c 23 61          JMP  (Jump_Table,X)
60ed          EndMod [Mon_Select] Size = 13 [$d]

              **************
60ed          Print_Commands
              **************

60ed 20 7d ff          JSR  PRIMM
60f0 0d 9e 12          .BYTE CR,YELLOW,REV,"BS MONITOR COMMANDS:"

              ************
6107          Command_Char
              ************

                       ;      0123456789abcdef
6107 41 42 43          .BYTE "ABCDFGHJMRTX@.>;?"

              ***********
6118          Cons_Prefix
              ***********

6118 24 2b 26          .BYTE "$+&%'"

              ****************
611d          Load_Save_Verify
              ****************

611d 4c 53 56          .BYTE "LSV",WHITE,0
6122 60                RTS

              **********
6123          Jump_Table
              **********

6123 d6 64             .WORD Mon_Assemble     ; A
6125 29 62             .WORD Mon_Bits         ; B
6127 7e 63             .WORD Mon_Compare      ; C
6129 db 67             .WORD Mon_Disassemble  ; D
612b b5 64             .WORD Mon_Fill         ; F
612d ae 62             .WORD Mon_Go           ; G
612f a8 63             .WORD Mon_Hunt         ; H
6131 ba 62             .WORD Mon_JSR          ; J
6133 df 61             .WORD Mon_Memory       ; M
6135 6d 60             .WORD Mon_Register     ; R
6137 40 63             .WORD Mon_Transfer     ; T
6139 4d 61             .WORD Mon_Exit         ; X
613b 93 6c             .WORD Mon_DOS          ; @
613d d6 64             .WORD Mon_Assemble     ; .
613f 80 62             .WORD Mon_Set_Memory   ; >
6141 66 62             .WORD Mon_Set_Register ; ;
6143 ad 71             .WORD Mon_Help         ; ?
6145 3f 6b             .WORD Converter        ; $
6147 3f 6b             .WORD Converter        ; +
6149 3f 6b             .WORD Converter        ; &
614b 3f 6b             .WORD Converter        ; %


              ***************
              Module Mon_Exit
              ***************

614d 6c 00 04          JMP  (X_Vector)

              ****************
              Module LAC_To_PC
              ****************

              ; called from Mon_Set_Register, Mon_Go and Mon_JSR
              ; as the first instruction. The carry flag was set from
              ; the routine Got_LAC if an error occured.
              ; Notice that the Bank, PCH and PCL values are stored
              ; high to low, reverse to the standard order.

              ; Bank, PCH and PCL are part of a list, that is used by
              ; the routines FAR_JMP and FAR_JSR of the operating system

6150 b0 0c             BCS  _error
6152 a5 59             LDA  Long_AC
6154 85 04             STA  Bank+2
6156 a5 5a             LDA  Long_AC+1
6158 85 03             STA  Bank+1
615a a5 5b             LDA  Long_AC+2
615c 85 02             STA  Bank
615e 60       _error   RTS
615f          EndMod [LAC_To_PC] Size = 15 [$f]

              *****************
              Module LAC_To_LPC
              *****************

615f da                PHX
6160 a2 03             LDX  #3
6162 b5 59    _loop    LDA  Long_AC,X
6164 95 61             STA  Long_PC,X
6166 ca                DEX
6167 10 f9             BPL  _loop
6169 fa                PLX
616a 60                RTS
616b          EndMod [LAC_To_LPC] Size = 12 [$c]

              *****************
              Module LAC_To_LCT
              *****************

616b da                PHX
616c a2 03             LDX  #3
616e b5 59    _loop    LDA  Long_AC,X
6170 95 5d             STA  Long_CT,X
6172 ca                DEX
6173 10 f9             BPL  _loop
6175 fa                PLX
6176 60                RTS
6177          EndMod [LAC_To_LCT] Size = 12 [$c]

              *****************
              Module LAC_To_LDA
              *****************

6177 da                PHX
6178 a2 03             LDX  #3
617a b5 59    _loop    LDA  Long_AC,X
617c 95 65             STA  Long_DA,X
617e ca                DEX
617f 10 f9             BPL  _loop
6181 fa                PLX
6182 60                RTS
6183          EndMod [LAC_To_LDA] Size = 12 [$c]

              *******************
              Module LAC_Plus_LCT
              *******************

6183 da                PHX
6184 a2 fc             LDX  #252              ; use ZP wrap around
6186 18                CLC
6187 b5 5d    _loop    LDA  Long_AC+4,X
6189 75 61             ADC  Long_CT+4,X
618b 95 5d             STA  Long_AC+4,X
618d e8                INX
618e d0 f7             BNE  _loop
6190 fa                PLX
6191 60                RTS
6192          EndMod [LAC_Plus_LCT] Size = 15 [$f]

              ********************
              Module LAC_Minus_LPC
              ********************

6192 da                PHX
6193 a2 fc             LDX  #252              ; use ZP wrap around
6195 38                SEC
6196 b5 5d    _loop    LDA  Long_AC+4,X
6198 f5 65             SBC  Long_PC+4,X
619a 95 61             STA  Long_CT+4,X
619c e8                INX
619d d0 f7             BNE  _loop
619f fa                PLX
61a0 60                RTS
61a1          EndMod [LAC_Minus_LPC] Size = 15 [$f]

              **********************
              Module LAC_Compare_LPC
              **********************

61a1 da                PHX
61a2 a2 fc             LDX  #252              ; use ZP wrap around
61a4 38                SEC
61a5 b5 5d    _loop    LDA  Long_AC+4,X
61a7 f5 65             SBC  Long_PC+4,X
61a9 e8                INX
61aa d0 f9             BNE  _loop
61ac fa                PLX
61ad 60                RTS
61ae          EndMod [LAC_Compare_LPC] Size = 13 [$d]

              **************
              Module Inc_LAC
              **************

61ae e3 59             INW  Long_AC
61b0 d0 02             BNE  _return
61b2 e3 5b             INW  Long_AC+2
61b4 60       _return  RTS
61b5          EndMod [Inc_LAC] Size = 7 [$7]

              **************
              Module Dec_LAC
              **************

61b5 a5 59             LDA  Long_AC
61b7 05 5a             ORA  Long_AC+1
61b9 d0 02             BNE  _skip
61bb c3 5b             DEW  Long_AC+2
61bd c3 59    _skip    DEW  Long_AC
61bf 60                RTS
61c0          EndMod [Dec_LAC] Size = 11 [$b]

              **************
              Module Inc_LPC
              **************

61c0 e3 61             INW  Long_PC
61c2 d0 02             BNE  _return
61c4 e3 63             INW  Long_PC+2
61c6 60       _return  RTS
61c7          EndMod [Inc_LPC] Size = 7 [$7]

              **************
              Module Dec_LDA
              **************

61c7 a5 65             LDA  Long_DA
61c9 05 66             ORA  Long_DA+1
61cb d0 02             BNE  _skip
61cd c3 67             DEW  Long_DA+2
61cf c3 65    _skip    DEW  Long_DA
61d1 60                RTS
61d2          EndMod [Dec_LDA] Size = 11 [$b]

              ************
              Module Fetch
              ************

61d2 db                PHZ
61d3 98                TYA
61d4 4b                TAZ
61d5 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
61d8 ea                NOP                    ; use LDA  [Long_PC],Z
61d9 b2 61    _banked  LDA  (Long_PC),Z
61db fb                PLZ
61dc 29 ff             AND  #$ff
61de 60                RTS
61df          EndMod [Fetch] Size = 13 [$d]

              *****************
              Module Mon_Memory
              *****************

61df 20 cb 69          JSR  Get_LAC           ; get 1st. parameter
61e2 a3 10             LDZ  #16               ; default row count
61e4 b0 1f             BCS  _row              ; no address
61e6 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = start address
61e9 20 cb 69          JSR  Get_LAC           ; Long_AC = end address
61ec b0 17             BCS  _row              ; not given

61ee 20 92 61          JSR  LAC_Minus_LPC     ; Long_CT = range
61f1 93 e0 fe          LBCC Mon_Error         ; negative range -> error
61f4 a2 04             LDX  #4                ; 16 bytes / line
61f6 7f d7 01          BBR7 MODE_80,_shift
61f9 ca                DEX                    ;  8 bytes / line
61fa 46 5e    _shift   LSR  Long_CT+1
61fc 66 5d             ROR  Long_CT
61fe ca                DEX
61ff d0 f9             BNE  _shift
6201 ab 5d 00          LDZ  Long_CT           ; row count
6204 1b                INZ

6205 20 e1 ff _row     JSR  STOP
6208 f0 06             BEQ  _exit
620a 20 fe 62          JSR  Dump_Row
620d 3b                DEZ
620e d0 f5             BNE  _row
6210 4c a5 60 _exit    JMP  Main
6213          EndMod [Mon_Memory] Size = 52 [$34]

              *****************
              Module Print_Bits
              *****************

6213 db                PHZ
6214 85 65             STA  Long_DA
6216 a0 08             LDY  #8
6218 a9 2a    _loop    LDA  #'*'
621a ff 65 02          BBS7 Long_DA,_set
621d a9 2e             LDA  #'.'
621f 20 d2 ff _set     JSR  CHROUT
6222 06 65             ASL  Long_DA
6224 88                DEY
6225 d0 f1             BNE  _loop
6227 fb                PLZ
6228 60                RTS
6229          EndMod [Print_Bits] Size = 22 [$16]

              ***************
              Module Mon_Bits
              ***************

6229 20 cb 69          JSR  Get_LAC           ; get 1st. parameter
622c b0 03             BCS  _lab
622e 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = start address
6231 20 b2 6a _lab     JSR  Print_CR
6234 a9 05             LDA  #WHITE
6236 85 66             STA  Long_DA+1

6238 a2 08             LDX  #8
623a da       _row     PHX
623b 20 80 6a          JSR  Hex_LPC
623e a3 00             LDZ  #0
6240 38       _col     SEC
6241 a9 9b             LDA  #WHITE+LRED       ; toggle colour
6243 e5 66             SBC  Long_DA+1
6245 85 66             STA  Long_DA+1
6247 20 d2 ff          JSR  CHROUT
624a ea b2 61          LDA  [Long_PC],Z
624d 20 13 62          JSR  Print_Bits
6250 18                CLC
6251 6b                TZA
6252 69 08             ADC  #8
6254 4b                TAZ
6255 c9 40             CMP  #64
6257 90 e7             BCC  _col
6259 20 b2 6a          JSR  Print_CR
625c 20 c0 61          JSR  Inc_LPC
625f fa                PLX
6260 ca                DEX
6261 d0 d7             BNE  _row
6263 4c a5 60          JMP  Main
6266          EndMod [Mon_Bits] Size = 61 [$3d]

              ***********************
              Module Mon_Set_Register
              ***********************

6266 20 cb 69          JSR  Get_LAC           ; get 1st. parameter
6269 20 50 61          JSR  LAC_To_PC
626c a0 03             LDY  #3
626e 20 cb 69 _loop    JSR  Get_LAC
6271 b0 0a             BCS  _exit
6273 a5 59             LDA  Long_AC
6275 99 02 00          STA  Bank,Y
6278 c8                INY
6279 c0 09             CPY  #9
627b 90 f1             BCC  _loop
627d 4c a5 60 _exit    JMP  Main
6280          EndMod [Mon_Set_Register] Size = 26 [$1a]

              *********************
              Module Mon_Set_Memory
              *********************

6280 20 cb 69          JSR  Get_LAC           ; get 1st. parameter
6283 b0 1c             BCS  _exit
6285 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = row address
6288 a3 00             LDZ  #0
628a 20 cb 69 _loop    JSR  Get_LAC
628d b0 12             BCS  _exit
628f a5 59             LDA  Long_AC
6291 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
6294 ea                NOP                    ; use STA  [Long_PC],Z
6295 92 61    _banked  STA  (Long_PC),Z
6297 1b                INZ
6298 c2 10             CPZ  #16
629a 7f d7 02          BBR7 MODE_80,_next
629d c2 08             CPZ  #8
629f 90 e9    _next    BCC  _loop

62a1 20 7d ff _exit    JSR  PRIMM
62a4 1b 4f             .BYTE "\eO"
62a6 91 00             .BYTE $91,$00
62a8 20 fe 62          JSR  Dump_Row
62ab 4c a5 60          JMP  Main
62ae          EndMod [Mon_Set_Memory] Size = 46 [$2e]

              *************
              Module Mon_Go
              *************

62ae 20 cb 69          JSR  Get_LAC           ; get 1st. parameter
62b1 20 50 61          JSR  LAC_To_PC
62b4 a6 0c             LDX  SPL
62b6 9a                TXS
62b7 4c 71 ff          JMP  JMPFAR
62ba          EndMod [Mon_Go] Size = 12 [$c]

              **************
              Module Mon_JSR
              **************

62ba 20 cb 69          JSR  Get_LAC           ; get 1st. parameter
62bd 20 50 61          JSR  LAC_To_PC
62c0 a6 0c             LDX  SPL
62c2 9a                TXS
62c3 20 6e ff          JSR  JSRFAR
62c6 ba                TSX
62c7 86 0c             STX  SPL
62c9 4c a5 60          JMP  Main
62cc          EndMod [Mon_JSR] Size = 18 [$12]

              *******************
              Module Dump_4_Bytes
              *******************

62cc 20 d2 ff          JSR  CHROUT            ; colour
62cf ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62d2 ea                NOP                    ; use LDA  [Long_PC],Z
62d3 b2 61    _banked  LDA  (Long_PC),Z
62d5 20 aa 6a          JSR  Print_Hex_Blank
62d8 1b                INZ
62d9 6b                TZA
62da 29 03             AND  #3
62dc d0 f1             BNE  _loop
62de 60                RTS
62df          EndMod [Dump_4_Bytes] Size = 19 [$13]

              *******************
              Module Dump_4_Chars
              *******************

62df a0 00             LDY  #0
62e1 84 f4             STY  QTSW              ; disable quote mode
62e3 20 d2 ff          JSR  CHROUT            ; colour
62e6 ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62e9 ea                NOP                    ; use LDA  [Long_PC],Z
62ea b2 61    _banked  LDA  (Long_PC),Z
62ec a8                TAY
62ed 29 60             AND  #%0110 0000
62ef d0 02             BNE  _laba
62f1 a0 2e             LDY  #'.'
62f3 98       _laba    TYA
62f4 20 d2 ff          JSR  CHROUT
62f7 1b                INZ
62f8 6b                TZA
62f9 29 03             AND  #3
62fb d0 e9             BNE  _loop
62fd 60                RTS
62fe          EndMod [Dump_4_Chars] Size = 31 [$1f]

              ***************
              Module Dump_Row
              ***************

62fe db                PHZ
62ff 20 b2 6a          JSR  Print_CR
6302 a9 3e             LDA  #'>'
6304 20 d2 ff          JSR  CHROUT
6307 20 80 6a          JSR  Hex_LPC

630a a3 00             LDZ  #0
630c a2 02             LDX  #2                ; 2 blocks in 80 columns
630e 7f d7 01          BBR7 MODE_80,_loop
6311 ca                DEX                    ; 1 block  in 40 columns
6312 a9 96    _loop    LDA  #LRED
6314 20 cc 62          JSR  Dump_4_Bytes
6317 a9 05             LDA  #WHITE
6319 20 cc 62          JSR  Dump_4_Bytes
631c ca                DEX
631d d0 f3             BNE  _loop

631f 20 7d ff          JSR  PRIMM
6322 3a 12 00          .BYTE $3a,$12,$00      ; : reverse on

6325 a3 00             LDZ  #0
6327 a2 02             LDX  #2                ; 4 blocks in 80 columns
6329 7f d7 01          BBR7 MODE_80,_lchr
632c ca                DEX                    ; 2 blocks in 40 columns
632d a9 96    _lchr    LDA  #LRED
632f 20 df 62          JSR  Dump_4_Chars
6332 a9 05             LDA  #WHITE
6334 20 df 62          JSR  Dump_4_Chars
6337 ca                DEX
6338 d0 f3             BNE  _lchr
633a 6b                TZA
633b 20 18 6b          JSR  Add_LPC
633e fb                PLZ
633f 60                RTS
6340          EndMod [Dump_Row] Size = 66 [$42]

              *******************
              Module Mon_Transfer
              *******************

6340 20 26 6b          JSR  Param_Range       ; Long_PC = source
6343 b3 8e fd          LBCS Mon_Error         ; Long_CT = count
6346 20 cb 69          JSR  Get_LAC           ; Long_AC = target
6349 b3 88 fd          LBCS Mon_Error

634c a3 00             LDZ  #0
634e 20 a1 61          JSR  LAC_Compare_LPC   ; target - source
6351 90 17             BCC  _forward

              ;        source < target: backward transfer

6353 20 83 61          JSR  LAC_Plus_LCT      ; Long_AC = end of target

6356 ea b2 65 _lpback  LDA  [Long_DA],Z       ; backward copy
6359 ea 92 59          STA  [Long_AC],Z
635c 20 c7 61          JSR  Dec_LDA
635f 20 b5 61          JSR  Dec_LAC
6362 20 0b 6b          JSR  Dec_LCT
6365 10 ef             BPL  _lpback
6367 4c a5 60          JMP  Main

636a ea b2 61 _forward LDA  [Long_PC],Z       ; forward copy
636d ea 92 59          STA  [Long_AC],Z
6370 20 c0 61          JSR  Inc_LPC
6373 20 ae 61          JSR  Inc_LAC
6376 20 0b 6b          JSR  Dec_LCT
6379 10 ef             BPL  _forward
637b 4c a5 60          JMP  Main
637e          EndMod [Mon_Transfer] Size = 62 [$3e]

              ******************
              Module Mon_Compare
              ******************

637e 20 26 6b          JSR  Param_Range       ; Long_PC = source
6381 b3 50 fd          LBCS Mon_Error         ; Long_CT = count
6384 20 cb 69          JSR  Get_LAC           ; Long_AC = target
6387 b3 4a fd          LBCS Mon_Error
638a 20 b2 6a          JSR  Print_CR
638d a3 00             LDZ  #0
638f ea b2 61 _loop    LDA  [Long_PC],Z
6392 ea d2 59          CMP  [Long_AC],Z
6395 f0 03             BEQ  _laba
6397 20 80 6a          JSR  Hex_LPC
639a 20 ae 61 _laba    JSR  Inc_LAC
639d 20 c0 61          JSR  Inc_LPC
63a0 20 0b 6b          JSR  Dec_LCT
63a3 10 ea             BPL  _loop
63a5 4c a5 60          JMP  Main
63a8          EndMod [Mon_Compare] Size = 42 [$2a]

              ***************
              Module Mon_Hunt
              ***************

63a8 20 26 6b          JSR  Param_Range       ; Long_PC = start
63ab b3 26 fd          LBCS Mon_Error         ; Long_CT = count
63ae a0 00             LDY  #0
63b0 20 ef 6a          JSR  Get_Char
63b3 c9 27             CMP  #APOSTR
63b5 d0 17             BNE  _bin
63b7 20 ef 6a          JSR  Get_Char          ; string hunt
63ba c9 00             CMP  #0
63bc f3 15 fd          LBEQ Mon_Error         ; null string

63bf 99 0c 04 _lpstr   STA  Mon_Data,Y
63c2 c8                INY
63c3 20 ef 6a          JSR  Get_Char
63c6 f0 18             BEQ  _hunt
63c8 c0 20             CPY  #32               ;max. string length
63ca d0 f3             BNE  _lpstr
63cc 80 12             BRA  _hunt

63ce 20 c9 69 _bin     JSR  Got_LAC
63d1 a5 59    _lpbin   LDA  Long_AC
63d3 99 0c 04          STA  Mon_Data,Y
63d6 c8                INY
63d7 20 cb 69          JSR  Get_LAC
63da b0 04             BCS  _hunt
63dc c0 20             CPY  #32               ;max. data length
63de d0 f1             BNE  _lpbin

63e0 84 65    _hunt    STY  Long_DA           ; hunt length
63e2 20 b2 6a          JSR  Print_CR

63e5 a0 00    _lpstart LDY  #0
63e7 20 d2 61 _lpins   JSR  Fetch
63ea d9 0c 04          CMP  Mon_Data,Y
63ed d0 08             BNE  _next
63ef c8                INY
63f0 c4 65             CPY  Long_DA
63f2 d0 f3             BNE  _lpins
63f4 20 80 6a          JSR  Hex_LPC           ; match
63f7 20 e1 ff _next    JSR  STOP
63fa f3 a9 fc          LBEQ Main
63fd 20 c0 61          JSR  Inc_LPC
6400 20 0b 6b          JSR  Dec_LCT
6403 10 e0             BPL  _lpstart
6405 4c a5 60          JMP  Main
6408          EndMod [Mon_Hunt] Size = 96 [$60]

              ****************
              Module Load_Save
              ****************

6408 ac 08 04          LDY  Disk_Unit
640b 84 ba             STY  FA
640d a0 08             LDY  #8
640f 84 b9             STY  SA
6411 a0 00             LDY  #0
6413 84 bd             STY  BA
6415 84 b7             STY  FNLEN
6417 84 be             STY  FNBANK
6419 84 90             STY  STATUS
641b a9 04             LDA  #>Mon_Data
641d 85 bc             STA  FNADR+1
641f a9 0c             LDA  #<Mon_Data
6421 85 bb             STA  FNADR
6423 20 ef 6a _skip    JSR  Get_Char          ; skip blanks
6426 f3 ab fc          LBEQ Mon_Error
6429 c9 20             CMP  #' '
642b f0 f6             BEQ  _skip
642d c9 22             CMP  #QUOTE            ; must be quote
642f d3 a2 fc          LBNE Mon_Error

6432 a6 6f             LDX  Buf_Index
6434 bd 00 02 _copyfn  LDA  Buffer,X          ; copy filename
6437 f0 4a             BEQ  _do               ; no more input
6439 e8                INX
643a c9 22             CMP  #QUOTE
643c f0 0c             BEQ  _unit             ; end of filename
643e 91 bb             STA  (FNADR),Y         ; store to filename
6440 e6 b7             INC  FNLEN
6442 c8                INY
6443 c0 13             CPY  #19               ; max = 16 plus prefix "@0:"
6445 90 ed             BCC  _copyfn
6447 4c d3 60          JMP  Mon_Error         ; filename too long

644a 86 6f    _unit    STX  Buf_Index         ; update read position
644c 20 ef 6a          JSR  Get_Char
644f f0 32             BEQ  _do               ; no more parameter
6451 20 cb 69          JSR  Get_LAC
6454 b0 2d             BCS  _do
6456 a5 59             LDA  Long_AC           ; unit #
6458 85 ba             STA  FA
645a 20 cb 69          JSR  Get_LAC
645d b0 24             BCS  _do
645f 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = start address
6462 85 bd             STA  BA                ; Bank
6464 20 cb 69          JSR  Get_LAC           ; Long_AC = end address + 1
6467 b0 42             BCS  _load             ; no end address -> load/verify
6469 20 b2 6a          JSR  Print_CR
646c a6 59             LDX  Long_AC           ; X/Y = end address
646e a4 5a             LDY  Long_AC+1
6470 a5 93             LDA  VERCK             ; A = load/verify/save
6472 c9 53             CMP  #'S'
6474 d3 5d fc          LBNE Mon_Error         ; must be Save
6477 a9 00             LDA  #0
6479 85 b9             STA  SA                ; set SA for PRG
647b a9 61             LDA  #Long_PC          ; Long_PC = start address
647d 20 d8 ff          JSR  SAVE
6480 4c a5 60 _exit    JMP  Main

6483 a5 93    _do      LDA  VERCK
6485 c9 56             CMP  #'V'              ; Verify
6487 f0 07             BEQ  _exec
6489 c9 4c             CMP  #'L'              ; Load
648b d3 46 fc          LBNE Mon_Error
648e a9 00             LDA  #0                ; 0 = LOAD
6490 20 d5 ff _exec    JSR  LOAD              ; A == 0 : LOAD else VERIFY
6493 4f 90 ea          BBR4 STATUS,_exit
6496 a5 93             LDA  VERCK
6498 f3 39 fc          LBEQ Mon_Error
649b b3 08 fc          LBCS Main
649e 20 7d ff          JSR  PRIMM
64a1 20 45 52          .BYTE " ERROR",0
64a8 4c a5 60          JMP  Main

64ab a6 61    _load    LDX  Long_PC
64ad a4 62             LDY  Long_PC+1
64af a9 00             LDA  #0                ; 0 = use X/Y as load address
64b1 85 b9             STA  SA                ; and ignore load address from file
64b3 80 ce             BRA  _do
64b5          EndMod [Load_Save] Size = 173 [$ad]

              ***************
              Module Mon_Fill
              ***************

64b5 20 26 6b          JSR  Param_Range       ; Long_PC = target
64b8 b3 19 fc          LBCS Mon_Error         ; Long_CT = count
64bb 20 cb 69          JSR  Get_LAC           ; Long_AC = fill byte
64be b3 13 fc          LBCS Mon_Error
64c1 20 b2 6a          JSR  Print_CR
64c4 a3 00             LDZ  #0
64c6 a5 59    _loop    LDA  Long_AC
64c8 ea 92 61          STA  [Long_PC],Z
64cb 20 c0 61          JSR  Inc_LPC
64ce 20 0b 6b          JSR  Dec_LCT
64d1 10 f3             BPL  _loop
64d3 4c a5 60          JMP  Main
64d6          EndMod [Mon_Fill] Size = 33 [$21]

              *******************
              Module Mon_Assemble
              *******************

64d6 20 cb 69          JSR  Get_LAC           ; get 1st. parameter
64d9 b3 f8 fb          LBCS Mon_Error
64dc 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = PC

64df a2 00    _start   LDX  #0                ; mne letter counter
64e1 86 66             STX  Long_DA+1         ; clear encoded MNE
64e3 86 6c             STX  Op_Flag           ; 6:long branch 5:32 bit
64e5 8e 06 04          STX  Op_Ix             ; operand byte index
64e8 8e 07 04          STX  Op_Len            ; operand length
64eb 20 ef 6a _getin   JSR  Get_Char
64ee d0 05             BNE  _laba
64f0 e0 00             CPX  #0
64f2 f3 b1 fb          LBEQ Main

64f5 c9 20    _laba    CMP  #' '
64f7 f0 e6             BEQ  _start            ; restart after blank

              ;        check for long branches

64f9 e0 01             CPX  #1
64fb d0 0e             BNE  _labb             ; -> not 2nd. char
64fd c9 42             CMP  #'B'
64ff d0 0a             BNE  _labb             ; 2nd. char != 'B'
6501 ab 03 04          LDZ  Op_Mne
6504 c2 4c             CPZ  #'L'
6506 d0 03             BNE  _labb             ; 1st. Char != 'L'
6508 e7 6c             SMB6 Op_Flag           ; flag long branch
650a ca                DEX                    ; skip 'L'

650b 9d 03 04 _labb    STA  Op_Mne,X          ; next mne character
650e e8                INX
650f e0 03             CPX  #3
6511 d0 d8             BNE  _getin

              ;        encode 3 letter mnemonic

6513 bd 02 04 _lpenc   LDA  Op_Mne-1,X
6516 38                SEC
6517 e9 3f             SBC  #$3f              ; offset
6519 a0 05             LDY  #5                ; 5 bit code
651b 4a       _lpbit   LSR  A
651c 66 65             ROR  Long_DA
651e 66 66             ROR  Long_DA+1
6520 88                DEY
6521 d0 f8             BNE  _lpbit
6523 ca                DEX
6524 d0 ed             BNE  _lpenc

              ;        find packed MNE code in table

6526 a2 5a             LDX  #90               ; # of mnemonics
6528 a5 65             LDA  Long_DA
652a dd 80 6e _lpfind  CMP  MNE_L,X           ; compare left MNE
652d d0 07             BNE  _nxfind
652f bc db 6e          LDY  MNE_R,X
6532 c4 66             CPY  Long_DA+1         ; compare right MNE
6534 f0 06             BEQ  _found
6536 ca       _nxfind  DEX
6537 10 f1             BPL  _lpfind
6539 4c d3 60          JMP  Mon_Error

653c 8e 02 04 _found   STX  Ix_Mne

              ;        find 1st. opcode for this mnemonic

653f 8a                TXA
6540 a2 00             LDX  #0
6542 dd 36 6f _lpopc   CMP  MNE_Index,X
6545 f0 03             BEQ  _exopc
6547 e8                INX
6548 d0 f8             BNE  _lpopc
654a 86 6b    _exopc   STX  Op_Code

              ;        check for BBR BBS RMB SMB

654c 8a                TXA
654d 29 07             AND  #7
654f c9 07             CMP  #7
6551 d0 1d             BNE  _labc

6553 20 ef 6a          JSR  Get_Char
6556 c9 30             CMP  #'0'
6558 93 79 fb          LBCC Mon_Error
655b c9 38             CMP  #'8'
655d b3 74 fb          LBCS Mon_Error
6560 0a                ASL  A
6561 0a                ASL  A
6562 0a                ASL  A
6563 0a                ASL  A
6564 05 6b             ORA  Op_Code
6566 85 6b             STA  Op_Code

6568 20 ef 6a          JSR  Get_Char
656b c9 20             CMP  #' '
656d d3 64 fb          LBNE Mon_Error

              ;        read operand

6570 a9 00    _labc    LDA  #0
6572 85 6a    _labd    STA  Mode_Flags
6574 20 e8 69          JSR  Read_Number
6577 b3 5a fb          LBCS Mon_Error
657a f0 1c             BEQ  _labg             ; no operand
657c a5 5b             LDA  Long_AC+2
657e d3 53 fb          LBNE Mon_Error         ; -> overflow
6581 a0 02             LDY  #2                ; Y=2 word operand
6583 a5 5a             LDA  Long_AC+1
6585 d0 01             BNE  _labf             ; high byte not zero
6587 88                DEY                    ; Y=1 byte operand
6588 ae 06 04 _labf    LDX  Op_Ix             ; X = operand value #
658b 98                TYA                    ; A = 1:byte or 2:word
658c 9d 07 04          STA  Op_Len,X          ; store operand length
658f ee 06 04          INC  Op_Ix             ; ++index to operand value
6592 8a                TXA                    ; A = current index
6593 d0 03             BNE  _labg             ; -> at 2nd. byte
6595 20 6b 61          JSR  LAC_To_LCT        ; Long_CT = 1st. operand
6598 c6 6f    _labg    DEC  Buf_Index         ; back to delimiter

659a 20 ef 6a _lpnop   JSR  Get_Char          ; get delimiter
659d f3 ed 00          LBEQ _adjust           ; end of operand
65a0 c9 20             CMP  #' '
65a2 f0 f6             BEQ  _lpnop

              ;        immediate

65a4 c9 23             CMP  #'#'
65a6 d0 08             BNE  _lbra
65a8 a5 6a             LDA  Mode_Flags
65aa d0 70             BNE  _error
65ac a9 80             LDA  #$80              ; immediate mode
65ae 80 c2             BRA  _labd

              ;        left bracket

65b0 c9 5b    _lbra    CMP  #'['
65b2 d0 0a             BNE  _indir
65b4 a5 6a             LDA  Mode_Flags
65b6 d0 64             BNE  _error
65b8 d7 6c             SMB5 Op_Flag           ; 32 bit mode
65ba a9 40             LDA  #$40              ; ( flag
65bc 80 b4             BRA  _labd

              ;        left parenthesis

65be c9 28    _indir   CMP  #'('
65c0 d0 08             BNE  _comma
65c2 a5 6a             LDA  Mode_Flags
65c4 d0 56             BNE  _error
65c6 a9 40             LDA  #$40              ; ( flag
65c8 80 a8             BRA  _labd

              ;        comma

65ca c9 2c    _comma   CMP  #','
65cc d0 1f             BNE  _stack
65ce ad 06 04          LDA  Op_Ix             ; operand value #
65d1 f0 49             BEQ  _error
65d3 a2 04             LDX  #4                ; outside comma
65d5 a5 6a             LDA  Mode_Flags
65d7 f0 0e             BEQ  _comma1           ; no flags yet
65d9 c9 78             CMP  #$78              ; ($nn,SP)
65db f0 0a             BEQ  _comma1
65dd c9 48             CMP  #$48              ; ($nn)
65df f0 06             BEQ  _comma1
65e1 a2 20             LDX  #$20              ; , inside comma
65e3 c9 40             CMP  #$40              ; (
65e5 d0 35             BNE  _error
65e7 8a       _comma1  TXA
65e8 05 6a             ORA  Mode_Flags
65ea 4c 72 65          JMP  _labd

              ;        stack relative

65ed c9 53    _stack   CMP  #'S'
65ef d0 12             BNE  _rbra
65f1 20 ef 6a          JSR  Get_Char
65f4 c9 50             CMP  #'P'
65f6 d0 24             BNE  _error
65f8 a5 6a             LDA  Mode_Flags
65fa c9 60             CMP  #$60              ; ($nn,
65fc d0 1e             BNE  _error
65fe 09 10             ORA  #%0001 0000       ; SP flag
6600 4c 72 65          JMP  _labd

              ;        right bracket

6603 c9 5d    _rbra    CMP  #']'
6605 d0 18             BNE  _right
6607 5f 6c 12          BBR5 Op_Flag,_error
660a ad 06 04          LDA  Op_Ix
660d f3 c4 fa          LBEQ Mon_Error         ; no value
6610 a5 6a             LDA  Mode_Flags
6612 c9 40             CMP  #$40              ; (
6614 d3 bd fa          LBNE Mon_Error
6617 09 08             ORA  #%0000 1000       ; )
6619 4c 72 65          JMP  _labd

661c 4c d3 60 _error   JMP  Mon_Error

              ;        right parenthesis

661f c9 29    _right   CMP  #')'
6621 d0 1a             BNE  _X
6623 ad 06 04          LDA  Op_Ix
6626 f3 ab fa          LBEQ Mon_Error         ; no value
6629 a5 6a             LDA  Mode_Flags
662b c9 40             CMP  #$40              ; (
662d f0 09             BEQ  _right1
662f c9 61             CMP  #$61              ; ($nn,X
6631 f0 05             BEQ  _right1
6633 c9 70             CMP  #$70              ; ($nn,SP
6635 d3 9c fa          LBNE Mon_Error
6638 09 08    _right1  ORA  #%0000 1000       ; )
663a 4c 72 65          JMP  _labd

663d c9 58    _X       CMP  #'X'
663f d0 16             BNE  _Y
6641 ad 06 04          LDA  Op_Ix
6644 f3 8d fa          LBEQ Mon_Error
6647 a5 6a             LDA  Mode_Flags
6649 c9 60             CMP  #$60
664b f0 05             BEQ  _X1
664d c9 04             CMP  #4
664f d3 82 fa          LBNE Mon_Error
6652 09 01    _X1      ORA  #%0000 0001
6654 4c 72 65          JMP  _labd

              ;        Y

6657 c9 59    _Y       CMP  #'Y'
6659 d0 1a             BNE  _Z
665b ad 06 04          LDA  Op_Ix
665e f3 73 fa          LBEQ Mon_Error
6661 a5 6a             LDA  Mode_Flags
6663 c9 4c             CMP  #$4c             ; ($nn),
6665 f0 09             BEQ  _Y1
6667 c9 04             CMP  #4               ; $nn,
6669 f0 05             BEQ  _Y1
666b c9 7c             CMP  #$7c             ; ($nn,SP),
666d d3 64 fa          LBNE Mon_Error
6670 09 02    _Y1      ORA  #%0000 0010      ; Y
6672 4c 72 65          JMP  _labd

              ;        Z

6675 c9 5a    _Z       CMP  #'Z'
6677 d3 5a fa          LBNE Mon_Error
667a ad 06 04          LDA  Op_Ix
667d f3 54 fa          LBEQ Mon_Error
6680 a5 6a             LDA  Mode_Flags
6682 c9 4c             CMP  #$4c              ; $nn,
6684 d3 4d fa          LBNE Mon_Error
6687 09 03             ORA  #%0000 0011       ; Z
6689 4c 72 65          JMP  _labd

              ;        BBR BBS RMB SMB  two operands

668c ad 02 04 _adjust  LDA  Ix_Mne
668f ae 06 04          LDX  Op_Ix             ; # if values
6692 f0 52             BEQ  _match            ; -> no operand
6694 ca                DEX
6695 f0 25             BEQ  _one             ; ->  one operand
6697 ca                DEX
6698 d3 39 fa          LBNE Mon_Error         ; -> error if more than 2
669b c9 05             CMP  #5                ; BBR
669d f0 05             BEQ  _BB
669f c9 06             CMP  #6                ; BBS
66a1 d3 30 fa          LBNE Mon_Error
66a4 a5 5e    _BB      LDA  Long_CT+1
66a6 d3 2b fa          LBNE Mon_Error
66a9 a9 03             LDA  #3                ; offset
66ab 20 91 67          JSR  Branch_Target
66ae a5 6b             LDA  Op_Code
66b0 a4 59             LDY  Long_AC
66b2 a6 5d             LDX  Long_CT
66b4 86 59             STX  Long_AC
66b6 84 5a             STY  Long_AC+1
66b8 a0 02             LDY  #2
66ba 80 4d             BRA  _store

              ;        one operand in Long_CT

66bc a6 5d    _one     LDX  Long_CT
66be a4 5e             LDY  Long_CT+1
66c0 86 59             STX  Long_AC
66c2 84 5a             STY  Long_AC+1            ; Aval = operand
66c4 a2 0a             LDX  #10
66c6 dd 35 70 _lpbrain CMP  BRAIN-1,X
66c9 f0 05             BEQ  _branch
66cb ca                DEX
66cc d0 f8             BNE  _lpbrain
66ce 80 16             BRA  _match

              ;        branch instruction

66d0 a5 6a    _branch  LDA  Mode_Flags
66d2 d3 ff f9          LBNE Mon_Error         ; only value
66d5 a9 02             LDA  #2                ; branch offset
66d7 20 91 67          JSR  Branch_Target
66da a5 6b             LDA  Op_Code
66dc a0 01             LDY  #1                ; short branch
66de 6f 6c 03          BBR6 Op_Flag,_bran1
66e1 c8                INY                    ; long branch
66e2 09 03             ORA  #3
66e4 80 23    _bran1   BRA  _store

              ;        find opcode matching mnemonic and address mode

66e6 20 bc 67 _match   JSR  Mode_Index
66e9 20 a4 67 _lpmatch JSR  Match_Mode
66ec f0 17             BEQ  _okmat
66ee ad 07 04          LDA  Op_Len
66f1 f3 e0 f9          LBEQ Mon_Error
66f4 a5 6a             LDA  Mode_Flags
66f6 33 db f9          LBMI Mon_Error
66f9 29 3f             AND  #%0011 1111
66fb 85 6a             STA  Mode_Flags
66fd ee 07 04          INC  Op_Len
6700 20 ce 67          JSR  Size_To_Mode
6703 80 e4             BRA  _lpmatch
6705 ac 07 04 _okmat   LDY  Op_Len
6708 8a                TXA

              ;        store instruction bytes
              ;        -----------------------
              ;        A    = opcode
              ;        Y    = operand length
              ;        Long_AC = operand value

6709 85 6b    _store   STA  Op_Code
670b 84 6d             STY  Op_Size
670d e6 6d             INC  Op_Size
670f 5f 6c 17          BBR5 Op_Flag,_storen
6712 a9 ea             LDA  #$ea              ; 32 bit prefix
6714 a3 00             LDZ  #0
6716 ea 92 61          STA  [Long_PC],Z       ; store prefix
6719 1b                INZ
671a a5 6b             LDA  Op_Code
671c ea 92 61          STA  [Long_PC],Z       ; store opcode
671f 1b                INZ
6720 a5 59             LDA  Long_AC
6722 ea 92 61          STA  [Long_PC],Z       ; store address
6725 e6 6d             INC  Op_Size
6727 80 13             BRA  _print

6729 5a       _storen  PHY
672a fb                PLZ                    ; Z = Y
672b f0 0a             BEQ  _store1

672d b9 58 00 _lpsto   LDA  Long_AC-1,Y
6730 ea 92 61          STA  [Long_PC],Z
6733 3b                DEZ
6734 88                DEY
6735 d0 f6             BNE  _lpsto

6737 a5 6b    _store1  LDA  Op_Code
6739 ea 92 61          STA  [Long_PC],Z

673c 20 7d ff _print   JSR  PRIMM
673f 0d 91 41          .BYTE 13,$91,"A \eQ",0
6746 20 19 68          JSR  Print_Code
6749 e6 6d             INC  Op_Size
674b a5 6d             LDA  Op_Size
674d 20 18 6b          JSR  Add_LPC

              ; print out command 'A' together with next address
              ; and put it into buffer too,
              ; for easy entry of next assembler instruction

6750 20 7d ff          JSR  PRIMM
6753 0d 41 20          .BYTE CR,"A ",0

6757 a9 41             LDA  #'A'
6759 8d 00 02          STA  Buffer
675c a9 20             LDA  #' '
675e 8d 01 02          STA  Buffer+1
6761 a0 02             LDY  #2
6763 a2 02             LDX  #2                ; 6 digits
6765 b5 61             LDA  Long_PC,X
6767 d0 01             BNE  _auto
6769 ca                DEX                    ; 4 digits
676a da       _auto    PHX
676b b5 61             LDA  Long_PC,X
676d 20 cb 6a          JSR  A_To_Hex
6770 99 00 02          STA  Buffer,Y
6773 20 d2 ff          JSR  CHROUT
6776 c8                INY
6777 8a                TXA
6778 99 00 02          STA  Buffer,Y
677b 20 d2 ff          JSR  CHROUT
677e c8                INY
677f fa                PLX
6780 ca                DEX
6781 10 e7             BPL  _auto

6783 a9 20             LDA  #' '
6785 99 00 02          STA  Buffer,Y
6788 20 d2 ff          JSR  CHROUT
678b c8                INY
678c 98                TYA
678d aa                TAX
678e 4c aa 60          JMP  Main_A
6791          EndMod [Mon_Assemble] Size = 699 [$2bb]

              ********************
              Module Branch_Target
              ********************

6791 c3 59             DEW  Long_AC
6793 3a                DEC  A
6794 d0 fb             BNE  Branch_Target

              ;        Target - PC

6796 38                SEC
6797 a5 59             LDA  Long_AC
6799 e5 61             SBC  Long_PC
679b 85 59             STA  Long_AC
679d a5 5a             LDA  Long_AC+1
679f e5 62             SBC  Long_PC+1
67a1 85 5a             STA  Long_AC+1
67a3 60                RTS
67a4          EndMod [Branch_Target] Size = 19 [$13]

              *****************
              Module Match_Mode
              *****************

              ;        find matching mnemonic and address mode

67a4 a6 6b             LDX  Op_Code           ; try this opcode
67a6 a5 6a             LDA  Mode_Flags         ; size and address mode
67a8 dd 40 70 _loop    CMP  LEN_ADM,X
67ab f0 0e             BEQ  _return           ; success  ZF=1

              ;        search for next opcode with same mnemonic

67ad e8       _next    INX                    ; next opcode
67ae f0 0a             BEQ _error
67b0 bc 36 6f          LDY  MNE_Index,X
67b3 cc 02 04          CPY  Ix_Mne            ; same mnemonic ?
67b6 f0 f0             BEQ  _loop             ; -> compare again
67b8 80 f3             BRA  _next

67ba ca       _error   DEX                    ; X = $ff ZF=0
67bb 60       _return  RTS
67bc          EndMod [Match_Mode] Size = 24 [$18]

              *****************
              Module Mode_Index
              *****************

67bc a5 6a             LDA  Mode_Flags
67be a2 00             LDX  #0
67c0 dd 40 71 _loop    CMP  ADMODE,X
67c3 f0 07             BEQ  _found
67c5 e8                INX
67c6 e0 10             CPX  #16
67c8 90 f6             BCC  _loop
67ca 8a                TXA
67cb 60                RTS
67cc 86 6a    _found   STX  Mode_Flags
67ce          EndMod [Mode_Index] Size = 18 [$12]

              *******************
              Module Size_To_Mode
              *******************

67ce ad 07 04          LDA  Op_Len
67d1 4a                LSR  A
67d2 6a                ROR  A
67d3 6a                ROR  A
67d4 05 6a             ORA  Mode_Flags
67d6 85 6a             STA  Mode_Flags
67d8 a2 00             LDX  #0
67da 60                RTS
67db          EndMod [Size_To_Mode] Size = 13 [$d]

              **********************
              Module Mon_Disassemble
              **********************

67db 20 cb 69          JSR  Get_LAC           ; get 1st. parameter
67de b0 08             BCS  _nopar
67e0 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = start address
67e3 20 cb 69          JSR  Get_LAC           ; Long_AC = end address
67e6 90 06             BCC  range
67e8 a9 20    _nopar   LDA  #32               ; disassemble 32 bytes
67ea 85 5d             STA  Long_CT
67ec 80 06             BRA  _loop
67ee 20 92 61 range    JSR  LAC_Minus_LPC     ; Long_CT = range
67f1 93 e0 f8          LBCC Mon_Error         ; -> negative

67f4 20 b7 6a _loop    JSR  CR_Erase          ; prepare empty line
67f7 20 e1 ff          JSR  STOP
67fa f3 a9 f8          LBEQ Main
67fd 20 13 68          JSR  Dis_Code          ; disassemble one line
6800 e6 6d             INC  Op_Size
6802 a5 6d             LDA  Op_Size
6804 20 18 6b          JSR  Add_LPC           ; advance address
6807 a5 5d             LDA  Long_CT
6809 38                SEC
680a e5 6d             SBC  Op_Size
680c 85 5d             STA  Long_CT
680e b0 e4             BCS  _loop
6810 4c a5 60          JMP  Main
6813          EndMod [Mon_Disassemble] Size = 56 [$38]

              ***************
              Module Dis_Code
              ***************

6813 20 7d ff          JSR  PRIMM
6816 2e 20 00          .BYTE ". ",0
6819          EndMod [Dis_Code] Size = 6 [$6]

              *****************
              Module Print_Code
              *****************

              ;        print 24 bit address of instruction

6819 20 80 6a          JSR  Hex_LPC          ; 24 bit address
681c 20 ad 6a          JSR  Print_Blank

              ;        read opcode and calculate length and address mode

681f a0 00             LDY  #0
6821 84 6c             STY  Op_Flag           ; clear flags
6823 20 d2 61          JSR  Fetch             ; fetch from (banked) address
6826 85 6b             STA  Op_Code           ; store it
6828 aa                TAX                    ; save in X

              ;        check for 32 bit address mode

6829 c9 ea             CMP  #$ea              ; prefix ?
682b d0 12             BNE  _normal
682d c8                INY
682e 20 d2 61          JSR  Fetch             ; opcode after prefix
6831 29 1f             AND  #%0001 1111       ; identify ($nn),Z codes
6833 c9 12             CMP  #%0001 0010
6835 d0 08             BNE  _normal
6837 d7 6c             SMB5 Op_Flag           ; set extended flag
6839 20 d2 61          JSR  Fetch
683c 85 6b             STA  Op_Code           ; code after prefix
683e aa                TAX

683f bc 40 70 _normal  LDY  LEN_ADM,X         ; Y = length and address mode
6842 98                TYA                    ; A = length and address mode
6843 29 0f             AND  #15               ; A = address mode
6845 aa                TAX                    ; X = address mode
6846 bd 40 71          LDA  ADMODE,X          ; A = mode flags
6849 85 69             STA  Adr_Flags         ; store
684b 98                TYA                    ; A = length and address mode
684c 29 c0             AND  #%1100 0000       ; mask instruction length
684e 0a                ASL  A                 ; rotate into lower two bits
684f 2a                ROL  A
6850 2a                ROL  A
6851 85 6d             STA  Op_Size           ; store
6853 5f 6c 02          BBR5 Op_Flag,_norm1
6856 e6 6d             INC  Op_Size
6858          _norm1

              ;        print instruction and operand bytes

6858 a0 00             LDY  #0
685a 20 d2 61 _lphex   JSR  Fetch
685d 20 aa 6a          JSR  Print_Hex_Blank
6860 c0 02             CPY  #2
6862 f0 13             BEQ  _long             ; stop after 3 bytes
6864 c4 6d             CPY  Op_Size
6866 c8                INY
6867 90 f1             BCC  _lphex

              ;        fill up with blanks

6869 c0 03    _lpfill  CPY  #3
686b b0 0a             BCS  _long
686d 20 7d ff          JSR  PRIMM
6870 20 20 20          .BYTE "   ",0
6874 c8                INY
6875 80 f2             BRA  _lpfill

              ;        detect long branches

6877 a9 9e    _long    LDA  #YELLOW
6879 20 d2 ff          JSR  CHROUT
687c a6 6b             LDX  Op_Code
687e bd 40 70          LDA  LEN_ADM,X
6881 c9 a0             CMP  #%1010 0000        ; long branch mode
6883 d0 07             BNE  _locate
6885 e7 6c             SMB6 Op_Flag            ; set long branch flag
6887 a9 4c             LDA  #'L'
6889 20 d2 ff          JSR  CHROUT

              ;        locate mnemonic text

688c a6 6b    _locate  LDX  Op_Code           ; X = opcode
688e bc 36 6f          LDY  MNE_Index,X       ; Y = index to mnemonic text
6891 b9 80 6e          LDA  MNE_L,Y           ; A = packed left part
6894 85 5a             STA  Long_AC+1
6896 b9 db 6e          LDA  MNE_R,Y           ; A = packed right part
6899 85 59             STA  Long_AC

              ;        unpack and print mnemonic text

689b a2 03             LDX  #3                ; 3 letters
689d a9 00    _lpmne   LDA  #0
689f a0 05             LDY  #5                ; 5 bits per letter
68a1 06 59    _lplet   ASL  Long_AC
68a3 26 5a             ROL  Long_AC+1
68a5 2a                ROL  A                 ; rotate letter into A
68a6 88                DEY
68a7 d0 f8             BNE  _lplet            ; next bit

68a9 69 3f             ADC  #$3f              ; add offset (C = 0)
68ab 20 d2 ff          JSR  CHROUT            ; and print it
68ae ca                DEX
68af d0 ec             BNE  _lpmne            ; next letter

68b1 ef 6c 21          BBS6 Op_Flag,_mne5     ; long branch

              ;        check for 4-letter bit instructions

68b4 a5 6b             LDA  Op_Code
68b6 29 0f             AND  #15
68b8 c9 07             CMP  #7                ; RMB & SMB
68ba f0 06             BEQ  _biti
68bc c9 0f             CMP  #15               ; BBR & BBS
68be d0 12             BNE  _mne4
68c0 f7 6c             SMB7 Op_Flag           ; flag two operands
68c2 a5 6b    _biti    LDA  Op_Code
68c4 29 70             AND  #%0111 0000
68c6 0a                ASL  A
68c7 2a                ROL  A
68c8 2a                ROL  A
68c9 2a                ROL  A
68ca 2a                ROL  A
68cb 09 30             ORA  #'0'
68cd 20 d2 ff          JSR  CHROUT
68d0 80 03             BRA  _mne5

68d2 20 ad 6a _mne4    JSR  Print_Blank
68d5 20 ad 6a _mne5    JSR  Print_Blank
68d8 a9 05             LDA  #WHITE
68da 20 d2 ff          JSR  CHROUT

              ;        check for accumulator operand

68dd a5 6b             LDA  Op_Code
68df a2 08             LDX  #8
68e1 ca       _lpaccu  DEX
68e2 30 0d             BMI  _oper
68e4 dd 50 71          CMP  ACCUMODE,X
68e7 d0 f8             BNE  _lpaccu

68e9 a9 41             LDA  #'A'
68eb 20 d2 ff          JSR  CHROUT
68ee 4c c8 69          JMP  _return

              ;        fetch and decode operand

68f1 a6 6d    _oper    LDX  Op_Size
68f3 f3 d3 00          LBEQ _return           ; -> no operand

68f6 7f 69 04          BBR7 Adr_Flags,_laba   ; bit 7: immediate
68f9 a9 23             LDA  #'#'
68fb 80 0a             BRA  _labb
68fd 6f 69 0a _laba    BBR6 Adr_Flags,_labc   ; bit 6: left (
6900 a9 28             LDA  #'('
6902 5f 6c 02          BBR5 Op_Flag,_labb
6905 a9 5b             LDA  #'['
6907 20 d2 ff _labb    JSR  CHROUT
690a a9 24    _labc    LDA  #'$'
690c 20 d2 ff          JSR  CHROUT

              ;        fetch operand to Long_AC

690f a0 00             LDY  #0
6911 84 5a             STY  Long_AC+1
6913 c8       _lpfop   INY
6914 20 d2 61          JSR  Fetch
6917 99 58 00          STA  Long_AC-1,Y
691a c4 6d             CPY  Op_Size
691c 90 f5             BCC  _lpfop

              ;        interpret address modes

691e a6 6b             LDX  Op_Code
6920 bd 40 70          LDA  LEN_ADM,X
6923 29 20             AND  #%0010 0000       ; branches
6925 d0 78             BNE  _rel

              ;        print 16 bit operand hi/lo or 8 bit operand

6927 5f 6c 0c          BBR5 Op_Flag,_proper
692a a5 5a             LDA  Long_AC+1
692c 20 bf 6a          JSR  Print_Hex         ; [$nn],Z
692f a9 5d             LDA  #']'
6931 20 d2 ff          JSR  CHROUT
6934 80 35             BRA  _labf

6936 a4 6d    _proper  LDY  Op_Size
6938 7f 6c 02          BBR7 Op_Flag,_lpoper
693b a0 01             LDY  #1
693d b9 58 00 _lpoper  LDA  Long_AC-1,Y
6940 20 bf 6a          JSR  Print_Hex
6943 88                DEY
6944 d0 f7             BNE  _lpoper

6946 5f 69 1a          BBR5 Adr_Flags,_labe   ; comma flag
6949 a9 2c             LDA  #','
694b 20 d2 ff          JSR  CHROUT

694e 4f 69 0a          BBR4 Adr_Flags,_labd   ; SP flag
6951 a9 53             LDA  #'S'
6953 20 d2 ff          JSR  CHROUT
6956 a9 50             LDA  #'P'
6958 20 d2 ff          JSR  CHROUT

695b 0f 69 05 _labd    BBR0 Adr_Flags,_labe   ; X flag
695e a9 58             LDA  #'X'
6960 20 d2 ff          JSR  CHROUT

6963 3f 69 05 _labe    BBR3 Adr_Flags,_labf   ; ) flag
6966 a9 29             LDA  #')'
6968 20 d2 ff          JSR  CHROUT

696b 2f 69 12 _labf    BBR2 Adr_Flags,_labg   ; , flag
696e a9 2c             LDA  #','
6970 20 d2 ff          JSR  CHROUT

6973 a5 69             LDA  Adr_Flags
6975 29 03             AND  #%0000 0011 ; $03
6977 f0 07             BEQ  _labg
6979 a8                TAY
697a b9 5f 71          LDA  Index_Char-1,Y
697d 20 d2 ff          JSR  CHROUT

              ;        fetch 2nd. operand for BBR and BBS

6980 7f 6c 45 _labg    BBR7 Op_Flag,_return
6983 a9 2c             LDA  #','
6985 20 d2 ff          JSR  CHROUT
6988 a9 24             LDA  #'$'
698a 20 d2 ff          JSR  CHROUT
698d a0 02             LDY  #2
698f 20 d2 61          JSR  Fetch
6992 85 59             STA  Long_AC
6994 a9 00             LDA  #0
6996 85 5a             STA  Long_AC+1
6998 88                DEY
6999 84 6d             STY  Op_Size           ; Op_Size = 1
699b a9 03             LDA  #3                ; offset for relative address
699d 80 02             BRA  _rela

699f a9 02    _rel     LDA  #2                ; offset for relative address
69a1 48       _rela    PHA
69a2 a5 6d             LDA  Op_Size           ; 1:short   2:long
69a4 4a                LSR  A
69a5 6a                ROR  A
69a6 25 59             AND  Long_AC
69a8 10 04             BPL  _labh
69aa a9 ff             LDA  #$ff              ; backward branch
69ac 85 5a             STA  Long_AC+1

69ae fa       _labh    PLX                    ; offset 2 or 3
69af e3 59    _lpinw   INW  Long_AC
69b1 ca                DEX
69b2 d0 fb             BNE  _lpinw

69b4 18                CLC
69b5 a5 59             LDA  Long_AC
69b7 65 61             ADC  Long_PC
69b9 48                PHA
69ba a5 5a             LDA  Long_AC+1
69bc 65 62             ADC  Long_PC+1
69be aa                TAX
69bf 68                PLA
69c0 20 a4 6a          JSR  Print_XA_Hex
69c3 7f 6c 02          BBR7 Op_Flag,_return
69c6 e6 6d             INC  Op_Size
69c8 60       _return  RTS
69c9          EndMod [Print_Code] Size = 432 [$1b0]

              **************
              Module Got_LAC
              **************

69c9 c6 6f             DEC  Buf_Index
69cb          EndMod [Got_LAC] Size = 2 [$2]

              **************
              Module Get_LAC
              **************

69cb 20 e8 69          JSR  Read_Number
69ce b0 0f             BCS  _error            ; illegal character
69d0 f0 10             BEQ  _noval            ; no value
69d2 20 ed 6a          JSR  Got_Char          ; delimiter ?
69d5 f0 0d             BEQ  _end              ; end of input
69d7 c9 20             CMP  #' '
69d9 f0 0b             BEQ  _ok
69db c9 2c             CMP  #','
69dd f0 07             BEQ  _ok
69df 4c d3 60 _error   JMP  Mon_Error         ; stack is reset in Mon_Error

69e2 38       _noval   SEC
69e3 60                RTS

69e4 c6 6f    _end     DEC  Buf_Index
69e6 18       _ok      CLC
69e7 60                RTS
69e8          EndMod [Get_LAC] Size = 29 [$1d]

              ******************
              Module Read_Number
              ******************

69e8 da                PHX
69e9 5a                PHY
69ea db                PHZ
69eb a9 00             LDA  #0
69ed 85 6e             STA  Dig_Cnt               ; count columns read
69ef 85 59             STA  Long_AC           ; clear result Long_AC
69f1 85 5a             STA  Long_AC+1
69f3 85 5b             STA  Long_AC+2
69f5 85 5c             STA  Long_AC+3

69f7 20 e0 6a          JSR  Get_Glyph         ; get 1st. character
69fa f0 7d             BEQ  _exit
69fc c9 27             CMP  #APOSTR           ; character entry 'C
69fe d0 09             BNE  _numeric
6a00 20 ef 6a          JSR  Get_Char          ; character after '
6a03 85 59             STA  Long_AC
6a05 e6 6e             INC  Dig_Cnt
6a07 80 70             BRA  _exit

6a09 a0 03    _numeric LDY  #3                ; $ + % %
6a0b d9 18 61 _prefix  CMP  Cons_Prefix,Y     ; Y = base index
6a0e f0 06             BEQ  _digit            ; -> valid prefix
6a10 88                DEY
6a11 10 f8             BPL  _prefix
6a13 c8                INY                    ; Y = 0
6a14 c6 6f             DEC  Buf_Index         ; character is digit

6a16 20 ef 6a _digit   JSR  Get_Char          ; hex -> BCD
6a19 f0 5e             BEQ  _exit             ; ? : ; and zero terminate
6a1b c9 30             CMP  #'0'
6a1d 90 5a             BCC  _exit
6a1f c9 3a             CMP  #':'
6a21 90 0a             BCC  _valid            ; 0-9
6a23 c9 41             CMP  #'A'
6a25 90 52             BCC  _exit
6a27 c9 47             CMP  #'G'
6a29 b0 4e             BCS  _exit
6a2b e9 07             SBC  #7                ; hex conversion
6a2d e9 2f    _valid   SBC  #'0'-1
6a2f d9 58 71          CMP  Num_Base,Y
6a32 b0 42             BCS  _error
6a34 48                PHA                    ; push digit
6a35 e6 6e             INC  Dig_Cnt

6a37 c0 01             CPY  #1                ; decimal
6a39 d0 0a             BNE  _laba
6a3b a2 03             LDX  #3                ; push Long_AC * 2
6a3d 18                CLC
6a3e b5 59    _push    LDA  Long_AC,X
6a40 2a                ROL  A
6a41 48                PHA
6a42 ca                DEX
6a43 10 f9             BPL  _push

6a45 be 5c 71 _laba    LDX  Num_Bits,Y
6a48 06 59    _shift   ASL  Long_AC
6a4a 26 5a             ROL  Long_AC+1
6a4c eb 5b 00          ROW  Long_AC+2
6a4f b0 25             BCS  _error            ; overflow
6a51 ca                DEX
6a52 d0 f4             BNE  _shift

6a54 c0 01             CPY  #1                ; decimal adjustment
6a56 d0 0e             BNE  _labc
6a58 a2 00             LDX  #0
6a5a a3 03             LDZ  #3
6a5c 18                CLC
6a5d 68       _pull    PLA
6a5e 75 59             ADC  Long_AC,X
6a60 95 59             STA  Long_AC,X
6a62 e8                INX
6a63 3b                DEZ
6a64 10 f7             BPL  _pull

6a66 68       _labc    PLA                    ; pull digit
6a67 18                CLC
6a68 65 59             ADC  Long_AC
6a6a 85 59             STA  Long_AC
6a6c 90 a8             BCC  _digit
6a6e e6 5a             INC  Long_AC+1
6a70 d0 a4             BNE  _digit
6a72 e3 5b             INW  Long_AC+2
6a74 d0 a0             BNE  _digit

6a76 38       _error   SEC
6a77 80 01             BRA  _return
6a79 18       _exit    CLC
6a7a fb       _return  PLZ
6a7b 7a                PLY
6a7c fa                PLX
6a7d a5 6e             LDA  Dig_Cnt           ; digits read
6a7f 60                RTS
6a80          EndMod [Read_Number] Size = 152 [$98]

              **************
              Module Hex_LPC
              **************

6a80 a6 64             LDX  Long_PC+3
6a82 f0 15             BEQ  _laba
6a84 a9 9e             LDA  #YELLOW
6a86 20 d2 ff          JSR  CHROUT
6a89 8a                TXA
6a8a 20 bf 6a          JSR  Print_Hex
6a8d a5 63             LDA  Long_PC+2
6a8f 20 bf 6a          JSR  Print_Hex
6a92 a9 05             LDA  #WHITE
6a94 20 d2 ff          JSR  CHROUT
6a97 80 07             BRA  _labb
6a99 a5 63    _laba    LDA  Long_PC+2
6a9b f0 03             BEQ  _labb
6a9d 20 bf 6a          JSR  Print_Hex
6aa0 a6 62    _labb    LDX  Long_PC+1
6aa2 a5 61             LDA  Long_PC
6aa4          EndMod [Hex_LPC] Size = 36 [$24]

              *******************
              Module Print_XA_Hex
              *******************

6aa4 48                PHA
6aa5 8a                TXA
6aa6 20 bf 6a          JSR  Print_Hex
6aa9 68                PLA
6aaa          EndMod [Print_XA_Hex] Size = 6 [$6]

              **********************
              Module Print_Hex_Blank
              **********************

6aaa 20 bf 6a          JSR  Print_Hex
6aad          EndMod [Print_Hex_Blank] Size = 3 [$3]

              ******************
              Module Print_Blank
              ******************

6aad a9 20             LDA  #' '
6aaf 4c d2 ff          JMP  CHROUT
6ab2          EndMod [Print_Blank] Size = 5 [$5]

              ***************
              Module Print_CR
              ***************

6ab2 a9 0d             LDA  #13
6ab4 4c d2 ff          JMP  CHROUT
6ab7          EndMod [Print_CR] Size = 5 [$5]

              ***************
              Module CR_Erase
              ***************

6ab7 20 7d ff          JSR  PRIMM
6aba 0d 1b 51          .BYTE "\r\eQ",0
6abe 60                RTS
6abf          EndMod [CR_Erase] Size = 8 [$8]

              ****************
              Module Print_Hex
              ****************

6abf da                PHX
6ac0 20 cb 6a          JSR  A_To_Hex
6ac3 20 d2 ff          JSR  CHROUT
6ac6 8a                TXA
6ac7 fa                PLX
6ac8 4c d2 ff          JMP  CHROUT
6acb          EndMod [Print_Hex] Size = 12 [$c]

              ***************
              Module A_To_Hex
              ***************

6acb 48                PHA
6acc 20 d5 6a          JSR  _nibble
6acf aa                TAX
6ad0 68                PLA
6ad1 4a                LSR  A
6ad2 4a                LSR  A
6ad3 4a                LSR  A
6ad4 4a                LSR  A

6ad5 29 0f    _nibble  AND  #15
6ad7 c9 0a             CMP  #10
6ad9 90 02             BCC  _lab
6adb 69 06             ADC  #6
6add 69 30    _lab     ADC  #'0'
6adf 60                RTS
6ae0          EndMod [A_To_Hex] Size = 21 [$15]

              ****************
              Module Get_Glyph
              ****************
6ae0 da                PHX
6ae1 a9 20             LDA  #' '
6ae3 a6 6f    _loop    LDX  Buf_Index
6ae5 e6 6f             INC  Buf_Index
6ae7 dd 00 02          CMP  Buffer,X
6aea f0 f7             BEQ  _loop
6aec fa                PLX                    ; fall through
6aed          EndMod [Get_Glyph] Size = 13 [$d]

              ***************
              Module Got_Char
              ***************

6aed c6 6f             DEC  Buf_Index
6aef          EndMod [Got_Char] Size = 2 [$2]

              ***************
              Module Get_Char
              ***************

6aef da                PHX
6af0 a6 6f             LDX  Buf_Index
6af2 e6 6f             INC  Buf_Index
6af4 bd 00 02          LDA  Buffer,X
6af7 e0 01             CPX  #1
6af9 fa                PLX
6afa 90 08             BCC  _regc
6afc c9 3b             CMP  #';'            ; register
6afe f0 0a             BEQ  _return
6b00 c9 3f             CMP  #'?'            ; help
6b02 f0 06             BEQ  _return
6b04 c9 00    _regc    CMP  #0
6b06 f0 02             BEQ  _return
6b08 c9 3a             CMP  #':'
6b0a 60       _return  RTS
6b0b          EndMod [Get_Char] Size = 28 [$1c]


              **************
              Module Dec_LCT
              **************

6b0b a5 5d             LDA  Long_CT
6b0d 05 5e             ORA  Long_CT+1
6b0f d0 02             BNE  _skip
6b11 c3 5f             DEW  Long_CT+2
6b13 c3 5d    _skip    DEW  Long_CT
6b15 a5 60             LDA  Long_CT+3         ; set N flag
6b17 60                RTS
6b18          EndMod [Dec_LCT] Size = 13 [$d]

              **************
              Module Add_LPC
              **************

6b18 18                CLC
6b19 65 61             ADC  Long_PC
6b1b 85 61             STA  Long_PC
6b1d 90 06             BCC  _return

              ************
6b1f          Inc_LPC_Page
              ************

6b1f e6 62             INC  Long_PC+1
6b21 d0 02             BNE  _return
6b23 e3 63             INW  Long_PC+2
6b25 60       _return  RTS

              ******************
              Module Param_Range
              ******************

              ; read two (address) parameters

              ; Long_CT = difference (2nd. minus 1st.)
              ; Long_PC = 1st. parameter
              ; Long_DA = 2nd. parameter

              ; carry on exit flags error

6b26 20 cb 69          JSR  Get_LAC           ; get 1st. parameter
6b29 b0 12             BCS  _error
6b2b 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = 1st. address
6b2e 20 cb 69          JSR  Get_LAC
6b31 b0 0a             BCS  _error
6b33 20 77 61          JSR  LAC_To_LDA        ; Long_DA = 2nd. address
6b36 20 92 61          JSR  LAC_Minus_LPC     ; Long_CT = range
6b39 90 02             BCC  _error
6b3b 18                CLC
6b3c 60                RTS
6b3d 38       _error   SEC
6b3e 60                RTS
6b3f          EndMod [Param_Range] Size = 25 [$19]

              ****************
              Module Converter
              ****************

6b3f a2 00             LDX  #0
6b41 86 6f             STX  Buf_Index
6b43 20 cb 69          JSR  Get_LAC
6b46 b3 8b f5          LBCS Mon_Error
6b49 a2 00             LDX  #0
6b4b da       _loop    PHX
6b4c 20 b7 6a          JSR  CR_Erase
6b4f bd 18 61          LDA  Cons_Prefix,X
6b52 20 d2 ff          JSR  CHROUT
6b55 8a                TXA
6b56 0a                ASL  A
6b57 aa                TAX
6b58 23 64 6b          JSR  (Conv_Tab,X)
6b5b fa                PLX
6b5c e8                INX
6b5d e0 04             CPX  #4
6b5f 90 ea             BCC  _loop
6b61 4c a5 60          JMP  Main

6b64 a1 6b    Conv_Tab .WORD Print_Hexval
6b66 aa 6b             .WORD Print_Decimal
6b68 72 6b             .WORD Print_Octal
6b6a 6c 6b             .WORD Print_Dual
6b6c          EndMod [Converter] Size = 45 [$2d]

              *****************
              Module Print_Dual
              *****************

6b6c a2 18             LDX  #24               ; digits
6b6e a0 01             LDY  #1                ; bits per digit
6b70 80 04             BRA  _entry

              ***********
6b72          Print_Octal
              ***********

6b72 a2 08             LDX  #8                ; digits
6b74 a0 03             LDY  #3                ; bits per digit

6b76 20 6b 61 _entry   JSR  LAC_To_LCT
6b79 a3 00             LDZ  #0
6b7b 64 61             STZ  Long_PC
6b7d a3 30             LDZ  #'0'
6b7f 5a                PHY                    ; save start value
6b80 7a       _loopa   PLY                    ; reinitialise
6b81 5a                PHY
6b82 a9 00             LDA  #0
6b84 06 5d    _loopb   ASL  Long_CT
6b86 eb 5e 00          ROW  Long_CT+1
6b89 2a                ROL  A
6b8a 88                DEY
6b8b d0 f7             BNE  _loopb
6b8d e0 01             CPX  #1                ; print last character
6b8f f0 04             BEQ  _skip
6b91 05 61             ORA  Long_PC
6b93 f0 07             BEQ  _next
6b95 09 30    _skip    ORA  #'0'
6b97 64 61             STZ  Long_PC
6b99 20 d2 ff          JSR  CHROUT
6b9c ca       _next    DEX
6b9d d0 e1             BNE  _loopa
6b9f 7a                PLY                    ; cleanup stack
6ba0 60                RTS
6ba1          EndMod [Print_Dual] Size = 53 [$35]

              *******************
              Module Print_Hexval
              *******************

6ba1 20 5f 61         JSR  LAC_To_LPC
6ba4 a9 00            LDA  #0
6ba6 85 64            STA  Long_PC+3
6ba8 80 32            BRA  Print_BCD
6baa          EndMod [Print_Hexval] Size = 9 [$9]

              ********************
              Module Print_Decimal
              ********************

              ; max $ffffff = 16777215 (8 digits)

6baa 20 6b 61          JSR  LAC_To_LCT
6bad a2 03             LDX  #3                ; 4 BCD bytes = 8 digits
6baf a9 00             LDA  #0
6bb1 95 61    _clear   STA  Long_PC,X
6bb3 ca                DEX
6bb4 10 fb             BPL  _clear

6bb6 a2 20             LDX  #32               ; source bits
6bb8 f8                SED
6bb9 06 5d    _loop    ASL  Long_CT
6bbb 26 5e             ROL  Long_CT+1
6bbd eb 5f 00          ROW  Long_CT+2
6bc0 a5 61             LDA  Long_PC
6bc2 65 61             ADC  Long_PC
6bc4 85 61             STA  Long_PC
6bc6 a5 62             LDA  Long_PC+1
6bc8 65 62             ADC  Long_PC+1
6bca 85 62             STA  Long_PC+1
6bcc a5 63             LDA  Long_PC+2
6bce 65 63             ADC  Long_PC+2
6bd0 85 63             STA  Long_PC+2
6bd2 a5 64             LDA  Long_PC+3
6bd4 65 64             ADC  Long_PC+3
6bd6 85 64             STA  Long_PC+3
6bd8 ca                DEX
6bd9 d0 de             BNE  _loop
6bdb d8                CLD
6bdc          EndMod [Print_Decimal] Size = 50 [$32]

              ****************
              Module Print_BCD
              ****************

6bdc a9 00             LDA  #0
6bde 85 5d             STA  Long_CT
6be0 a3 30             LDZ  #'0'
6be2 a0 08             LDY  #8                ; max. digits
6be4 a2 03    _loopa   LDX  #3                ; 4 bytes
6be6 a9 00             LDA  #0
6be8 06 61    _loopb   ASL  Long_PC
6bea 26 62             ROL  Long_PC+1
6bec eb 63 00          ROW  Long_PC+2
6bef 2a                ROL  A
6bf0 ca                DEX
6bf1 10 f5             BPL  _loopb

6bf3 c0 01             CPY  #1                ; print last character
6bf5 f0 04             BEQ  _skip
6bf7 05 5d             ORA  Long_CT
6bf9 f0 0d             BEQ  _next
6bfb 09 30    _skip    ORA  #'0'
6bfd 64 5d             STZ  Long_CT
6bff c9 3a             CMP  #$3a
6c01 90 02             BCC  _print
6c03 69 06             ADC  #6                ; + carry
6c05 20 d2 ff _print   JSR  CHROUT
6c08 88       _next    DEY
6c09 d0 d9             BNE  _loopa
6c0b 60                RTS
6c0c          EndMod [Print_BCD] Size = 48 [$30]


              ***************
              Module Mon_Disk
              ***************

6c0c c6 6f             DEC  Buf_Index
6c0e a6 6f             LDX  Buf_Index
6c10 bd 00 02          LDA  Buffer,X
6c13 f0 68             BEQ  Print_Disk_Status
6c15 85 5d             STA  Long_CT           ; dir marker
6c17 a0 ff             LDY  #$ff              ; SA = 15
6c19 c9 24             CMP  #'$'
6c1b d0 02             BNE  _lab
6c1d a0 f0             LDY  #$f0              ; SA =  0
6c1f a5 ba    _lab     LDA  FA
6c21 20 b1 ff          JSR  LISTEN
6c24 98                TYA                    ; SA
6c25 20 93 ff          JSR  SECOND
6c28 bd 00 02 _loop    LDA  Buffer,X
6c2b f0 06             BEQ  _close
6c2d 20 a8 ff          JSR  CIOUT
6c30 e8                INX
6c31 80 f5             BRA  _loop
6c33 20 ae ff _close   JSR  UNLSN
6c36 a5 5d             LDA  Long_CT
6c38 c9 24             CMP  #'$'
6c3a d0 41             BNE  Print_Disk_Status
6c3c 4c ce 6c          JMP  Directory

6c3f          EndMod [Mon_Disk] Size = 51 [$33]

              **********************
              Module Get_Disk_Status
              **********************

6c3f a5 ba             LDA  FA
6c41 20 b4 ff          JSR  TALK
6c44 a9 6f             LDA  #$6f
6c46 20 96 ff          JSR  TKSA
6c49 20 a5 ff          JSR  ACPTR             ; 1st. digit
6c4c 8d 34 04          STA  Disk_Msg
6c4f 0a                ASL  A
6c50 0a                ASL  A
6c51 0a                ASL  A
6c52 0a                ASL  A
6c53 8d 0b 04          STA  Disk_Status       ; BCD
6c56 20 a5 ff          JSR  ACPTR             ; 2nd. digit
6c59 8d 35 04          STA  Disk_Msg+1
6c5c 29 0f             AND  #15
6c5e 0d 0b 04          ORA  Disk_Status
6c61 8d 0b 04          STA  Disk_Status       ; complete BCD number

6c64 a0 01             LDY  #1
6c66 c8       _loop    INY
6c67 20 a5 ff          JSR  ACPTR
6c6a 99 34 04          STA  Disk_Msg,Y
6c6d c9 20             CMP  #' '
6c6f b0 f5             BCS  _loop
6c71 a9 00             LDA  #0
6c73 99 34 04          STA  Disk_Msg,Y
6c76 20 ab ff          JSR  UNTALK
6c79 ad 0b 04          LDA  Disk_Status
6c7c 60                RTS
6c7d          EndMod [Get_Disk_Status] Size = 62 [$3e]

              ************************
              Module Print_Disk_Status
              ************************

6c7d 20 3f 6c          JSR  Get_Disk_Status

              **************
6c80          Print_Disk_Msg
              **************

6c80 20 b2 6a          JSR  Print_CR
6c83 a0 00             LDY  #0
6c85 b9 34 04 _loop    LDA  Disk_Msg,Y
6c88 f0 06             BEQ  _exit
6c8a 20 d2 ff          JSR  CHROUT
6c8d c8                INY
6c8e 80 f5             BRA  _loop
6c90 4c b2 6a _exit    JMP  Print_CR
6c93          EndMod [Print_Disk_Status] Size = 22 [$16]

              ; @[u] : print disk status for unit u
              ; @[u],$[=pattern] : print directory
              ; @[u],command : send disk command and read status
              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)
              ; @[u],U2 mem track startsec [endsec] : write disk sector(s)

              **************
              Module Mon_DOS
              **************

6c93 a2 08             LDX  #8                ; default device
6c95 20 e0 6a          JSR  Get_Glyph
6c98 c9 30             CMP  #'0'
6c9a 90 17             BCC  _unit
6c9c c9 3a             CMP  #':'
6c9e b0 13             BCS  _unit
6ca0 c6 6f             DEC  Buf_Index
6ca2 20 e8 69          JSR  Read_Number
6ca5 b0 0c             BCS  _unit
6ca7 a6 59             LDX  Long_AC           ; unit
6ca9 e0 04             CPX  #4
6cab 93 26 f4          LBCC Mon_Error
6cae e0 1f             CPX  #31
6cb0 b3 21 f4          LBCS Mon_Error
6cb3 86 ba    _unit    STX  FA
6cb5 c6 6f             DEC  Buf_Index
6cb7 20 ef 6a _next    JSR  Get_Char
6cba f0 0c             BEQ  _status           ; only @u
6cbc c9 20             CMP  #' '
6cbe f0 f7             BEQ  _next
6cc0 c9 2c             CMP  #','
6cc2 f0 f3             BEQ  _next
6cc4 c9 55             CMP  #'U'              ; sector read/write
6cc6 f0 4e             BEQ  DOS_U
6cc8 20 0c 6c _status  JSR  Mon_Disk
6ccb 4c a5 60          JMP  Main
6cce          EndMod [Mon_DOS] Size = 59 [$3b]

              ****************
              Module Directory
              ****************

6cce a5 ba             LDA  FA
6cd0 20 b4 ff          JSR  TALK
6cd3 a9 60             LDA  #$60
6cd5 85 b9             STA  SA
6cd7 20 96 ff          JSR  TKSA
6cda a9 00             LDA  #0
6cdc 85 90             STA  STATUS

6cde a3 06             LDZ  #6                ; load address, pseudo link, pseudo number
6ce0 aa       _loopb   TAX                    ; X = previous byte
6ce1 20 a5 ff          JSR  ACPTR             ; A = current  byte
6ce4 a4 90             LDY  STATUS
6ce6 d0 2b             BNE  _exit
6ce8 3b                DEZ
6ce9 d0 f5             BNE  _loopb            ; X/A = last read word

6ceb 86 59             STX  Long_AC
6ced 85 5a             STA  Long_AC+1
6cef 64 5b             STZ  Long_AC+2
6cf1 64 5c             STZ  Long_AC+3
6cf3 20 aa 6b          JSR  Print_Decimal     ; file size
6cf6 20 ad 6a          JSR  Print_Blank

6cf9 20 a5 ff _loopc   JSR  ACPTR             ; print file entry
6cfc f0 09             BEQ  _cr
6cfe a4 90             LDY  STATUS
6d00 d0 11             BNE  _exit
6d02 20 d2 ff          JSR  CHROUT
6d05 90 f2             BCC  _loopc

6d07 20 b2 6a _cr      JSR  Print_CR
6d0a 20 e1 ff          JSR  STOP
6d0d f0 04             BEQ  _exit
6d0f a3 04             LDZ  #4
6d11 80 cd             BRA  _loopb            ; next file
6d13 4c ab ff _exit    JMP  UNTALK
6d16          EndMod [Directory] Size = 72 [$48]

              ************
              Module DOS_U
              ************

6d16 20 ef 6a          JSR  Get_Char
6d19 c9 31             CMP  #'1'            ; U1: read
6d1b 93 b6 f3          LBCC Mon_Error
6d1e c9 33             CMP  #'3'            ; U2: write
6d20 b3 b1 f3          LBCS Mon_Error
6d23 8d 0d 04          STA  Mon_Data+1      ; U type
6d26 e6 6f             INC  Buf_Index
6d28 20 cb 69          JSR  Get_LAC
6d2b b3 a6 f3          LBCS Mon_Error
6d2e 20 5f 61          JSR  LAC_To_LPC      ; Long_PC = memory address

6d31 20 cb 69          JSR  Get_LAC
6d34 b3 9d f3          LBCS Mon_Error
6d37 a5 59             LDA  Long_AC
6d39 8d 09 04          STA  Disk_Track

6d3c 20 cb 69          JSR  Get_LAC
6d3f b3 92 f3          LBCS Mon_Error
6d42 a5 59             LDA  Long_AC
6d44 8d 0a 04          STA  Disk_Sector

6d47 20 cb 69          JSR  Get_LAC
6d4a 20 6b 61          JSR  LAC_To_LCT        ; Long_CT = sector count
6d4d c3 5d             DEW  Long_CT           ; Long_CT = -1 for single

6d4f 20 4d 6e          JSR  Open_Disk_Buffer

6d52 ad 0d 04 _loop    LDA  Mon_Data+1
6d55 4a                LSR  A
6d56 f0 0a             BEQ  _write
6d58 20 7d 6d          JSR  Find_Next_Sector
6d5b d0 17             BNE  _error
6d5d 20 d7 6d          JSR  Read_Sector
6d60 80 08             BRA  _next

6d62 20 f1 6d _write   JSR  Write_Sector
6d65 20 7d 6d          JSR  Find_Next_Sector
6d68 d0 0a             BNE  _error

6d6a 20 1f 6b _next    JSR  Inc_LPC_Page
6d6d ee 0a 04          INC  Disk_Sector
6d70 c3 5d             DEW  Long_CT
6d72 10 de             BPL  _loop

6d74 20 80 6c _error   JSR  Print_Disk_Msg
6d77 20 69 6e          JSR  Close_Disk_Buffer
6d7a 4c a5 60          JMP  Main
6d7d          EndMod [DOS_U] Size = 103 [$67]

              ***********************
              Module Find_Next_Sector
              ***********************

6d7d 20 2b 6e          JSR  Build_U_String
6d80 20 c6 6d          JSR  Send_Disk_Command
6d83 20 3f 6c          JSR  Get_Disk_Status
6d86 f0 1d             BEQ  _return           ; OK
6d88 c9 66             CMP  #$66              ; illegal track or sector
6d8a d0 13             BNE  _error            ; error
6d8c a9 00             LDA  #0
6d8e 8d 0a 04          STA  Disk_Sector
6d91 ee 09 04          INC  Disk_Track        ; try next track
6d94 20 2b 6e          JSR  Build_U_String
6d97 20 c6 6d          JSR  Send_Disk_Command
6d9a 20 3f 6c          JSR  Get_Disk_Status
6d9d f0 06             BEQ  _return
6d9f 20 80 6c _error   JSR  Print_Disk_Msg
6da2 ad 0b 04          LDA  Disk_Status
6da5 60       _return  RTS
6da6          EndMod [Find_Next_Sector] Size = 41 [$29]

              ***************************
              Module Open_Command_Channel
              ***************************

6da6 a5 ba             LDA  FA
6da8 20 b1 ff          JSR  LISTEN
6dab a9 ff             LDA  #$ff
6dad 20 93 ff          JSR  SECOND
6db0 a0 00             LDY  #0
6db2 84 90             STY  STATUS
6db4 60                RTS
6db5          EndMod [Open_Command_Channel] Size = 15 [$f]

              ***************
              Module Reset_BP
              ***************

6db5 20 a6 6d          JSR  Open_Command_Channel
6db8 b9 72 71 _loop    LDA  BP_ZERO,Y
6dbb f0 06             BEQ  _end
6dbd 20 a8 ff          JSR  CIOUT
6dc0 c8                INY
6dc1 80 f5             BRA  _loop
6dc3 4c ae ff _end     JMP  UNLSN
6dc6          EndMod [Reset_BP] Size = 17 [$11]

              ************************
              Module Send_Disk_Command
              ************************

6dc6 20 a6 6d          JSR  Open_Command_Channel
6dc9 b9 0c 04 _loop    LDA  Mon_Data,Y
6dcc f0 06             BEQ  _end
6dce 20 a8 ff          JSR  CIOUT
6dd1 c8                INY
6dd2 80 f5             BRA  _loop
6dd4 4c ae ff _end     JMP  UNLSN
6dd7          EndMod [Send_Disk_Command] Size = 17 [$11]

              ******************
              Module Read_Sector
              ******************

6dd7 a5 ba             LDA  FA
6dd9 20 b4 ff          JSR  TALK
6ddc a9 69             LDA  #$69              ; SA = 9
6dde 20 96 ff          JSR  TKSA
6de1 a3 00             LDZ  #0
6de3 64 90             STZ  STATUS
6de5 20 a5 ff _loop    JSR  ACPTR
6de8 ea 92 61          STA  [Long_PC],Z
6deb 1b                INZ
6dec d0 f7             BNE  _loop
6dee 4c ab ff          JMP  UNTALK
6df1          EndMod [Read_Sector] Size = 26 [$1a]

              ******************
              Module Write_Sector
              ******************

6df1 20 b5 6d          JSR  Reset_BP          ; reset disk buffer pointer
6df4 a5 ba             LDA  FA
6df6 20 b1 ff          JSR  LISTEN
6df9 a9 69             LDA  #$69              ; SA = 9
6dfb 20 96 ff          JSR  TKSA
6dfe a3 00             LDZ  #0
6e00 64 90             STZ  STATUS
6e02 ea b2 61 _loop    LDA  [Long_PC],Z
6e05 20 a8 ff          JSR  CIOUT
6e08 1b                INZ
6e09 d0 f7             BNE  _loop
6e0b 20 ae ff          JSR  UNLSN
6e0e 60                RTS
6e0f          EndMod [Write_Sector] Size = 30 [$1e]

              *************
              Module Set_TS
              *************

              ; Input  A = track or sector
              ;        X = string index

6e0f c9 64    _100      CMP  #100
6e11 90 07              BCC  _10
6e13 fe 0c 04           INC  Mon_Data,X
6e16 e9 64              SBC  #100
6e18 80 f5              BRA  _100
6e1a c9 0a    _10       CMP  #10
6e1c 90 07              BCC  _1
6e1e fe 0d 04           INC  Mon_Data+1,X
6e21 e9 0a              SBC  #10
6e23 80 f5              BRA  _10
6e25 09 30    _1        ORA  #'0'
6e27 9d 0e 04           STA  Mon_Data+2,X
6e2a 60                 RTS
6e2b          EndMod [Set_TS] Size = 28 [$1c]

              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)

              ; U1:CHANNEL DRIVE TRACK SECTOR

              *********************
              Module Build_U_String
              *********************

6e2b a2 0e             LDX  #14
6e2d bd 63 71 _loop    LDA  U1,X
6e30 9d 0c 04          STA  Mon_Data,X
6e33 ca                DEX
6e34 e0 02             CPX  #2
6e36 b0 f5             BCS  _loop
6e38 a9 55             LDA  #'U'
6e3a 8d 0c 04          STA  Mon_Data
6e3d ad 09 04          LDA  Disk_Track
6e40 a2 07             LDX  #7
6e42 20 0f 6e          JSR  Set_TS
6e45 ad 0a 04          LDA  Disk_Sector
6e48 a2 0b             LDX  #11
6e4a 4c 0f 6e          JMP  Set_TS
6e4d          EndMod [Build_U_String] Size = 34 [$22]

              ***********************
              Module Open_Disk_Buffer
              ***********************

6e4d a9 00             LDA  #0
6e4f 85 90             STA  STATUS
6e51 a5 ba             LDA  FA
6e53 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
6e56 a9 f9             LDA  #$f9            ; sa = 9
6e58 20 93 ff          JSR  SECOND
6e5b a9 23             LDA  #'#'            ; open buffer
6e5d 20 a8 ff          JSR  CIOUT
6e60 20 ae ff          JSR  UNLSN
6e63 a5 90             LDA  STATUS
6e65 d3 16 fe          LBNE Print_Disk_Status
6e68 60                RTS
6e69          EndMod [Open_Disk_Buffer] Size = 28 [$1c]

              ************************
              Module Close_Disk_Buffer
              ************************

6e69 a9 00             LDA  #0
6e6b 85 90             STA  STATUS
6e6d a5 ba             LDA  FA
6e6f 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
6e72 a9 e9             LDA  #$e9            ; sa = 9
6e74 20 93 ff          JSR  SECOND
6e77 20 ae ff          JSR  UNLSN
6e7a a5 90             LDA  STATUS
6e7c d3 ff fd          LBNE Print_Disk_Status
6e7f 60                RTS
6e80          EndMod [Close_Disk_Buffer] Size = 23 [$17]


              ; The 3 letter mnemonics are encoded as three 5-bit values
              ; and stored in a left byte MNE_L and a right byte MNE_R
              ; The 5 bit value is computed by subtracting $3f from the
              ; ASCII value, so '?'-> 0, '@'->1, 'A'->2, 'B'->3,'Z'->27
              ; For example "ADC" is encoded as 2, 5, 4
              ; ----------------
              ; 7654321076543210
              ; 00010
              ;      00101
              ;           00100
              ;                0
              ;
              ; The operator >" stores the left (high) byte of the packed value
              ; The operator <" stores the right (low) byte of the packed value

              *****
6e80          MNE_L
              *****

6e80 11                .BYTE >"ADC"
6e81 13                .BYTE >"AND"
6e82 15                .BYTE >"ASL"
6e83 15                .BYTE >"ASR"
6e84 15                .BYTE >"ASW"
6e85 18                .BYTE >"BBR"
6e86 18                .BYTE >"BBS"
6e87 19                .BYTE >"BCC"
6e88 19                .BYTE >"BCS"
6e89 19                .BYTE >"BEQ"
6e8a 1a                .BYTE >"BIT"
6e8b 1b                .BYTE >"BMI"
6e8c 1b                .BYTE >"BNE"
6e8d 1c                .BYTE >"BPL"
6e8e 1c                .BYTE >"BRA"
6e8f 1c                .BYTE >"BRK"
6e90 1d                .BYTE >"BSR"
6e91 1d                .BYTE >"BVC"
6e92 1d                .BYTE >"BVS"
6e93 23                .BYTE >"CLC"
6e94 23                .BYTE >"CLD"
6e95 23                .BYTE >"CLE"
6e96 23                .BYTE >"CLI"
6e97 23                .BYTE >"CLV"
6e98 23                .BYTE >"CMP"
6e99 24                .BYTE >"CPX"
6e9a 24                .BYTE >"CPY"
6e9b 24                .BYTE >"CPZ"
6e9c 29                .BYTE >"DEC"
6e9d 29                .BYTE >"DEW"
6e9e 29                .BYTE >"DEX"
6e9f 29                .BYTE >"DEY"
6ea0 29                .BYTE >"DEZ"
6ea1 34                .BYTE >"EOR"
6ea2 53                .BYTE >"INC"
6ea3 53                .BYTE >"INW"
6ea4 53                .BYTE >"INX"
6ea5 53                .BYTE >"INY"
6ea6 53                .BYTE >"INZ"
6ea7 5b                .BYTE >"JMP"
6ea8 5d                .BYTE >"JSR"
6ea9 69                .BYTE >"LDA"
6eaa 69                .BYTE >"LDX"
6eab 69                .BYTE >"LDY"
6eac 69                .BYTE >"LDZ"
6ead 6d                .BYTE >"LSR"
6eae 70                .BYTE >"MAP"
6eaf 79                .BYTE >"NEG"
6eb0 7c                .BYTE >"NOP"
6eb1 84                .BYTE >"ORA"
6eb2 8a                .BYTE >"PHA"
6eb3 8a                .BYTE >"PHP"
6eb4 8a                .BYTE >"PHW"
6eb5 8a                .BYTE >"PHX"
6eb6 8a                .BYTE >"PHY"
6eb7 8a                .BYTE >"PHZ"
6eb8 8b                .BYTE >"PLA"
6eb9 8b                .BYTE >"PLP"
6eba 8b                .BYTE >"PLX"
6ebb 8b                .BYTE >"PLY"
6ebc 8b                .BYTE >"PLZ"
6ebd 9b                .BYTE >"RMB"
6ebe 9c                .BYTE >"ROL"
6ebf 9c                .BYTE >"ROR"
6ec0 9c                .BYTE >"ROW"
6ec1 9d                .BYTE >"RTI"
6ec2 9d                .BYTE >"RTS"
6ec3 a0                .BYTE >"SBC"
6ec4 a1                .BYTE >"SEC"
6ec5 a1                .BYTE >"SED"
6ec6 a1                .BYTE >"SEE"
6ec7 a1                .BYTE >"SEI"
6ec8 a3                .BYTE >"SMB"
6ec9 a5                .BYTE >"STA"
6eca a5                .BYTE >"STX"
6ecb a5                .BYTE >"STY"
6ecc a5                .BYTE >"STZ"
6ecd a8                .BYTE >"TAB"
6ece a8                .BYTE >"TAX"
6ecf a8                .BYTE >"TAY"
6ed0 a8                .BYTE >"TAZ"
6ed1 a8                .BYTE >"TBA"
6ed2 ac                .BYTE >"TRB"
6ed3 ad                .BYTE >"TSB"
6ed4 ad                .BYTE >"TSX"
6ed5 ad                .BYTE >"TSY"
6ed6 ae                .BYTE >"TXA"
6ed7 ae                .BYTE >"TXS"
6ed8 ae                .BYTE >"TYA"
6ed9 ae                .BYTE >"TYS"
6eda ae                .BYTE >"TZA"

              *****
6edb          MNE_R
              *****

6edb 48                .BYTE <"ADC" ; 00
6edc ca                .BYTE <"AND" ; 01
6edd 1a                .BYTE <"ASL" ; 02
6ede 26                .BYTE <"ASR" ; 03
6edf 30                .BYTE <"ASW" ; 04
6ee0 e6                .BYTE <"BBR" ; 05
6ee1 e8                .BYTE <"BBS" ; 06
6ee2 08                .BYTE <"BCC" ; 07
6ee3 28                .BYTE <"BCS" ; 08
6ee4 a4                .BYTE <"BEQ" ; 09
6ee5 aa                .BYTE <"BIT" ; 0a
6ee6 94                .BYTE <"BMI" ; 0b
6ee7 cc                .BYTE <"BNE" ; 0c
6ee8 5a                .BYTE <"BPL" ; 0d
6ee9 c4                .BYTE <"BRA" ; 0e
6eea d8                .BYTE <"BRK" ; 0f
6eeb 26                .BYTE <"BSR" ; 10
6eec c8                .BYTE <"BVC" ; 11
6eed e8                .BYTE <"BVS" ; 12
6eee 48                .BYTE <"CLC" ; 13
6eef 4a                .BYTE <"CLD" ; 14
6ef0 4c                .BYTE <"CLE" ; 15
6ef1 54                .BYTE <"CLI" ; 16
6ef2 6e                .BYTE <"CLV" ; 17
6ef3 a2                .BYTE <"CMP" ; 18
6ef4 72                .BYTE <"CPX" ; 19
6ef5 74                .BYTE <"CPY" ; 1a
6ef6 76                .BYTE <"CPZ" ; 1b
6ef7 88                .BYTE <"DEC" ; 1c
6ef8 b0                .BYTE <"DEW" ; 1d
6ef9 b2                .BYTE <"DEX" ; 1e
6efa b4                .BYTE <"DEY" ; 1f
6efb b6                .BYTE <"DEZ"
6efc 26                .BYTE <"EOR"
6efd c8                .BYTE <"INC"
6efe f0                .BYTE <"INW"
6eff f2                .BYTE <"INX"
6f00 f4                .BYTE <"INY"
6f01 f6                .BYTE <"INZ"
6f02 a2                .BYTE <"JMP"
6f03 26                .BYTE <"JSR"
6f04 44                .BYTE <"LDA"
6f05 72                .BYTE <"LDX"
6f06 74                .BYTE <"LDY"
6f07 76                .BYTE <"LDZ"
6f08 26                .BYTE <"LSR"
6f09 a2                .BYTE <"MAP"
6f0a 90                .BYTE <"NEG"
6f0b 22                .BYTE <"NOP"
6f0c c4                .BYTE <"ORA"
6f0d 44                .BYTE <"PHA"
6f0e 62                .BYTE <"PHP"
6f0f 70                .BYTE <"PHW"
6f10 72                .BYTE <"PHX"
6f11 74                .BYTE <"PHY"
6f12 76                .BYTE <"PHZ"
6f13 44                .BYTE <"PLA"
6f14 62                .BYTE <"PLP"
6f15 72                .BYTE <"PLX"
6f16 74                .BYTE <"PLY"
6f17 76                .BYTE <"PLZ"
6f18 86                .BYTE <"RMB"
6f19 1a                .BYTE <"ROL"
6f1a 26                .BYTE <"ROR"
6f1b 30                .BYTE <"ROW"
6f1c 54                .BYTE <"RTI"
6f1d 68                .BYTE <"RTS"
6f1e c8                .BYTE <"SBC"
6f1f 88                .BYTE <"SEC"
6f20 8a                .BYTE <"SED"
6f21 8c                .BYTE <"SEE"
6f22 94                .BYTE <"SEI"
6f23 86                .BYTE <"SMB"
6f24 44                .BYTE <"STA"
6f25 72                .BYTE <"STX"
6f26 74                .BYTE <"STY"
6f27 76                .BYTE <"STZ"
6f28 86                .BYTE <"TAB"
6f29 b2                .BYTE <"TAX"
6f2a b4                .BYTE <"TAY"
6f2b b6                .BYTE <"TAZ"
6f2c c4                .BYTE <"TBA"
6f2d c6                .BYTE <"TRB"
6f2e 06                .BYTE <"TSB"
6f2f 32                .BYTE <"TSX"
6f30 34                .BYTE <"TSY"
6f31 44                .BYTE <"TXA"
6f32 68                .BYTE <"TXS"
6f33 84                .BYTE <"TYA"
6f34 a8                .BYTE <"TYS"
6f35 c4                .BYTE <"TZA"

              *********
6f36          MNE_Index
              *********

              ; an index for all 256 opcodes, describing
              ; where to find the 3-letter mnemonic

6f36 0f 31 15          .BYTE $0f,$31,$15,$46,$53,$31,$02,$3d
6f3e 33 31 02          .BYTE $33,$31,$02,$55,$53,$31,$02,$05
6f46 0d 31 31          .BYTE $0d,$31,$31,$0d,$52,$31,$02,$3d
6f4e 13 31 22          .BYTE $13,$31,$22,$26,$52,$31,$02,$05
6f56 28 01 28          .BYTE $28,$01,$28,$28,$0a,$01,$3e,$3d
6f5e 39 01 3e          .BYTE $39,$01,$3e,$59,$0a,$01,$3e,$05
6f66 0b 01 01          .BYTE $0b,$01,$01,$0b,$0a,$01,$3e,$3d
6f6e 44 01 1c          .BYTE $44,$01,$1c,$20,$0a,$01,$3e,$05
6f76 41 21 2f          .BYTE $41,$21,$2f,$03,$03,$21,$2d,$3d
6f7e 32 21 2d          .BYTE $32,$21,$2d,$50,$27,$21,$2d,$05
6f86 11 21 21          .BYTE $11,$21,$21,$11,$03,$21,$2d,$3d
6f8e 16 21 36          .BYTE $16,$21,$36,$4d,$2e,$21,$2d,$05
6f96 42 00 42          .BYTE $42,$00,$42,$10,$4c,$00,$3f,$3d
6f9e 38 00 3f          .BYTE $38,$00,$3f,$5a,$27,$00,$3f,$05
6fa6 12 00 00          .BYTE $12,$00,$00,$12,$4c,$00,$3f,$3d
6fae 47 00 3b          .BYTE $47,$00,$3b,$51,$27,$00,$3f,$05
6fb6 0e 49 49          .BYTE $0e,$49,$49,$0e,$4b,$49,$4a,$48
6fbe 1f 0a 56          .BYTE $1f,$0a,$56,$4b,$4b,$49,$4a,$06
6fc6 07 49 49          .BYTE $07,$49,$49,$07,$4b,$49,$4a,$48
6fce 58 49 57          .BYTE $58,$49,$57,$4a,$4c,$49,$4c,$06
6fd6 2b 29 2a          .BYTE $2b,$29,$2a,$2c,$2b,$29,$2a,$48
6fde 4f 29 4e          .BYTE $4f,$29,$4e,$2c,$2b,$29,$2a,$06
6fe6 08 29 29          .BYTE $08,$29,$29,$08,$2b,$29,$2a,$48
6fee 17 29 54          .BYTE $17,$29,$54,$2c,$2b,$29,$2a,$06
6ff6 1a 18 1b          .BYTE $1a,$18,$1b,$1d,$1a,$18,$1c,$48
6ffe 25 18 1e          .BYTE $25,$18,$1e,$04,$1a,$18,$1c,$06
7006 0c 18 18          .BYTE $0c,$18,$18,$0c,$1b,$18,$1c,$48
700e 14 18 35          .BYTE $14,$18,$35,$37,$1b,$18,$1c,$06
7016 19 43 29          .BYTE $19,$43,$29,$23,$19,$43,$22,$48
701e 24 43 30          .BYTE $24,$43,$30,$40,$19,$43,$22,$06
7026 09 43 43          .BYTE $09,$43,$43,$09,$34,$43,$22,$48
702e 45 43 3a          .BYTE $45,$43,$3a,$3c,$34,$43,$22,$06

              *****
7036          BRAIN
              *****

              ;              index values for branch mnemonics

              ;              BCC BCS BEQ BMI BNE BPL BRA BSR BVC BVS
7036 07 08 09          .BYTE $07,$08,$09,$0b,$0c,$0d,$0e,$10,$11,$12

              *******
7040          LEN_ADM
              *******

              ; a table of instruction length, flags
              ; and address mode for all 256 opcodes

              ; 7-6: operand length %00.. 0: implied
              ;                     %01.. 1: direct page, indirect
              ;                     %10.. 2: absolute, etc.
              ;                     %11.. 3: BBR and BBS

              ;   5: relative       %0110 0000 $60 short branch
              ;                     %1010 0000 $a0 long  branch

              ;   4:

              ; 3-0: index of address mode


7040 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $00
7048 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $08
7050 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $10
7058 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $18
7060 80 44 8b          .BYTE $80,$44,$8b,$84,$40,$40,$40,$40 ; $20
7068 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $28
7070 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $30
7078 00 88 00          .BYTE $00,$88,$00,$00,$87,$87,$87,$c0 ; $38
7080 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $40
7088 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $48
7090 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $50
7098 00 88 00          .BYTE $00,$88,$00,$00,$00,$87,$87,$c0 ; $58
70a0 00 44 41          .BYTE $00,$44,$41,$a0,$40,$40,$40,$40 ; $60
70a8 00 41 00          .BYTE $00,$41,$00,$00,$8b,$80,$80,$c0 ; $68
70b0 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $70
70b8 00 88 00          .BYTE $00,$88,$00,$00,$84,$87,$87,$c0 ; $78
70c0 60 44 4d          .BYTE $60,$44,$4d,$a0,$40,$40,$40,$40 ; $80
70c8 00 41 00          .BYTE $00,$41,$00,$87,$80,$80,$80,$c0 ; $88
70d0 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $90
70d8 00 88 00          .BYTE $00,$88,$00,$88,$80,$87,$87,$c0 ; $98
70e0 41 44 41          .BYTE $41,$44,$41,$41,$40,$40,$40,$40 ; $a0
70e8 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $a8
70f0 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $b0
70f8 00 88 00          .BYTE $00,$88,$00,$87,$87,$87,$88,$c0 ; $b8
7100 41 44 41          .BYTE $41,$44,$41,$40,$40,$40,$40,$40 ; $c0
7108 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $c8
7110 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $d0
7118 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $d8
7120 41 44 4d          .BYTE $41,$44,$4d,$40,$40,$40,$40,$40 ; $e0
7128 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $e8
7130 60 45 46          .BYTE $60,$45,$46,$a0,$81,$47,$47,$40 ; $f0
7138 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $f8

              ******
7140          ADMODE
              ******

              ; printout flags for 16 address modes
              ;               76543210
              ;               --------
              ;            7  x         #
              ;            6   x        (
              ;            5    x       ,
              ;            4     x      SP
              ;            3      x     )
              ;            2       x    ,
              ;            1/0      xx  01:X  10:Y  11:Z

7140 00                .BYTE %00000000 ; 0             implicit/direct
7141 80                .BYTE %10000000 ; 1 #$nn        immediate
7142 00                .BYTE %00000000 ; 2             ----------
7143 00                .BYTE %00000000 ; 3             ----------
7144 69                .BYTE %01101001 ; 4 ($nn,X)     indirect X
7145 4e                .BYTE %01001110 ; 5 ($nn),Y     indirect Y
7146 4f                .BYTE %01001111 ; 6 ($nn),Z     indirect Z
7147 05                .BYTE %00000101 ; 7 $nn,X       indexed  X
7148 06                .BYTE %00000110 ; 8 $nn,Y       indexed  Y
7149 05                .BYTE %00000101 ; 9 $nn,X       indexed  X
714a 06                .BYTE %00000110 ; a $nn,Y       ----------
714b 48                .BYTE %01001000 ; b ($nnnn,X)   JMP & JSR
714c 69                .BYTE %01101001 ; c ($nn,X)     ----------
714d 7e                .BYTE %01111110 ; d ($nn,SP),Y  LDA & STA
714e 00                .BYTE %00000000 ; e
714f 04                .BYTE %00000100 ; f

              ;              ASL INC ROL DEC LSR ROR NEG ASR
7150 0a 1a 2a ACCUMODE .BYTE $0a,$1a,$2a,$3a,$4a,$6a,$42,$43

7158 10 0a 08 Num_Base .BYTE 16,10, 8, 2 ; hex, dec, oct, bin
715c 04 03 03 Num_Bits .BYTE  4, 3, 3, 1 ; hex, dec, oct, bin

7160 58 59 5a Index_Char .BYTE "XYZ"

              ;                0123456789abcd
7163 55 31 3a U1        .BYTE "U1:9 0 000 000",0 ; channel 9, drive, track, sector
7172 42 2d 50 BP_ZERO   .BYTE "B-P 9 0",0        ; set buffer pointer to 0

              ***************
              Module Reg_Text
              ***************
717a 20 7d ff          JSR  PRIMM
717d 0d 20 20          .BYTE "\r    PC   SR AC XR YR ZR BP  SP  NVEBDIZC\r; \eQ",0
71ac 60                RTS
71ad          EndMod [Reg_Text] Size = 51 [$33]

              ***************
              Module Mon_Help
              ***************
71ad 20 7d ff    JSR PRIMM

71b0 96 41 05    .BYTE LRED,"A",WHITE,"SSEMBLE     - A ADDRESS MNEMONIC OPERAND",CR
71dc 96 42 05    .BYTE LRED,"B",WHITE,"ITMAPS      - B [FROM [TO]]",CR
71fb 96 43 05    .BYTE LRED,"C",WHITE,"OMPARE      - C FROM TO WITH",CR
721b 96 44 05    .BYTE LRED,"D",WHITE,"ISASSEMBLE  - D [FROM [TO]]",CR
723a 96 46 05    .BYTE LRED,"F",WHITE,"ILL         - F FROM TO FILLBYTE",CR
725e 96 47 05    .BYTE LRED,"G",WHITE,"O           - G [ADDRESS]",CR
727b 96 48 05    .BYTE LRED,"H",WHITE,"UNT         - H FROM TO (STRING OR BYTES)",CR
72a8 96 4a 05    .BYTE LRED,"J",WHITE,"SR          - J ADDRESS",CR
72c3 96 4c 05    .BYTE LRED,"L",WHITE,"OAD         - L FILENAME [UNIT [ADDRESS]]",CR
72f0 96 4d 05    .BYTE LRED,"M",WHITE,"EMORY       - M [FROM [TO]]",CR
730f 96 52 05    .BYTE LRED,"R",WHITE,"EGISTERS    - R",CR
7322 96 53 05    .BYTE LRED,"S",WHITE,"AVE         - S FILENAME UNIT FROM TO",CR
734b 96 54 05    .BYTE LRED,"T",WHITE,"RANSFER     - T FROM TO TARGET",CR
736d 96 56 05    .BYTE LRED,"V",WHITE,"ERIFY       - V FILENAME [UNIT [ADDRESS]]",CR
739a 45 96 58    .BYTE "E",LRED,"X",WHITE,"IT         - X",CR
73ad 96 2e 05    .BYTE LRED,".",WHITE,"<DOT>       - . ADDRESS MNEMONIC OPERAND",CR
73d9 96 3e 05    .BYTE LRED,">",WHITE,"<GREATER>   - > ADDRESS BYTE SEQUENCE",CR
7402 96 3b 05    .BYTE LRED,";",WHITE,"<SEMICOLON> - ; REGISTER CONTENTS",CR
7427 96 40 05    .BYTE LRED,"@",WHITE,"DOS         - @ [DOS COMMAND]",CR
7448 96 3f 05    .BYTE LRED,"?",WHITE,"HELP        - ?",CR
745b 00          .BYTE 0
745c 4c a5 60    JMP Main
745f          End_Mod

745f ff ff ff          .FILL $8000-* ($ff) ; 3749 bytes ; 2977 bytes


  431 Symbols
-------------
Bank                           $0002    28D   281    284    340    348
                                       518    520    522    769
PCH                            $0003    29D   269    277    312
PCL                            $0004    30D   275    278    310
SR                             $0005    31D   364
WHITE                          $0005    14D   467    731    739    883
                                       897   1762   2043   3136   3137
                                      3138   3139   3140   3141   3142
                                      3143   3144   3145   3146   3147
                                      3148   3149   3150   3151   3152
                                      3153   3154   3155
AC                             $0006    32D   298
XR                             $0007    33
YR                             $0008    34
ZR                             $0009    35
BP                             $000a    41
SPH                            $000b    42D   322    356
SPL                            $000c    43D   324    358    809    820
                                       824
CR                             $000d    18D   394    448   1488   3136
                                      3137   3138   3139   3140   3141
                                      3142   3143   3144   3145   3146
                                      3147   3148   3149   3150   3151
                                      3152   3153   3154   3155
REV                            $0012    19D   448
CRIGHT                         $001d    20D   425
QUOTE                          $0022    21D  1033   1040
APOSTR                         $0027    22D   970   1949
Long_AC                        $0059    56D   205    207    215    219
                                       517    519    521    532    546
                                       560    575    577    591    607
                                       619    621    629    630    632
                                       633    768    786    925    933
                                       952    985   1054   1063   1064
                                      1106   1221   1224   1391   1393
                                      1394   1402   1403   1458   1467
                                      1526   1533   1535   1536   1538
                                      1718   1720   1727   1728   1797
                                      1800   1814   1823   1866   1868
                                      1879   1882   1885   1890   1893
                                      1942   1943   1944   1945   1952
                                      1985   1992   1993   1994   2005
                                      2006   2013   2014   2016   2018
                                      2477   2516   2517   2518   2519
                                      2555   2560
Long_CT                        $005d    57D   208    209    211    212
                                       216    220    547    576    593
                                       690    691    694   1386   1392
                                      1400   1401   1606   1618   1621
                                      2173   2174   2176   2177   2178
                                      2278   2279   2321   2322   2323
                                      2346   2360   2363   2382   2397
                                      2565   2583
Long_PC                        $0061    58D   533    592    608    641
                                       643    666    668    743    787
                                       789    833    835    851    853
                                       932    951   1070   1089   1090
                                      1107   1453   1456   1459   1468
                                      1474   1496   1500   1534   1537
                                      1891   1894   2035   2041   2046
                                      2049   2050   2187   2188   2195
                                      2197   2272   2285   2288   2302
                                      2315   2324   2325   2326   2327
                                      2328   2329   2330   2331   2332
                                      2333   2334   2335   2351   2352
                                      2353   2663   2680
Long_DA                        $0065    59D   561    651    652    654
                                       655    710    713    716    732
                                       740    741    924    993   1001
                                      1123   1159   1160   1169   1173
Adr_Flags                      $0069    63D  1670   1783   1786   1828
                                      1832   1838   1842   1846   1850
Mode_Flags                     $006a    64D  1217   1245   1254   1264
                                      1276   1286   1296   1309   1323
                                      1337   1351   1367   1413   1431
                                      1434   1549   1570   1579   1590
                                      1591
Op_Code                        $006b    65D  1189   1207   1208   1390
                                      1417   1447   1455   1473   1548
                                      1648   1662   1705   1715   1742
                                      1749   1767   1806
Op_Flag                        $006c    66D  1124   1144   1256   1306
                                      1419   1450   1646   1660   1677
                                      1709   1738   1748   1788   1813
                                      1821   1859   1898
Op_Size                        $006d    67D  1448   1449   1460   1479
                                      1480   1615   1616   1620   1676
                                      1678   1688   1780   1801   1820
                                      1870   1876   1899
Dig_Cnt                        $006e    68D  1941   1953   1979   2027
Buf_Index                      $006f    69D   398   1036   1049   1234
                                      1907   1928   1962   2133   2134
                                      2144   2152   2153   2231   2378
                                      2379   2474   2483   2548
STATUS                         $0090    74D  1024   1081   2506   2511
                                      2525   2622   2661   2679   2739
                                      2747   2757   2763
VERCK                          $0093    75D   434   1065   1074   1082
LRED                           $0096    16D   739    881    895   3136
                                      3137   3138   3139   3140   3141
                                      3142   3143   3144   3145   3146
                                      3147   3148   3149   3150   3151
                                      3152   3153   3154   3155
YELLOW                         $009e    15D   448   1703   2037
FNLEN                          $00b7    76D  1022   1043
SA                             $00b9    77D  1019   1069   1092   2503
FA                             $00ba    78D  1017   1055   2387   2408
                                      2482   2500   2617   2656   2674
                                      2740   2758
FNADR                          $00bb    79D  1026   1028   1042
BA                             $00bd    80D  1021   1059
FNBANK                         $00be    81D  1023
NDX                            $00d0    83
MODE_80                        $00d7    84D   688    792    879    893
B_Margin                       $00e4    86
T_Margin                       $00e5    87
L_Margin                       $00e6    88
R_Margin                       $00e7    89
QTSW                           $00f4    91D   849
Buffer                         $0200    93D   390    399   1037   1491
                                      1493   1502   1506   1514   2135
                                      2154   2380   2391
IIRQ                           $0314    95
IBRK                           $0316    96
EXMON                          $032e    97
X_Vector                       $0400   101D   311    313    501
Ix_Mne                         $0402   102D  1179   1375   1558
Op_Mne                         $0403   103D  1141   1147   1154
Op_Ix                          $0406   104D  1125   1227   1230   1273
                                      1307   1321   1335   1349   1365
                                      1376
Op_Len                         $0407   105D  1126   1229   1429   1435
                                      1438   1586
Disk_Unit                      $0408   106D  1016
Disk_Track                     $0409   107D  2556   2603   2726
Disk_Sector                    $040a   108D  2561   2582   2602   2729
Disk_Status                    $040b   109D  2418   2422   2423   2434
                                      2609
Mon_Data                       $040c   111D   976    986    998   1025
                                      1027   2547   2569   2644   2697
                                      2702   2706   2720   2725
Disk_Msg                       $0434   112D  2413   2420   2428   2432
                                      2450
header                         $1fff   164
Link                           $2029   176D   168
header_loop                    $205a   215D   218    222
Monitor_Call                   $6000   236
Monitor_Break                  $6003   242
Monitor_Switch                 $6006   248
Mon_Break                      $6009   254D   245
Mon_Break_loop                 $601f   268D   266    271
Mon_Break_nopage               $602b   278D   276
Mon_Break_bank                 $6036   283D   281
Mon_Call                       $603c   289D   239
Mon_Call_loop                  $6043   298D   300
Mon_Call_store                 $6055   310D   307
Mon_Start                      $605f   317D   285
Mon_Register                   $606d   332D   483
Mon_Register_loopa             $6072   340D   344
Mon_Register_loopb             $607d   348D   352
Mon_Register_loopc             $6096   365D   373
Mon_Register_flag              $609e   370D   368
Main                           $60a5   377D   401    428    702    756
                                       773    800    825    930    938
                                       959   1005   1009   1072   1084
                                      1087   1111   1130   1613   1623
                                      2247   2493   2588   3157
Main_loop                      $60aa   389D   395
Main_A                         $60aa   386D  1519
Main_getcomm                   $60c0   400D   403
Mon_Switch                     $60c9   407D   251
Mon_Switch_loop                $60cb   411D   414
Mon_Error                      $60d3   419D   393    686    912    914
                                       946    948    967    974   1030
                                      1034   1047   1067   1078   1083
                                      1101   1103   1119   1177   1200
                                      1202   1212   1219   1222   1308
                                      1311   1315   1322   1329   1336
                                      1341   1350   1357   1364   1366
                                      1369   1381   1385   1387   1414
                                      1430   1432   1609   1923   2233
                                      2479   2481   2544   2546   2550
                                      2554   2559
Mon_Select                     $60e0   431D   412
Print_Commands                 $60ed   444D   259    292
Command_Char                   $6107   451D   411
Cons_Prefix                    $6118   458D  1957   2237
Load_Save_Verify               $611d   464
Jump_Table                     $6123   471D   440
Mon_Exit                       $614d   498D   485
LAC_To_PC                      $6150   504D   764    808    819
LAC_To_PC_error                $615e   523D   516
LAC_To_LPC                     $615f   527D   681    729    782   1058
                                      1120   1602   2214   2300   2551
LAC_To_LPC_loop                $6162   532D   535
LAC_To_LCT                     $616b   541D  1233   2270   2312   2564
LAC_To_LCT_loop                $616e   546D   549
LAC_To_LDA                     $6177   555D  2217
LAC_To_LDA_loop                $617a   560D   563
LAC_Plus_LCT                   $6183   569D   922
LAC_Plus_LCT_loop              $6187   575D   579
LAC_Minus_LPC                  $6192   585D   685   1608   2218
LAC_Minus_LPC_loop             $6196   591D   595
LAC_Compare_LPC                $61a1   601D   917
LAC_Compare_LPC_loop           $61a5   607D   610
Inc_LAC                        $61ae   616D   935    955
Inc_LAC_return                 $61b4   622D   620
Dec_LAC                        $61b5   626D   927
Dec_LAC_skip                   $61bd   633D   631
Inc_LPC                        $61c0   638D   752    934    956   1006
                                      1108
Inc_LPC_return                 $61c6   644D   642
Dec_LDA                        $61c7   648D   926
Dec_LDA_skip                   $61cf   655D   653
Fetch                          $61d2   660D   997   1647   1656   1661
                                      1684   1799   1865
Fetch_banked                   $61d9   668D   666
Mon_Memory                     $61df   675D   482
Mon_Memory_shift               $61fa   690D   688    693
Mon_Memory_row                 $6205   697D   680    683    701
Mon_Memory_exit                $6210   702D   698
Print_Bits                     $6213   706D   744
Print_Bits_loop                $6218   712D   718
Print_Bits_set                 $621f   715D   713
Mon_Bits                       $6229   724D   475
Mon_Bits_lab                   $6231   730D   728
Mon_Bits_row                   $623a   735D   755
Mon_Bits_col                   $6240   738D   750
Mon_Set_Register               $6266   760D   489
Mon_Set_Register_loop          $626e   766D   772
Mon_Set_Register_exit          $627d   773D   767
Mon_Set_Memory                 $6280   777D   488
Mon_Set_Memory_loop            $628a   784D   794
Mon_Set_Memory_banked          $6295   789D   787
Mon_Set_Memory_next            $629f   794D   792
Mon_Set_Memory_exit            $62a1   796D   781    785
Mon_Go                         $62ae   804D   479
Mon_JSR                        $62ba   815D   481
Dump_4_Bytes                   $62cc   829D   882    884
Dump_4_Bytes_loop              $62cf   833D   840
Dump_4_Bytes_banked            $62d3   835D   833
Dump_4_Chars                   $62df   845D   896    898
Dump_4_Chars_loop              $62e6   851D   863
Dump_4_Chars_banked            $62ea   853D   851
Dump_4_Chars_laba              $62f3   858D   856
Dump_Row                       $62fe   868D   699    799
Dump_Row_loop                  $6312   881D   879    886
Dump_Row_lchr                  $632d   895D   893    900
Mon_Transfer                   $6340   908D   484
Mon_Transfer_lpback            $6356   924D   929
Mon_Transfer_forward           $636a   932D   918    937
Mon_Compare                    $637e   942D   476
Mon_Compare_loop               $638f   951D   958
Mon_Compare_laba               $639a   955D   953
Mon_Hunt                       $63a8   963D   480
Mon_Hunt_lpstr                 $63bf   976D   981
Mon_Hunt_bin                   $63ce   984D   971
Mon_Hunt_lpbin                 $63d1   985D   991
Mon_Hunt_hunt                  $63e0   993D   979    982    989
Mon_Hunt_lpstart               $63e5   996D  1008
Mon_Hunt_lpins                 $63e7   997D  1002
Mon_Hunt_next                  $63f7  1004D   999
Load_Save                      $6408  1013D   436
Load_Save_skip                 $6423  1029D  1032
Load_Save_copyfn               $6434  1037D  1046
Load_Save_unit                 $644a  1049D  1041
Load_Save_exit                 $6480  1072D  1081
Load_Save_do                   $6483  1074D  1038   1051   1053   1057
                                      1093
Load_Save_exec                 $6490  1080D  1076
Load_Save_load                 $64ab  1089D  1061
Mon_Fill                       $64b5  1097D   478
Mon_Fill_loop                  $64c6  1106D  1110
Mon_Assemble                   $64d6  1115D   474    487
Mon_Assemble_start             $64df  1122D  1133
Mon_Assemble_getin             $64eb  1127D  1150
Mon_Assemble_laba              $64f5  1132D  1128
Mon_Assemble_labb              $650b  1147D  1138   1140   1143
Mon_Assemble_lpenc             $6513  1154D  1164
Mon_Assemble_lpbit             $651b  1158D  1162
Mon_Assemble_lpfind            $652a  1170D  1176
Mon_Assemble_nxfind            $6536  1175D  1171
Mon_Assemble_found             $653c  1179D  1174
Mon_Assemble_lpopc             $6542  1185D  1188
Mon_Assemble_exopc             $654a  1189D  1186
Mon_Assemble_labc              $6570  1216D  1196
Mon_Assemble_labd              $6572  1217D  1248   1258   1267   1287
                                      1300   1313   1331   1343   1359
                                      1371
Mon_Assemble_labf              $6588  1227D  1225
Mon_Assemble_labg              $6598  1234D  1220   1232
Mon_Assemble_lpnop             $659a  1236D  1239
Mon_Assemble_lbra              $65b0  1252D  1244
Mon_Assemble_indir             $65be  1262D  1253
Mon_Assemble_comma             $65ca  1271D  1263
Mon_Assemble_comma1            $65e7  1285D  1277   1279   1281
Mon_Assemble_stack             $65ed  1291D  1272
Mon_Assemble_rbra              $6603  1304D  1292
Mon_Assemble_error             $661c  1315D  1246   1255   1265   1274
                                      1284   1295   1298   1306
Mon_Assemble_right             $661f  1319D  1305
Mon_Assemble_right1            $6638  1330D  1325   1327
Mon_Assemble_X                 $663d  1333D  1320
Mon_Assemble_X1                $6652  1342D  1339
Mon_Assemble_Y                 $6657  1347D  1334
Mon_Assemble_Y1                $6670  1358D  1353   1355
Mon_Assemble_Z                 $6675  1363D  1348
Mon_Assemble_adjust            $668c  1375D  1237
Mon_Assemble_BB                $66a4  1386D  1383
Mon_Assemble_one               $66bc  1400D  1379
Mon_Assemble_lpbrain           $66c6  1405D  1408
Mon_Assemble_branch            $66d0  1413D  1406
Mon_Assemble_bran1             $66e4  1422D  1419
Mon_Assemble_match             $66e6  1426D  1377   1409
Mon_Assemble_lpmatch           $66e9  1427D  1437
Mon_Assemble_okmat             $6705  1438D  1428
Mon_Assemble_store             $6709  1447D  1396   1422
Mon_Assemble_storen            $6729  1463D  1450
Mon_Assemble_lpsto             $672d  1467D  1471
Mon_Assemble_store1            $6737  1473D  1465
Mon_Assemble_print             $673c  1476D  1461
Mon_Assemble_auto              $676a  1499D  1497   1511
Branch_Target                  $6791  1523D  1389   1416   1528
Match_Mode                     $67a4  1543D  1427
Match_Mode_loop                $67a8  1550D  1559
Match_Mode_next                $67ad  1555D  1560
Match_Mode_error               $67ba  1562D  1556
Match_Mode_return              $67bb  1563D  1551
Mode_Index                     $67bc  1567D  1426
Mode_Index_loop                $67c0  1572D  1576
Mode_Index_found               $67cc  1579D  1573
Size_To_Mode                   $67ce  1583D  1436
Mon_Disassemble                $67db  1597D   477
Mon_Disassemble_nopar          $67e8  1605D  1601
range                          $67ee  1608D  1604
Mon_Disassemble_loop           $67f4  1611D  1607   1622
Dis_Code                       $6813  1627D  1614
Print_Code                     $6819  1635D  1478
Print_Code_normal              $683f  1665D  1654   1659
Print_Code_norm1               $6858  1679D  1677
Print_Code_lphex               $685a  1684D  1690
Print_Code_lpfill              $6869  1694D  1699
Print_Code_long                $6877  1703D  1687   1695
Print_Code_locate              $688c  1715D  1708
Print_Code_lpmne               $689d  1725D  1736
Print_Code_lplet               $68a1  1727D  1731
Print_Code_biti                $68c2  1749D  1745
Print_Code_mne4                $68d2  1760D  1747
Print_Code_mne5                $68d5  1761D  1738   1758
Print_Code_lpaccu              $68e1  1769D  1772
Print_Code_oper                $68f1  1780D  1770
Print_Code_laba                $68fd  1786D  1783
Print_Code_labb                $6907  1790D  1785   1788
Print_Code_labc                $690a  1791D  1786
Print_Code_lpfop               $6913  1798D  1802
Print_Code_proper              $6936  1820D  1813
Print_Code_lpoper              $693d  1823D  1821   1826
Print_Code_labd                $695b  1838D  1832
Print_Code_labe                $6963  1842D  1828   1838
Print_Code_labf                $696b  1846D  1818   1842
Print_Code_labg                $6980  1859D  1846   1852
Print_Code_rel                 $699f  1874D  1809
Print_Code_rela                $69a1  1875D  1872
Print_Code_labh                $69ae  1884D  1880
Print_Code_lpinw               $69af  1885D  1887
Print_Code_return              $69c8  1900D  1776   1781   1859   1898
Got_LAC                        $69c9  1904D   984
Get_LAC                        $69cb  1911D   678    682    727    763
                                       766    780    784    807    818
                                       913    947    988   1052   1056
                                      1060   1102   1118   1600   1603
                                      2212   2215   2232   2549   2553
                                      2558   2563
Get_LAC_error                  $69df  1923D  1915
Get_LAC_noval                  $69e2  1925D  1916
Get_LAC_end                    $69e4  1928D  1918
Get_LAC_ok                     $69e6  1929D  1920   1922
Read_Number                    $69e8  1934D  1218   1914   2475
Read_Number_numeric            $6a09  1956D  1950
Read_Number_prefix             $6a0b  1957D  1960
Read_Number_digit              $6a16  1964D  1958   2015   2017   2019
Read_Number_valid              $6a2d  1975D  1969
Read_Number_push               $6a3e  1985D  1989
Read_Number_laba               $6a45  1991D  1982
Read_Number_shift              $6a48  1992D  1997
Read_Number_pull               $6a5d  2004D  2009
Read_Number_labc               $6a66  2011D  2000
Read_Number_error              $6a76  2021D  1977   1995
Read_Number_exit               $6a79  2023D  1948   1954   1965   1967
                                      1971   1973
Read_Number_return             $6a7a  2024D  2022
Hex_LPC                        $6a80  2032D   736    875    954   1003
                                      1640
Hex_LPC_laba                   $6a99  2046D  2036
Hex_LPC_labb                   $6aa0  2049D  2045   2047
Print_XA_Hex                   $6aa4  2054D  1897
Print_Hex_Blank                $6aaa  2064D   349    359    836   1685
Print_Blank                    $6aad  2071D  1641   1760   1761   2521
Print_CR                       $6ab2  2079D   380    730    751    872
                                       949    994   1062   1104   2448
                                      2455   2530
CR_Erase                       $6ab7  2087D  1611   2236
Print_Hex                      $6abf  2096D   341    357   1815   1824
                                      2040   2042   2048   2059   2067
A_To_Hex                       $6acb  2108D  1501   2100
A_To_Hex_nibble                $6ad5  2120D  2112
A_To_Hex_lab                   $6add  2124D  2122
Get_Glyph                      $6ae0  2129D  1947   2469
Get_Glyph_loop                 $6ae3  2133D  2136
Got_Char                       $6aed  2141D  1917
Get_Char                       $6aef  2148D   400    969    972    978
                                      1029   1050   1127   1198   1210
                                      1236   1293   1951   1964   2484
                                      2542
Get_Char_regc                  $6b04  2162D  2157
Get_Char_return                $6b0a  2165D  2159   2161   2163
Dec_LCT                        $6b0b  2170D   928    936    957   1007
                                      1109
Dec_LCT_skip                   $6b13  2177D  2175
Add_LPC                        $6b18  2183D   902   1481   1617
Inc_LPC_Page                   $6b1f  2192D  2581
Add_LPC_return                 $6b25  2198D  2189   2196
Param_Range                    $6b26  2201D   911    945    966   1100
Param_Range_error              $6b3d  2222D  2213   2216   2219
Converter                      $6b3f  2227D   491    492    493    494
Converter_loop                 $6b4b  2235D  2246
Conv_Tab                       $6b64  2249D  2242
Print_Dual                     $6b6c  2256D  2252
Print_Octal                    $6b72  2264D  2251
Print_Dual_entry               $6b76  2270D  2261
Print_Dual_loopa               $6b80  2275D  2291
Print_Dual_loopb               $6b84  2278D  2282
Print_Dual_skip                $6b95  2287D  2284
Print_Dual_next                $6b9c  2290D  2286
Print_Hexval                   $6ba1  2297D  2249
Print_Decimal                  $6baa  2307D  2250   2520
Print_Decimal_clear            $6bb1  2315D  2317
Print_Decimal_loop             $6bb9  2321D  2337
Print_BCD                      $6bdc  2342D  2303
Print_BCD_loopa                $6be4  2349D  2369
Print_BCD_loopb                $6be8  2351D  2356
Print_BCD_skip                 $6bfb  2362D  2359
Print_BCD_print                $6c05  2367D  2365
Print_BCD_next                 $6c08  2368D  2361
Mon_Disk                       $6c0c  2375D  2492
Mon_Disk_lab                   $6c1f  2387D  2385
Mon_Disk_loop                  $6c28  2391D  2395
Mon_Disk_close                 $6c33  2396D  2392
Get_Disk_Status                $6c3f  2405D  2442   2597   2606
Get_Disk_Status_loop           $6c66  2426D  2430
Print_Disk_Status              $6c7d  2439D  2381   2399   2748   2764
Print_Disk_Msg                 $6c80  2445D  2586   2608
Print_Disk_Status_loop         $6c85  2450D  2454
Print_Disk_Status_exit         $6c90  2455D  2451
Mon_DOS                        $6c93  2465D   486
Mon_DOS_unit                   $6cb3  2482D  2471   2473   2476
Mon_DOS_next                   $6cb7  2484D  2487   2489
Mon_DOS_status                 $6cc8  2492D  2485
Directory                      $6cce  2497D  2400
Directory_loopb                $6ce0  2509D  2514   2534
Directory_loopc                $6cf9  2523D  2528
Directory_cr                   $6d07  2530D  2524
Directory_exit                 $6d13  2535D  2512   2526   2532
DOS_U                          $6d16  2539D  2491
DOS_U_loop                     $6d52  2569D  2584
DOS_U_write                    $6d62  2577D  2571
DOS_U_next                     $6d6a  2581D  2575
DOS_U_error                    $6d74  2586D  2573   2579
Find_Next_Sector               $6d7d  2592D  2572   2578
Find_Next_Sector_error         $6d9f  2608D  2600
Find_Next_Sector_return        $6da5  2610D  2598   2607
Open_Command_Channel           $6da6  2614D  2630   2643
Reset_BP                       $6db5  2627D  2673
Reset_BP_loop                  $6db8  2631D  2635
Reset_BP_end                   $6dc3  2636D  2632
Send_Disk_Command              $6dc6  2640D  2596   2605
Send_Disk_Command_loop         $6dc9  2644D  2648
Send_Disk_Command_end          $6dd4  2649D  2645
Read_Sector                    $6dd7  2653D  2574
Read_Sector_loop               $6de5  2662D  2665
Write_Sector                   $6df1  2670D  2577
Write_Sector_loop              $6e02  2680D  2683
Set_TS                         $6e0f  2689D  2728   2731
Set_TS_100                     $6e0f  2695D  2699
Set_TS_10                      $6e1a  2700D  2696   2704
Set_TS_1                       $6e25  2705D  2701
Build_U_String                 $6e2b  2715D  2595   2604
Build_U_String_loop            $6e2d  2719D  2723
Open_Disk_Buffer               $6e4d  2735D  2567
Close_Disk_Buffer              $6e69  2753D  2587
MNE_L                          $6e80  2785D  1170   1717
MNE_R                          $6edb  2881D  1172   1719
MNE_Index                      $6f36  2977D  1185   1557   1716
BRAIN                          $7036  3017D  1405
LEN_ADM                        $7040  3026D  1550   1665   1706   1807
ADMODE                         $7140  3080D  1572   1669
ACCUMODE                       $7150  3112D  1771
Num_Base                       $7158  3114D  1976
Num_Bits                       $715c  3115D  1991
Index_Char                     $7160  3117D  1854
U1                             $7163  3120D  2719
BP_ZERO                        $7172  3121D  2631
Reg_Text                       $717a  3124D   335
Mon_Help                       $71ad  3132D   490
End_Mod                        $745f  3158
EXIT_OLD                       $cf2e   114D   308    309
EXIT                           $cfa4   115D   265    304    305    306
SETBNK                         $ff6b   117
JSRFAR                         $ff6e   118D   822
JMPFAR                         $ff71   119D   811
LDA_FAR                        $ff74   120
STA_FAR                        $ff77   121
CMP_FAR                        $ff7a   122
PRIMM                          $ff7d   123D   257    424    447    796
                                       888   1085   1476   1487   1630
                                      1696   2090   3126   3134
CINT                           $ff81   124
IOINIT                         $ff84   125
SETMSG                         $ff90   126D   326
SECOND                         $ff93   127D  2390   2620   2743   2761
TKSA                           $ff96   128D  2411   2504   2659   2677
MEMTOP                         $ff99   129
MEMBOT                         $ff9c   130
KEY                            $ff9f   131
SETTMO                         $ffa2   132
ACPTR                          $ffa5   133D  2412   2419   2427   2510
                                      2523   2662
CIOUT                          $ffa8   134D  2393   2633   2646   2681
                                      2745
UNTALK                         $ffab   135D  2433   2535   2666
UNLSN                          $ffae   136D  2396   2636   2649   2684
                                      2746   2762
LISTEN                         $ffb1   137D  2388   2618   2675   2741
                                      2759
TALK                           $ffb4   138D  2409   2501   2657
READSS                         $ffb7   139
SETLFS                         $ffba   140
SETNAM                         $ffbd   141
OPEN                           $ffc0   142
CLOSE                          $ffc3   143
CHKIN                          $ffc6   144
CHKOUT                         $ffc9   145
CLRCHN                         $ffcc   146
CHRIN                          $ffcf   147D   389
CHROUT                         $ffd2   148D   370    715    742    832
                                       850    859    874   1503   1507
                                      1515   1704   1711   1734   1757
                                      1763   1775   1790   1792   1817
                                      1830   1834   1836   1840   1844
                                      1848   1855   1861   1863   2038
                                      2044   2075   2083   2101   2104
                                      2238   2289   2367   2452   2527
LOAD                           $ffd5   149D  1080
SAVE                           $ffd8   150D  1071
SETTIM                         $ffdb   151
GETTIM                         $ffde   152
STOP                           $ffe1   153D   697   1004   1612   2531
GETIN                          $ffe4   154
CLALL                          $ffe7   155
SCAN                           $ffea   156
SCRORG                         $ffed   157
PLOT                           $fff0   158
Long_AC                        $0059    56D   205    207    215    219
                                       517    519    521    532    546
                                       560    575    577    591    607
                                       619    621    629    630    632
                                       633    768    786    925    933
                                       952    985   1054   1063   1064
                                      1106   1221   1224   1391   1393
                                      1394   1402   1403   1458   1467
                                      1526   1533   1535   1536   1538
                                      1718   1720   1727   1728   1797
                                      1800   1814   1823   1866   1868
                                      1879   1882   1885   1890   1893
                                      1942   1943   1944   1945   1952
                                      1985   1992   1993   1994   2005
                                      2006   2013   2014   2016   2018
                                      2477   2516   2517   2518   2519
                                      2555   2560
Long_PC                        $0061    58D   533    592    608    641
                                       643    666    668    743    787
                                       789    833    835    851    853
                                       932    951   1070   1089   1090
                                      1107   1453   1456   1459   1468
                                      1474   1496   1500   1534   1537
                                      1891   1894   2035   2041   2046
                                      2049   2050   2187   2188   2195
                                      2197   2272   2285   2288   2302
                                      2315   2324   2325   2326   2327
                                      2328   2329   2330   2331   2332
                                      2333   2334   2335   2351   2352
                                      2353   2663   2680
Long_CT                        $005d    57D   208    209    211    212
                                       216    220    547    576    593
                                       690    691    694   1386   1392
                                      1400   1401   1606   1618   1621
                                      2173   2174   2176   2177   2178
                                      2278   2279   2321   2322   2323
                                      2346   2360   2363   2382   2397
                                      2565   2583
WHITE                          $0005    14D   467    731    739    883
                                       897   1762   2043   3136   3137
                                      3138   3139   3140   3141   3142
                                      3143   3144   3145   3146   3147
                                      3148   3149   3150   3151   3152
                                      3153   3154   3155
LRED                           $0096    16D   739    881    895   3136
                                      3137   3138   3139   3140   3141
                                      3142   3143   3144   3145   3146
                                      3147   3148   3149   3150   3151
                                      3152   3153   3154   3155
CR                             $000d    18D   394    448   1488   3136
                                      3137   3138   3139   3140   3141
                                      3142   3143   3144   3145   3146
                                      3147   3148   3149   3150   3151
                                      3152   3153   3154   3155
Mode_Flags                     $006a    64D  1217   1245   1254   1264
                                      1276   1286   1296   1309   1323
                                      1337   1351   1367   1413   1431
                                      1434   1549   1570   1579   1590
                                      1591
Long_DA                        $0065    59D   561    651    652    654
                                       655    710    713    716    732
                                       740    741    924    993   1001
                                      1123   1159   1160   1169   1173
Buf_Index                      $006f    69D   398   1036   1049   1234
                                      1907   1928   1962   2133   2134
                                      2144   2152   2153   2231   2378
                                      2379   2474   2483   2548
Op_Size                        $006d    67D  1448   1449   1460   1479
                                      1480   1615   1616   1620   1676
                                      1678   1688   1780   1801   1820
                                      1870   1876   1899
Op_Flag                        $006c    66D  1124   1144   1256   1306
                                      1419   1450   1646   1660   1677
                                      1709   1738   1748   1788   1813
                                      1821   1859   1898
Op_Code                        $006b    65D  1189   1207   1208   1390
                                      1417   1447   1455   1473   1548
                                      1648   1662   1705   1715   1742
                                      1749   1767   1806
STATUS                         $0090    74D  1024   1081   2506   2511
                                      2525   2622   2661   2679   2739
                                      2747   2757   2763
FA                             $00ba    78D  1017   1055   2387   2408
                                      2482   2500   2617   2656   2674
                                      2740   2758
Adr_Flags                      $0069    63D  1670   1783   1786   1828
                                      1832   1838   1842   1846   1850
Bank                           $0002    28D   281    284    340    348
                                       518    520    522    769
SPL                            $000c    43D   324    358    809    820
                                       824
MODE_80                        $00d7    84D   688    792    879    893
SA                             $00b9    77D  1019   1069   1092   2503
VERCK                          $0093    75D   434   1065   1074   1082
Dig_Cnt                        $006e    68D  1941   1953   1979   2027
FNADR                          $00bb    79D  1026   1028   1042
YELLOW                         $009e    15D   448   1703   2037
PCL                            $0004    30D   275    278    310
PCH                            $0003    29D   269    277    312
BA                             $00bd    80D  1021   1059
FNLEN                          $00b7    76D  1022   1043
APOSTR                         $0027    22D   970   1949
QUOTE                          $0022    21D  1033   1040
SPH                            $000b    42D   322    356
QTSW                           $00f4    91D   849
FNBANK                         $00be    81D  1023
CRIGHT                         $001d    20D   425
REV                            $0012    19D   448
AC                             $0006    32D   298
SR                             $0005    31D   364
R_Margin                       $00e7    89
L_Margin                       $00e6    88
T_Margin                       $00e5    87
B_Margin                       $00e4    86
NDX                            $00d0    83
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
Long_AC                        $0059    56D   205    207    215    219
                                       517    519    521    532    546
                                       560    575    577    591    607
                                       619    621    629    630    632
                                       633    768    786    925    933
                                       952    985   1054   1063   1064
                                      1106   1221   1224   1391   1393
                                      1394   1402   1403   1458   1467
                                      1526   1533   1535   1536   1538
                                      1718   1720   1727   1728   1797
                                      1800   1814   1823   1866   1868
                                      1879   1882   1885   1890   1893
                                      1942   1943   1944   1945   1952
                                      1985   1992   1993   1994   2005
                                      2006   2013   2014   2016   2018
                                      2477   2516   2517   2518   2519
                                      2555   2560
Long_PC                        $0061    58D   533    592    608    641
                                       643    666    668    743    787
                                       789    833    835    851    853
                                       932    951   1070   1089   1090
                                      1107   1453   1456   1459   1468
                                      1474   1496   1500   1534   1537
                                      1891   1894   2035   2041   2046
                                      2049   2050   2187   2188   2195
                                      2197   2272   2285   2288   2302
                                      2315   2324   2325   2326   2327
                                      2328   2329   2330   2331   2332
                                      2333   2334   2335   2351   2352
                                      2353   2663   2680
Long_CT                        $005d    57D   208    209    211    212
                                       216    220    547    576    593
                                       690    691    694   1386   1392
                                      1400   1401   1606   1618   1621
                                      2173   2174   2176   2177   2178
                                      2278   2279   2321   2322   2323
                                      2346   2360   2363   2382   2397
                                      2565   2583
WHITE                          $0005    14D   467    731    739    883
                                       897   1762   2043   3136   3137
                                      3138   3139   3140   3141   3142
                                      3143   3144   3145   3146   3147
                                      3148   3149   3150   3151   3152
                                      3153   3154   3155
LRED                           $0096    16D   739    881    895   3136
                                      3137   3138   3139   3140   3141
                                      3142   3143   3144   3145   3146
                                      3147   3148   3149   3150   3151
                                      3152   3153   3154   3155
CR                             $000d    18D   394    448   1488   3136
                                      3137   3138   3139   3140   3141
                                      3142   3143   3144   3145   3146
                                      3147   3148   3149   3150   3151
                                      3152   3153   3154   3155
Mode_Flags                     $006a    64D  1217   1245   1254   1264
                                      1276   1286   1296   1309   1323
                                      1337   1351   1367   1413   1431
                                      1434   1549   1570   1579   1590
                                      1591
Long_DA                        $0065    59D   561    651    652    654
                                       655    710    713    716    732
                                       740    741    924    993   1001
                                      1123   1159   1160   1169   1173
Buf_Index                      $006f    69D   398   1036   1049   1234
                                      1907   1928   1962   2133   2134
                                      2144   2152   2153   2231   2378
                                      2379   2474   2483   2548
Op_Size                        $006d    67D  1448   1449   1460   1479
                                      1480   1615   1616   1620   1676
                                      1678   1688   1780   1801   1820
                                      1870   1876   1899
Op_Flag                        $006c    66D  1124   1144   1256   1306
                                      1419   1450   1646   1660   1677
                                      1709   1738   1748   1788   1813
                                      1821   1859   1898
Op_Code                        $006b    65D  1189   1207   1208   1390
                                      1417   1447   1455   1473   1548
                                      1648   1662   1705   1715   1742
                                      1749   1767   1806
Mon_Data                       $040c   111D   976    986    998   1025
                                      1027   2547   2569   2644   2697
                                      2702   2706   2720   2725
Buffer                         $0200    93D   390    399   1037   1491
                                      1493   1502   1506   1514   2135
                                      2154   2380   2391
STATUS                         $0090    74D  1024   1081   2506   2511
                                      2525   2622   2661   2679   2739
                                      2747   2757   2763
FA                             $00ba    78D  1017   1055   2387   2408
                                      2482   2500   2617   2656   2674
                                      2740   2758
Op_Ix                          $0406   104D  1125   1227   1230   1273
                                      1307   1321   1335   1349   1365
                                      1376
Adr_Flags                      $0069    63D  1670   1783   1786   1828
                                      1832   1838   1842   1846   1850
Bank                           $0002    28D   281    284    340    348
                                       518    520    522    769
Op_Len                         $0407   105D  1126   1229   1429   1435
                                      1438   1586
Disk_Msg                       $0434   112D  2413   2420   2428   2432
                                      2450
Disk_Status                    $040b   109D  2418   2422   2423   2434
                                      2609
SPL                            $000c    43D   324    358    809    820
                                       824
Disk_Sector                    $040a   108D  2561   2582   2602   2729
MODE_80                        $00d7    84D   688    792    879    893
SA                             $00b9    77D  1019   1069   1092   2503
VERCK                          $0093    75D   434   1065   1074   1082
Dig_Cnt                        $006e    68D  1941   1953   1979   2027
Disk_Track                     $0409   107D  2556   2603   2726
Op_Mne                         $0403   103D  1141   1147   1154
Ix_Mne                         $0402   102D  1179   1375   1558
X_Vector                       $0400   101D   311    313    501
FNADR                          $00bb    79D  1026   1028   1042
YELLOW                         $009e    15D   448   1703   2037
PCL                            $0004    30D   275    278    310
PCH                            $0003    29D   269    277    312
header_loop                    $205a   215D   218    222
BA                             $00bd    80D  1021   1059
FNLEN                          $00b7    76D  1022   1043
APOSTR                         $0027    22D   970   1949
QUOTE                          $0022    21D  1033   1040
SPH                            $000b    42D   322    356
Link                           $2029   176D   168
Disk_Unit                      $0408   106D  1016
QTSW                           $00f4    91D   849
FNBANK                         $00be    81D  1023
CRIGHT                         $001d    20D   425
REV                            $0012    19D   448
AC                             $0006    32D   298
SR                             $0005    31D   364
header                         $1fff   164
EXMON                          $032e    97
IBRK                           $0316    96
IIRQ                           $0314    95
R_Margin                       $00e7    89
L_Margin                       $00e6    88
T_Margin                       $00e5    87
B_Margin                       $00e4    86
NDX                            $00d0    83
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
