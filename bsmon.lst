              *******************************
              * BSM = Bit Shifter's Monitor *
              * for The MEGA65  29-Dec_2020 *
              *******************************

              .CPU 45GS02

              .STORE $6000,$2000,"bsmon.rom"

              *************
              * Constants *
              *************

0005          WHITE  = $05
009e          YELLOW = $9e
0096          LRED   = $96

000d          CR     = $0d
0012          REV    = $12
001d          CRIGHT = $1d
0022          QUOTE  = $22
0027          APOSTR = $27

              ************************************************
              * Register storage for JMPFAR and JSRFAR calls *
              ************************************************

0002          Bank       =  2
0003          PCH        =  3
0004          PCL        =  4
0005          SR         =  5
0006          AC         =  6
0007          XR         =  7
0008          YR         =  8
0009          ZR         =  9

              *************************************
              * Used direct (zero) page addresses *
              *************************************

000a          BP         = 10
000b          SPH        = 11
000c          SPL        = 12

              ; following variables overlap with the BASIC floating point area

              ; $59 - $5d : temporary floating point accumulator
              ; $5e - $62 : temporary floating point accumulator
              ; $63 - $69 : primary   floating point accumulator
              ; $6a - $6f : secondary floating point accumulator

              ; A set of 32 bit variables also used as 32 bit pointer

0059          & = $59

0059          Long_AC    .BSS 4  ; 32 bit accumulator
005d          Long_CT    .BSS 4  ; 32 bit counter
0061          Long_PC    .BSS 4  ; 32 bit program counter
0065          Long_DA    .BSS 4  ; 32 bit data pointer

              ; Flags are  used in BBR BBS instructions

0069          Adr_Flags  .BSS 1
006a          Mode_Flags .BSS 1
006b          Op_Code    .BSS 1
006c          Op_Flag    .BSS 1  ; 7: two operands
                                 ; 6: long branch
                                 ; 5: 32 bit address
                                 ; 4: Q register
006d          Op_Size    .BSS 1
006e          Dig_Cnt    .BSS 1
006f          Buf_Index  .BSS 1

              ; operating system variables


0090          STATUS     = $90
0093          VERCK      = $93
00b7          FNLEN      = $b7
00b9          SA         = $b9
00ba          FA         = $ba
00bb          FNADR      = $bb
00bd          BA         = $bd
00be          FNBANK     = $be

00d0          NDX        = $d0        ; length of keyboard buffer
00d7          MODE_80    = $d7        ; 80 column / 40 volumn flag

00e4          B_Margin   = $e4        ; SCBOT  default = 24
00e5          T_Margin   = $e5        ; SCTOP  default =  0
00e6          L_Margin   = $e6        ; SCLF   default =  0
00e7          R_Margin   = $e7        ; SCRT   default = 39 or 79

00f4          QTSW       = $f4        ; Quote switch

0200          Buffer     = $0200      ; input buffer

0314          IIRQ       = $0314
0316          IBRK       = $0316
032e          EXMON      = $032e

0400          & = $400                ; bottom of BASIC runtime stack
                                      ; should be a safe space
0400          X_Vector    .BSS  2     ; exit vector (ROM version dependent)
0402          Ix_Mne      .BSS  1     ; index to mnemonics table
0403          Op_Mne      .BSS  3     ; 3 bytes for mnemonic
0406          Op_Ix       .BSS  1     ; type of constant
0407          Op_Len      .BSS  1     ; length of operand
0408          Disk_Unit   .BSS  1     ; unit = device
0409          Disk_Track  .BSS  1     ; logical track  1 -> 255
040a          Disk_Sector .BSS  1     ; logical sector 0 -> 255
040b          Disk_Status .BSS  1     ; BCD value of status

040c          Mon_Data    .BSS 40     ; buffer for hunt and filename
0434          Disk_Msg    .BSS 40     ; disk status as text message

cf2e          EXIT_OLD   = $cf2e      ; exit address for ROM 910110
cfa4          EXIT       = $cfa4      ; exit address for ROM 911001

ff6b          SETBNK     = $ff6b
ff6e          JSRFAR     = $ff6e
ff71          JMPFAR     = $ff71
ff74          LDA_FAR    = $ff74
ff77          STA_FAR    = $ff77
ff7a          CMP_FAR    = $ff7a
ff7d          PRIMM      = $ff7d
ff81          CINT       = $ff81
ff84          IOINIT     = $ff84
ff90          SETMSG     = $ff90
ff93          SECOND     = $ff93
ff96          TKSA       = $ff96
ff99          MEMTOP     = $ff99
ff9c          MEMBOT     = $ff9c
ff9f          KEY        = $ff9f
ffa2          SETTMO     = $ffa2
ffa5          ACPTR      = $ffa5
ffa8          CIOUT      = $ffa8
ffab          UNTALK     = $ffab
ffae          UNLSN      = $ffae
ffb1          LISTEN     = $ffb1
ffb4          TALK       = $ffb4
ffb7          READSS     = $ffb7
ffba          SETLFS     = $ffba
ffbd          SETNAM     = $ffbd
ffc0          OPEN       = $ffc0
ffc3          CLOSE      = $ffc3
ffc6          CHKIN      = $ffc6
ffc9          CHKOUT     = $ffc9
ffcc          CLRCHN     = $ffcc
ffcf          CHRIN      = $ffcf
ffd2          CHROUT     = $ffd2
ffd5          LOAD       = $ffd5
ffd8          SAVE       = $ffd8
ffdb          SETTIM     = $ffdb
ffde          GETTIM     = $ffde
ffe1          STOP       = $ffe1
ffe4          GETIN      = $ffe4
ffe7          CLALL      = $ffe7
ffea          SCAN       = $ffea
ffed          SCRORG     = $ffed
fff0          PLOT       = $fff0

1fff          * = $1fff
                      .STORE $1fff,$0101,"bsm.prg"

              *************
              Module header
              *************

1fff 01 20            .WORD $2001             ; load address
2001 29 20            .WORD Link              ; line link
2003 e4 07            .WORD 2020              ; line number
2005 fe 02            .BYTE $fe,$02           ; BANK token
2007 30 3a            .BYTE "0:"              ; BANK argument
2009 9e               .BYTE $9e               ; SYS  token
200a 28 38 32         .BYTE "(8235):"         ; $202d
2011 8f               .BYTE $8f               ; REM  token
2012 20 42 49         .BYTE " BIT SHIFTER 29-DEC-20",0
2029 00 00    Link    .WORD 0                 ; BASIC end marker

                      ; copy image to $030000

202b 78               SEI

              ; map memory to monitor configuration

202c a9 a0            LDA  #$a0
202e a2 82            LDX  #$82
2030 a0 00            LDY  #$00
2032 a3 83            LDZ  #$83
2034 5c               MAP
2035 ea               EOM

              ; VIC IV registers visible

2036 a9 47            LDA  #$47
2038 8d 2f d0         STA  $d02f
203b a9 53            LDA  #$53
203d 8d 2f d0         STA  $d02f

              ; toggle write protection

2040 a9 70            LDA  #$70
2042 8d 40 d6         STA  $D640
2045 ea               NOP

2046 a3 00            LDZ  #0
2048 64 59            STZ  Long_AC
204a a9 21            LDA  #$21
204c 85 5a            STA  Long_AC+1
204e 64 5d            STZ  Long_CT
2050 64 5e            STZ  Long_CT+1
2052 a9 03            LDA  #3
2054 85 5f            STA  Long_CT+2
2056 64 60            STZ  Long_CT+3
2058 a2 20            LDX  #$20

205a b2 59    _loop   LDA  (Long_AC),Z
205c ea 92 5d         STA  [Long_CT],Z
205f 1b               INZ
2060 d0 f8            BNE  _loop
2062 e6 5a            INC  Long_AC+1
2064 e6 5e            INC  Long_CT+1
2066 ca               DEX
2067 d0 f1            BNE  _loop

2069 a9 70            LDA  #$70
206b 8d 40 d6         STA  $D640              ; toggle write protection
206e ea               NOP

206f 60               RTS
2070          EndMod [header] Size = 113 [$71]

2070 00 00 00         .FILL $2100-* (0) ; 144 bytes

6000          * = $6000

              ********************
6000          Monitor_Call ; $6000
              ********************

6000 4c 3c 60          JMP  Mon_Call

              *********************
6003          Monitor_Break ; $6003
              *********************

6003 4c 09 60          JMP  Mon_Break

              **********************
6006          Monitor_Switch ; $6009
              **********************

6006 4c c9 60          JMP  Mon_Switch

              ****************
              Module Mon_Break
              ****************

6009 20 7d ff          JSR  PRIMM
600c 0d 42 52          .BYTE "\rBREAK\a",0
6014 20 ed 60          JSR  Print_Commands

              ; pull BP, Z, Y, X, A,SR,PCL,PCH
              ;       7  6  5  4  3  2  1  0

6017 a2 07             LDX  #7
6019 2c a4 cf          BIT  EXIT      ; version
601c 10 01             BPL  _loop
601e ca                DEX
601f 68       _loop    PLA
6020 95 03             STA  PCH,X
6022 ca                DEX
6023 10 fa             BPL  _loop

              ; decrement PC to point after BRK

6025 a5 04             LDA  PCL
6027 d0 02             BNE  _nopage
6029 c6 03             DEC  PCH
602b c6 04    _nopage  DEC  PCL

602d ad 1d 01          LDA  $011d
6030 7f 02 03          BBR7 Bank,_bank
6033 ad 1f 01          LDA  $011f
6036 29 0f    _bank    AND  #15
6038 85 02             STA  Bank
603a 80 23             BRA  Mon_Start
603c          EndMod [Mon_Break] Size = 51 [$33]

              ***************
              Module Mon_Call
              ***************

603c 20 ed 60          JSR  Print_Commands

              ;        clear register for monitor call

603f a9 00             LDA  #0
6041 a2 06             LDX  #6
6043 95 06    _loop    STA  AC,X
6045 ca                DEX
6046 10 fb             BPL  _loop

              ;        set default PC to "exit to BASIC"

6048 a9 a4             LDA  #<EXIT     ; ROM 911110
604a a2 cf             LDX  #>EXIT
604c 2c a4 cf          BIT  EXIT       ; $20 (JSR) or $ff ?
604f 10 04             BPL  _store
6051 a9 2e             LDA  #<EXIT_OLD ; ROM 910111
6053 a2 cf             LDX  #>EXIT_OLD
6055 85 04    _store   STA  PCL
6057 8d 00 04          STA  X_Vector
605a 86 03             STX  PCH
605c 8e 01 04          STX  X_Vector+1
605f          EndMod [Mon_Call] Size = 35 [$23]

              ****************
              Module Mon_Start
              ****************

605f d8                CLD
6060 0b                TSY
6061 84 0b             STY  SPH
6063 ba                TSX
6064 86 0c             STX  SPL
6066 a9 c0             LDA  #$c0
6068 20 90 ff          JSR  SETMSG
606b 58                CLI
606c ea                NOP
606d          EndMod [Mon_Start] Size = 14 [$e]

              ***************************
              Module Mon_Register ; $6042
              ***************************

606d 20 fc 71          JSR  Reg_Text

              ; print Bank,PCH

6070 a0 00             LDY  #0
6072 b9 02 00 _loopa   LDA  Bank,Y
6075 20 31 6b          JSR  Print_Hex
6078 c8                INY
6079 c0 02             CPY  #2
607b 90 f5             BCC  _loopa

              ; print SR,PCL,A,X,Y,Z,BP

607d b9 02 00 _loopb   LDA  Bank,Y
6080 20 1c 6b          JSR  Print_Hex_Blank
6083 c8                INY
6084 c0 09             CPY  #9
6086 90 f5             BCC  _loopb

              ; print 16 bit stack pointer

6088 a5 0b             LDA  SPH
608a 20 31 6b          JSR  Print_Hex
608d a5 0c             LDA  SPL
608f 20 1c 6b          JSR  Print_Hex_Blank

              ; print flags

6092 a0 08             LDY  #8
6094 a5 05             LDA  SR
6096 0a       _loopc   ASL  A
6097 48                PHA
6098 a9 2d             LDA  #'-'
609a 90 02             BCC  _flag
609c a9 31             LDA  #'1'
609e 20 d2 ff _flag    JSR  CHROUT
60a1 68                PLA
60a2 88                DEY
60a3 d0 f1             BNE  _loopc
60a5          EndMod [Mon_Register] Size = 56 [$38]

              ***********
              Module Main
              ***********

60a5 20 24 6b          JSR  Print_CR
60a8 a2 00             LDX  #0

              ; read one line into buffer

              ******
60aa          Main_A
              ******

60aa 20 cf ff _loop    JSR  CHRIN
60ad 9d 00 02          STA  Buffer,X
60b0 e8                INX
60b1 e0 50             CPX  #80
60b3 b0 1e             BCS  Mon_Error         ; input too long
60b5 c9 0d             CMP  #CR
60b7 d0 f1             BNE  _loop

60b9 a9 00             LDA  #0
60bb 85 6f             STA  Buf_Index
60bd 9d ff 01          STA  Buffer-1,X        ; terminate buffer
60c0 20 61 6b _getcomm JSR  Get_Char
60c3 f0 e0             BEQ  Main
60c5 c9 20             CMP  #' '
60c7 f0 f7             BEQ  _getcomm
60c9          EndMod [Main] Size = 36 [$24]

              *****************
              Module Mon_Switch
              *****************

60c9 a2 18             LDX  #24
60cb dd 07 61 _loop    CMP  Command_Char,X
60ce f0 10             BEQ  Mon_Select
60d0 ca                DEX
60d1 10 f8             BPL  _loop

              ;        fall through to error routine if not found

              ****************
              Module Mon_Error
              ****************

              ; put a question mark at the end of the text

60d3 20 7d ff          JSR  PRIMM
60d6 1b 4f 1d          .BYTE "\eO",CRIGHT,'?',0
60db a2 f8             LDX  #$f8              ; reset stack pointer
60dd 9a                TXS
60de 80 c5             BRA  Main

              *****************
              Module Mon_Select
              *****************

60e0 85 93             STA  VERCK
60e2 e0 16             CPX  #22
60e4 b3 38 03          LBCS  Load_Save
60e7 8a                TXA
60e8 0a                ASL  A
60e9 aa                TAX
60ea 7c 23 61          JMP  (Jump_Table,X)
60ed          EndMod [Mon_Select] Size = 13 [$d]

              **************
60ed          Print_Commands
              **************

60ed 20 7d ff          JSR  PRIMM
60f0 0d 9e 12          .BYTE CR,YELLOW,REV,"BS MONITOR COMMANDS:"

              ************
6107          Command_Char
              ************

                       ;      0123456789abcdef
6107 41 42 43          .BYTE "ABCDFGHJMRTX@.>;?"

              ***********
6118          Cons_Prefix
              ***********

6118 24 2b 26          .BYTE "$+&%'"

              ****************
611d          Load_Save_Verify
              ****************

611d 4c 53 56          .BYTE "LSV",WHITE,0
6122 60                RTS

              **********
6123          Jump_Table
              **********

6123 ec 64             .WORD Mon_Assemble     ; A
6125 2d 62             .WORD Mon_Bits         ; B
6127 8e 63             .WORD Mon_Compare      ; C
6129 f1 67             .WORD Mon_Disassemble  ; D
612b cb 64             .WORD Mon_Fill         ; F
612d b2 62             .WORD Mon_Go           ; G
612f be 63             .WORD Mon_Hunt         ; H
6131 be 62             .WORD Mon_JSR          ; J
6133 e3 61             .WORD Mon_Memory       ; M
6135 6d 60             .WORD Mon_Register     ; R
6137 44 63             .WORD Mon_Transfer     ; T
6139 4f 61             .WORD Mon_Exit         ; X
613b 15 6d             .WORD Mon_DOS          ; @
613d ec 64             .WORD Mon_Assemble     ; .
613f 84 62             .WORD Mon_Set_Memory   ; >
6141 6a 62             .WORD Mon_Set_Register ; ;
6143 2f 72             .WORD Mon_Help         ; ?
6145 b1 6b             .WORD Converter        ; $
6147 b1 6b             .WORD Converter        ; +
6149 b1 6b             .WORD Converter        ; &
614b b1 6b             .WORD Converter        ; %
614d b1 6b             .WORD Converter        ; '


              ***************
              Module Mon_Exit
              ***************

614f 6c 00 04          JMP  (X_Vector)

              ****************
              Module LAC_To_PC
              ****************

              ; called from Mon_Set_Register, Mon_Go and Mon_JSR
              ; as the first instruction. The carry flag was set from
              ; the routine Got_LAC if an error occured.
              ; Notice that the Bank, PCH and PCL values are stored
              ; high to low, reverse to the standard order.

              ; Bank, PCH and PCL are part of a list, that is used by
              ; the routines FAR_JMP and FAR_JSR of the operating system

6152 b0 0e             BCS  _error
6154 a5 59             LDA  Long_AC
6156 85 04             STA  Bank+2
6158 a5 5a             LDA  Long_AC+1
615a 85 03             STA  Bank+1
615c a5 5b             LDA  Long_AC+2
615e 05 5c             ORA  Long_AC+3
6160 85 02             STA  Bank
6162 60       _error   RTS
6163          EndMod [LAC_To_PC] Size = 17 [$11]

              *****************
              Module LAC_To_LPC
              *****************

6163 da                PHX
6164 a2 03             LDX  #3
6166 b5 59    _loop    LDA  Long_AC,X
6168 95 61             STA  Long_PC,X
616a ca                DEX
616b 10 f9             BPL  _loop
616d fa                PLX
616e 60                RTS
616f          EndMod [LAC_To_LPC] Size = 12 [$c]

              *****************
              Module LAC_To_LCT
              *****************

616f da                PHX
6170 a2 03             LDX  #3
6172 b5 59    _loop    LDA  Long_AC,X
6174 95 5d             STA  Long_CT,X
6176 ca                DEX
6177 10 f9             BPL  _loop
6179 fa                PLX
617a 60                RTS
617b          EndMod [LAC_To_LCT] Size = 12 [$c]

              *****************
              Module LAC_To_LDA
              *****************

617b da                PHX
617c a2 03             LDX  #3
617e b5 59    _loop    LDA  Long_AC,X
6180 95 65             STA  Long_DA,X
6182 ca                DEX
6183 10 f9             BPL  _loop
6185 fa                PLX
6186 60                RTS
6187          EndMod [LAC_To_LDA] Size = 12 [$c]

              *******************
              Module LAC_Plus_LCT
              *******************

6187 da                PHX
6188 a2 fc             LDX  #252              ; use ZP wrap around
618a 18                CLC
618b b5 5d    _loop    LDA  Long_AC+4,X
618d 75 61             ADC  Long_CT+4,X
618f 95 5d             STA  Long_AC+4,X
6191 e8                INX
6192 d0 f7             BNE  _loop
6194 fa                PLX
6195 60                RTS
6196          EndMod [LAC_Plus_LCT] Size = 15 [$f]

              ********************
              Module LAC_Minus_LPC
              ********************

6196 da                PHX
6197 a2 fc             LDX  #252              ; use ZP wrap around
6199 38                SEC
619a b5 5d    _loop    LDA  Long_AC+4,X
619c f5 65             SBC  Long_PC+4,X
619e 95 61             STA  Long_CT+4,X
61a0 e8                INX
61a1 d0 f7             BNE  _loop
61a3 fa                PLX
61a4 60                RTS
61a5          EndMod [LAC_Minus_LPC] Size = 15 [$f]

              **********************
              Module LAC_Compare_LPC
              **********************

61a5 da                PHX
61a6 a2 fc             LDX  #252              ; use ZP wrap around
61a8 38                SEC
61a9 b5 5d    _loop    LDA  Long_AC+4,X
61ab f5 65             SBC  Long_PC+4,X
61ad e8                INX
61ae d0 f9             BNE  _loop
61b0 fa                PLX
61b1 60                RTS
61b2          EndMod [LAC_Compare_LPC] Size = 13 [$d]

              **************
              Module Inc_LAC
              **************

61b2 e3 59             INW  Long_AC
61b4 d0 02             BNE  _return
61b6 e3 5b             INW  Long_AC+2
61b8 60       _return  RTS
61b9          EndMod [Inc_LAC] Size = 7 [$7]

              **************
              Module Dec_LAC
              **************

61b9 a5 59             LDA  Long_AC
61bb 05 5a             ORA  Long_AC+1
61bd d0 02             BNE  _skip
61bf c3 5b             DEW  Long_AC+2
61c1 c3 59    _skip    DEW  Long_AC
61c3 60                RTS
61c4          EndMod [Dec_LAC] Size = 11 [$b]

              **************
              Module Inc_LPC
              **************

61c4 e3 61             INW  Long_PC
61c6 d0 02             BNE  _return
61c8 e3 63             INW  Long_PC+2
61ca 60       _return  RTS
61cb          EndMod [Inc_LPC] Size = 7 [$7]

              **************
              Module Dec_LDA
              **************

61cb a5 65             LDA  Long_DA
61cd 05 66             ORA  Long_DA+1
61cf d0 02             BNE  _skip
61d1 c3 67             DEW  Long_DA+2
61d3 c3 65    _skip    DEW  Long_DA
61d5 60                RTS
61d6          EndMod [Dec_LDA] Size = 11 [$b]

              ************
              Module Fetch
              ************

61d6 db                PHZ
61d7 98                TYA
61d8 4b                TAZ
61d9 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
61dc ea                NOP                    ; use LDA  [Long_PC],Z
61dd b2 61    _banked  LDA  (Long_PC),Z
61df fb                PLZ
61e0 29 ff             AND  #$ff
61e2 60                RTS
61e3          EndMod [Fetch] Size = 13 [$d]

              *****************
              Module Mon_Memory
              *****************

61e3 20 3b 6a          JSR  Get_LAC           ; get 1st. parameter
61e6 a3 10             LDZ  #16               ; default row count
61e8 b0 1f             BCS  _row              ; no address
61ea 20 63 61          JSR  LAC_To_LPC        ; Long_PC = start address
61ed 20 3b 6a          JSR  Get_LAC           ; Long_AC = end address
61f0 b0 17             BCS  _row              ; not given

61f2 20 96 61          JSR  LAC_Minus_LPC     ; Long_CT = range
61f5 93 dc fe          LBCC Mon_Error         ; negative range -> error
61f8 a2 04             LDX  #4                ; 16 bytes / line
61fa 7f d7 01          BBR7 MODE_80,_shift
61fd ca                DEX                    ;  8 bytes / line
61fe 46 5e    _shift   LSR  Long_CT+1
6200 66 5d             ROR  Long_CT
6202 ca                DEX
6203 d0 f9             BNE  _shift
6205 ab 5d 00          LDZ  Long_CT           ; row count
6208 1b                INZ

6209 20 e1 ff _row     JSR  STOP
620c f0 06             BEQ  _exit
620e 20 02 63          JSR  Dump_Row
6211 3b                DEZ
6212 d0 f5             BNE  _row
6214 4c a5 60 _exit    JMP  Main
6217          EndMod [Mon_Memory] Size = 52 [$34]

              *****************
              Module Print_Bits
              *****************

6217 db                PHZ
6218 85 65             STA  Long_DA
621a a0 08             LDY  #8
621c a9 2a    _loop    LDA  #'*'
621e ff 65 02          BBS7 Long_DA,_set
6221 a9 2e             LDA  #'.'
6223 20 d2 ff _set     JSR  CHROUT
6226 06 65             ASL  Long_DA
6228 88                DEY
6229 d0 f1             BNE  _loop
622b fb                PLZ
622c 60                RTS
622d          EndMod [Print_Bits] Size = 22 [$16]

              ***************
              Module Mon_Bits
              ***************

622d 20 3b 6a          JSR  Get_LAC           ; get 1st. parameter
6230 b0 03             BCS  _lab
6232 20 63 61          JSR  LAC_To_LPC        ; Long_PC = start address
6235 20 24 6b _lab     JSR  Print_CR
6238 a9 05             LDA  #WHITE
623a 85 66             STA  Long_DA+1

623c a2 08             LDX  #8
623e da       _row     PHX
623f 20 f2 6a          JSR  Hex_LPC
6242 a3 00             LDZ  #0
6244 38       _col     SEC
6245 a9 9b             LDA  #WHITE+LRED       ; toggle colour
6247 e5 66             SBC  Long_DA+1
6249 85 66             STA  Long_DA+1
624b 20 d2 ff          JSR  CHROUT
624e ea b2 61          LDA  [Long_PC],Z
6251 20 17 62          JSR  Print_Bits
6254 18                CLC
6255 6b                TZA
6256 69 08             ADC  #8
6258 4b                TAZ
6259 c9 40             CMP  #64
625b 90 e7             BCC  _col
625d 20 24 6b          JSR  Print_CR
6260 20 c4 61          JSR  Inc_LPC
6263 fa                PLX
6264 ca                DEX
6265 d0 d7             BNE  _row
6267 4c a5 60          JMP  Main
626a          EndMod [Mon_Bits] Size = 61 [$3d]

              ***********************
              Module Mon_Set_Register
              ***********************

626a 20 3b 6a          JSR  Get_LAC           ; get 1st. parameter
626d 20 52 61          JSR  LAC_To_PC
6270 a0 03             LDY  #3
6272 20 3b 6a _loop    JSR  Get_LAC
6275 b0 0a             BCS  _exit
6277 a5 59             LDA  Long_AC
6279 99 02 00          STA  Bank,Y
627c c8                INY
627d c0 09             CPY  #9
627f 90 f1             BCC  _loop
6281 4c a5 60 _exit    JMP  Main
6284          EndMod [Mon_Set_Register] Size = 26 [$1a]

              *********************
              Module Mon_Set_Memory
              *********************

6284 20 3b 6a          JSR  Get_LAC           ; get 1st. parameter
6287 b0 1c             BCS  _exit
6289 20 63 61          JSR  LAC_To_LPC        ; Long_PC = row address
628c a3 00             LDZ  #0
628e 20 3b 6a _loop    JSR  Get_LAC
6291 b0 12             BCS  _exit
6293 a5 59             LDA  Long_AC
6295 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
6298 ea                NOP                    ; use STA  [Long_PC],Z
6299 92 61    _banked  STA  (Long_PC),Z
629b 1b                INZ
629c c2 10             CPZ  #16
629e 7f d7 02          BBR7 MODE_80,_next
62a1 c2 08             CPZ  #8
62a3 90 e9    _next    BCC  _loop

62a5 20 7d ff _exit    JSR  PRIMM
62a8 1b 4f             .BYTE "\eO"
62aa 91 00             .BYTE $91,$00
62ac 20 02 63          JSR  Dump_Row
62af 4c a5 60          JMP  Main
62b2          EndMod [Mon_Set_Memory] Size = 46 [$2e]

              *************
              Module Mon_Go
              *************

62b2 20 3b 6a          JSR  Get_LAC           ; get 1st. parameter
62b5 20 52 61          JSR  LAC_To_PC
62b8 a6 0c             LDX  SPL
62ba 9a                TXS
62bb 4c 71 ff          JMP  JMPFAR
62be          EndMod [Mon_Go] Size = 12 [$c]

              **************
              Module Mon_JSR
              **************

62be 20 3b 6a          JSR  Get_LAC           ; get 1st. parameter
62c1 20 52 61          JSR  LAC_To_PC
62c4 a6 0c             LDX  SPL
62c6 9a                TXS
62c7 20 6e ff          JSR  JSRFAR
62ca ba                TSX
62cb 86 0c             STX  SPL
62cd 4c a5 60          JMP  Main
62d0          EndMod [Mon_JSR] Size = 18 [$12]

              *******************
              Module Dump_4_Bytes
              *******************

62d0 20 d2 ff          JSR  CHROUT            ; colour
62d3 ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62d6 ea                NOP                    ; use LDA  [Long_PC],Z
62d7 b2 61    _banked  LDA  (Long_PC),Z
62d9 20 1c 6b          JSR  Print_Hex_Blank
62dc 1b                INZ
62dd 6b                TZA
62de 29 03             AND  #3
62e0 d0 f1             BNE  _loop
62e2 60                RTS
62e3          EndMod [Dump_4_Bytes] Size = 19 [$13]

              *******************
              Module Dump_4_Chars
              *******************

62e3 a0 00             LDY  #0
62e5 84 f4             STY  QTSW              ; disable quote mode
62e7 20 d2 ff          JSR  CHROUT            ; colour
62ea ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62ed ea                NOP                    ; use LDA  [Long_PC],Z
62ee b2 61    _banked  LDA  (Long_PC),Z
62f0 a8                TAY
62f1 29 60             AND  #%0110 0000
62f3 d0 02             BNE  _laba
62f5 a0 2e             LDY  #'.'
62f7 98       _laba    TYA
62f8 20 d2 ff          JSR  CHROUT
62fb 1b                INZ
62fc 6b                TZA
62fd 29 03             AND  #3
62ff d0 e9             BNE  _loop
6301 60                RTS
6302          EndMod [Dump_4_Chars] Size = 31 [$1f]

              ***************
              Module Dump_Row
              ***************

6302 db                PHZ
6303 20 24 6b          JSR  Print_CR
6306 a9 3e             LDA  #'>'
6308 20 d2 ff          JSR  CHROUT
630b 20 f2 6a          JSR  Hex_LPC

630e a3 00             LDZ  #0
6310 a2 02             LDX  #2                ; 2 blocks in 80 columns
6312 7f d7 01          BBR7 MODE_80,_loop
6315 ca                DEX                    ; 1 block  in 40 columns
6316 a9 96    _loop    LDA  #LRED
6318 20 d0 62          JSR  Dump_4_Bytes
631b a9 05             LDA  #WHITE
631d 20 d0 62          JSR  Dump_4_Bytes
6320 ca                DEX
6321 d0 f3             BNE  _loop

6323 20 7d ff          JSR  PRIMM
6326 3a 12 00          .BYTE $3a,$12,$00      ; : reverse on

6329 a3 00             LDZ  #0
632b a2 02             LDX  #2                ; 4 blocks in 80 columns
632d 7f d7 01          BBR7 MODE_80,_lchr
6330 ca                DEX                    ; 2 blocks in 40 columns
6331 a9 96    _lchr    LDA  #LRED
6333 20 e3 62          JSR  Dump_4_Chars
6336 a9 05             LDA  #WHITE
6338 20 e3 62          JSR  Dump_4_Chars
633b ca                DEX
633c d0 f3             BNE  _lchr
633e 6b                TZA
633f 20 8a 6b          JSR  Add_LPC
6342 fb                PLZ
6343 60                RTS
6344          EndMod [Dump_Row] Size = 66 [$42]

              *******************
              Module Mon_Transfer
              *******************

6344 20 98 6b          JSR  Param_Range       ; Long_PC = source
6347 b3 8a fd          LBCS Mon_Error         ; Long_CT = count
634a 20 3b 6a          JSR  Get_LAC           ; Long_AC = target
634d b3 84 fd          LBCS Mon_Error

6350 a3 00             LDZ  #0
6352 20 a5 61          JSR  LAC_Compare_LPC   ; target - source
6355 90 1d             BCC  _forward

              ;        source < target: backward transfer

6357 20 87 61          JSR  LAC_Plus_LCT      ; Long_AC = end of target

635a ff 68 01 _lpback  BBS7 Long_DA+3,_rb     ; bit 31 ?
635d ea                NOP                    ; LDA  [Long_DA],Z
635e b2 65    _rb      LDA  (Long_DA),Z       ; backward copy
6360 ff 5c 01          BBS7 Long_AC+3,_wb     ; bit 31 ?
6363 ea                NOP                    ; STA  [Long_AC],Z
6364 92 59    _wb      STA  (Long_AC),Z
6366 20 cb 61          JSR  Dec_LDA
6369 20 b9 61          JSR  Dec_LAC
636c 20 7d 6b          JSR  Dec_LCT
636f 10 e9             BPL  _lpback
6371 4c a5 60          JMP  Main

6374 ff 64 01 _forward BBS7 Long_PC+3,_rf     ; bit 31 ?
6377 ea                NOP                    ; LDA  [Long_PC],Z
6378 b2 61    _rf      LDA  (Long_PC),Z       ; backward copy
637a ff 5c 01          BBS7 Long_AC+3,_wf     ; bit 31 ?
637d ea                NOP                    ; STA  [Long_AC],Z
637e 92 59    _wf      STA  (Long_AC),Z
6380 20 c4 61          JSR  Inc_LPC
6383 20 b2 61          JSR  Inc_LAC
6386 20 7d 6b          JSR  Dec_LCT
6389 10 e9             BPL  _forward
638b 4c a5 60          JMP  Main
638e          EndMod [Mon_Transfer] Size = 74 [$4a]

              ******************
              Module Mon_Compare
              ******************

638e 20 98 6b          JSR  Param_Range       ; Long_PC = source
6391 b3 40 fd          LBCS Mon_Error         ; Long_CT = count
6394 20 3b 6a          JSR  Get_LAC           ; Long_AC = target
6397 b3 3a fd          LBCS Mon_Error
639a 20 24 6b          JSR  Print_CR
639d a3 00             LDZ  #0
639f ff 64 01 _loop    BBS7 Long_PC+3,_rf     ; bit 31 ?
63a2 ea                NOP                    ; LDA  [Long_PC],Z
63a3 b2 61    _rf      LDA  (Long_PC),Z       ; backward copy
63a5 ff 5c 01          BBS7 Long_AC+3,_cf     ; bit 31 ?
63a8 ea                NOP                    ; CMP  [Long_AC],Z
63a9 d2 59    _cf      CMP  (Long_AC),Z
63ab f0 03             BEQ  _laba
63ad 20 f2 6a          JSR  Hex_LPC
63b0 20 b2 61 _laba    JSR  Inc_LAC
63b3 20 c4 61          JSR  Inc_LPC
63b6 20 7d 6b          JSR  Dec_LCT
63b9 10 e4             BPL  _loop
63bb 4c a5 60          JMP  Main
63be          EndMod [Mon_Compare] Size = 48 [$30]

              ***************
              Module Mon_Hunt
              ***************

63be 20 98 6b          JSR  Param_Range       ; Long_PC = start
63c1 b3 10 fd          LBCS Mon_Error         ; Long_CT = count
63c4 a0 00             LDY  #0
63c6 20 61 6b          JSR  Get_Char
63c9 c9 27             CMP  #APOSTR
63cb d0 17             BNE  _bin
63cd 20 61 6b          JSR  Get_Char          ; string hunt
63d0 c9 00             CMP  #0
63d2 f3 ff fc          LBEQ Mon_Error         ; null string

63d5 99 0c 04 _lpstr   STA  Mon_Data,Y
63d8 c8                INY
63d9 20 61 6b          JSR  Get_Char
63dc f0 18             BEQ  _hunt
63de c0 20             CPY  #32               ;max. string length
63e0 d0 f3             BNE  _lpstr
63e2 80 12             BRA  _hunt

63e4 20 39 6a _bin     JSR  Got_LAC
63e7 a5 59    _lpbin   LDA  Long_AC
63e9 99 0c 04          STA  Mon_Data,Y
63ec c8                INY
63ed 20 3b 6a          JSR  Get_LAC
63f0 b0 04             BCS  _hunt
63f2 c0 20             CPY  #32               ;max. data length
63f4 d0 f1             BNE  _lpbin

63f6 84 65    _hunt    STY  Long_DA           ; hunt length
63f8 20 24 6b          JSR  Print_CR

63fb a0 00    _lpstart LDY  #0
63fd 20 d6 61 _lpins   JSR  Fetch
6400 d9 0c 04          CMP  Mon_Data,Y
6403 d0 08             BNE  _next
6405 c8                INY
6406 c4 65             CPY  Long_DA
6408 d0 f3             BNE  _lpins
640a 20 f2 6a          JSR  Hex_LPC           ; match
640d 20 e1 ff _next    JSR  STOP
6410 f3 93 fc          LBEQ Main
6413 20 c4 61          JSR  Inc_LPC
6416 20 7d 6b          JSR  Dec_LCT
6419 10 e0             BPL  _lpstart
641b 4c a5 60          JMP  Main
641e          EndMod [Mon_Hunt] Size = 96 [$60]

              ****************
              Module Load_Save
              ****************

641e ac 08 04          LDY  Disk_Unit
6421 84 ba             STY  FA
6423 a0 08             LDY  #8
6425 84 b9             STY  SA
6427 a0 00             LDY  #0
6429 84 bd             STY  BA
642b 84 b7             STY  FNLEN
642d 84 be             STY  FNBANK
642f 84 90             STY  STATUS
6431 a9 04             LDA  #>Mon_Data
6433 85 bc             STA  FNADR+1
6435 a9 0c             LDA  #<Mon_Data
6437 85 bb             STA  FNADR
6439 20 61 6b _skip    JSR  Get_Char          ; skip blanks
643c f3 95 fc          LBEQ Mon_Error
643f c9 20             CMP  #' '
6441 f0 f6             BEQ  _skip
6443 c9 22             CMP  #QUOTE            ; must be quote
6445 d3 8c fc          LBNE Mon_Error

6448 a6 6f             LDX  Buf_Index
644a bd 00 02 _copyfn  LDA  Buffer,X          ; copy filename
644d f0 4a             BEQ  _do               ; no more input
644f e8                INX
6450 c9 22             CMP  #QUOTE
6452 f0 0c             BEQ  _unit             ; end of filename
6454 91 bb             STA  (FNADR),Y         ; store to filename
6456 e6 b7             INC  FNLEN
6458 c8                INY
6459 c0 13             CPY  #19               ; max = 16 plus prefix "@0:"
645b 90 ed             BCC  _copyfn
645d 4c d3 60          JMP  Mon_Error         ; filename too long

6460 86 6f    _unit    STX  Buf_Index         ; update read position
6462 20 61 6b          JSR  Get_Char
6465 f0 32             BEQ  _do               ; no more parameter
6467 20 3b 6a          JSR  Get_LAC
646a b0 2d             BCS  _do
646c a5 59             LDA  Long_AC           ; unit #
646e 85 ba             STA  FA
6470 20 3b 6a          JSR  Get_LAC
6473 b0 24             BCS  _do
6475 20 63 61          JSR  LAC_To_LPC        ; Long_PC = start address
6478 85 bd             STA  BA                ; Bank
647a 20 3b 6a          JSR  Get_LAC           ; Long_AC = end address + 1
647d b0 42             BCS  _load             ; no end address -> load/verify
647f 20 24 6b          JSR  Print_CR
6482 a6 59             LDX  Long_AC           ; X/Y = end address
6484 a4 5a             LDY  Long_AC+1
6486 a5 93             LDA  VERCK             ; A = load/verify/save
6488 c9 53             CMP  #'S'
648a d3 47 fc          LBNE Mon_Error         ; must be Save
648d a9 00             LDA  #0
648f 85 b9             STA  SA                ; set SA for PRG
6491 a9 61             LDA  #Long_PC          ; Long_PC = start address
6493 20 d8 ff          JSR  SAVE
6496 4c a5 60 _exit    JMP  Main

6499 a5 93    _do      LDA  VERCK
649b c9 56             CMP  #'V'              ; Verify
649d f0 07             BEQ  _exec
649f c9 4c             CMP  #'L'              ; Load
64a1 d3 30 fc          LBNE Mon_Error
64a4 a9 00             LDA  #0                ; 0 = LOAD
64a6 20 d5 ff _exec    JSR  LOAD              ; A == 0 : LOAD else VERIFY
64a9 4f 90 ea          BBR4 STATUS,_exit
64ac a5 93             LDA  VERCK
64ae f3 23 fc          LBEQ Mon_Error
64b1 b3 f2 fb          LBCS Main
64b4 20 7d ff          JSR  PRIMM
64b7 20 45 52          .BYTE " ERROR",0
64be 4c a5 60          JMP  Main

64c1 a6 61    _load    LDX  Long_PC
64c3 a4 62             LDY  Long_PC+1
64c5 a9 00             LDA  #0                ; 0 = use X/Y as load address
64c7 85 b9             STA  SA                ; and ignore load address from file
64c9 80 ce             BRA  _do
64cb          EndMod [Load_Save] Size = 173 [$ad]

              ***************
              Module Mon_Fill
              ***************

64cb 20 98 6b          JSR  Param_Range       ; Long_PC = target
64ce b3 03 fc          LBCS Mon_Error         ; Long_CT = count
64d1 20 3b 6a          JSR  Get_LAC           ; Long_AC = fill byte
64d4 b3 fd fb          LBCS Mon_Error
64d7 20 24 6b          JSR  Print_CR
64da a3 00             LDZ  #0
64dc a5 59    _loop    LDA  Long_AC
64de ea 92 61          STA  [Long_PC],Z
64e1 20 c4 61          JSR  Inc_LPC
64e4 20 7d 6b          JSR  Dec_LCT
64e7 10 f3             BPL  _loop
64e9 4c a5 60          JMP  Main
64ec          EndMod [Mon_Fill] Size = 33 [$21]

              *******************
              Module Mon_Assemble
              *******************

64ec 20 3b 6a          JSR  Get_LAC           ; get 1st. parameter
64ef b3 e2 fb          LBCS Mon_Error
64f2 20 63 61          JSR  LAC_To_LPC        ; Long_PC = PC

64f5 a2 00    _start   LDX  #0                ; mne letter counter
64f7 86 66             STX  Long_DA+1         ; clear encoded MNE
64f9 86 6c             STX  Op_Flag           ; 6:long branch 5:32 bit
64fb 8e 06 04          STX  Op_Ix             ; operand byte index
64fe 8e 07 04          STX  Op_Len            ; operand length
6501 20 61 6b _getin   JSR  Get_Char
6504 d0 05             BNE  _laba
6506 e0 00             CPX  #0
6508 f3 9b fb          LBEQ Main

650b c9 20    _laba    CMP  #' '
650d f0 e6             BEQ  _start            ; restart after blank

              ;        check for long branches

650f e0 01             CPX  #1
6511 d0 0e             BNE  _labb             ; -> not 2nd. char
6513 c9 42             CMP  #'B'
6515 d0 0a             BNE  _labb             ; 2nd. char != 'B'
6517 ab 03 04          LDZ  Op_Mne
651a c2 4c             CPZ  #'L'
651c d0 03             BNE  _labb             ; 1st. Char != 'L'
651e e7 6c             SMB6 Op_Flag           ; flag long branch
6520 ca                DEX                    ; skip 'L'

6521 9d 03 04 _labb    STA  Op_Mne,X          ; next mne character
6524 e8                INX
6525 e0 03             CPX  #3
6527 d0 d8             BNE  _getin

              ;        encode 3 letter mnemonic

6529 bd 02 04 _lpenc   LDA  Op_Mne-1,X
652c 38                SEC
652d e9 3f             SBC  #$3f              ; offset
652f a0 05             LDY  #5                ; 5 bit code
6531 4a       _lpbit   LSR  A
6532 66 65             ROR  Long_DA
6534 66 66             ROR  Long_DA+1
6536 88                DEY
6537 d0 f8             BNE  _lpbit
6539 ca                DEX
653a d0 ed             BNE  _lpenc

              ;        find packed MNE code in table

653c a2 5a             LDX  #90               ; # of mnemonics
653e a5 65             LDA  Long_DA
6540 dd 02 6f _lpfind  CMP  MNE_L,X           ; compare left MNE
6543 d0 07             BNE  _nxfind
6545 bc 5d 6f          LDY  MNE_R,X
6548 c4 66             CPY  Long_DA+1         ; compare right MNE
654a f0 06             BEQ  _found
654c ca       _nxfind  DEX
654d 10 f1             BPL  _lpfind
654f 4c d3 60          JMP  Mon_Error

6552 8e 02 04 _found   STX  Ix_Mne

              ;        find 1st. opcode for this mnemonic

6555 8a                TXA
6556 a2 00             LDX  #0
6558 dd b8 6f _lpopc   CMP  MNE_Index,X
655b f0 03             BEQ  _exopc
655d e8                INX
655e d0 f8             BNE  _lpopc
6560 86 6b    _exopc   STX  Op_Code

              ;        check for BBR BBS RMB SMB

6562 8a                TXA
6563 29 07             AND  #7
6565 c9 07             CMP  #7
6567 d0 1d             BNE  _labc

6569 20 61 6b          JSR  Get_Char
656c c9 30             CMP  #'0'
656e 93 63 fb          LBCC Mon_Error
6571 c9 38             CMP  #'8'
6573 b3 5e fb          LBCS Mon_Error
6576 0a                ASL  A
6577 0a                ASL  A
6578 0a                ASL  A
6579 0a                ASL  A
657a 05 6b             ORA  Op_Code
657c 85 6b             STA  Op_Code

657e 20 61 6b          JSR  Get_Char
6581 c9 20             CMP  #' '
6583 d3 4e fb          LBNE Mon_Error

              ;        read operand

6586 a9 00    _labc    LDA  #0
6588 85 6a    _labd    STA  Mode_Flags
658a 20 58 6a          JSR  Read_Number
658d b3 44 fb          LBCS Mon_Error
6590 f0 1c             BEQ  _labg             ; no operand
6592 a5 5b             LDA  Long_AC+2
6594 d3 3d fb          LBNE Mon_Error         ; -> overflow
6597 a0 02             LDY  #2                ; Y=2 word operand
6599 a5 5a             LDA  Long_AC+1
659b d0 01             BNE  _labf             ; high byte not zero
659d 88                DEY                    ; Y=1 byte operand
659e ae 06 04 _labf    LDX  Op_Ix             ; X = operand value #
65a1 98                TYA                    ; A = 1:byte or 2:word
65a2 9d 07 04          STA  Op_Len,X          ; store operand length
65a5 ee 06 04          INC  Op_Ix             ; ++index to operand value
65a8 8a                TXA                    ; A = current index
65a9 d0 03             BNE  _labg             ; -> at 2nd. byte
65ab 20 6f 61          JSR  LAC_To_LCT        ; Long_CT = 1st. operand
65ae c6 6f    _labg    DEC  Buf_Index         ; back to delimiter

65b0 20 61 6b _lpnop   JSR  Get_Char          ; get delimiter
65b3 f3 ed 00          LBEQ _adjust           ; end of operand
65b6 c9 20             CMP  #' '
65b8 f0 f6             BEQ  _lpnop

              ;        immediate

65ba c9 23             CMP  #'#'
65bc d0 08             BNE  _lbra
65be a5 6a             LDA  Mode_Flags
65c0 d0 70             BNE  _error
65c2 a9 80             LDA  #$80              ; immediate mode
65c4 80 c2             BRA  _labd

              ;        left bracket

65c6 c9 5b    _lbra    CMP  #'['
65c8 d0 0a             BNE  _indir
65ca a5 6a             LDA  Mode_Flags
65cc d0 64             BNE  _error
65ce d7 6c             SMB5 Op_Flag           ; 32 bit mode
65d0 a9 40             LDA  #$40              ; ( flag
65d2 80 b4             BRA  _labd

              ;        left parenthesis

65d4 c9 28    _indir   CMP  #'('
65d6 d0 08             BNE  _comma
65d8 a5 6a             LDA  Mode_Flags
65da d0 56             BNE  _error
65dc a9 40             LDA  #$40              ; ( flag
65de 80 a8             BRA  _labd

              ;        comma

65e0 c9 2c    _comma   CMP  #','
65e2 d0 1f             BNE  _stack
65e4 ad 06 04          LDA  Op_Ix             ; operand value #
65e7 f0 49             BEQ  _error
65e9 a2 04             LDX  #4                ; outside comma
65eb a5 6a             LDA  Mode_Flags
65ed f0 0e             BEQ  _comma1           ; no flags yet
65ef c9 78             CMP  #$78              ; ($nn,SP)
65f1 f0 0a             BEQ  _comma1
65f3 c9 48             CMP  #$48              ; ($nn)
65f5 f0 06             BEQ  _comma1
65f7 a2 20             LDX  #$20              ; , inside comma
65f9 c9 40             CMP  #$40              ; (
65fb d0 35             BNE  _error
65fd 8a       _comma1  TXA
65fe 05 6a             ORA  Mode_Flags
6600 4c 88 65          JMP  _labd

              ;        stack relative

6603 c9 53    _stack   CMP  #'S'
6605 d0 12             BNE  _rbra
6607 20 61 6b          JSR  Get_Char
660a c9 50             CMP  #'P'
660c d0 24             BNE  _error
660e a5 6a             LDA  Mode_Flags
6610 c9 60             CMP  #$60              ; ($nn,
6612 d0 1e             BNE  _error
6614 09 10             ORA  #%0001 0000       ; SP flag
6616 4c 88 65          JMP  _labd

              ;        right bracket

6619 c9 5d    _rbra    CMP  #']'
661b d0 18             BNE  _right
661d 5f 6c 12          BBR5 Op_Flag,_error
6620 ad 06 04          LDA  Op_Ix
6623 f3 ae fa          LBEQ Mon_Error         ; no value
6626 a5 6a             LDA  Mode_Flags
6628 c9 40             CMP  #$40              ; (
662a d3 a7 fa          LBNE Mon_Error
662d 09 08             ORA  #%0000 1000       ; )
662f 4c 88 65          JMP  _labd

6632 4c d3 60 _error   JMP  Mon_Error

              ;        right parenthesis

6635 c9 29    _right   CMP  #')'
6637 d0 1a             BNE  _X
6639 ad 06 04          LDA  Op_Ix
663c f3 95 fa          LBEQ Mon_Error         ; no value
663f a5 6a             LDA  Mode_Flags
6641 c9 40             CMP  #$40              ; (
6643 f0 09             BEQ  _right1
6645 c9 61             CMP  #$61              ; ($nn,X
6647 f0 05             BEQ  _right1
6649 c9 70             CMP  #$70              ; ($nn,SP
664b d3 86 fa          LBNE Mon_Error
664e 09 08    _right1  ORA  #%0000 1000       ; )
6650 4c 88 65          JMP  _labd

6653 c9 58    _X       CMP  #'X'
6655 d0 16             BNE  _Y
6657 ad 06 04          LDA  Op_Ix
665a f3 77 fa          LBEQ Mon_Error
665d a5 6a             LDA  Mode_Flags
665f c9 60             CMP  #$60
6661 f0 05             BEQ  _X1
6663 c9 04             CMP  #4
6665 d3 6c fa          LBNE Mon_Error
6668 09 01    _X1      ORA  #%0000 0001
666a 4c 88 65          JMP  _labd

              ;        Y

666d c9 59    _Y       CMP  #'Y'
666f d0 1a             BNE  _Z
6671 ad 06 04          LDA  Op_Ix
6674 f3 5d fa          LBEQ Mon_Error
6677 a5 6a             LDA  Mode_Flags
6679 c9 4c             CMP  #$4c             ; ($nn),
667b f0 09             BEQ  _Y1
667d c9 04             CMP  #4               ; $nn,
667f f0 05             BEQ  _Y1
6681 c9 7c             CMP  #$7c             ; ($nn,SP),
6683 d3 4e fa          LBNE Mon_Error
6686 09 02    _Y1      ORA  #%0000 0010      ; Y
6688 4c 88 65          JMP  _labd

              ;        Z

668b c9 5a    _Z       CMP  #'Z'
668d d3 44 fa          LBNE Mon_Error
6690 ad 06 04          LDA  Op_Ix
6693 f3 3e fa          LBEQ Mon_Error
6696 a5 6a             LDA  Mode_Flags
6698 c9 4c             CMP  #$4c              ; $nn,
669a d3 37 fa          LBNE Mon_Error
669d 09 03             ORA  #%0000 0011       ; Z
669f 4c 88 65          JMP  _labd

              ;        BBR BBS RMB SMB  two operands

66a2 ad 02 04 _adjust  LDA  Ix_Mne
66a5 ae 06 04          LDX  Op_Ix             ; # if values
66a8 f0 52             BEQ  _match            ; -> no operand
66aa ca                DEX
66ab f0 25             BEQ  _one             ; ->  one operand
66ad ca                DEX
66ae d3 23 fa          LBNE Mon_Error         ; -> error if more than 2
66b1 c9 05             CMP  #5                ; BBR
66b3 f0 05             BEQ  _BB
66b5 c9 06             CMP  #6                ; BBS
66b7 d3 1a fa          LBNE Mon_Error
66ba a5 5e    _BB      LDA  Long_CT+1
66bc d3 15 fa          LBNE Mon_Error
66bf a9 03             LDA  #3                ; offset
66c1 20 a7 67          JSR  Branch_Target
66c4 a5 6b             LDA  Op_Code
66c6 a4 59             LDY  Long_AC
66c8 a6 5d             LDX  Long_CT
66ca 86 59             STX  Long_AC
66cc 84 5a             STY  Long_AC+1
66ce a0 02             LDY  #2
66d0 80 4d             BRA  _store

              ;        one operand in Long_CT

66d2 a6 5d    _one     LDX  Long_CT
66d4 a4 5e             LDY  Long_CT+1
66d6 86 59             STX  Long_AC
66d8 84 5a             STY  Long_AC+1            ; Aval = operand
66da a2 0a             LDX  #10
66dc dd b7 70 _lpbrain CMP  BRAIN-1,X
66df f0 05             BEQ  _branch
66e1 ca                DEX
66e2 d0 f8             BNE  _lpbrain
66e4 80 16             BRA  _match

              ;        branch instruction

66e6 a5 6a    _branch  LDA  Mode_Flags
66e8 d3 e9 f9          LBNE Mon_Error         ; only value
66eb a9 02             LDA  #2                ; branch offset
66ed 20 a7 67          JSR  Branch_Target
66f0 a5 6b             LDA  Op_Code
66f2 a0 01             LDY  #1                ; short branch
66f4 6f 6c 03          BBR6 Op_Flag,_bran1
66f7 c8                INY                    ; long branch
66f8 09 03             ORA  #3
66fa 80 23    _bran1   BRA  _store

              ;        find opcode matching mnemonic and address mode

66fc 20 d2 67 _match   JSR  Mode_Index
66ff 20 ba 67 _lpmatch JSR  Match_Mode
6702 f0 17             BEQ  _okmat
6704 ad 07 04          LDA  Op_Len
6707 f3 ca f9          LBEQ Mon_Error
670a a5 6a             LDA  Mode_Flags
670c 33 c5 f9          LBMI Mon_Error
670f 29 3f             AND  #%0011 1111
6711 85 6a             STA  Mode_Flags
6713 ee 07 04          INC  Op_Len
6716 20 e4 67          JSR  Size_To_Mode
6719 80 e4             BRA  _lpmatch
671b ac 07 04 _okmat   LDY  Op_Len
671e 8a                TXA

              ;        store instruction bytes
              ;        -----------------------
              ;        A    = opcode
              ;        Y    = operand length
              ;        Long_AC = operand value

671f 85 6b    _store   STA  Op_Code
6721 84 6d             STY  Op_Size
6723 e6 6d             INC  Op_Size
6725 5f 6c 17          BBR5 Op_Flag,_storen
6728 a9 ea             LDA  #$ea              ; 32 bit prefix
672a a3 00             LDZ  #0
672c ea 92 61          STA  [Long_PC],Z       ; store prefix
672f 1b                INZ
6730 a5 6b             LDA  Op_Code
6732 ea 92 61          STA  [Long_PC],Z       ; store opcode
6735 1b                INZ
6736 a5 59             LDA  Long_AC
6738 ea 92 61          STA  [Long_PC],Z       ; store address
673b e6 6d             INC  Op_Size
673d 80 13             BRA  _print

673f 5a       _storen  PHY
6740 fb                PLZ                    ; Z = Y
6741 f0 0a             BEQ  _store1

6743 b9 58 00 _lpsto   LDA  Long_AC-1,Y
6746 ea 92 61          STA  [Long_PC],Z
6749 3b                DEZ
674a 88                DEY
674b d0 f6             BNE  _lpsto

674d a5 6b    _store1  LDA  Op_Code
674f ea 92 61          STA  [Long_PC],Z

6752 20 7d ff _print   JSR  PRIMM
6755 0d 91 41          .BYTE 13,$91,"A \eQ",0
675c 20 2f 68          JSR  Print_Code
675f e6 6d             INC  Op_Size
6761 a5 6d             LDA  Op_Size
6763 20 8a 6b          JSR  Add_LPC

              ; print out command 'A' together with next address
              ; and put it into buffer too,
              ; for easy entry of next assembler instruction

6766 20 7d ff          JSR  PRIMM
6769 0d 41 20          .BYTE CR,"A ",0

676d a9 41             LDA  #'A'
676f 8d 00 02          STA  Buffer
6772 a9 20             LDA  #' '
6774 8d 01 02          STA  Buffer+1
6777 a0 02             LDY  #2
6779 a2 02             LDX  #2                ; 6 digits
677b b5 61             LDA  Long_PC,X
677d d0 01             BNE  _auto
677f ca                DEX                    ; 4 digits
6780 da       _auto    PHX
6781 b5 61             LDA  Long_PC,X
6783 20 3d 6b          JSR  A_To_Hex
6786 99 00 02          STA  Buffer,Y
6789 20 d2 ff          JSR  CHROUT
678c c8                INY
678d 8a                TXA
678e 99 00 02          STA  Buffer,Y
6791 20 d2 ff          JSR  CHROUT
6794 c8                INY
6795 fa                PLX
6796 ca                DEX
6797 10 e7             BPL  _auto

6799 a9 20             LDA  #' '
679b 99 00 02          STA  Buffer,Y
679e 20 d2 ff          JSR  CHROUT
67a1 c8                INY
67a2 98                TYA
67a3 aa                TAX
67a4 4c aa 60          JMP  Main_A
67a7          EndMod [Mon_Assemble] Size = 699 [$2bb]

              ********************
              Module Branch_Target
              ********************

67a7 c3 59             DEW  Long_AC
67a9 3a                DEC  A
67aa d0 fb             BNE  Branch_Target

              ;        Target - PC

67ac 38                SEC
67ad a5 59             LDA  Long_AC
67af e5 61             SBC  Long_PC
67b1 85 59             STA  Long_AC
67b3 a5 5a             LDA  Long_AC+1
67b5 e5 62             SBC  Long_PC+1
67b7 85 5a             STA  Long_AC+1
67b9 60                RTS
67ba          EndMod [Branch_Target] Size = 19 [$13]

              *****************
              Module Match_Mode
              *****************

              ;        find matching mnemonic and address mode

67ba a6 6b             LDX  Op_Code           ; try this opcode
67bc a5 6a             LDA  Mode_Flags         ; size and address mode
67be dd c2 70 _loop    CMP  LEN_ADM,X
67c1 f0 0e             BEQ  _return           ; success  ZF=1

              ;        search for next opcode with same mnemonic

67c3 e8       _next    INX                    ; next opcode
67c4 f0 0a             BEQ _error
67c6 bc b8 6f          LDY  MNE_Index,X
67c9 cc 02 04          CPY  Ix_Mne            ; same mnemonic ?
67cc f0 f0             BEQ  _loop             ; -> compare again
67ce 80 f3             BRA  _next

67d0 ca       _error   DEX                    ; X = $ff ZF=0
67d1 60       _return  RTS
67d2          EndMod [Match_Mode] Size = 24 [$18]

              *****************
              Module Mode_Index
              *****************

67d2 a5 6a             LDA  Mode_Flags
67d4 a2 00             LDX  #0
67d6 dd c2 71 _loop    CMP  ADMODE,X
67d9 f0 07             BEQ  _found
67db e8                INX
67dc e0 10             CPX  #16
67de 90 f6             BCC  _loop
67e0 8a                TXA
67e1 60                RTS
67e2 86 6a    _found   STX  Mode_Flags
67e4          EndMod [Mode_Index] Size = 18 [$12]

              *******************
              Module Size_To_Mode
              *******************

67e4 ad 07 04          LDA  Op_Len
67e7 4a                LSR  A
67e8 6a                ROR  A
67e9 6a                ROR  A
67ea 05 6a             ORA  Mode_Flags
67ec 85 6a             STA  Mode_Flags
67ee a2 00             LDX  #0
67f0 60                RTS
67f1          EndMod [Size_To_Mode] Size = 13 [$d]

              **********************
              Module Mon_Disassemble
              **********************

67f1 20 3b 6a          JSR  Get_LAC           ; get 1st. parameter
67f4 b0 08             BCS  _nopar
67f6 20 63 61          JSR  LAC_To_LPC        ; Long_PC = start address
67f9 20 3b 6a          JSR  Get_LAC           ; Long_AC = end address
67fc 90 06             BCC  range
67fe a9 20    _nopar   LDA  #32               ; disassemble 32 bytes
6800 85 5d             STA  Long_CT
6802 80 06             BRA  _loop
6804 20 96 61 range    JSR  LAC_Minus_LPC     ; Long_CT = range
6807 93 ca f8          LBCC Mon_Error         ; -> negative

680a 20 29 6b _loop    JSR  CR_Erase          ; prepare empty line
680d 20 e1 ff          JSR  STOP
6810 f3 93 f8          LBEQ Main
6813 20 29 68          JSR  Dis_Code          ; disassemble one line
6816 e6 6d             INC  Op_Size
6818 a5 6d             LDA  Op_Size
681a 20 8a 6b          JSR  Add_LPC           ; advance address
681d a5 5d             LDA  Long_CT
681f 38                SEC
6820 e5 6d             SBC  Op_Size
6822 85 5d             STA  Long_CT
6824 b0 e4             BCS  _loop
6826 4c a5 60          JMP  Main
6829          EndMod [Mon_Disassemble] Size = 56 [$38]

              ***************
              Module Dis_Code
              ***************

6829 20 7d ff          JSR  PRIMM
682c 2e 20 00          .BYTE ". ",0
682f          EndMod [Dis_Code] Size = 6 [$6]

              *****************
              Module Print_Code
              *****************

              ;        print 24 bit address of instruction

682f 20 f2 6a          JSR  Hex_LPC          ; 24 bit address

              ;        read opcode and calculate length and address mode

6832 a0 00             LDY  #0
6834 84 6c             STY  Op_Flag           ; clear flags
6836 20 d6 61          JSR  Fetch             ; fetch from (banked) address

              ;        check for Q instructions

6839 c9 42             CMP  #$42              ; NEG
683b d0 0f             BNE  _nop
683d c8                INY                    ; Y = 1
683e 20 d6 61          JSR  Fetch
6841 c9 42             CMP  #$42              ; NEG
6843 d0 07             BNE  _nop
6845 c7 6c             SMB4 Op_Flag           ; Q flag
6847 a9 02             LDA  #2
6849 20 8a 6b          JSR  Add_LPC           ; skip NEG NEG

              ;        check for 32 bit address mode

684c a0 00    _nop     LDY  #0
684e 20 d6 61          JSR  Fetch
6851 85 6b             STA  Op_Code
6853 aa                TAX
6854 c9 ea             CMP  #$ea              ; prefix ?
6856 d0 12             BNE  _normal
6858 c8                INY
6859 20 d6 61          JSR  Fetch             ; opcode after prefix
685c 29 1f             AND  #%0001 1111       ; identify ($nn),Z codes
685e c9 12             CMP  #%0001 0010
6860 d0 08             BNE  _normal
6862 d7 6c             SMB5 Op_Flag           ; set extended flag
6864 20 d6 61          JSR  Fetch
6867 85 6b             STA  Op_Code           ; code after prefix
6869 aa                TAX

686a bc c2 70 _normal  LDY  LEN_ADM,X         ; Y = length and address mode
686d 98                TYA                    ; A = length and address mode
686e 29 0f             AND  #15               ; A = address mode
6870 aa                TAX                    ; X = address mode
6871 bd c2 71          LDA  ADMODE,X          ; A = mode flags
6874 85 69             STA  Adr_Flags         ; store
6876 98                TYA                    ; A = length and address mode
6877 29 c0             AND  #%1100 0000       ; mask instruction length
6879 0a                ASL  A                 ; rotate into lower two bits
687a 2a                ROL  A
687b 2a                ROL  A
687c 85 6d             STA  Op_Size           ; store
687e 5f 6c 02          BBR5 Op_Flag,_norm1
6881 e6 6d             INC  Op_Size
6883          _norm1

              ;        print instruction and operand bytes

6883 a0 00             LDY  #0
6885 a9 20             LDA  #' '
6887 4f 6c 02          BBR4 Op_Flag,_blpr
688a a9 2a             LDA  #'*'              ; print * for NEG NEG
688c 20 d2 ff _blpr    JSR  CHROUT
688f 20 d6 61 _lphex   JSR  Fetch
6892 20 1c 6b          JSR  Print_Hex_Blank
6895 c0 02             CPY  #2
6897 f0 13             BEQ  _long             ; stop after 3 bytes
6899 c4 6d             CPY  Op_Size
689b c8                INY
689c 90 f1             BCC  _lphex

              ;        fill up with blanks

689e c0 03    _lpfill  CPY  #3
68a0 b0 0a             BCS  _long
68a2 20 7d ff          JSR  PRIMM
68a5 20 20 20          .BYTE "   ",0
68a9 c8                INY
68aa 80 f2             BRA  _lpfill

              ;        detect long branches

68ac a9 9e    _long    LDA  #YELLOW
68ae 20 d2 ff          JSR  CHROUT
68b1 a6 6b             LDX  Op_Code
68b3 bd c2 70          LDA  LEN_ADM,X
68b6 c9 a0             CMP  #%1010 0000        ; long branch mode
68b8 d0 07             BNE  _locate
68ba e7 6c             SMB6 Op_Flag            ; set long branch flag
68bc a9 4c             LDA  #'L'
68be 20 d2 ff          JSR  CHROUT

              ;        locate mnemonic text

68c1 a6 6b    _locate  LDX  Op_Code           ; X = opcode
68c3 bc b8 6f          LDY  MNE_Index,X       ; Y = index to mnemonic text
68c6 b9 02 6f          LDA  MNE_L,Y           ; A = packed left part
68c9 85 5a             STA  Long_AC+1
68cb b9 5d 6f          LDA  MNE_R,Y           ; A = packed right part
68ce 85 59             STA  Long_AC

              ;        unpack and print mnemonic text

68d0 a2 03             LDX  #3                ; 3 letters
68d2 a9 00    _lpmne   LDA  #0
68d4 a0 05             LDY  #5                ; 5 bits per letter
68d6 06 59    _lplet   ASL  Long_AC
68d8 26 5a             ROL  Long_AC+1
68da 2a                ROL  A                 ; rotate letter into A
68db 88                DEY
68dc d0 f8             BNE  _lplet            ; next bit
68de 69 3f             ADC  #$3f              ; add offset (C = 0)
68e0 ca                DEX
68e1 f0 06             BEQ  _lastc            ; 3rd. character
68e3 4b                TAZ                    ; remember
68e4 20 d2 ff          JSR  CHROUT            ; and print it
68e7 80 e9             BRA  _lpmne            ; next letter

68e9 4f 6c 21 _lastc   BBR4 Op_Flag,_lbra     ; -> no Q
68ec c9 41             CMP  #'A'              ; LDA, STA, ORA
68ee f0 0c             BEQ  _Q3
68f0 c9 43             CMP  #'C'              ; DEC, INC
68f2 d0 0f             BNE  _Q4
68f4 c2 45             CPZ  #'E'              ; DEC
68f6 f0 04             BEQ  _Q3
68f8 c2 4e             CPZ  #'N'              ; INC
68fa d0 07             BNE  _Q4
68fc a9 51    _Q3      LDA  #'Q'              ; LDQ, STQ, ORQ, INQ, DEQ
68fe 20 d2 ff          JSR  CHROUT
6901 80 2e             BRA  _mne4
6903 20 d2 ff _Q4      JSR  CHROUT
6906 a9 51             LDA  #'Q'              ; add Q as 4th. char
6908 20 d2 ff          JSR  CHROUT
690b 80 27             BRA  _mne5

690d 20 d2 ff _lbra    JSR  CHROUT            ; 3rd. character
6910 ef 6c 21          BBS6 Op_Flag,_mne5     ; long branch

              ;        check for 4-letter bit instructions

6913 a5 6b             LDA  Op_Code
6915 29 0f             AND  #15
6917 c9 07             CMP  #7                ; RMB & SMB
6919 f0 06             BEQ  _biti
691b c9 0f             CMP  #15               ; BBR & BBS
691d d0 12             BNE  _mne4
691f f7 6c             SMB7 Op_Flag           ; flag two operands
6921 a5 6b    _biti    LDA  Op_Code
6923 29 70             AND  #%0111 0000
6925 0a                ASL  A
6926 2a                ROL  A
6927 2a                ROL  A
6928 2a                ROL  A
6929 2a                ROL  A
692a 09 30             ORA  #'0'
692c 20 d2 ff          JSR  CHROUT
692f 80 03             BRA  _mne5

6931 20 1f 6b _mne4    JSR  Print_Blank
6934 20 1f 6b _mne5    JSR  Print_Blank
6937 a9 05             LDA  #WHITE
6939 20 d2 ff          JSR  CHROUT

              ;        check for accumulator operand

693c a5 6b             LDA  Op_Code
693e a2 08             LDX  #8
6940 ca       _lpaccu  DEX
6941 30 12             BMI  _oper
6943 dd d2 71          CMP  ACCUMODE,X
6946 d0 f8             BNE  _lpaccu

6948 a9 41             LDA  #'A'
694a 4f 6c 02          BBR4 Op_Flag,_accu
694d a9 51             LDA  #'Q'
694f 20 d2 ff _accu    JSR  CHROUT
6952 4c 38 6a          JMP  _return

              ;        fetch and decode operand

6955 a6 6d    _oper    LDX  Op_Size
6957 f3 df 00          LBEQ _return           ; -> no operand

695a 7f 69 04          BBR7 Adr_Flags,_laba   ; bit 7: immediate
695d a9 23             LDA  #'#'
695f 80 0a             BRA  _labb
6961 6f 69 0a _laba    BBR6 Adr_Flags,_labc   ; bit 6: left (
6964 a9 28             LDA  #'('
6966 5f 6c 02          BBR5 Op_Flag,_labb
6969 a9 5b             LDA  #'['
696b 20 d2 ff _labb    JSR  CHROUT
696e a9 24    _labc    LDA  #'$'
6970 20 d2 ff          JSR  CHROUT

              ;        fetch operand to Long_AC

6973 a0 00             LDY  #0
6975 84 5a             STY  Long_AC+1
6977 c8       _lpfop   INY
6978 20 d6 61          JSR  Fetch
697b 99 58 00          STA  Long_AC-1,Y
697e c4 6d             CPY  Op_Size
6980 90 f5             BCC  _lpfop

              ;        interpret address modes

6982 a6 6b             LDX  Op_Code
6984 bd c2 70          LDA  LEN_ADM,X
6987 29 20             AND  #%0010 0000       ; branches
6989 d3 84 00          LBNE _rel

              ;        print 16 bit operand hi/lo or 8 bit operand

698c 5f 6c 0c          BBR5 Op_Flag,_proper
698f a5 5a             LDA  Long_AC+1
6991 20 31 6b          JSR  Print_Hex         ; [$nn],Z
6994 a9 5d             LDA  #']'
6996 20 d2 ff          JSR  CHROUT
6999 80 35             BRA  _labf

699b a4 6d    _proper  LDY  Op_Size
699d 7f 6c 02          BBR7 Op_Flag,_lpoper
69a0 a0 01             LDY  #1
69a2 b9 58 00 _lpoper  LDA  Long_AC-1,Y
69a5 20 31 6b          JSR  Print_Hex
69a8 88                DEY
69a9 d0 f7             BNE  _lpoper

69ab 5f 69 1a          BBR5 Adr_Flags,_labe   ; comma flag
69ae a9 2c             LDA  #','
69b0 20 d2 ff          JSR  CHROUT

69b3 4f 69 0a          BBR4 Adr_Flags,_labd   ; SP flag
69b6 a9 53             LDA  #'S'
69b8 20 d2 ff          JSR  CHROUT
69bb a9 50             LDA  #'P'
69bd 20 d2 ff          JSR  CHROUT

69c0 0f 69 05 _labd    BBR0 Adr_Flags,_labe   ; X flag
69c3 a9 58             LDA  #'X'
69c5 20 d2 ff          JSR  CHROUT

69c8 3f 69 05 _labe    BBR3 Adr_Flags,_labf   ; ) flag
69cb a9 29             LDA  #')'
69cd 20 d2 ff          JSR  CHROUT

69d0 4f 6c 08 _labf    BBR4 Op_Flag,_comch    ; not a Q instruction
69d3 a5 69             LDA  Adr_Flags
69d5 29 03             AND  #3
69d7 c9 01             CMP  #1
69d9 d0 5d             BNE  _return           ; Q only with ,X

69db 2f 69 12 _comch   BBR2 Adr_Flags,_labg   ; , flag
69de a9 2c             LDA  #','
69e0 20 d2 ff          JSR  CHROUT

69e3 a5 69             LDA  Adr_Flags
69e5 29 03             AND  #%0000 0011 ; $03
69e7 f0 07             BEQ  _labg
69e9 a8                TAY
69ea b9 e1 71          LDA  Index_Char-1,Y
69ed 20 d2 ff          JSR  CHROUT

              ;        fetch 2nd. operand for BBR and BBS

69f0 7f 6c 45 _labg    BBR7 Op_Flag,_return
69f3 a9 2c             LDA  #','
69f5 20 d2 ff          JSR  CHROUT
69f8 a9 24             LDA  #'$'
69fa 20 d2 ff          JSR  CHROUT
69fd a0 02             LDY  #2
69ff 20 d6 61          JSR  Fetch
6a02 85 59             STA  Long_AC
6a04 a9 00             LDA  #0
6a06 85 5a             STA  Long_AC+1
6a08 88                DEY
6a09 84 6d             STY  Op_Size           ; Op_Size = 1
6a0b a9 03             LDA  #3                ; offset for relative address
6a0d 80 02             BRA  _rela

6a0f a9 02    _rel     LDA  #2                ; offset for relative address
6a11 48       _rela    PHA
6a12 a5 6d             LDA  Op_Size           ; 1:short   2:long
6a14 4a                LSR  A
6a15 6a                ROR  A
6a16 25 59             AND  Long_AC
6a18 10 04             BPL  _labh
6a1a a9 ff             LDA  #$ff              ; backward branch
6a1c 85 5a             STA  Long_AC+1

6a1e fa       _labh    PLX                    ; offset 2 or 3
6a1f e3 59    _lpinw   INW  Long_AC
6a21 ca                DEX
6a22 d0 fb             BNE  _lpinw

6a24 18                CLC
6a25 a5 59             LDA  Long_AC
6a27 65 61             ADC  Long_PC
6a29 48                PHA
6a2a a5 5a             LDA  Long_AC+1
6a2c 65 62             ADC  Long_PC+1
6a2e aa                TAX
6a2f 68                PLA
6a30 20 16 6b          JSR  Print_XA_Hex
6a33 7f 6c 02          BBR7 Op_Flag,_return
6a36 e6 6d             INC  Op_Size
6a38 60       _return  RTS
6a39          EndMod [Print_Code] Size = 522 [$20a]

              **************
              Module Got_LAC
              **************

6a39 c6 6f             DEC  Buf_Index
6a3b          EndMod [Got_LAC] Size = 2 [$2]

              **************
              Module Get_LAC
              **************

6a3b 20 58 6a          JSR  Read_Number
6a3e b0 0f             BCS  _error            ; illegal character
6a40 f0 10             BEQ  _noval            ; no value
6a42 20 5f 6b          JSR  Got_Char          ; delimiter ?
6a45 f0 0d             BEQ  _end              ; end of input
6a47 c9 20             CMP  #' '
6a49 f0 0b             BEQ  _ok
6a4b c9 2c             CMP  #','
6a4d f0 07             BEQ  _ok
6a4f 4c d3 60 _error   JMP  Mon_Error         ; stack is reset in Mon_Error

6a52 38       _noval   SEC
6a53 60                RTS

6a54 c6 6f    _end     DEC  Buf_Index
6a56 18       _ok      CLC
6a57 60                RTS
6a58          EndMod [Get_LAC] Size = 29 [$1d]

              ******************
              Module Read_Number
              ******************

6a58 da                PHX
6a59 5a                PHY
6a5a db                PHZ
6a5b a9 00             LDA  #0
6a5d 85 6e             STA  Dig_Cnt           ; count columns read
6a5f 85 59             STA  Long_AC           ; clear result Long_AC
6a61 85 5a             STA  Long_AC+1
6a63 85 5b             STA  Long_AC+2
6a65 85 5c             STA  Long_AC+3

6a67 20 52 6b          JSR  Get_Glyph         ; get 1st. character
6a6a f0 7f             BEQ  _exit
6a6c c9 27             CMP  #APOSTR           ; character entry 'C
6a6e d0 0b             BNE  _numeric
6a70 20 61 6b          JSR  Get_Char          ; character after '
6a73 85 59             STA  Long_AC
6a75 e6 6e             INC  Dig_Cnt
6a77 e6 6f             INC  Buf_Index         ; position on delimiter
6a79 80 70             BRA  _exit

6a7b a0 03    _numeric LDY  #3                ; $ + % %
6a7d d9 18 61 _prefix  CMP  Cons_Prefix,Y     ; Y = base index
6a80 f0 06             BEQ  _digit            ; -> valid prefix
6a82 88                DEY
6a83 10 f8             BPL  _prefix
6a85 c8                INY                    ; Y = 0
6a86 c6 6f             DEC  Buf_Index         ; character is digit

6a88 20 61 6b _digit   JSR  Get_Char          ; hex -> BCD
6a8b f0 5e             BEQ  _exit             ; ? : ; and zero terminate
6a8d c9 30             CMP  #'0'
6a8f 90 5a             BCC  _exit
6a91 c9 3a             CMP  #':'
6a93 90 0a             BCC  _valid            ; 0-9
6a95 c9 41             CMP  #'A'
6a97 90 52             BCC  _exit
6a99 c9 47             CMP  #'G'
6a9b b0 4e             BCS  _exit
6a9d e9 07             SBC  #7                ; hex conversion
6a9f e9 2f    _valid   SBC  #'0'-1
6aa1 d9 da 71          CMP  Num_Base,Y
6aa4 b0 42             BCS  _error
6aa6 48                PHA                    ; push digit
6aa7 e6 6e             INC  Dig_Cnt

6aa9 c0 01             CPY  #1                ; decimal
6aab d0 0a             BNE  _laba
6aad a2 03             LDX  #3                ; push Long_AC * 2
6aaf 18                CLC
6ab0 b5 59    _push    LDA  Long_AC,X
6ab2 2a                ROL  A
6ab3 48                PHA
6ab4 ca                DEX
6ab5 10 f9             BPL  _push

6ab7 be de 71 _laba    LDX  Num_Bits,Y
6aba 06 59    _shift   ASL  Long_AC
6abc 26 5a             ROL  Long_AC+1
6abe eb 5b 00          ROW  Long_AC+2
6ac1 b0 25             BCS  _error            ; overflow
6ac3 ca                DEX
6ac4 d0 f4             BNE  _shift

6ac6 c0 01             CPY  #1                ; decimal adjustment
6ac8 d0 0e             BNE  _labc
6aca a2 00             LDX  #0
6acc a3 03             LDZ  #3
6ace 18                CLC
6acf 68       _pull    PLA
6ad0 75 59             ADC  Long_AC,X
6ad2 95 59             STA  Long_AC,X
6ad4 e8                INX
6ad5 3b                DEZ
6ad6 10 f7             BPL  _pull

6ad8 68       _labc    PLA                    ; pull digit
6ad9 18                CLC
6ada 65 59             ADC  Long_AC
6adc 85 59             STA  Long_AC
6ade 90 a8             BCC  _digit
6ae0 e6 5a             INC  Long_AC+1
6ae2 d0 a4             BNE  _digit
6ae4 e3 5b             INW  Long_AC+2
6ae6 d0 a0             BNE  _digit

6ae8 38       _error   SEC
6ae9 80 01             BRA  _return
6aeb 18       _exit    CLC
6aec fb       _return  PLZ
6aed 7a                PLY
6aee fa                PLX
6aef a5 6e             LDA  Dig_Cnt           ; digits read
6af1 60                RTS
6af2          EndMod [Read_Number] Size = 154 [$9a]

              **************
              Module Hex_LPC
              **************

6af2 a6 64             LDX  Long_PC+3
6af4 f0 15             BEQ  _laba
6af6 a9 9e             LDA  #YELLOW
6af8 20 d2 ff          JSR  CHROUT
6afb 8a                TXA
6afc 20 31 6b          JSR  Print_Hex
6aff a5 63             LDA  Long_PC+2
6b01 20 31 6b          JSR  Print_Hex
6b04 a9 05             LDA  #WHITE
6b06 20 d2 ff          JSR  CHROUT
6b09 80 07             BRA  _labb
6b0b a5 63    _laba    LDA  Long_PC+2
6b0d f0 03             BEQ  _labb
6b0f 20 31 6b          JSR  Print_Hex
6b12 a6 62    _labb    LDX  Long_PC+1
6b14 a5 61             LDA  Long_PC
6b16          EndMod [Hex_LPC] Size = 36 [$24]

              *******************
              Module Print_XA_Hex
              *******************

6b16 48                PHA
6b17 8a                TXA
6b18 20 31 6b          JSR  Print_Hex
6b1b 68                PLA
6b1c          EndMod [Print_XA_Hex] Size = 6 [$6]

              **********************
              Module Print_Hex_Blank
              **********************

6b1c 20 31 6b          JSR  Print_Hex
6b1f          EndMod [Print_Hex_Blank] Size = 3 [$3]

              ******************
              Module Print_Blank
              ******************

6b1f a9 20             LDA  #' '
6b21 4c d2 ff          JMP  CHROUT
6b24          EndMod [Print_Blank] Size = 5 [$5]

              ***************
              Module Print_CR
              ***************

6b24 a9 0d             LDA  #13
6b26 4c d2 ff          JMP  CHROUT
6b29          EndMod [Print_CR] Size = 5 [$5]

              ***************
              Module CR_Erase
              ***************

6b29 20 7d ff          JSR  PRIMM
6b2c 0d 1b 51          .BYTE "\r\eQ",0
6b30 60                RTS
6b31          EndMod [CR_Erase] Size = 8 [$8]

              ****************
              Module Print_Hex
              ****************

6b31 da                PHX
6b32 20 3d 6b          JSR  A_To_Hex
6b35 20 d2 ff          JSR  CHROUT
6b38 8a                TXA
6b39 fa                PLX
6b3a 4c d2 ff          JMP  CHROUT
6b3d          EndMod [Print_Hex] Size = 12 [$c]

              ***************
              Module A_To_Hex
              ***************

6b3d 48                PHA
6b3e 20 47 6b          JSR  _nibble
6b41 aa                TAX
6b42 68                PLA
6b43 4a                LSR  A
6b44 4a                LSR  A
6b45 4a                LSR  A
6b46 4a                LSR  A

6b47 29 0f    _nibble  AND  #15
6b49 c9 0a             CMP  #10
6b4b 90 02             BCC  _lab
6b4d 69 06             ADC  #6
6b4f 69 30    _lab     ADC  #'0'
6b51 60                RTS
6b52          EndMod [A_To_Hex] Size = 21 [$15]

              ****************
              Module Get_Glyph
              ****************
6b52 da                PHX
6b53 a9 20             LDA  #' '
6b55 a6 6f    _loop    LDX  Buf_Index
6b57 e6 6f             INC  Buf_Index
6b59 dd 00 02          CMP  Buffer,X
6b5c f0 f7             BEQ  _loop
6b5e fa                PLX                    ; fall through
6b5f          EndMod [Get_Glyph] Size = 13 [$d]

              ***************
              Module Got_Char
              ***************

6b5f c6 6f             DEC  Buf_Index
6b61          EndMod [Got_Char] Size = 2 [$2]

              ***************
              Module Get_Char
              ***************

6b61 da                PHX                  ; save X
6b62 a6 6f             LDX  Buf_Index
6b64 e6 6f             INC  Buf_Index
6b66 bd 00 02          LDA  Buffer,X
6b69 e0 01             CPX  #1              ; column index
6b6b fa                PLX
6b6c 90 08             BCC  _regc           ; branch at 1st. column
6b6e c9 3b             CMP  #';'            ; register ?
6b70 f0 0a             BEQ  _return
6b72 c9 3f             CMP  #'?'            ; error marker
6b74 f0 06             BEQ  _return
6b76 c9 00    _regc    CMP  #0              ; end of buffer ?
6b78 f0 02             BEQ  _return
6b7a c9 3a             CMP  #':'            ; end of statement ?
6b7c 60       _return  RTS
6b7d          EndMod [Get_Char] Size = 28 [$1c]


              **************
              Module Dec_LCT
              **************

6b7d a5 5d             LDA  Long_CT
6b7f 05 5e             ORA  Long_CT+1
6b81 d0 02             BNE  _skip
6b83 c3 5f             DEW  Long_CT+2
6b85 c3 5d    _skip    DEW  Long_CT
6b87 a5 60             LDA  Long_CT+3         ; set N flag
6b89 60                RTS
6b8a          EndMod [Dec_LCT] Size = 13 [$d]

              **************
              Module Add_LPC
              **************

6b8a 18                CLC
6b8b 65 61             ADC  Long_PC
6b8d 85 61             STA  Long_PC
6b8f 90 06             BCC  _return

              ************
6b91          Inc_LPC_Page
              ************

6b91 e6 62             INC  Long_PC+1
6b93 d0 02             BNE  _return
6b95 e3 63             INW  Long_PC+2
6b97 60       _return  RTS

              ******************
              Module Param_Range
              ******************

              ; read two (address) parameters

              ; Long_CT = difference (2nd. minus 1st.)
              ; Long_PC = 1st. parameter
              ; Long_DA = 2nd. parameter

              ; carry on exit flags error

6b98 20 3b 6a          JSR  Get_LAC           ; get 1st. parameter
6b9b b0 12             BCS  _error
6b9d 20 63 61          JSR  LAC_To_LPC        ; Long_PC = 1st. address
6ba0 20 3b 6a          JSR  Get_LAC
6ba3 b0 0a             BCS  _error
6ba5 20 7b 61          JSR  LAC_To_LDA        ; Long_DA = 2nd. address
6ba8 20 96 61          JSR  LAC_Minus_LPC     ; Long_CT = range
6bab 90 02             BCC  _error
6bad 18                CLC
6bae 60                RTS
6baf 38       _error   SEC
6bb0 60                RTS
6bb1          EndMod [Param_Range] Size = 25 [$19]

              ****************
              Module Converter
              ****************

6bb1 a2 00             LDX  #0
6bb3 86 6f             STX  Buf_Index
6bb5 20 3b 6a          JSR  Get_LAC
6bb8 b3 19 f5          LBCS Mon_Error
6bbb a2 00             LDX  #0
6bbd da       _loop    PHX
6bbe 20 29 6b          JSR  CR_Erase
6bc1 bd 18 61          LDA  Cons_Prefix,X
6bc4 20 d2 ff          JSR  CHROUT
6bc7 8a                TXA
6bc8 0a                ASL  A
6bc9 aa                TAX
6bca 23 d6 6b          JSR  (Conv_Tab,X)
6bcd fa                PLX
6bce e8                INX
6bcf e0 05             CPX  #5
6bd1 90 ea             BCC  _loop
6bd3 4c a5 60          JMP  Main

6bd6 23 6c    Conv_Tab .WORD Print_Hexval
6bd8 2c 6c             .WORD Print_Decimal
6bda f4 6b             .WORD Print_Octal
6bdc ee 6b             .WORD Print_Dual
6bde e0 6b             .WORD Print_Char
6be0          EndMod [Converter] Size = 47 [$2f]

              *****************
              Module Print_Char
              *****************

6be0 a5 59             LDA  Long_AC
6be2 c9 20             CMP  #' '
6be4 90 07             BCC  _return
6be6 c9 60             CMP  #$60
6be8 b0 03             BCS  _return
6bea 4c d2 ff          JMP  CHROUT
6bed 60       _return  RTS
6bee          EndMod [Print_Char] Size = 14 [$e]

              *****************
              Module Print_Dual
              *****************

6bee a2 18             LDX  #24               ; digits
6bf0 a0 01             LDY  #1                ; bits per digit
6bf2 80 04             BRA  _entry

              ***********
6bf4          Print_Octal
              ***********

6bf4 a2 08             LDX  #8                ; digits
6bf6 a0 03             LDY  #3                ; bits per digit

6bf8 20 6f 61 _entry   JSR  LAC_To_LCT
6bfb a3 00             LDZ  #0
6bfd 64 61             STZ  Long_PC
6bff a3 30             LDZ  #'0'
6c01 5a                PHY                    ; save start value
6c02 7a       _loopa   PLY                    ; reinitialise
6c03 5a                PHY
6c04 a9 00             LDA  #0
6c06 06 5d    _loopb   ASL  Long_CT
6c08 eb 5e 00          ROW  Long_CT+1
6c0b 2a                ROL  A
6c0c 88                DEY
6c0d d0 f7             BNE  _loopb
6c0f e0 01             CPX  #1                ; print last character
6c11 f0 04             BEQ  _skip
6c13 05 61             ORA  Long_PC
6c15 f0 07             BEQ  _next
6c17 09 30    _skip    ORA  #'0'
6c19 64 61             STZ  Long_PC
6c1b 20 d2 ff          JSR  CHROUT
6c1e ca       _next    DEX
6c1f d0 e1             BNE  _loopa
6c21 7a                PLY                    ; cleanup stack
6c22 60                RTS
6c23          EndMod [Print_Dual] Size = 53 [$35]

              *******************
              Module Print_Hexval
              *******************

6c23 20 63 61         JSR  LAC_To_LPC
6c26 a9 00            LDA  #0
6c28 85 64            STA  Long_PC+3
6c2a 80 32            BRA  Print_BCD
6c2c          EndMod [Print_Hexval] Size = 9 [$9]

              ********************
              Module Print_Decimal
              ********************

              ; max $ffffff = 16777215 (8 digits)

6c2c 20 6f 61          JSR  LAC_To_LCT
6c2f a2 03             LDX  #3                ; 4 BCD bytes = 8 digits
6c31 a9 00             LDA  #0
6c33 95 61    _clear   STA  Long_PC,X
6c35 ca                DEX
6c36 10 fb             BPL  _clear

6c38 a2 20             LDX  #32               ; source bits
6c3a f8                SED
6c3b 06 5d    _loop    ASL  Long_CT
6c3d 26 5e             ROL  Long_CT+1
6c3f eb 5f 00          ROW  Long_CT+2
6c42 a5 61             LDA  Long_PC
6c44 65 61             ADC  Long_PC
6c46 85 61             STA  Long_PC
6c48 a5 62             LDA  Long_PC+1
6c4a 65 62             ADC  Long_PC+1
6c4c 85 62             STA  Long_PC+1
6c4e a5 63             LDA  Long_PC+2
6c50 65 63             ADC  Long_PC+2
6c52 85 63             STA  Long_PC+2
6c54 a5 64             LDA  Long_PC+3
6c56 65 64             ADC  Long_PC+3
6c58 85 64             STA  Long_PC+3
6c5a ca                DEX
6c5b d0 de             BNE  _loop
6c5d d8                CLD
6c5e          EndMod [Print_Decimal] Size = 50 [$32]

              ****************
              Module Print_BCD
              ****************

6c5e a9 00             LDA  #0
6c60 85 5d             STA  Long_CT
6c62 a3 30             LDZ  #'0'
6c64 a0 08             LDY  #8                ; max. digits
6c66 a2 03    _loopa   LDX  #3                ; 4 bytes
6c68 a9 00             LDA  #0
6c6a 06 61    _loopb   ASL  Long_PC
6c6c 26 62             ROL  Long_PC+1
6c6e eb 63 00          ROW  Long_PC+2
6c71 2a                ROL  A
6c72 ca                DEX
6c73 10 f5             BPL  _loopb

6c75 c0 01             CPY  #1                ; print last character
6c77 f0 04             BEQ  _skip
6c79 05 5d             ORA  Long_CT
6c7b f0 0d             BEQ  _next
6c7d 09 30    _skip    ORA  #'0'
6c7f 64 5d             STZ  Long_CT
6c81 c9 3a             CMP  #$3a
6c83 90 02             BCC  _print
6c85 69 06             ADC  #6                ; + carry
6c87 20 d2 ff _print   JSR  CHROUT
6c8a 88       _next    DEY
6c8b d0 d9             BNE  _loopa
6c8d 60                RTS
6c8e          EndMod [Print_BCD] Size = 48 [$30]


              ***************
              Module Mon_Disk
              ***************

6c8e c6 6f             DEC  Buf_Index
6c90 a6 6f             LDX  Buf_Index
6c92 bd 00 02          LDA  Buffer,X
6c95 f0 68             BEQ  Print_Disk_Status
6c97 85 5d             STA  Long_CT           ; dir marker
6c99 a0 ff             LDY  #$ff              ; SA = 15
6c9b c9 24             CMP  #'$'
6c9d d0 02             BNE  _lab
6c9f a0 f0             LDY  #$f0              ; SA =  0
6ca1 a5 ba    _lab     LDA  FA
6ca3 20 b1 ff          JSR  LISTEN
6ca6 98                TYA                    ; SA
6ca7 20 93 ff          JSR  SECOND
6caa bd 00 02 _loop    LDA  Buffer,X
6cad f0 06             BEQ  _close
6caf 20 a8 ff          JSR  CIOUT
6cb2 e8                INX
6cb3 80 f5             BRA  _loop
6cb5 20 ae ff _close   JSR  UNLSN
6cb8 a5 5d             LDA  Long_CT
6cba c9 24             CMP  #'$'
6cbc d0 41             BNE  Print_Disk_Status
6cbe 4c 50 6d          JMP  Directory

6cc1          EndMod [Mon_Disk] Size = 51 [$33]

              **********************
              Module Get_Disk_Status
              **********************

6cc1 a5 ba             LDA  FA
6cc3 20 b4 ff          JSR  TALK
6cc6 a9 6f             LDA  #$6f
6cc8 20 96 ff          JSR  TKSA
6ccb 20 a5 ff          JSR  ACPTR             ; 1st. digit
6cce 8d 34 04          STA  Disk_Msg
6cd1 0a                ASL  A
6cd2 0a                ASL  A
6cd3 0a                ASL  A
6cd4 0a                ASL  A
6cd5 8d 0b 04          STA  Disk_Status       ; BCD
6cd8 20 a5 ff          JSR  ACPTR             ; 2nd. digit
6cdb 8d 35 04          STA  Disk_Msg+1
6cde 29 0f             AND  #15
6ce0 0d 0b 04          ORA  Disk_Status
6ce3 8d 0b 04          STA  Disk_Status       ; complete BCD number

6ce6 a0 01             LDY  #1
6ce8 c8       _loop    INY
6ce9 20 a5 ff          JSR  ACPTR
6cec 99 34 04          STA  Disk_Msg,Y
6cef c9 20             CMP  #' '
6cf1 b0 f5             BCS  _loop
6cf3 a9 00             LDA  #0
6cf5 99 34 04          STA  Disk_Msg,Y
6cf8 20 ab ff          JSR  UNTALK
6cfb ad 0b 04          LDA  Disk_Status
6cfe 60                RTS
6cff          EndMod [Get_Disk_Status] Size = 62 [$3e]

              ************************
              Module Print_Disk_Status
              ************************

6cff 20 c1 6c          JSR  Get_Disk_Status

              **************
6d02          Print_Disk_Msg
              **************

6d02 20 24 6b          JSR  Print_CR
6d05 a0 00             LDY  #0
6d07 b9 34 04 _loop    LDA  Disk_Msg,Y
6d0a f0 06             BEQ  _exit
6d0c 20 d2 ff          JSR  CHROUT
6d0f c8                INY
6d10 80 f5             BRA  _loop
6d12 4c 24 6b _exit    JMP  Print_CR
6d15          EndMod [Print_Disk_Status] Size = 22 [$16]

              ; @[u] : print disk status for unit u
              ; @[u],$[=pattern] : print directory
              ; @[u],command : send disk command and read status
              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)
              ; @[u],U2 mem track startsec [endsec] : write disk sector(s)

              **************
              Module Mon_DOS
              **************

6d15 a2 08             LDX  #8                ; default device
6d17 20 52 6b          JSR  Get_Glyph
6d1a c9 30             CMP  #'0'
6d1c 90 17             BCC  _unit
6d1e c9 3a             CMP  #':'
6d20 b0 13             BCS  _unit
6d22 c6 6f             DEC  Buf_Index
6d24 20 58 6a          JSR  Read_Number
6d27 b0 0c             BCS  _unit
6d29 a6 59             LDX  Long_AC           ; unit
6d2b e0 04             CPX  #4
6d2d 93 a4 f3          LBCC Mon_Error
6d30 e0 1f             CPX  #31
6d32 b3 9f f3          LBCS Mon_Error
6d35 86 ba    _unit    STX  FA
6d37 c6 6f             DEC  Buf_Index
6d39 20 61 6b _next    JSR  Get_Char
6d3c f0 0c             BEQ  _status           ; only @u
6d3e c9 20             CMP  #' '
6d40 f0 f7             BEQ  _next
6d42 c9 2c             CMP  #','
6d44 f0 f3             BEQ  _next
6d46 c9 55             CMP  #'U'              ; sector read/write
6d48 f0 4e             BEQ  DOS_U
6d4a 20 8e 6c _status  JSR  Mon_Disk
6d4d 4c a5 60          JMP  Main
6d50          EndMod [Mon_DOS] Size = 59 [$3b]

              ****************
              Module Directory
              ****************

6d50 a5 ba             LDA  FA
6d52 20 b4 ff          JSR  TALK
6d55 a9 60             LDA  #$60
6d57 85 b9             STA  SA
6d59 20 96 ff          JSR  TKSA
6d5c a9 00             LDA  #0
6d5e 85 90             STA  STATUS

6d60 a3 06             LDZ  #6                ; load address, pseudo link, pseudo number
6d62 aa       _loopb   TAX                    ; X = previous byte
6d63 20 a5 ff          JSR  ACPTR             ; A = current  byte
6d66 a4 90             LDY  STATUS
6d68 d0 2b             BNE  _exit
6d6a 3b                DEZ
6d6b d0 f5             BNE  _loopb            ; X/A = last read word

6d6d 86 59             STX  Long_AC
6d6f 85 5a             STA  Long_AC+1
6d71 64 5b             STZ  Long_AC+2
6d73 64 5c             STZ  Long_AC+3
6d75 20 2c 6c          JSR  Print_Decimal     ; file size
6d78 20 1f 6b          JSR  Print_Blank

6d7b 20 a5 ff _loopc   JSR  ACPTR             ; print file entry
6d7e f0 09             BEQ  _cr
6d80 a4 90             LDY  STATUS
6d82 d0 11             BNE  _exit
6d84 20 d2 ff          JSR  CHROUT
6d87 90 f2             BCC  _loopc

6d89 20 24 6b _cr      JSR  Print_CR
6d8c 20 e1 ff          JSR  STOP
6d8f f0 04             BEQ  _exit
6d91 a3 04             LDZ  #4
6d93 80 cd             BRA  _loopb            ; next file
6d95 4c ab ff _exit    JMP  UNTALK
6d98          EndMod [Directory] Size = 72 [$48]

              ************
              Module DOS_U
              ************

6d98 20 61 6b          JSR  Get_Char
6d9b c9 31             CMP  #'1'            ; U1: read
6d9d 93 34 f3          LBCC Mon_Error
6da0 c9 33             CMP  #'3'            ; U2: write
6da2 b3 2f f3          LBCS Mon_Error
6da5 8d 0d 04          STA  Mon_Data+1      ; U type
6da8 e6 6f             INC  Buf_Index
6daa 20 3b 6a          JSR  Get_LAC
6dad b3 24 f3          LBCS Mon_Error
6db0 20 63 61          JSR  LAC_To_LPC      ; Long_PC = memory address

6db3 20 3b 6a          JSR  Get_LAC
6db6 b3 1b f3          LBCS Mon_Error
6db9 a5 59             LDA  Long_AC
6dbb 8d 09 04          STA  Disk_Track

6dbe 20 3b 6a          JSR  Get_LAC
6dc1 b3 10 f3          LBCS Mon_Error
6dc4 a5 59             LDA  Long_AC
6dc6 8d 0a 04          STA  Disk_Sector

6dc9 20 3b 6a          JSR  Get_LAC
6dcc 20 6f 61          JSR  LAC_To_LCT        ; Long_CT = sector count
6dcf c3 5d             DEW  Long_CT           ; Long_CT = -1 for single

6dd1 20 cf 6e          JSR  Open_Disk_Buffer

6dd4 ad 0d 04 _loop    LDA  Mon_Data+1
6dd7 4a                LSR  A
6dd8 f0 0a             BEQ  _write
6dda 20 ff 6d          JSR  Find_Next_Sector
6ddd d0 17             BNE  _error
6ddf 20 59 6e          JSR  Read_Sector
6de2 80 08             BRA  _next

6de4 20 73 6e _write   JSR  Write_Sector
6de7 20 ff 6d          JSR  Find_Next_Sector
6dea d0 0a             BNE  _error

6dec 20 91 6b _next    JSR  Inc_LPC_Page
6def ee 0a 04          INC  Disk_Sector
6df2 c3 5d             DEW  Long_CT
6df4 10 de             BPL  _loop

6df6 20 02 6d _error   JSR  Print_Disk_Msg
6df9 20 eb 6e          JSR  Close_Disk_Buffer
6dfc 4c a5 60          JMP  Main
6dff          EndMod [DOS_U] Size = 103 [$67]

              ***********************
              Module Find_Next_Sector
              ***********************

6dff 20 ad 6e          JSR  Build_U_String
6e02 20 48 6e          JSR  Send_Disk_Command
6e05 20 c1 6c          JSR  Get_Disk_Status
6e08 f0 1d             BEQ  _return           ; OK
6e0a c9 66             CMP  #$66              ; illegal track or sector
6e0c d0 13             BNE  _error            ; error
6e0e a9 00             LDA  #0
6e10 8d 0a 04          STA  Disk_Sector
6e13 ee 09 04          INC  Disk_Track        ; try next track
6e16 20 ad 6e          JSR  Build_U_String
6e19 20 48 6e          JSR  Send_Disk_Command
6e1c 20 c1 6c          JSR  Get_Disk_Status
6e1f f0 06             BEQ  _return
6e21 20 02 6d _error   JSR  Print_Disk_Msg
6e24 ad 0b 04          LDA  Disk_Status
6e27 60       _return  RTS
6e28          EndMod [Find_Next_Sector] Size = 41 [$29]

              ***************************
              Module Open_Command_Channel
              ***************************

6e28 a5 ba             LDA  FA
6e2a 20 b1 ff          JSR  LISTEN
6e2d a9 ff             LDA  #$ff
6e2f 20 93 ff          JSR  SECOND
6e32 a0 00             LDY  #0
6e34 84 90             STY  STATUS
6e36 60                RTS
6e37          EndMod [Open_Command_Channel] Size = 15 [$f]

              ***************
              Module Reset_BP
              ***************

6e37 20 28 6e          JSR  Open_Command_Channel
6e3a b9 f4 71 _loop    LDA  BP_ZERO,Y
6e3d f0 06             BEQ  _end
6e3f 20 a8 ff          JSR  CIOUT
6e42 c8                INY
6e43 80 f5             BRA  _loop
6e45 4c ae ff _end     JMP  UNLSN
6e48          EndMod [Reset_BP] Size = 17 [$11]

              ************************
              Module Send_Disk_Command
              ************************

6e48 20 28 6e          JSR  Open_Command_Channel
6e4b b9 0c 04 _loop    LDA  Mon_Data,Y
6e4e f0 06             BEQ  _end
6e50 20 a8 ff          JSR  CIOUT
6e53 c8                INY
6e54 80 f5             BRA  _loop
6e56 4c ae ff _end     JMP  UNLSN
6e59          EndMod [Send_Disk_Command] Size = 17 [$11]

              ******************
              Module Read_Sector
              ******************

6e59 a5 ba             LDA  FA
6e5b 20 b4 ff          JSR  TALK
6e5e a9 69             LDA  #$69              ; SA = 9
6e60 20 96 ff          JSR  TKSA
6e63 a3 00             LDZ  #0
6e65 64 90             STZ  STATUS
6e67 20 a5 ff _loop    JSR  ACPTR
6e6a ea 92 61          STA  [Long_PC],Z
6e6d 1b                INZ
6e6e d0 f7             BNE  _loop
6e70 4c ab ff          JMP  UNTALK
6e73          EndMod [Read_Sector] Size = 26 [$1a]

              ******************
              Module Write_Sector
              ******************

6e73 20 37 6e          JSR  Reset_BP          ; reset disk buffer pointer
6e76 a5 ba             LDA  FA
6e78 20 b1 ff          JSR  LISTEN
6e7b a9 69             LDA  #$69              ; SA = 9
6e7d 20 96 ff          JSR  TKSA
6e80 a3 00             LDZ  #0
6e82 64 90             STZ  STATUS
6e84 ea b2 61 _loop    LDA  [Long_PC],Z
6e87 20 a8 ff          JSR  CIOUT
6e8a 1b                INZ
6e8b d0 f7             BNE  _loop
6e8d 20 ae ff          JSR  UNLSN
6e90 60                RTS
6e91          EndMod [Write_Sector] Size = 30 [$1e]

              *************
              Module Set_TS
              *************

              ; Input  A = track or sector
              ;        X = string index

6e91 c9 64    _100      CMP  #100
6e93 90 07              BCC  _10
6e95 fe 0c 04           INC  Mon_Data,X
6e98 e9 64              SBC  #100
6e9a 80 f5              BRA  _100
6e9c c9 0a    _10       CMP  #10
6e9e 90 07              BCC  _1
6ea0 fe 0d 04           INC  Mon_Data+1,X
6ea3 e9 0a              SBC  #10
6ea5 80 f5              BRA  _10
6ea7 09 30    _1        ORA  #'0'
6ea9 9d 0e 04           STA  Mon_Data+2,X
6eac 60                 RTS
6ead          EndMod [Set_TS] Size = 28 [$1c]

              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)

              ; U1:CHANNEL DRIVE TRACK SECTOR

              *********************
              Module Build_U_String
              *********************

6ead a2 0e             LDX  #14
6eaf bd e5 71 _loop    LDA  U1,X
6eb2 9d 0c 04          STA  Mon_Data,X
6eb5 ca                DEX
6eb6 e0 02             CPX  #2
6eb8 b0 f5             BCS  _loop
6eba a9 55             LDA  #'U'
6ebc 8d 0c 04          STA  Mon_Data
6ebf ad 09 04          LDA  Disk_Track
6ec2 a2 07             LDX  #7
6ec4 20 91 6e          JSR  Set_TS
6ec7 ad 0a 04          LDA  Disk_Sector
6eca a2 0b             LDX  #11
6ecc 4c 91 6e          JMP  Set_TS
6ecf          EndMod [Build_U_String] Size = 34 [$22]

              ***********************
              Module Open_Disk_Buffer
              ***********************

6ecf a9 00             LDA  #0
6ed1 85 90             STA  STATUS
6ed3 a5 ba             LDA  FA
6ed5 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
6ed8 a9 f9             LDA  #$f9            ; sa = 9
6eda 20 93 ff          JSR  SECOND
6edd a9 23             LDA  #'#'            ; open buffer
6edf 20 a8 ff          JSR  CIOUT
6ee2 20 ae ff          JSR  UNLSN
6ee5 a5 90             LDA  STATUS
6ee7 d3 16 fe          LBNE Print_Disk_Status
6eea 60                RTS
6eeb          EndMod [Open_Disk_Buffer] Size = 28 [$1c]

              ************************
              Module Close_Disk_Buffer
              ************************

6eeb a9 00             LDA  #0
6eed 85 90             STA  STATUS
6eef a5 ba             LDA  FA
6ef1 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
6ef4 a9 e9             LDA  #$e9            ; sa = 9
6ef6 20 93 ff          JSR  SECOND
6ef9 20 ae ff          JSR  UNLSN
6efc a5 90             LDA  STATUS
6efe d3 ff fd          LBNE Print_Disk_Status
6f01 60                RTS
6f02          EndMod [Close_Disk_Buffer] Size = 23 [$17]


              ; The 3 letter mnemonics are encoded as three 5-bit values
              ; and stored in a left byte MNE_L and a right byte MNE_R
              ; The 5 bit value is computed by subtracting $3f from the
              ; ASCII value, so '?'-> 0, '@'->1, 'A'->2, 'B'->3,'Z'->27
              ; For example "ADC" is encoded as 2, 5, 4
              ; ----------------
              ; 7654321076543210
              ; 00010
              ;      00101
              ;           00100
              ;                0
              ;
              ; The operator >" stores the left (high) byte of the packed value
              ; The operator <" stores the right (low) byte of the packed value

              *****
6f02          MNE_L
              *****

6f02 11                .BYTE >"ADC"
6f03 13                .BYTE >"AND"
6f04 15                .BYTE >"ASL"
6f05 15                .BYTE >"ASR"
6f06 15                .BYTE >"ASW"
6f07 18                .BYTE >"BBR"
6f08 18                .BYTE >"BBS"
6f09 19                .BYTE >"BCC"
6f0a 19                .BYTE >"BCS"
6f0b 19                .BYTE >"BEQ"
6f0c 1a                .BYTE >"BIT"
6f0d 1b                .BYTE >"BMI"
6f0e 1b                .BYTE >"BNE"
6f0f 1c                .BYTE >"BPL"
6f10 1c                .BYTE >"BRA"
6f11 1c                .BYTE >"BRK"
6f12 1d                .BYTE >"BSR"
6f13 1d                .BYTE >"BVC"
6f14 1d                .BYTE >"BVS"
6f15 23                .BYTE >"CLC"
6f16 23                .BYTE >"CLD"
6f17 23                .BYTE >"CLE"
6f18 23                .BYTE >"CLI"
6f19 23                .BYTE >"CLV"
6f1a 23                .BYTE >"CMP"
6f1b 24                .BYTE >"CPX"
6f1c 24                .BYTE >"CPY"
6f1d 24                .BYTE >"CPZ"
6f1e 29                .BYTE >"DEC"
6f1f 29                .BYTE >"DEW"
6f20 29                .BYTE >"DEX"
6f21 29                .BYTE >"DEY"
6f22 29                .BYTE >"DEZ"
6f23 34                .BYTE >"EOR"
6f24 53                .BYTE >"INC"
6f25 53                .BYTE >"INW"
6f26 53                .BYTE >"INX"
6f27 53                .BYTE >"INY"
6f28 53                .BYTE >"INZ"
6f29 5b                .BYTE >"JMP"
6f2a 5d                .BYTE >"JSR"
6f2b 69                .BYTE >"LDA"
6f2c 69                .BYTE >"LDX"
6f2d 69                .BYTE >"LDY"
6f2e 69                .BYTE >"LDZ"
6f2f 6d                .BYTE >"LSR"
6f30 70                .BYTE >"MAP"
6f31 79                .BYTE >"NEG"
6f32 7c                .BYTE >"NOP"
6f33 84                .BYTE >"ORA"
6f34 8a                .BYTE >"PHA"
6f35 8a                .BYTE >"PHP"
6f36 8a                .BYTE >"PHW"
6f37 8a                .BYTE >"PHX"
6f38 8a                .BYTE >"PHY"
6f39 8a                .BYTE >"PHZ"
6f3a 8b                .BYTE >"PLA"
6f3b 8b                .BYTE >"PLP"
6f3c 8b                .BYTE >"PLX"
6f3d 8b                .BYTE >"PLY"
6f3e 8b                .BYTE >"PLZ"
6f3f 9b                .BYTE >"RMB"
6f40 9c                .BYTE >"ROL"
6f41 9c                .BYTE >"ROR"
6f42 9c                .BYTE >"ROW"
6f43 9d                .BYTE >"RTI"
6f44 9d                .BYTE >"RTS"
6f45 a0                .BYTE >"SBC"
6f46 a1                .BYTE >"SEC"
6f47 a1                .BYTE >"SED"
6f48 a1                .BYTE >"SEE"
6f49 a1                .BYTE >"SEI"
6f4a a3                .BYTE >"SMB"
6f4b a5                .BYTE >"STA"
6f4c a5                .BYTE >"STX"
6f4d a5                .BYTE >"STY"
6f4e a5                .BYTE >"STZ"
6f4f a8                .BYTE >"TAB"
6f50 a8                .BYTE >"TAX"
6f51 a8                .BYTE >"TAY"
6f52 a8                .BYTE >"TAZ"
6f53 a8                .BYTE >"TBA"
6f54 ac                .BYTE >"TRB"
6f55 ad                .BYTE >"TSB"
6f56 ad                .BYTE >"TSX"
6f57 ad                .BYTE >"TSY"
6f58 ae                .BYTE >"TXA"
6f59 ae                .BYTE >"TXS"
6f5a ae                .BYTE >"TYA"
6f5b ae                .BYTE >"TYS"
6f5c ae                .BYTE >"TZA"

              *****
6f5d          MNE_R
              *****

6f5d 48                .BYTE <"ADC" ; 00
6f5e ca                .BYTE <"AND" ; 01
6f5f 1a                .BYTE <"ASL" ; 02
6f60 26                .BYTE <"ASR" ; 03
6f61 30                .BYTE <"ASW" ; 04
6f62 e6                .BYTE <"BBR" ; 05
6f63 e8                .BYTE <"BBS" ; 06
6f64 08                .BYTE <"BCC" ; 07
6f65 28                .BYTE <"BCS" ; 08
6f66 a4                .BYTE <"BEQ" ; 09
6f67 aa                .BYTE <"BIT" ; 0a
6f68 94                .BYTE <"BMI" ; 0b
6f69 cc                .BYTE <"BNE" ; 0c
6f6a 5a                .BYTE <"BPL" ; 0d
6f6b c4                .BYTE <"BRA" ; 0e
6f6c d8                .BYTE <"BRK" ; 0f
6f6d 26                .BYTE <"BSR" ; 10
6f6e c8                .BYTE <"BVC" ; 11
6f6f e8                .BYTE <"BVS" ; 12
6f70 48                .BYTE <"CLC" ; 13
6f71 4a                .BYTE <"CLD" ; 14
6f72 4c                .BYTE <"CLE" ; 15
6f73 54                .BYTE <"CLI" ; 16
6f74 6e                .BYTE <"CLV" ; 17
6f75 a2                .BYTE <"CMP" ; 18
6f76 72                .BYTE <"CPX" ; 19
6f77 74                .BYTE <"CPY" ; 1a
6f78 76                .BYTE <"CPZ" ; 1b
6f79 88                .BYTE <"DEC" ; 1c
6f7a b0                .BYTE <"DEW" ; 1d
6f7b b2                .BYTE <"DEX" ; 1e
6f7c b4                .BYTE <"DEY" ; 1f
6f7d b6                .BYTE <"DEZ"
6f7e 26                .BYTE <"EOR"
6f7f c8                .BYTE <"INC"
6f80 f0                .BYTE <"INW"
6f81 f2                .BYTE <"INX"
6f82 f4                .BYTE <"INY"
6f83 f6                .BYTE <"INZ"
6f84 a2                .BYTE <"JMP"
6f85 26                .BYTE <"JSR"
6f86 44                .BYTE <"LDA"
6f87 72                .BYTE <"LDX"
6f88 74                .BYTE <"LDY"
6f89 76                .BYTE <"LDZ"
6f8a 26                .BYTE <"LSR"
6f8b a2                .BYTE <"MAP"
6f8c 90                .BYTE <"NEG"
6f8d 22                .BYTE <"NOP"
6f8e c4                .BYTE <"ORA"
6f8f 44                .BYTE <"PHA"
6f90 62                .BYTE <"PHP"
6f91 70                .BYTE <"PHW"
6f92 72                .BYTE <"PHX"
6f93 74                .BYTE <"PHY"
6f94 76                .BYTE <"PHZ"
6f95 44                .BYTE <"PLA"
6f96 62                .BYTE <"PLP"
6f97 72                .BYTE <"PLX"
6f98 74                .BYTE <"PLY"
6f99 76                .BYTE <"PLZ"
6f9a 86                .BYTE <"RMB"
6f9b 1a                .BYTE <"ROL"
6f9c 26                .BYTE <"ROR"
6f9d 30                .BYTE <"ROW"
6f9e 54                .BYTE <"RTI"
6f9f 68                .BYTE <"RTS"
6fa0 c8                .BYTE <"SBC"
6fa1 88                .BYTE <"SEC"
6fa2 8a                .BYTE <"SED"
6fa3 8c                .BYTE <"SEE"
6fa4 94                .BYTE <"SEI"
6fa5 86                .BYTE <"SMB"
6fa6 44                .BYTE <"STA"
6fa7 72                .BYTE <"STX"
6fa8 74                .BYTE <"STY"
6fa9 76                .BYTE <"STZ"
6faa 86                .BYTE <"TAB"
6fab b2                .BYTE <"TAX"
6fac b4                .BYTE <"TAY"
6fad b6                .BYTE <"TAZ"
6fae c4                .BYTE <"TBA"
6faf c6                .BYTE <"TRB"
6fb0 06                .BYTE <"TSB"
6fb1 32                .BYTE <"TSX"
6fb2 34                .BYTE <"TSY"
6fb3 44                .BYTE <"TXA"
6fb4 68                .BYTE <"TXS"
6fb5 84                .BYTE <"TYA"
6fb6 a8                .BYTE <"TYS"
6fb7 c4                .BYTE <"TZA"

              *********
6fb8          MNE_Index
              *********

              ; an index for all 256 opcodes, describing
              ; where to find the 3-letter mnemonic

6fb8 0f 31 15          .BYTE $0f,$31,$15,$46,$53,$31,$02,$3d
6fc0 33 31 02          .BYTE $33,$31,$02,$55,$53,$31,$02,$05
6fc8 0d 31 31          .BYTE $0d,$31,$31,$0d,$52,$31,$02,$3d
6fd0 13 31 22          .BYTE $13,$31,$22,$26,$52,$31,$02,$05
6fd8 28 01 28          .BYTE $28,$01,$28,$28,$0a,$01,$3e,$3d
6fe0 39 01 3e          .BYTE $39,$01,$3e,$59,$0a,$01,$3e,$05
6fe8 0b 01 01          .BYTE $0b,$01,$01,$0b,$0a,$01,$3e,$3d
6ff0 44 01 1c          .BYTE $44,$01,$1c,$20,$0a,$01,$3e,$05
6ff8 41 21 2f          .BYTE $41,$21,$2f,$03,$03,$21,$2d,$3d
7000 32 21 2d          .BYTE $32,$21,$2d,$50,$27,$21,$2d,$05
7008 11 21 21          .BYTE $11,$21,$21,$11,$03,$21,$2d,$3d
7010 16 21 36          .BYTE $16,$21,$36,$4d,$2e,$21,$2d,$05
7018 42 00 42          .BYTE $42,$00,$42,$10,$4c,$00,$3f,$3d
7020 38 00 3f          .BYTE $38,$00,$3f,$5a,$27,$00,$3f,$05
7028 12 00 00          .BYTE $12,$00,$00,$12,$4c,$00,$3f,$3d
7030 47 00 3b          .BYTE $47,$00,$3b,$51,$27,$00,$3f,$05
7038 0e 49 49          .BYTE $0e,$49,$49,$0e,$4b,$49,$4a,$48
7040 1f 0a 56          .BYTE $1f,$0a,$56,$4b,$4b,$49,$4a,$06
7048 07 49 49          .BYTE $07,$49,$49,$07,$4b,$49,$4a,$48
7050 58 49 57          .BYTE $58,$49,$57,$4a,$4c,$49,$4c,$06
7058 2b 29 2a          .BYTE $2b,$29,$2a,$2c,$2b,$29,$2a,$48
7060 4f 29 4e          .BYTE $4f,$29,$4e,$2c,$2b,$29,$2a,$06
7068 08 29 29          .BYTE $08,$29,$29,$08,$2b,$29,$2a,$48
7070 17 29 54          .BYTE $17,$29,$54,$2c,$2b,$29,$2a,$06
7078 1a 18 1b          .BYTE $1a,$18,$1b,$1d,$1a,$18,$1c,$48
7080 25 18 1e          .BYTE $25,$18,$1e,$04,$1a,$18,$1c,$06
7088 0c 18 18          .BYTE $0c,$18,$18,$0c,$1b,$18,$1c,$48
7090 14 18 35          .BYTE $14,$18,$35,$37,$1b,$18,$1c,$06
7098 19 43 29          .BYTE $19,$43,$29,$23,$19,$43,$22,$48
70a0 24 43 30          .BYTE $24,$43,$30,$40,$19,$43,$22,$06
70a8 09 43 43          .BYTE $09,$43,$43,$09,$34,$43,$22,$48
70b0 45 43 3a          .BYTE $45,$43,$3a,$3c,$34,$43,$22,$06

              *****
70b8          BRAIN
              *****

              ;              index values for branch mnemonics

              ;              BCC BCS BEQ BMI BNE BPL BRA BSR BVC BVS
70b8 07 08 09          .BYTE $07,$08,$09,$0b,$0c,$0d,$0e,$10,$11,$12

              *******
70c2          LEN_ADM
              *******

              ; a table of instruction length, flags
              ; and address mode for all 256 opcodes

              ; 7-6: operand length %00.. 0: implied
              ;                     %01.. 1: direct page, indirect
              ;                     %10.. 2: absolute, etc.
              ;                     %11.. 3: BBR and BBS

              ;   5: relative       %0110 0000 $60 short branch
              ;                     %1010 0000 $a0 long  branch

              ;   4:

              ; 3-0: index of address mode


70c2 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $00
70ca 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $08
70d2 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $10
70da 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $18
70e2 80 44 8b          .BYTE $80,$44,$8b,$84,$40,$40,$40,$40 ; $20
70ea 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $28
70f2 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $30
70fa 00 88 00          .BYTE $00,$88,$00,$00,$87,$87,$87,$c0 ; $38
7102 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $40
710a 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $48
7112 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $50
711a 00 88 00          .BYTE $00,$88,$00,$00,$00,$87,$87,$c0 ; $58
7122 00 44 41          .BYTE $00,$44,$41,$a0,$40,$40,$40,$40 ; $60
712a 00 41 00          .BYTE $00,$41,$00,$00,$8b,$80,$80,$c0 ; $68
7132 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $70
713a 00 88 00          .BYTE $00,$88,$00,$00,$84,$87,$87,$c0 ; $78
7142 60 44 4d          .BYTE $60,$44,$4d,$a0,$40,$40,$40,$40 ; $80
714a 00 41 00          .BYTE $00,$41,$00,$87,$80,$80,$80,$c0 ; $88
7152 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $90
715a 00 88 00          .BYTE $00,$88,$00,$88,$80,$87,$87,$c0 ; $98
7162 41 44 41          .BYTE $41,$44,$41,$41,$40,$40,$40,$40 ; $a0
716a 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $a8
7172 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $b0
717a 00 88 00          .BYTE $00,$88,$00,$87,$87,$87,$88,$c0 ; $b8
7182 41 44 41          .BYTE $41,$44,$41,$40,$40,$40,$40,$40 ; $c0
718a 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $c8
7192 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $d0
719a 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $d8
71a2 41 44 4d          .BYTE $41,$44,$4d,$40,$40,$40,$40,$40 ; $e0
71aa 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $e8
71b2 60 45 46          .BYTE $60,$45,$46,$a0,$81,$47,$47,$40 ; $f0
71ba 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $f8

              ******
71c2          ADMODE
              ******

              ; printout flags for 16 address modes
              ;               76543210
              ;               --------
              ;            7  x         #
              ;            6   x        (
              ;            5    x       ,
              ;            4     x      SP
              ;            3      x     )
              ;            2       x    ,
              ;            1/0      xx  01:X  10:Y  11:Z

71c2 00                .BYTE %00000000 ; 0             implicit/direct
71c3 80                .BYTE %10000000 ; 1 #$nn        immediate
71c4 00                .BYTE %00000000 ; 2             ----------
71c5 00                .BYTE %00000000 ; 3             ----------
71c6 69                .BYTE %01101001 ; 4 ($nn,X)     indirect X
71c7 4e                .BYTE %01001110 ; 5 ($nn),Y     indirect Y
71c8 4f                .BYTE %01001111 ; 6 ($nn),Z     indirect Z
71c9 05                .BYTE %00000101 ; 7 $nn,X       indexed  X
71ca 06                .BYTE %00000110 ; 8 $nn,Y       indexed  Y
71cb 05                .BYTE %00000101 ; 9 $nn,X       indexed  X
71cc 06                .BYTE %00000110 ; a $nn,Y       ----------
71cd 48                .BYTE %01001000 ; b ($nnnn,X)   JMP & JSR
71ce 69                .BYTE %01101001 ; c ($nn,X)     ----------
71cf 7e                .BYTE %01111110 ; d ($nn,SP),Y  LDA & STA
71d0 00                .BYTE %00000000 ; e
71d1 04                .BYTE %00000100 ; f

              ;              ASL INC ROL DEC LSR ROR NEG ASR
71d2 0a 1a 2a ACCUMODE .BYTE $0a,$1a,$2a,$3a,$4a,$6a,$42,$43

71da 10 0a 08 Num_Base .BYTE 16,10, 8, 2 ; hex, dec, oct, bin
71de 04 03 03 Num_Bits .BYTE  4, 3, 3, 1 ; hex, dec, oct, bin

71e2 58 59 5a Index_Char .BYTE "XYZ"

              ;                0123456789abcd
71e5 55 31 3a U1        .BYTE "U1:9 0 000 000",0 ; channel 9, drive, track, sector
71f4 42 2d 50 BP_ZERO   .BYTE "B-P 9 0",0        ; set buffer pointer to 0

              ***************
              Module Reg_Text
              ***************
71fc 20 7d ff          JSR  PRIMM
71ff 0d 20 20          .BYTE "\r    PC   SR AC XR YR ZR BP  SP  NVEBDIZC\r; \eQ",0
722e 60                RTS
722f          EndMod [Reg_Text] Size = 51 [$33]

              ***************
              Module Mon_Help
              ***************
722f 20 7d ff    JSR PRIMM

7232 96 41 05    .BYTE LRED,"A",WHITE,"SSEMBLE     - A ADDRESS MNEMONIC OPERAND",CR
725e 96 42 05    .BYTE LRED,"B",WHITE,"ITMAPS      - B [FROM [TO]]",CR
727d 96 43 05    .BYTE LRED,"C",WHITE,"OMPARE      - C FROM TO WITH",CR
729d 96 44 05    .BYTE LRED,"D",WHITE,"ISASSEMBLE  - D [FROM [TO]]",CR
72bc 96 46 05    .BYTE LRED,"F",WHITE,"ILL         - F FROM TO FILLBYTE",CR
72e0 96 47 05    .BYTE LRED,"G",WHITE,"O           - G [ADDRESS]",CR
72fd 96 48 05    .BYTE LRED,"H",WHITE,"UNT         - H FROM TO (STRING OR BYTES)",CR
732a 96 4a 05    .BYTE LRED,"J",WHITE,"SR          - J ADDRESS",CR
7345 96 4c 05    .BYTE LRED,"L",WHITE,"OAD         - L FILENAME [UNIT [ADDRESS]]",CR
7372 96 4d 05    .BYTE LRED,"M",WHITE,"EMORY       - M [FROM [TO]]",CR
7391 96 52 05    .BYTE LRED,"R",WHITE,"EGISTERS    - R",CR
73a4 96 53 05    .BYTE LRED,"S",WHITE,"AVE         - S FILENAME UNIT FROM TO",CR
73cd 96 54 05    .BYTE LRED,"T",WHITE,"RANSFER     - T FROM TO TARGET",CR
73ef 96 56 05    .BYTE LRED,"V",WHITE,"ERIFY       - V FILENAME [UNIT [ADDRESS]]",CR
741c 45 96 58    .BYTE "E",LRED,"X",WHITE,"IT         - X",CR
742f 96 2e 05    .BYTE LRED,".",WHITE,"<DOT>       - . ADDRESS MNEMONIC OPERAND",CR
745b 96 3e 05    .BYTE LRED,">",WHITE,"<GREATER>   - > ADDRESS BYTE SEQUENCE",CR
7484 96 3b 05    .BYTE LRED,";",WHITE,"<SEMICOLON> - ; REGISTER CONTENTS",CR
74a9 96 40 05    .BYTE LRED,"@",WHITE,"DOS         - @ [DOS COMMAND]",CR
74ca 96 3f 05    .BYTE LRED,"?",WHITE,"HELP        - ?",CR
74dd 00          .BYTE 0
74de 4c a5 60    JMP Main
74e1          End_Mod

74e1 ff ff ff          .FILL $8000-* ($ff) ; 3749 bytes ; 2847 bytes


  447 Symbols
-------------
Bank                           $0002    28D   284    287    343    351
                                       522    524    527    774
PCH                            $0003    29D   272    280    315
PCL                            $0004    30D   278    281    313
SR                             $0005    31D   367
WHITE                          $0005    14D   470    736    744    888
                                       902   1815   2105   3212   3213
                                      3214   3215   3216   3217   3218
                                      3219   3220   3221   3222   3223
                                      3224   3225   3226   3227   3228
                                      3229   3230   3231
AC                             $0006    32D   301
XR                             $0007    33
YR                             $0008    34
ZR                             $0009    35
BP                             $000a    41
SPH                            $000b    42D   325    359
SPL                            $000c    43D   327    361    814    825
                                       829
CR                             $000d    18D   397    451   1505   3212
                                      3213   3214   3215   3216   3217
                                      3218   3219   3220   3221   3222
                                      3223   3224   3225   3226   3227
                                      3228   3229   3230   3231
REV                            $0012    19D   451
CRIGHT                         $001d    20D   428
QUOTE                          $0022    21D  1050   1057
APOSTR                         $0027    22D   987   2010
Long_AC                        $0059    56D   208    210    218    222
                                       521    523    525    526    537
                                       551    565    580    582    596
                                       612    624    626    634    635
                                       637    638    773    791    932
                                       934    944    946    967    969
                                      1002   1071   1080   1081   1123
                                      1238   1241   1408   1410   1411
                                      1419   1420   1475   1484   1543
                                      1550   1552   1553   1555   1752
                                      1754   1761   1762   1852   1855
                                      1869   1878   1927   1929   1940
                                      1943   1946   1951   1954   2003
                                      2004   2005   2006   2013   2047
                                      2054   2055   2056   2067   2068
                                      2075   2076   2078   2080   2322
                                      2553   2592   2593   2594   2595
                                      2631   2636
Long_CT                        $005d    57D   211    212    214    215
                                       219    223    552    581    598
                                       695    696    699   1403   1409
                                      1417   1418   1623   1635   1638
                                      2235   2236   2238   2239   2240
                                      2354   2355   2397   2398   2399
                                      2422   2436   2439   2458   2473
                                      2641   2659
Long_PC                        $0061    58D   538    597    613    646
                                       648    671    673    748    792
                                       794    838    840    856    858
                                       941    943    964    966   1087
                                      1106   1107   1124   1470   1473
                                      1476   1485   1491   1513   1517
                                      1551   1554   1952   1955   2097
                                      2103   2108   2111   2112   2249
                                      2250   2257   2259   2348   2361
                                      2364   2378   2391   2400   2401
                                      2402   2403   2404   2405   2406
                                      2407   2408   2409   2410   2411
                                      2427   2428   2429   2739   2756
Long_DA                        $0065    59D   566    656    657    659
                                       660    715    718    721    737
                                       745    746    929    931   1010
                                      1018   1140   1176   1177   1186
                                      1190
Adr_Flags                      $0069    63D  1700   1838   1841   1883
                                      1887   1893   1897   1902   1907
                                      1911
Mode_Flags                     $006a    64D  1234   1262   1271   1281
                                      1293   1303   1313   1326   1340
                                      1354   1368   1384   1430   1448
                                      1451   1566   1587   1596   1607
                                      1608
Op_Code                        $006b    65D  1206   1224   1225   1407
                                      1434   1464   1472   1490   1565
                                      1681   1692   1739   1749   1795
                                      1802   1820   1861
Op_Flag                        $006c    66D  1141   1161   1273   1323
                                      1436   1467   1662   1673   1690
                                      1707   1715   1743   1773   1791
                                      1801   1828   1843   1868   1876
                                      1901   1920   1959
Op_Size                        $006d    70D  1465   1466   1477   1496
                                      1497   1632   1633   1637   1706
                                      1708   1722   1835   1856   1875
                                      1931   1937   1960
Dig_Cnt                        $006e    71D  2002   2014   2041   2089
Buf_Index                      $006f    72D   401   1053   1066   1251
                                      1968   1989   2015   2024   2195
                                      2196   2206   2214   2215   2293
                                      2454   2455   2550   2559   2624
STATUS                         $0090    77D  1041   1098   2582   2587
                                      2601   2698   2737   2755   2815
                                      2823   2833   2839
VERCK                          $0093    78D   437   1082   1091   1099
LRED                           $0096    16D   744    886    900   3212
                                      3213   3214   3215   3216   3217
                                      3218   3219   3220   3221   3222
                                      3223   3224   3225   3226   3227
                                      3228   3229   3230   3231
YELLOW                         $009e    15D   451   1737   2099
FNLEN                          $00b7    79D  1039   1060
SA                             $00b9    80D  1036   1086   1109   2579
FA                             $00ba    81D  1034   1072   2463   2484
                                      2558   2576   2693   2732   2750
                                      2816   2834
FNADR                          $00bb    82D  1043   1045   1059
BA                             $00bd    83D  1038   1076
FNBANK                         $00be    84D  1040
NDX                            $00d0    86
MODE_80                        $00d7    87D   693    797    884    898
B_Margin                       $00e4    89
T_Margin                       $00e5    90
L_Margin                       $00e6    91
R_Margin                       $00e7    92
QTSW                           $00f4    94D   854
Buffer                         $0200    96D   393    402   1054   1508
                                      1510   1519   1523   1531   2197
                                      2216   2456   2467
IIRQ                           $0314    98
IBRK                           $0316    99
EXMON                          $032e   100
X_Vector                       $0400   104D   314    316    505
Ix_Mne                         $0402   105D  1196   1392   1575
Op_Mne                         $0403   106D  1158   1164   1171
Op_Ix                          $0406   107D  1142   1244   1247   1290
                                      1324   1338   1352   1366   1382
                                      1393
Op_Len                         $0407   108D  1143   1246   1446   1452
                                      1455   1603
Disk_Unit                      $0408   109D  1033
Disk_Track                     $0409   110D  2632   2679   2802
Disk_Sector                    $040a   111D  2637   2658   2678   2805
Disk_Status                    $040b   112D  2494   2498   2499   2510
                                      2685
Mon_Data                       $040c   114D   993   1003   1015   1042
                                      1044   2623   2645   2720   2773
                                      2778   2782   2796   2801
Disk_Msg                       $0434   115D  2489   2496   2504   2508
                                      2526
header                         $1fff   167
Link                           $2029   179D   171
header_loop                    $205a   218D   221    225
Monitor_Call                   $6000   239
Monitor_Break                  $6003   245
Monitor_Switch                 $6006   251
Mon_Break                      $6009   257D   248
Mon_Break_loop                 $601f   271D   269    274
Mon_Break_nopage               $602b   281D   279
Mon_Break_bank                 $6036   286D   284
Mon_Call                       $603c   292D   242
Mon_Call_loop                  $6043   301D   303
Mon_Call_store                 $6055   313D   310
Mon_Start                      $605f   320D   288
Mon_Register                   $606d   335D   486
Mon_Register_loopa             $6072   343D   347
Mon_Register_loopb             $607d   351D   355
Mon_Register_loopc             $6096   368D   376
Mon_Register_flag              $609e   373D   371
Main                           $60a5   380D   404    431    707    761
                                       778    805    830    939    951
                                       976   1022   1026   1089   1101
                                      1104   1128   1147   1630   1640
                                      2309   2569   2664   3233
Main_A                         $60aa   389D  1536
Main_loop                      $60aa   392D   398
Main_getcomm                   $60c0   403D   406
Mon_Switch                     $60c9   410D   254
Mon_Switch_loop                $60cb   414D   417
Mon_Error                      $60d3   422D   396    691    917    919
                                       959    961    984    991   1047
                                      1051   1064   1084   1095   1100
                                      1118   1120   1136   1194   1217
                                      1219   1229   1236   1239   1325
                                      1328   1332   1339   1346   1353
                                      1358   1367   1374   1381   1383
                                      1386   1398   1402   1404   1431
                                      1447   1449   1626   1984   2295
                                      2555   2557   2620   2622   2626
                                      2630   2635
Mon_Select                     $60e0   434D   415
Print_Commands                 $60ed   447D   262    295
Command_Char                   $6107   454D   414
Cons_Prefix                    $6118   461D  2019   2299
Load_Save_Verify               $611d   467
Jump_Table                     $6123   474D   443
Mon_Exit                       $614f   502D   488
LAC_To_PC                      $6152   508D   769    813    824
LAC_To_PC_error                $6162   528D   520
LAC_To_LPC                     $6163   532D   686    734    787   1075
                                      1137   1619   2276   2376   2627
LAC_To_LPC_loop                $6166   537D   540
LAC_To_LCT                     $616f   546D  1250   2346   2388   2640
LAC_To_LCT_loop                $6172   551D   554
LAC_To_LDA                     $617b   560D  2279
LAC_To_LDA_loop                $617e   565D   568
LAC_Plus_LCT                   $6187   574D   927
LAC_Plus_LCT_loop              $618b   580D   584
LAC_Minus_LPC                  $6196   590D   690   1625   2280
LAC_Minus_LPC_loop             $619a   596D   600
LAC_Compare_LPC                $61a5   606D   922
LAC_Compare_LPC_loop           $61a9   612D   615
Inc_LAC                        $61b2   621D   948    972
Inc_LAC_return                 $61b8   627D   625
Dec_LAC                        $61b9   631D   936
Dec_LAC_skip                   $61c1   638D   636
Inc_LPC                        $61c4   643D   757    947    973   1023
                                      1125
Inc_LPC_return                 $61ca   649D   647
Dec_LDA                        $61cb   653D   935
Dec_LDA_skip                   $61d3   660D   658
Fetch                          $61d6   665D  1014   1663   1670   1680
                                      1686   1691   1718   1854   1926
Fetch_banked                   $61dd   673D   671
Mon_Memory                     $61e3   680D   485
Mon_Memory_shift               $61fe   695D   693    698
Mon_Memory_row                 $6209   702D   685    688    706
Mon_Memory_exit                $6214   707D   703
Print_Bits                     $6217   711D   749
Print_Bits_loop                $621c   717D   723
Print_Bits_set                 $6223   720D   718
Mon_Bits                       $622d   729D   478
Mon_Bits_lab                   $6235   735D   733
Mon_Bits_row                   $623e   740D   760
Mon_Bits_col                   $6244   743D   755
Mon_Set_Register               $626a   765D   492
Mon_Set_Register_loop          $6272   771D   777
Mon_Set_Register_exit          $6281   778D   772
Mon_Set_Memory                 $6284   782D   491
Mon_Set_Memory_loop            $628e   789D   799
Mon_Set_Memory_banked          $6299   794D   792
Mon_Set_Memory_next            $62a3   799D   797
Mon_Set_Memory_exit            $62a5   801D   786    790
Mon_Go                         $62b2   809D   482
Mon_JSR                        $62be   820D   484
Dump_4_Bytes                   $62d0   834D   887    889
Dump_4_Bytes_loop              $62d3   838D   845
Dump_4_Bytes_banked            $62d7   840D   838
Dump_4_Chars                   $62e3   850D   901    903
Dump_4_Chars_loop              $62ea   856D   868
Dump_4_Chars_banked            $62ee   858D   856
Dump_4_Chars_laba              $62f7   863D   861
Dump_Row                       $6302   873D   704    804
Dump_Row_loop                  $6316   886D   884    891
Dump_Row_lchr                  $6331   900D   898    905
Mon_Transfer                   $6344   913D   487
Mon_Transfer_lpback            $635a   929D   938
Mon_Transfer_rb                $635e   931D   929
Mon_Transfer_wb                $6364   934D   932
Mon_Transfer_forward           $6374   941D   923    950
Mon_Transfer_rf                $6378   943D   941
Mon_Transfer_wf                $637e   946D   944
Mon_Compare                    $638e   955D   479
Mon_Compare_loop               $639f   964D   975
Mon_Compare_rf                 $63a3   966D   964
Mon_Compare_cf                 $63a9   969D   967
Mon_Compare_laba               $63b0   972D   970
Mon_Hunt                       $63be   980D   483
Mon_Hunt_lpstr                 $63d5   993D   998
Mon_Hunt_bin                   $63e4  1001D   988
Mon_Hunt_lpbin                 $63e7  1002D  1008
Mon_Hunt_hunt                  $63f6  1010D   996    999   1006
Mon_Hunt_lpstart               $63fb  1013D  1025
Mon_Hunt_lpins                 $63fd  1014D  1019
Mon_Hunt_next                  $640d  1021D  1016
Load_Save                      $641e  1030D   439
Load_Save_skip                 $6439  1046D  1049
Load_Save_copyfn               $644a  1054D  1063
Load_Save_unit                 $6460  1066D  1058
Load_Save_exit                 $6496  1089D  1098
Load_Save_do                   $6499  1091D  1055   1068   1070   1074
                                      1110
Load_Save_exec                 $64a6  1097D  1093
Load_Save_load                 $64c1  1106D  1078
Mon_Fill                       $64cb  1114D   481
Mon_Fill_loop                  $64dc  1123D  1127
Mon_Assemble                   $64ec  1132D   477    490
Mon_Assemble_start             $64f5  1139D  1150
Mon_Assemble_getin             $6501  1144D  1167
Mon_Assemble_laba              $650b  1149D  1145
Mon_Assemble_labb              $6521  1164D  1155   1157   1160
Mon_Assemble_lpenc             $6529  1171D  1181
Mon_Assemble_lpbit             $6531  1175D  1179
Mon_Assemble_lpfind            $6540  1187D  1193
Mon_Assemble_nxfind            $654c  1192D  1188
Mon_Assemble_found             $6552  1196D  1191
Mon_Assemble_lpopc             $6558  1202D  1205
Mon_Assemble_exopc             $6560  1206D  1203
Mon_Assemble_labc              $6586  1233D  1213
Mon_Assemble_labd              $6588  1234D  1265   1275   1284   1304
                                      1317   1330   1348   1360   1376
                                      1388
Mon_Assemble_labf              $659e  1244D  1242
Mon_Assemble_labg              $65ae  1251D  1237   1249
Mon_Assemble_lpnop             $65b0  1253D  1256
Mon_Assemble_lbra              $65c6  1269D  1261
Mon_Assemble_indir             $65d4  1279D  1270
Mon_Assemble_comma             $65e0  1288D  1280
Mon_Assemble_comma1            $65fd  1302D  1294   1296   1298
Mon_Assemble_stack             $6603  1308D  1289
Mon_Assemble_rbra              $6619  1321D  1309
Mon_Assemble_error             $6632  1332D  1263   1272   1282   1291
                                      1301   1312   1315   1323
Mon_Assemble_right             $6635  1336D  1322
Mon_Assemble_right1            $664e  1347D  1342   1344
Mon_Assemble_X                 $6653  1350D  1337
Mon_Assemble_X1                $6668  1359D  1356
Mon_Assemble_Y                 $666d  1364D  1351
Mon_Assemble_Y1                $6686  1375D  1370   1372
Mon_Assemble_Z                 $668b  1380D  1365
Mon_Assemble_adjust            $66a2  1392D  1254
Mon_Assemble_BB                $66ba  1403D  1400
Mon_Assemble_one               $66d2  1417D  1396
Mon_Assemble_lpbrain           $66dc  1422D  1425
Mon_Assemble_branch            $66e6  1430D  1423
Mon_Assemble_bran1             $66fa  1439D  1436
Mon_Assemble_match             $66fc  1443D  1394   1426
Mon_Assemble_lpmatch           $66ff  1444D  1454
Mon_Assemble_okmat             $671b  1455D  1445
Mon_Assemble_store             $671f  1464D  1413   1439
Mon_Assemble_storen            $673f  1480D  1467
Mon_Assemble_lpsto             $6743  1484D  1488
Mon_Assemble_store1            $674d  1490D  1482
Mon_Assemble_print             $6752  1493D  1478
Mon_Assemble_auto              $6780  1516D  1514   1528
Branch_Target                  $67a7  1540D  1406   1433   1545
Match_Mode                     $67ba  1560D  1444
Match_Mode_loop                $67be  1567D  1576
Match_Mode_next                $67c3  1572D  1577
Match_Mode_error               $67d0  1579D  1573
Match_Mode_return              $67d1  1580D  1568
Mode_Index                     $67d2  1584D  1443
Mode_Index_loop                $67d6  1589D  1593
Mode_Index_found               $67e2  1596D  1590
Size_To_Mode                   $67e4  1600D  1453
Mon_Disassemble                $67f1  1614D   480
Mon_Disassemble_nopar          $67fe  1622D  1618
range                          $6804  1625D  1621
Mon_Disassemble_loop           $680a  1628D  1624   1639
Dis_Code                       $6829  1644D  1631
Print_Code                     $682f  1652D  1495
Print_Code_nop                 $684c  1679D  1668   1672
Print_Code_normal              $686a  1695D  1684   1689
Print_Code_norm1               $6883  1709D  1707
Print_Code_blpr                $688c  1717D  1715
Print_Code_lphex               $688f  1718D  1724
Print_Code_lpfill              $689e  1728D  1733
Print_Code_long                $68ac  1737D  1721   1729
Print_Code_locate              $68c1  1749D  1742
Print_Code_lpmne               $68d2  1759D  1771
Print_Code_lplet               $68d6  1761D  1765
Print_Code_lastc               $68e9  1773D  1768
Print_Code_Q3                  $68fc  1782D  1775   1779
Print_Code_Q4                  $6903  1785D  1777   1781
Print_Code_lbra                $690d  1790D  1773
Print_Code_biti                $6921  1802D  1798
Print_Code_mne4                $6931  1813D  1784   1800
Print_Code_mne5                $6934  1814D  1788   1791   1811
Print_Code_lpaccu              $6940  1822D  1825
Print_Code_accu                $694f  1830D  1828
Print_Code_oper                $6955  1835D  1823
Print_Code_laba                $6961  1841D  1838
Print_Code_labb                $696b  1845D  1840   1843
Print_Code_labc                $696e  1846D  1841
Print_Code_lpfop               $6977  1853D  1857
Print_Code_proper              $699b  1875D  1868
Print_Code_lpoper              $69a2  1878D  1876   1881
Print_Code_labd                $69c0  1893D  1887
Print_Code_labe                $69c8  1897D  1883   1893
Print_Code_labf                $69d0  1901D  1873   1897
Print_Code_comch               $69db  1907D  1901
Print_Code_labg                $69f0  1920D  1907   1913
Print_Code_rel                 $6a0f  1935D  1864
Print_Code_rela                $6a11  1936D  1933
Print_Code_labh                $6a1e  1945D  1941
Print_Code_lpinw               $6a1f  1946D  1948
Print_Code_return              $6a38  1961D  1831   1836   1905   1920
                                      1959
Got_LAC                        $6a39  1965D  1001
Get_LAC                        $6a3b  1972D   683    687    732    768
                                       771    785    789    812    823
                                       918    960   1005   1069   1073
                                      1077   1119   1135   1617   1620
                                      2274   2277   2294   2625   2629
                                      2634   2639
Get_LAC_error                  $6a4f  1984D  1976
Get_LAC_noval                  $6a52  1986D  1977
Get_LAC_end                    $6a54  1989D  1979
Get_LAC_ok                     $6a56  1990D  1981   1983
Read_Number                    $6a58  1995D  1235   1975   2551
Read_Number_numeric            $6a7b  2018D  2011
Read_Number_prefix             $6a7d  2019D  2022
Read_Number_digit              $6a88  2026D  2020   2077   2079   2081
Read_Number_valid              $6a9f  2037D  2031
Read_Number_push               $6ab0  2047D  2051
Read_Number_laba               $6ab7  2053D  2044
Read_Number_shift              $6aba  2054D  2059
Read_Number_pull               $6acf  2066D  2071
Read_Number_labc               $6ad8  2073D  2062
Read_Number_error              $6ae8  2083D  2039   2057
Read_Number_exit               $6aeb  2085D  2009   2016   2027   2029
                                      2033   2035
Read_Number_return             $6aec  2086D  2084
Hex_LPC                        $6af2  2094D   741    880    971   1020
                                      1657
Hex_LPC_laba                   $6b0b  2108D  2098
Hex_LPC_labb                   $6b12  2111D  2107   2109
Print_XA_Hex                   $6b16  2116D  1958
Print_Hex_Blank                $6b1c  2126D   352    362    841   1719
Print_Blank                    $6b1f  2133D  1813   1814   2597
Print_CR                       $6b24  2141D   383    735    756    877
                                       962   1011   1079   1121   2524
                                      2531   2606
CR_Erase                       $6b29  2149D  1628   2298
Print_Hex                      $6b31  2158D   344    360   1870   1879
                                      2102   2104   2110   2121   2129
A_To_Hex                       $6b3d  2170D  1518   2162
A_To_Hex_nibble                $6b47  2182D  2174
A_To_Hex_lab                   $6b4f  2186D  2184
Get_Glyph                      $6b52  2191D  2008   2545
Get_Glyph_loop                 $6b55  2195D  2198
Got_Char                       $6b5f  2203D  1978
Get_Char                       $6b61  2210D   403    986    989    995
                                      1046   1067   1144   1215   1227
                                      1253   1310   2012   2026   2560
                                      2618
Get_Char_regc                  $6b76  2224D  2219
Get_Char_return                $6b7c  2227D  2221   2223   2225
Dec_LCT                        $6b7d  2232D   937    949    974   1024
                                      1126
Dec_LCT_skip                   $6b85  2239D  2237
Add_LPC                        $6b8a  2245D   907   1498   1634   1675
Inc_LPC_Page                   $6b91  2254D  2657
Add_LPC_return                 $6b97  2260D  2251   2258
Param_Range                    $6b98  2263D   916    958    983   1117
Param_Range_error              $6baf  2284D  2275   2278   2281
Converter                      $6bb1  2289D   494    495    496    497
                                       498
Converter_loop                 $6bbd  2297D  2308
Conv_Tab                       $6bd6  2311D  2304
Print_Char                     $6be0  2319D  2315
Print_Char_return              $6bed  2328D  2324   2326
Print_Dual                     $6bee  2332D  2314
Print_Octal                    $6bf4  2340D  2313
Print_Dual_entry               $6bf8  2346D  2337
Print_Dual_loopa               $6c02  2351D  2367
Print_Dual_loopb               $6c06  2354D  2358
Print_Dual_skip                $6c17  2363D  2360
Print_Dual_next                $6c1e  2366D  2362
Print_Hexval                   $6c23  2373D  2311
Print_Decimal                  $6c2c  2383D  2312   2596
Print_Decimal_clear            $6c33  2391D  2393
Print_Decimal_loop             $6c3b  2397D  2413
Print_BCD                      $6c5e  2418D  2379
Print_BCD_loopa                $6c66  2425D  2445
Print_BCD_loopb                $6c6a  2427D  2432
Print_BCD_skip                 $6c7d  2438D  2435
Print_BCD_print                $6c87  2443D  2441
Print_BCD_next                 $6c8a  2444D  2437
Mon_Disk                       $6c8e  2451D  2568
Mon_Disk_lab                   $6ca1  2463D  2461
Mon_Disk_loop                  $6caa  2467D  2471
Mon_Disk_close                 $6cb5  2472D  2468
Get_Disk_Status                $6cc1  2481D  2518   2673   2682
Get_Disk_Status_loop           $6ce8  2502D  2506
Print_Disk_Status              $6cff  2515D  2457   2475   2824   2840
Print_Disk_Msg                 $6d02  2521D  2662   2684
Print_Disk_Status_loop         $6d07  2526D  2530
Print_Disk_Status_exit         $6d12  2531D  2527
Mon_DOS                        $6d15  2541D   489
Mon_DOS_unit                   $6d35  2558D  2547   2549   2552
Mon_DOS_next                   $6d39  2560D  2563   2565
Mon_DOS_status                 $6d4a  2568D  2561
Directory                      $6d50  2573D  2476
Directory_loopb                $6d62  2585D  2590   2610
Directory_loopc                $6d7b  2599D  2604
Directory_cr                   $6d89  2606D  2600
Directory_exit                 $6d95  2611D  2588   2602   2608
DOS_U                          $6d98  2615D  2567
DOS_U_loop                     $6dd4  2645D  2660
DOS_U_write                    $6de4  2653D  2647
DOS_U_next                     $6dec  2657D  2651
DOS_U_error                    $6df6  2662D  2649   2655
Find_Next_Sector               $6dff  2668D  2648   2654
Find_Next_Sector_error         $6e21  2684D  2676
Find_Next_Sector_return        $6e27  2686D  2674   2683
Open_Command_Channel           $6e28  2690D  2706   2719
Reset_BP                       $6e37  2703D  2749
Reset_BP_loop                  $6e3a  2707D  2711
Reset_BP_end                   $6e45  2712D  2708
Send_Disk_Command              $6e48  2716D  2672   2681
Send_Disk_Command_loop         $6e4b  2720D  2724
Send_Disk_Command_end          $6e56  2725D  2721
Read_Sector                    $6e59  2729D  2650
Read_Sector_loop               $6e67  2738D  2741
Write_Sector                   $6e73  2746D  2653
Write_Sector_loop              $6e84  2756D  2759
Set_TS                         $6e91  2765D  2804   2807
Set_TS_100                     $6e91  2771D  2775
Set_TS_10                      $6e9c  2776D  2772   2780
Set_TS_1                       $6ea7  2781D  2777
Build_U_String                 $6ead  2791D  2671   2680
Build_U_String_loop            $6eaf  2795D  2799
Open_Disk_Buffer               $6ecf  2811D  2643
Close_Disk_Buffer              $6eeb  2829D  2663
MNE_L                          $6f02  2861D  1187   1751
MNE_R                          $6f5d  2957D  1189   1753
MNE_Index                      $6fb8  3053D  1202   1574   1750
BRAIN                          $70b8  3093D  1422
LEN_ADM                        $70c2  3102D  1567   1695   1740   1862
ADMODE                         $71c2  3156D  1589   1699
ACCUMODE                       $71d2  3188D  1824
Num_Base                       $71da  3190D  2038
Num_Bits                       $71de  3191D  2053
Index_Char                     $71e2  3193D  1915
U1                             $71e5  3196D  2795
BP_ZERO                        $71f4  3197D  2707
Reg_Text                       $71fc  3200D   338
Mon_Help                       $722f  3208D   493
End_Mod                        $74e1  3234
EXIT_OLD                       $cf2e   117D   311    312
EXIT                           $cfa4   118D   268    307    308    309
SETBNK                         $ff6b   120
JSRFAR                         $ff6e   121D   827
JMPFAR                         $ff71   122D   816
LDA_FAR                        $ff74   123
STA_FAR                        $ff77   124
CMP_FAR                        $ff7a   125
PRIMM                          $ff7d   126D   260    427    450    801
                                       893   1102   1493   1504   1647
                                      1730   2152   3202   3210
CINT                           $ff81   127
IOINIT                         $ff84   128
SETMSG                         $ff90   129D   329
SECOND                         $ff93   130D  2466   2696   2819   2837
TKSA                           $ff96   131D  2487   2580   2735   2753
MEMTOP                         $ff99   132
MEMBOT                         $ff9c   133
KEY                            $ff9f   134
SETTMO                         $ffa2   135
ACPTR                          $ffa5   136D  2488   2495   2503   2586
                                      2599   2738
CIOUT                          $ffa8   137D  2469   2709   2722   2757
                                      2821
UNTALK                         $ffab   138D  2509   2611   2742
UNLSN                          $ffae   139D  2472   2712   2725   2760
                                      2822   2838
LISTEN                         $ffb1   140D  2464   2694   2751   2817
                                      2835
TALK                           $ffb4   141D  2485   2577   2733
READSS                         $ffb7   142
SETLFS                         $ffba   143
SETNAM                         $ffbd   144
OPEN                           $ffc0   145
CLOSE                          $ffc3   146
CHKIN                          $ffc6   147
CHKOUT                         $ffc9   148
CLRCHN                         $ffcc   149
CHRIN                          $ffcf   150D   392
CHROUT                         $ffd2   151D   373    720    747    837
                                       855    864    879   1520   1524
                                      1532   1717   1738   1745   1770
                                      1783   1785   1787   1790   1810
                                      1816   1830   1845   1847   1872
                                      1885   1889   1891   1895   1899
                                      1909   1916   1922   1924   2100
                                      2106   2137   2145   2163   2166
                                      2300   2327   2365   2443   2528
                                      2603
LOAD                           $ffd5   152D  1097
SAVE                           $ffd8   153D  1088
SETTIM                         $ffdb   154
GETTIM                         $ffde   155
STOP                           $ffe1   156D   702   1021   1629   2607
GETIN                          $ffe4   157
CLALL                          $ffe7   158
SCAN                           $ffea   159
SCRORG                         $ffed   160
PLOT                           $fff0   161
Long_AC                        $0059    56D   208    210    218    222
                                       521    523    525    526    537
                                       551    565    580    582    596
                                       612    624    626    634    635
                                       637    638    773    791    932
                                       934    944    946    967    969
                                      1002   1071   1080   1081   1123
                                      1238   1241   1408   1410   1411
                                      1419   1420   1475   1484   1543
                                      1550   1552   1553   1555   1752
                                      1754   1761   1762   1852   1855
                                      1869   1878   1927   1929   1940
                                      1943   1946   1951   1954   2003
                                      2004   2005   2006   2013   2047
                                      2054   2055   2056   2067   2068
                                      2075   2076   2078   2080   2322
                                      2553   2592   2593   2594   2595
                                      2631   2636
Long_PC                        $0061    58D   538    597    613    646
                                       648    671    673    748    792
                                       794    838    840    856    858
                                       941    943    964    966   1087
                                      1106   1107   1124   1470   1473
                                      1476   1485   1491   1513   1517
                                      1551   1554   1952   1955   2097
                                      2103   2108   2111   2112   2249
                                      2250   2257   2259   2348   2361
                                      2364   2378   2391   2400   2401
                                      2402   2403   2404   2405   2406
                                      2407   2408   2409   2410   2411
                                      2427   2428   2429   2739   2756
Long_CT                        $005d    57D   211    212    214    215
                                       219    223    552    581    598
                                       695    696    699   1403   1409
                                      1417   1418   1623   1635   1638
                                      2235   2236   2238   2239   2240
                                      2354   2355   2397   2398   2399
                                      2422   2436   2439   2458   2473
                                      2641   2659
WHITE                          $0005    14D   470    736    744    888
                                       902   1815   2105   3212   3213
                                      3214   3215   3216   3217   3218
                                      3219   3220   3221   3222   3223
                                      3224   3225   3226   3227   3228
                                      3229   3230   3231
LRED                           $0096    16D   744    886    900   3212
                                      3213   3214   3215   3216   3217
                                      3218   3219   3220   3221   3222
                                      3223   3224   3225   3226   3227
                                      3228   3229   3230   3231
CR                             $000d    18D   397    451   1505   3212
                                      3213   3214   3215   3216   3217
                                      3218   3219   3220   3221   3222
                                      3223   3224   3225   3226   3227
                                      3228   3229   3230   3231
Op_Flag                        $006c    66D  1141   1161   1273   1323
                                      1436   1467   1662   1673   1690
                                      1707   1715   1743   1773   1791
                                      1801   1828   1843   1868   1876
                                      1901   1920   1959
Mode_Flags                     $006a    64D  1234   1262   1271   1281
                                      1293   1303   1313   1326   1340
                                      1354   1368   1384   1430   1448
                                      1451   1566   1587   1596   1607
                                      1608
Long_DA                        $0065    59D   566    656    657    659
                                       660    715    718    721    737
                                       745    746    929    931   1010
                                      1018   1140   1176   1177   1186
                                      1190
Buf_Index                      $006f    72D   401   1053   1066   1251
                                      1968   1989   2015   2024   2195
                                      2196   2206   2214   2215   2293
                                      2454   2455   2550   2559   2624
Op_Size                        $006d    70D  1465   1466   1477   1496
                                      1497   1632   1633   1637   1706
                                      1708   1722   1835   1856   1875
                                      1931   1937   1960
Op_Code                        $006b    65D  1206   1224   1225   1407
                                      1434   1464   1472   1490   1565
                                      1681   1692   1739   1749   1795
                                      1802   1820   1861
STATUS                         $0090    77D  1041   1098   2582   2587
                                      2601   2698   2737   2755   2815
                                      2823   2833   2839
FA                             $00ba    81D  1034   1072   2463   2484
                                      2558   2576   2693   2732   2750
                                      2816   2834
Adr_Flags                      $0069    63D  1700   1838   1841   1883
                                      1887   1893   1897   1902   1907
                                      1911
Bank                           $0002    28D   284    287    343    351
                                       522    524    527    774
SPL                            $000c    43D   327    361    814    825
                                       829
MODE_80                        $00d7    87D   693    797    884    898
SA                             $00b9    80D  1036   1086   1109   2579
VERCK                          $0093    78D   437   1082   1091   1099
Dig_Cnt                        $006e    71D  2002   2014   2041   2089
FNADR                          $00bb    82D  1043   1045   1059
YELLOW                         $009e    15D   451   1737   2099
PCL                            $0004    30D   278    281    313
PCH                            $0003    29D   272    280    315
BA                             $00bd    83D  1038   1076
FNLEN                          $00b7    79D  1039   1060
APOSTR                         $0027    22D   987   2010
QUOTE                          $0022    21D  1050   1057
SPH                            $000b    42D   325    359
QTSW                           $00f4    94D   854
FNBANK                         $00be    84D  1040
CRIGHT                         $001d    20D   428
REV                            $0012    19D   451
AC                             $0006    32D   301
SR                             $0005    31D   367
R_Margin                       $00e7    92
L_Margin                       $00e6    91
T_Margin                       $00e5    90
B_Margin                       $00e4    89
NDX                            $00d0    86
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
Long_AC                        $0059    56D   208    210    218    222
                                       521    523    525    526    537
                                       551    565    580    582    596
                                       612    624    626    634    635
                                       637    638    773    791    932
                                       934    944    946    967    969
                                      1002   1071   1080   1081   1123
                                      1238   1241   1408   1410   1411
                                      1419   1420   1475   1484   1543
                                      1550   1552   1553   1555   1752
                                      1754   1761   1762   1852   1855
                                      1869   1878   1927   1929   1940
                                      1943   1946   1951   1954   2003
                                      2004   2005   2006   2013   2047
                                      2054   2055   2056   2067   2068
                                      2075   2076   2078   2080   2322
                                      2553   2592   2593   2594   2595
                                      2631   2636
Long_PC                        $0061    58D   538    597    613    646
                                       648    671    673    748    792
                                       794    838    840    856    858
                                       941    943    964    966   1087
                                      1106   1107   1124   1470   1473
                                      1476   1485   1491   1513   1517
                                      1551   1554   1952   1955   2097
                                      2103   2108   2111   2112   2249
                                      2250   2257   2259   2348   2361
                                      2364   2378   2391   2400   2401
                                      2402   2403   2404   2405   2406
                                      2407   2408   2409   2410   2411
                                      2427   2428   2429   2739   2756
Long_CT                        $005d    57D   211    212    214    215
                                       219    223    552    581    598
                                       695    696    699   1403   1409
                                      1417   1418   1623   1635   1638
                                      2235   2236   2238   2239   2240
                                      2354   2355   2397   2398   2399
                                      2422   2436   2439   2458   2473
                                      2641   2659
WHITE                          $0005    14D   470    736    744    888
                                       902   1815   2105   3212   3213
                                      3214   3215   3216   3217   3218
                                      3219   3220   3221   3222   3223
                                      3224   3225   3226   3227   3228
                                      3229   3230   3231
LRED                           $0096    16D   744    886    900   3212
                                      3213   3214   3215   3216   3217
                                      3218   3219   3220   3221   3222
                                      3223   3224   3225   3226   3227
                                      3228   3229   3230   3231
CR                             $000d    18D   397    451   1505   3212
                                      3213   3214   3215   3216   3217
                                      3218   3219   3220   3221   3222
                                      3223   3224   3225   3226   3227
                                      3228   3229   3230   3231
Op_Flag                        $006c    66D  1141   1161   1273   1323
                                      1436   1467   1662   1673   1690
                                      1707   1715   1743   1773   1791
                                      1801   1828   1843   1868   1876
                                      1901   1920   1959
Mode_Flags                     $006a    64D  1234   1262   1271   1281
                                      1293   1303   1313   1326   1340
                                      1354   1368   1384   1430   1448
                                      1451   1566   1587   1596   1607
                                      1608
Long_DA                        $0065    59D   566    656    657    659
                                       660    715    718    721    737
                                       745    746    929    931   1010
                                      1018   1140   1176   1177   1186
                                      1190
Buf_Index                      $006f    72D   401   1053   1066   1251
                                      1968   1989   2015   2024   2195
                                      2196   2206   2214   2215   2293
                                      2454   2455   2550   2559   2624
Op_Size                        $006d    70D  1465   1466   1477   1496
                                      1497   1632   1633   1637   1706
                                      1708   1722   1835   1856   1875
                                      1931   1937   1960
Op_Code                        $006b    65D  1206   1224   1225   1407
                                      1434   1464   1472   1490   1565
                                      1681   1692   1739   1749   1795
                                      1802   1820   1861
Mon_Data                       $040c   114D   993   1003   1015   1042
                                      1044   2623   2645   2720   2773
                                      2778   2782   2796   2801
Buffer                         $0200    96D   393    402   1054   1508
                                      1510   1519   1523   1531   2197
                                      2216   2456   2467
STATUS                         $0090    77D  1041   1098   2582   2587
                                      2601   2698   2737   2755   2815
                                      2823   2833   2839
FA                             $00ba    81D  1034   1072   2463   2484
                                      2558   2576   2693   2732   2750
                                      2816   2834
Op_Ix                          $0406   107D  1142   1244   1247   1290
                                      1324   1338   1352   1366   1382
                                      1393
Adr_Flags                      $0069    63D  1700   1838   1841   1883
                                      1887   1893   1897   1902   1907
                                      1911
Bank                           $0002    28D   284    287    343    351
                                       522    524    527    774
Op_Len                         $0407   108D  1143   1246   1446   1452
                                      1455   1603
Disk_Msg                       $0434   115D  2489   2496   2504   2508
                                      2526
Disk_Status                    $040b   112D  2494   2498   2499   2510
                                      2685
SPL                            $000c    43D   327    361    814    825
                                       829
Disk_Sector                    $040a   111D  2637   2658   2678   2805
MODE_80                        $00d7    87D   693    797    884    898
SA                             $00b9    80D  1036   1086   1109   2579
VERCK                          $0093    78D   437   1082   1091   1099
Dig_Cnt                        $006e    71D  2002   2014   2041   2089
Disk_Track                     $0409   110D  2632   2679   2802
Op_Mne                         $0403   106D  1158   1164   1171
Ix_Mne                         $0402   105D  1196   1392   1575
X_Vector                       $0400   104D   314    316    505
FNADR                          $00bb    82D  1043   1045   1059
YELLOW                         $009e    15D   451   1737   2099
PCL                            $0004    30D   278    281    313
PCH                            $0003    29D   272    280    315
header_loop                    $205a   218D   221    225
BA                             $00bd    83D  1038   1076
FNLEN                          $00b7    79D  1039   1060
APOSTR                         $0027    22D   987   2010
QUOTE                          $0022    21D  1050   1057
SPH                            $000b    42D   325    359
Link                           $2029   179D   171
Disk_Unit                      $0408   109D  1033
QTSW                           $00f4    94D   854
FNBANK                         $00be    84D  1040
CRIGHT                         $001d    20D   428
REV                            $0012    19D   451
AC                             $0006    32D   301
SR                             $0005    31D   367
header                         $1fff   167
EXMON                          $032e   100
IBRK                           $0316    99
IIRQ                           $0314    98
R_Margin                       $00e7    92
L_Margin                       $00e6    91
T_Margin                       $00e5    90
B_Margin                       $00e4    89
NDX                            $00d0    86
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
