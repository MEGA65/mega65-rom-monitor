              ***************************************************************************
              *                                                                         *
              *                          BBBBBBBBB    SSSSSSSS                          *
              *                          BBB    BBB  SSS    SSS                         *
              *                          BBB    BBB  SSS                                *
              *                          BBBBBBBBB    SSSSSSSS                          *
              *                          BBB    BBB         SSS                         *
              *                          BBB    BBB  SSS    SSS                         *
              *                          BBBBBBBBB    SSSSSSSS                          *
              *                                                                         *
              * MMM   MMM    OOOOOOO    NNN    NN  III  TTTTTTTTT  OOOOOOO    RRRRRRRR  *
              * MMMM MMMM   OOO   OOO   NNNN   NN  III     TTT    OOO   OOO   RRR   RRR *
              * MMMMMMMMM  OOO     OOO  NNNNN  NN  III     TTT   OOO     OOO  RRR   RRR *
              * MMM M MMM  OOO     OOO  NNN NN NN  III     TTT   OOO     OOO  RRRRRRRR  *
              * MMM   MMM  OOO     OOO  NNN  NNNN  III     TTT   OOO     OOO  RRR RRR   *
              * MMM   MMM   OOO   OOO   NNN   NNN  III     TTT    OOO   OOO   RRR  RRR  *
              * MMM   MMM    OOOOOOO    NNN    NN  III     TTT     OOOOOOO    RRR   RRR *
              *                                                                         *
              *             Bit Shifter's Monitor for the MEGA65 - 05-JAN-2021          *
              *                                                                         *
              ***************************************************************************

              .CPU 45GS02

              .STORE $6000,$2000,"10000-11FFF.MONITOR"

              *************
              * Constants *
              *************

0005          WHITE  = $05
009e          YELLOW = $9e
0096          LRED   = $96

000d          CR     = $0d
0012          REV    = $12
001d          CRIGHT = $1d
0022          QUOTE  = $22
0027          APOSTR = $27

              ************************************************
              * Register storage for JMPFAR and JSRFAR calls *
              ************************************************

0002          Bank       =  2
0003          PCH        =  3
0004          PCL        =  4
0005          SR         =  5
0006          AC         =  6
0007          XR         =  7
0008          YR         =  8
0009          ZR         =  9

              *************************************
              * Used direct (zero) page addresses *
              *************************************

000a          BP         = 10
000b          SPH        = 11
000c          SPL        = 12

              ; following variables overlap with the BASIC floating point area

              ; $59 - $5d : temporary floating point accumulator
              ; $5e - $62 : temporary floating point accumulator
              ; $63 - $69 : primary   floating point accumulator
              ; $6a - $6f : secondary floating point accumulator

              ; A set of 32 bit variables also used as 32 bit pointer

0059          & = $59

0059          Long_AC    .BSS 4  ; 32 bit accumulator
005d          Long_CT    .BSS 4  ; 32 bit counter
0061          Long_PC    .BSS 4  ; 32 bit program counter
0065          Long_DA    .BSS 4  ; 32 bit data pointer

              ; Flags are  used in BBR BBS instructions

0069          Adr_Flags  .BSS 1
006a          Mode_Flags .BSS 1
006b          Op_Code    .BSS 1
006c          Op_Flag    .BSS 1  ; 7: two operands
                                 ; 6: long branch
                                 ; 5: 32 bit address
                                 ; 4: Q register
006d          Op_Size    .BSS 1
006e          Dig_Cnt    .BSS 1
006f          Buf_Index  .BSS 1

              ; operating system variables


0090          STATUS     = $90
0093          VERCK      = $93
00b7          FNLEN      = $b7
00b9          SA         = $b9
00ba          FA         = $ba
00bb          FNADR      = $bb
00bd          BA         = $bd
00be          FNBANK     = $be

00d0          NDX        = $d0        ; length of keyboard buffer
00d7          MODE_80    = $d7        ; 80 column / 40 volumn flag

00e4          B_Margin   = $e4        ; SCBOT  default = 24
00e5          T_Margin   = $e5        ; SCTOP  default =  0
00e6          L_Margin   = $e6        ; SCLF   default =  0
00e7          R_Margin   = $e7        ; SCRT   default = 39 or 79

00f4          QTSW       = $f4        ; Quote switch

0100          Stack      = $0100
0200          Buffer     = $0200      ; input buffer

0314          IIRQ       = $0314
0316          IBRK       = $0316
032e          EXMON      = $032e

0400          & = $400                ; bottom of BASIC runtime stack
                                      ; should be a safe space
0400          Ix_Mne      .BSS  1     ; index to mnemonics table
0401          Op_Mne      .BSS  3     ; 3 bytes for mnemonic
0404          Op_Ix       .BSS  1     ; type of constant
0405          Op_Len      .BSS  1     ; length of operand
0406          Disk_Unit   .BSS  1     ; target unit
0407          Disk_Src    .BSS  1     ; source unit
0408          Disk_Track  .BSS  1     ; logical track  1 -> 255
0409          Disk_Sector .BSS  1     ; logical sector 0 -> 255
040a          Disk_Status .BSS  1     ; BCD value of status
040b          File_Ext    .BSS  3     ; file extension

040e          Mon_Data    .BSS 40     ; buffer for hunt and filename
0436          Disk_Msg    .BSS 40     ; disk status as text message

cfaf          EXIT       = $cfaf      ; exit address for ROM 92xxxx

ff6b          SETBNK     = $ff6b
ff6e          JSRFAR     = $ff6e
ff71          JMPFAR     = $ff71
ff74          LDA_FAR    = $ff74
ff77          STA_FAR    = $ff77
ff7a          CMP_FAR    = $ff7a
ff7d          PRIMM      = $ff7d
ff81          CINT       = $ff81
ff84          IOINIT     = $ff84
ff90          SETMSG     = $ff90
ff93          SECOND     = $ff93
ff96          TKSA       = $ff96
ff99          MEMTOP     = $ff99
ff9c          MEMBOT     = $ff9c
ff9f          KEY        = $ff9f
ffa2          SETTMO     = $ffa2
ffa5          ACPTR      = $ffa5
ffa8          CIOUT      = $ffa8
ffab          UNTALK     = $ffab
ffae          UNLSN      = $ffae
ffb1          LISTEN     = $ffb1
ffb4          TALK       = $ffb4
ffb7          READSS     = $ffb7
ffba          SETLFS     = $ffba
ffbd          SETNAM     = $ffbd
ffc0          OPEN       = $ffc0
ffc3          CLOSE      = $ffc3
ffc6          CHKIN      = $ffc6
ffc9          CHKOUT     = $ffc9
ffcc          CLRCHN     = $ffcc
ffcf          CHRIN      = $ffcf
ffd2          CHROUT     = $ffd2
ffd5          LOAD       = $ffd5
ffd8          SAVE       = $ffd8
ffdb          SETTIM     = $ffdb
ffde          GETTIM     = $ffde
ffe1          STOP       = $ffe1
ffe4          GETIN      = $ffe4
ffe7          CLALL      = $ffe7
ffea          SCAN       = $ffea
ffed          SCRORG     = $ffed
fff0          PLOT       = $fff0

ffffffff          * = $1fff
                      .STORE $1fff,$0101,"bsm.prg"

              *************
              Module header
              *************

1fff 01 20            .WORD $2001             ; load address
2001 29 20            .WORD Link              ; line link
2003 e5 07            .WORD 2021              ; line number
2005 fe 02            .BYTE $fe,$02           ; BANK token
2007 30 3a            .BYTE "0:"              ; BANK argument
2009 9e               .BYTE $9e               ; SYS  token
200a 28 38 32         .BYTE "(8235):"         ; $202d
2011 8f               .BYTE $8f               ; REM  token
2012 20 42 49         .BYTE " BIT SHIFTER 01-JAN-21",0
2029 00 00    Link    .WORD 0                 ; BASIC end marker

                      ; copy image to $030000

202b 78               SEI

              ; map memory to monitor configuration

202c a9 a0            LDA  #$a0
202e a2 82            LDX  #$82
2030 a0 00            LDY  #$00
2032 a3 83            LDZ  #$83
2034 5c               MAP
2035 ea               EOM

              ; VIC IV registers visible

2036 a9 47            LDA  #$47
2038 8d 2f d0         STA  $d02f
203b a9 53            LDA  #$53
203d 8d 2f d0         STA  $d02f

              ; toggle write protection

2040 a9 70            LDA  #$70
2042 8d 40 d6         STA  $D640
2045 ea               NOP

2046 a3 00            LDZ  #0
2048 64 59            STZ  Long_AC
204a a9 21            LDA  #$21
204c 85 5a            STA  Long_AC+1
204e 64 5d            STZ  Long_CT
2050 64 5e            STZ  Long_CT+1
2052 a9 03            LDA  #3
2054 85 5f            STA  Long_CT+2
2056 64 60            STZ  Long_CT+3
2058 a2 20            LDX  #$20

205a b2 59    _loop   LDA  (Long_AC),Z
205c ea 92 5d         STA  [Long_CT],Z
205f 1b               INZ
2060 d0 f8            BNE  _loop
2062 e6 5a            INC  Long_AC+1
2064 e6 5e            INC  Long_CT+1
2066 ca               DEX
2067 d0 f1            BNE  _loop

2069 a9 70            LDA  #$70
206b 8d 40 d6         STA  $D640              ; toggle write protection
206e ea               NOP

206f 60               RTS
2070          EndMod [header] Size = 113 [$71]

2070 00 00 00         .FILL $2100-* (0) ; 144 bytes

2100          * = $6000

              ********************
6000          Monitor_Call ; $6000
              ********************

6000 4c 36 60          JMP  Mon_Call

              *********************
6003          Monitor_Break ; $6003
              *********************

6003 4c 09 60          JMP  Mon_Break

              **********************
6006          Monitor_Switch ; $6009
              **********************

6006 4c b4 60          JMP  Mon_Switch

              ****************
              Module Mon_Break
              ****************

6009 20 7d ff          JSR  PRIMM
600c 0d 42 52          .BYTE "\rBREAK\a",0
6014 20 d8 60          JSR  Print_Commands

              ; pull BP, Z, Y, X, A,SR,PCL,PCH
              ;       7  6  5  4  3  2  1  0

6017 a2 06             LDX  #6
6019 68       _loop    PLA
601a 95 03             STA  PCH,X
601c ca                DEX
601d 10 fa             BPL  _loop

              ; decrement PC to point after BRK

601f a5 04             LDA  PCL
6021 d0 02             BNE  _nopage
6023 c6 03             DEC  PCH
6025 c6 04    _nopage  DEC  PCL

6027 ad 1d 01          LDA  $011d
602a 7f 02 03          BBR7 Bank,_bank
602d ad 1f 01          LDA  $011f
6030 29 0f    _bank    AND  #15
6032 85 02             STA  Bank
6034 80 14             BRA  Mon_Start
6036          EndMod [Mon_Break] Size = 45 [$2d]

              ***************
              Module Mon_Call
              ***************

6036 20 d8 60          JSR  Print_Commands

              ;        clear register for monitor call

6039 a9 00             LDA  #0
603b a2 06             LDX  #6
603d 95 06    _loop    STA  AC,X
603f ca                DEX
6040 10 fb             BPL  _loop

              ;        set default PC to "exit to BASIC"

6042 a9 af             LDA  #<EXIT     ; ROM 911110
6044 a2 cf             LDX  #>EXIT
6046 85 04    _store   STA  PCL
6048 86 03             STX  PCH
604a          EndMod [Mon_Call] Size = 20 [$14]

              ****************
              Module Mon_Start
              ****************

604a d8                CLD
604b 0b                TSY
604c 84 0b             STY  SPH
604e ba                TSX
604f 86 0c             STX  SPL
6051 a9 c0             LDA  #$c0
6053 20 90 ff          JSR  SETMSG
6056 58                CLI
6057 ea                NOP
6058          EndMod [Mon_Start] Size = 14 [$e]

              ***************************
              Module Mon_Register ; $6042
              ***************************

6058 20 ee 73          JSR  Reg_Text

              ; print Bank,PCH

605b a0 00             LDY  #0
605d b9 02 00 _loopa   LDA  Bank,Y
6060 20 2c 6b          JSR  Print_Hex
6063 c8                INY
6064 c0 02             CPY  #2
6066 90 f5             BCC  _loopa

              ; print SR,PCL,A,X,Y,Z,BP

6068 b9 02 00 _loopb   LDA  Bank,Y
606b 20 17 6b          JSR  Print_Hex_Blank
606e c8                INY
606f c0 09             CPY  #9
6071 90 f5             BCC  _loopb

              ; print 16 bit stack pointer

6073 a5 0b             LDA  SPH
6075 20 2c 6b          JSR  Print_Hex
6078 a5 0c             LDA  SPL
607a 20 17 6b          JSR  Print_Hex_Blank

              ; print flags

607d a0 08             LDY  #8
607f a5 05             LDA  SR
6081 0a       _loopc   ASL  A
6082 48                PHA
6083 a9 2d             LDA  #'-'
6085 90 02             BCC  _flag
6087 a9 31             LDA  #'1'
6089 20 d2 ff _flag    JSR  CHROUT
608c 68                PLA
608d 88                DEY
608e d0 f1             BNE  _loopc
6090          EndMod [Mon_Register] Size = 56 [$38]

              ***********
              Module Main
              ***********

6090 20 1f 6b          JSR  Print_CR
6093 a2 00             LDX  #0

              ; read one line into buffer

              ******
6095          Main_A
              ******

6095 20 cf ff _loop    JSR  CHRIN
6098 9d 00 02          STA  Buffer,X
609b e8                INX
609c e0 50             CPX  #80
609e b0 1e             BCS  Mon_Error         ; input too long
60a0 c9 0d             CMP  #CR
60a2 d0 f1             BNE  _loop

60a4 a9 00             LDA  #0
60a6 85 6f             STA  Buf_Index
60a8 9d ff 01          STA  Buffer-1,X        ; terminate buffer
60ab 20 5c 6b _getcomm JSR  Get_Char
60ae f0 e0             BEQ  Main
60b0 c9 20             CMP  #' '
60b2 f0 f7             BEQ  _getcomm
60b4          EndMod [Main] Size = 36 [$24]

              *****************
              Module Mon_Switch
              *****************

60b4 a2 18             LDX  #24
60b6 dd f2 60 _loop    CMP  Command_Char,X
60b9 f0 10             BEQ  Mon_Select
60bb ca                DEX
60bc 10 f8             BPL  _loop

              ;        fall through to error routine if not found

              ****************
              Module Mon_Error
              ****************

              ; put a question mark at the end of the text

60be 20 7d ff          JSR  PRIMM
60c1 1b 4f 1d          .BYTE "\eO",CRIGHT,'?',0
60c6 a2 f8             LDX  #$f8              ; reset stack pointer
60c8 9a                TXS
60c9 80 c5             BRA  Main

              *****************
              Module Mon_Select
              *****************

60cb 85 93             STA  VERCK
60cd e0 17             CPX  #23
60cf b3 3c 03          LBCS  Load_Save
60d2 8a                TXA
60d3 0a                ASL  A
60d4 aa                TAX
60d5 7c 0f 61          JMP  (Jump_Table,X)
60d8          EndMod [Mon_Select] Size = 13 [$d]

              **************
60d8          Print_Commands
              **************

60d8 20 7d ff          JSR  PRIMM
60db 0d 9e 12          .BYTE CR,YELLOW,REV,"BS MONITOR COMMANDS:"

              ************
60f2          Command_Char
              ************

                       ;      0123456789abcdef
60f2 41 42 43          .BYTE "ABCDFGHJMRTUX@.>;?"

              ***********
6104          Cons_Prefix
              ***********

6104 24 2b 26          .BYTE "$+&%'"

              ****************
6109          Load_Save_Verify
              ****************

6109 4c 53 56          .BYTE "LSV",WHITE,0
610e 60                RTS

              **********
610f          Jump_Table
              **********

610f db 64             .WORD Mon_Assemble     ; A
6111 18 62             .WORD Mon_Bits         ; B
6113 7d 63             .WORD Mon_Compare      ; C
6115 e0 67             .WORD Mon_Disassemble  ; D
6117 ba 64             .WORD Mon_Fill         ; F
6119 a2 62             .WORD Mon_Go           ; G
611b ad 63             .WORD Mon_Hunt         ; H
611d ae 62             .WORD Mon_JSR          ; J
611f ce 61             .WORD Mon_Memory       ; M
6121 58 60             .WORD Mon_Register     ; R
6123 33 63             .WORD Mon_Transfer     ; T
6125 42 6d             .WORD Mon_Unit_Copy    ; U
6127 af cf             .WORD EXIT             ; X
6129 07 6f             .WORD Mon_DOS          ; @
612b db 64             .WORD Mon_Assemble     ; .
612d 74 62             .WORD Mon_Set_Memory   ; >
612f 5a 62             .WORD Mon_Set_Register ; ;
6131 21 74             .WORD Mon_Help         ; ?
6133 ac 6b             .WORD Converter        ; $
6135 ac 6b             .WORD Converter        ; +
6137 ac 6b             .WORD Converter        ; &
6139 ac 6b             .WORD Converter        ; %
613b ac 6b             .WORD Converter        ; '

              ****************
              Module LAC_To_PC
              ****************

              ; called from Mon_Set_Register, Mon_Go and Mon_JSR
              ; as the first instruction. The carry flag was set from
              ; the routine Got_LAC if an error occured.
              ; Notice that the Bank, PCH and PCL values are stored
              ; high to low, reverse to the standard order.

              ; Bank, PCH and PCL are part of a list, that is used by
              ; the routines FAR_JMP and FAR_JSR of the operating system

613d b0 0e             BCS  _error
613f a5 59             LDA  Long_AC
6141 85 04             STA  Bank+2
6143 a5 5a             LDA  Long_AC+1
6145 85 03             STA  Bank+1
6147 a5 5b             LDA  Long_AC+2
6149 05 5c             ORA  Long_AC+3
614b 85 02             STA  Bank
614d 60       _error   RTS
614e          EndMod [LAC_To_PC] Size = 17 [$11]

              *****************
              Module LAC_To_LPC
              *****************

614e da                PHX
614f a2 03             LDX  #3
6151 b5 59    _loop    LDA  Long_AC,X
6153 95 61             STA  Long_PC,X
6155 ca                DEX
6156 10 f9             BPL  _loop
6158 fa                PLX
6159 60                RTS
615a          EndMod [LAC_To_LPC] Size = 12 [$c]

              *****************
              Module LAC_To_LCT
              *****************

615a da                PHX
615b a2 03             LDX  #3
615d b5 59    _loop    LDA  Long_AC,X
615f 95 5d             STA  Long_CT,X
6161 ca                DEX
6162 10 f9             BPL  _loop
6164 fa                PLX
6165 60                RTS
6166          EndMod [LAC_To_LCT] Size = 12 [$c]

              *****************
              Module LAC_To_LDA
              *****************

6166 da                PHX
6167 a2 03             LDX  #3
6169 b5 59    _loop    LDA  Long_AC,X
616b 95 65             STA  Long_DA,X
616d ca                DEX
616e 10 f9             BPL  _loop
6170 fa                PLX
6171 60                RTS
6172          EndMod [LAC_To_LDA] Size = 12 [$c]

              *******************
              Module LAC_Plus_LCT
              *******************

6172 da                PHX
6173 a2 fc             LDX  #252              ; use ZP wrap around
6175 18                CLC
6176 b5 5d    _loop    LDA  Long_AC+4,X
6178 75 61             ADC  Long_CT+4,X
617a 95 5d             STA  Long_AC+4,X
617c e8                INX
617d d0 f7             BNE  _loop
617f fa                PLX
6180 60                RTS
6181          EndMod [LAC_Plus_LCT] Size = 15 [$f]

              ********************
              Module LAC_Minus_LPC
              ********************

6181 da                PHX
6182 a2 fc             LDX  #252              ; use ZP wrap around
6184 38                SEC
6185 b5 5d    _loop    LDA  Long_AC+4,X
6187 f5 65             SBC  Long_PC+4,X
6189 95 61             STA  Long_CT+4,X
618b e8                INX
618c d0 f7             BNE  _loop
618e fa                PLX
618f 60                RTS
6190          EndMod [LAC_Minus_LPC] Size = 15 [$f]

              **********************
              Module LAC_Compare_LPC
              **********************

6190 da                PHX
6191 a2 fc             LDX  #252              ; use ZP wrap around
6193 38                SEC
6194 b5 5d    _loop    LDA  Long_AC+4,X
6196 f5 65             SBC  Long_PC+4,X
6198 e8                INX
6199 d0 f9             BNE  _loop
619b fa                PLX
619c 60                RTS
619d          EndMod [LAC_Compare_LPC] Size = 13 [$d]

              **************
              Module Inc_LAC
              **************

619d e3 59             INW  Long_AC
619f d0 02             BNE  _return
61a1 e3 5b             INW  Long_AC+2
61a3 60       _return  RTS
61a4          EndMod [Inc_LAC] Size = 7 [$7]

              **************
              Module Dec_LAC
              **************

61a4 a5 59             LDA  Long_AC
61a6 05 5a             ORA  Long_AC+1
61a8 d0 02             BNE  _skip
61aa c3 5b             DEW  Long_AC+2
61ac c3 59    _skip    DEW  Long_AC
61ae 60                RTS
61af          EndMod [Dec_LAC] Size = 11 [$b]

              **************
              Module Inc_LPC
              **************

61af e3 61             INW  Long_PC
61b1 d0 02             BNE  _return
61b3 e3 63             INW  Long_PC+2
61b5 60       _return  RTS
61b6          EndMod [Inc_LPC] Size = 7 [$7]

              **************
              Module Dec_LDA
              **************

61b6 a5 65             LDA  Long_DA
61b8 05 66             ORA  Long_DA+1
61ba d0 02             BNE  _skip
61bc c3 67             DEW  Long_DA+2
61be c3 65    _skip    DEW  Long_DA
61c0 60                RTS
61c1          EndMod [Dec_LDA] Size = 11 [$b]

              ************
              Module Fetch
              ************

61c1 db                PHZ
61c2 98                TYA
61c3 4b                TAZ
61c4 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
61c7 ea                NOP                    ; use LDA  [Long_PC],Z
61c8 b2 61    _banked  LDA  (Long_PC),Z
61ca fb                PLZ
61cb 29 ff             AND  #$ff
61cd 60                RTS
61ce          EndMod [Fetch] Size = 13 [$d]

              *****************
              Module Mon_Memory
              *****************

61ce 20 2a 6a          JSR  Get_LAC           ; get 1st. parameter
61d1 a3 10             LDZ  #16               ; default row count
61d3 b0 1f             BCS  _row              ; no address
61d5 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = start address
61d8 20 2a 6a          JSR  Get_LAC           ; Long_AC = end address
61db b0 17             BCS  _row              ; not given

61dd 20 81 61          JSR  LAC_Minus_LPC     ; Long_CT = range
61e0 93 dc fe          LBCC Mon_Error         ; negative range -> error
61e3 a2 04             LDX  #4                ; 16 bytes / line
61e5 7f d7 01          BBR7 MODE_80,_shift
61e8 ca                DEX                    ;  8 bytes / line
61e9 46 5e    _shift   LSR  Long_CT+1
61eb 66 5d             ROR  Long_CT
61ed ca                DEX
61ee d0 f9             BNE  _shift
61f0 ab 5d 00          LDZ  Long_CT           ; row count
61f3 1b                INZ

61f4 20 e1 ff _row     JSR  STOP
61f7 f0 06             BEQ  _exit
61f9 20 f2 62          JSR  Dump_Row
61fc 3b                DEZ
61fd d0 f5             BNE  _row
61ff 4c 90 60 _exit    JMP  Main
6202          EndMod [Mon_Memory] Size = 52 [$34]

              *****************
              Module Print_Bits
              *****************

6202 db                PHZ
6203 85 65             STA  Long_DA
6205 a0 08             LDY  #8
6207 a9 2a    _loop    LDA  #'*'
6209 ff 65 02          BBS7 Long_DA,_set
620c a9 2e             LDA  #'.'
620e 20 d2 ff _set     JSR  CHROUT
6211 06 65             ASL  Long_DA
6213 88                DEY
6214 d0 f1             BNE  _loop
6216 fb                PLZ
6217 60                RTS
6218          EndMod [Print_Bits] Size = 22 [$16]

              ***************
              Module Mon_Bits
              ***************

6218 20 2a 6a          JSR  Get_LAC           ; get 1st. parameter
621b b0 03             BCS  _lab
621d 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = start address
6220 20 1f 6b _lab     JSR  Print_CR
6223 a9 05             LDA  #WHITE
6225 85 66             STA  Long_DA+1

6227 a2 08             LDX  #8
6229 da       _row     PHX
622a 20 ed 6a          JSR  Hex_LPC
622d a3 00             LDZ  #0
622f 38       _col     SEC
6230 a9 9b             LDA  #WHITE+LRED       ; toggle colour
6232 e5 66             SBC  Long_DA+1
6234 85 66             STA  Long_DA+1
6236 20 d2 ff          JSR  CHROUT
6239 ea b2 61          LDA  [Long_PC],Z
623c 20 02 62          JSR  Print_Bits
623f 18                CLC
6240 6b                TZA
6241 69 08             ADC  #8
6243 4b                TAZ
6244 c9 40             CMP  #64
6246 7f d7 02          BBR7 MODE_80,_next
6249 c9 20             CMP  #32
624b 90 e2    _next    BCC  _col
624d 20 1f 6b          JSR  Print_CR
6250 20 af 61          JSR  Inc_LPC
6253 fa                PLX
6254 ca                DEX
6255 d0 d2             BNE  _row
6257 4c 90 60          JMP  Main
625a          EndMod [Mon_Bits] Size = 66 [$42]

              ***********************
              Module Mon_Set_Register
              ***********************

625a 20 2a 6a          JSR  Get_LAC           ; get 1st. parameter
625d 20 3d 61          JSR  LAC_To_PC
6260 a0 03             LDY  #3
6262 20 2a 6a _loop    JSR  Get_LAC
6265 b0 0a             BCS  _exit
6267 a5 59             LDA  Long_AC
6269 99 02 00          STA  Bank,Y
626c c8                INY
626d c0 09             CPY  #9
626f 90 f1             BCC  _loop
6271 4c 90 60 _exit    JMP  Main
6274          EndMod [Mon_Set_Register] Size = 26 [$1a]

              *********************
              Module Mon_Set_Memory
              *********************

6274 20 2a 6a          JSR  Get_LAC           ; get 1st. parameter
6277 b0 1c             BCS  _exit
6279 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = row address
627c a3 00             LDZ  #0
627e 20 2a 6a _loop    JSR  Get_LAC
6281 b0 12             BCS  _exit
6283 a5 59             LDA  Long_AC
6285 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
6288 ea                NOP                    ; use STA  [Long_PC],Z
6289 92 61    _banked  STA  (Long_PC),Z
628b 1b                INZ
628c c2 10             CPZ  #16
628e 7f d7 02          BBR7 MODE_80,_next
6291 c2 08             CPZ  #8
6293 90 e9    _next    BCC  _loop

6295 20 7d ff _exit    JSR  PRIMM
6298 1b 4f             .BYTE "\eO"
629a 91 00             .BYTE $91,$00
629c 20 f2 62          JSR  Dump_Row
629f 4c 90 60          JMP  Main
62a2          EndMod [Mon_Set_Memory] Size = 46 [$2e]

              *************
              Module Mon_Go
              *************

62a2 20 2a 6a          JSR  Get_LAC           ; get 1st. parameter
62a5 20 3d 61          JSR  LAC_To_PC
62a8 a6 0c             LDX  SPL
62aa 9a                TXS
62ab 4c 71 ff          JMP  JMPFAR
62ae          EndMod [Mon_Go] Size = 12 [$c]

              **************
              Module Mon_JSR
              **************

62ae 20 2a 6a          JSR  Get_LAC           ; get 1st. parameter
62b1 20 3d 61          JSR  LAC_To_PC
62b4 a6 0c             LDX  SPL
62b6 9a                TXS
62b7 20 6e ff          JSR  JSRFAR
62ba ba                TSX
62bb 86 0c             STX  SPL
62bd 4c 90 60          JMP  Main
62c0          EndMod [Mon_JSR] Size = 18 [$12]

              *******************
              Module Dump_4_Bytes
              *******************

62c0 20 d2 ff          JSR  CHROUT            ; colour
62c3 ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62c6 ea                NOP                    ; use LDA  [Long_PC],Z
62c7 b2 61    _banked  LDA  (Long_PC),Z
62c9 20 17 6b          JSR  Print_Hex_Blank
62cc 1b                INZ
62cd 6b                TZA
62ce 29 03             AND  #3
62d0 d0 f1             BNE  _loop
62d2 60                RTS
62d3          EndMod [Dump_4_Bytes] Size = 19 [$13]

              *******************
              Module Dump_4_Chars
              *******************

62d3 a0 00             LDY  #0
62d5 84 f4             STY  QTSW              ; disable quote mode
62d7 20 d2 ff          JSR  CHROUT            ; colour
62da ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62dd ea                NOP                    ; use LDA  [Long_PC],Z
62de b2 61    _banked  LDA  (Long_PC),Z
62e0 a8                TAY
62e1 29 60             AND  #%0110 0000
62e3 d0 02             BNE  _laba
62e5 a0 2e             LDY  #'.'
62e7 98       _laba    TYA
62e8 20 d2 ff          JSR  CHROUT
62eb 1b                INZ
62ec 6b                TZA
62ed 29 03             AND  #3
62ef d0 e9             BNE  _loop
62f1 60                RTS
62f2          EndMod [Dump_4_Chars] Size = 31 [$1f]

              ***************
              Module Dump_Row
              ***************

62f2 db                PHZ
62f3 20 1f 6b          JSR  Print_CR
62f6 a9 3e             LDA  #'>'
62f8 20 d2 ff          JSR  CHROUT
62fb 20 ed 6a          JSR  Hex_LPC

62fe a3 00             LDZ  #0
6300 a2 02             LDX  #2                ; 2 blocks in 80 columns
6302 7f d7 01          BBR7 MODE_80,_loop
6305 ca                DEX                    ; 1 block  in 40 columns
6306 a9 96    _loop    LDA  #LRED
6308 20 c0 62          JSR  Dump_4_Bytes
630b a9 05             LDA  #WHITE
630d 20 c0 62          JSR  Dump_4_Bytes
6310 ca                DEX
6311 d0 f3             BNE  _loop

6313 20 7d ff          JSR  PRIMM
6316 12 00             .BYTE $12,$00          ; : reverse on

6318 a3 00             LDZ  #0
631a a2 02             LDX  #2                ; 4 blocks in 80 columns
631c 7f d7 01          BBR7 MODE_80,_lchr
631f ca                DEX                    ; 2 blocks in 40 columns
6320 a9 96    _lchr    LDA  #LRED
6322 20 d3 62          JSR  Dump_4_Chars
6325 a9 05             LDA  #WHITE
6327 20 d3 62          JSR  Dump_4_Chars
632a ca                DEX
632b d0 f3             BNE  _lchr
632d 6b                TZA
632e 20 85 6b          JSR  Add_LPC
6331 fb                PLZ
6332 60                RTS
6333          EndMod [Dump_Row] Size = 65 [$41]

              *******************
              Module Mon_Transfer
              *******************

6333 20 93 6b          JSR  Param_Range       ; Long_PC = source
6336 b3 86 fd          LBCS Mon_Error         ; Long_CT = count
6339 20 2a 6a          JSR  Get_LAC           ; Long_AC = target
633c b3 80 fd          LBCS Mon_Error

633f a3 00             LDZ  #0
6341 20 90 61          JSR  LAC_Compare_LPC   ; target - source
6344 90 1d             BCC  _forward

              ;        source < target: backward transfer

6346 20 72 61          JSR  LAC_Plus_LCT      ; Long_AC = end of target

6349 ff 68 01 _lpback  BBS7 Long_DA+3,_rb     ; bit 31 ?
634c ea                NOP                    ; LDA  [Long_DA],Z
634d b2 65    _rb      LDA  (Long_DA),Z       ; backward copy
634f ff 5c 01          BBS7 Long_AC+3,_wb     ; bit 31 ?
6352 ea                NOP                    ; STA  [Long_AC],Z
6353 92 59    _wb      STA  (Long_AC),Z
6355 20 b6 61          JSR  Dec_LDA
6358 20 a4 61          JSR  Dec_LAC
635b 20 78 6b          JSR  Dec_LCT
635e 10 e9             BPL  _lpback
6360 4c 90 60          JMP  Main

6363 ff 64 01 _forward BBS7 Long_PC+3,_rf     ; bit 31 ?
6366 ea                NOP                    ; LDA  [Long_PC],Z
6367 b2 61    _rf      LDA  (Long_PC),Z       ; backward copy
6369 ff 5c 01          BBS7 Long_AC+3,_wf     ; bit 31 ?
636c ea                NOP                    ; STA  [Long_AC],Z
636d 92 59    _wf      STA  (Long_AC),Z
636f 20 af 61          JSR  Inc_LPC
6372 20 9d 61          JSR  Inc_LAC
6375 20 78 6b          JSR  Dec_LCT
6378 10 e9             BPL  _forward
637a 4c 90 60          JMP  Main
637d          EndMod [Mon_Transfer] Size = 74 [$4a]

              ******************
              Module Mon_Compare
              ******************

637d 20 93 6b          JSR  Param_Range       ; Long_PC = source
6380 b3 3c fd          LBCS Mon_Error         ; Long_CT = count
6383 20 2a 6a          JSR  Get_LAC           ; Long_AC = target
6386 b3 36 fd          LBCS Mon_Error
6389 20 1f 6b          JSR  Print_CR
638c a3 00             LDZ  #0
638e ff 64 01 _loop    BBS7 Long_PC+3,_rf     ; bit 31 ?
6391 ea                NOP                    ; LDA  [Long_PC],Z
6392 b2 61    _rf      LDA  (Long_PC),Z       ; backward copy
6394 ff 5c 01          BBS7 Long_AC+3,_cf     ; bit 31 ?
6397 ea                NOP                    ; CMP  [Long_AC],Z
6398 d2 59    _cf      CMP  (Long_AC),Z
639a f0 03             BEQ  _laba
639c 20 ed 6a          JSR  Hex_LPC
639f 20 9d 61 _laba    JSR  Inc_LAC
63a2 20 af 61          JSR  Inc_LPC
63a5 20 78 6b          JSR  Dec_LCT
63a8 10 e4             BPL  _loop
63aa 4c 90 60          JMP  Main
63ad          EndMod [Mon_Compare] Size = 48 [$30]

              ***************
              Module Mon_Hunt
              ***************

63ad 20 93 6b          JSR  Param_Range       ; Long_PC = start
63b0 b3 0c fd          LBCS Mon_Error         ; Long_CT = count
63b3 a0 00             LDY  #0
63b5 20 5c 6b          JSR  Get_Char
63b8 c9 27             CMP  #APOSTR
63ba d0 17             BNE  _bin
63bc 20 5c 6b          JSR  Get_Char          ; string hunt
63bf c9 00             CMP  #0
63c1 f3 fb fc          LBEQ Mon_Error         ; null string

63c4 99 0e 04 _lpstr   STA  Mon_Data,Y
63c7 c8                INY
63c8 20 5c 6b          JSR  Get_Char
63cb f0 18             BEQ  _hunt
63cd c0 20             CPY  #32               ;max. string length
63cf d0 f3             BNE  _lpstr
63d1 80 12             BRA  _hunt

63d3 20 28 6a _bin     JSR  Got_LAC
63d6 a5 59    _lpbin   LDA  Long_AC
63d8 99 0e 04          STA  Mon_Data,Y
63db c8                INY
63dc 20 2a 6a          JSR  Get_LAC
63df b0 04             BCS  _hunt
63e1 c0 20             CPY  #32               ;max. data length
63e3 d0 f1             BNE  _lpbin

63e5 84 65    _hunt    STY  Long_DA           ; hunt length
63e7 20 1f 6b          JSR  Print_CR

63ea a0 00    _lpstart LDY  #0
63ec 20 c1 61 _lpins   JSR  Fetch
63ef d9 0e 04          CMP  Mon_Data,Y
63f2 d0 08             BNE  _next
63f4 c8                INY
63f5 c4 65             CPY  Long_DA
63f7 d0 f3             BNE  _lpins
63f9 20 ed 6a          JSR  Hex_LPC           ; match
63fc 20 e1 ff _next    JSR  STOP
63ff f3 8f fc          LBEQ Main
6402 20 af 61          JSR  Inc_LPC
6405 20 78 6b          JSR  Dec_LCT
6408 10 e0             BPL  _lpstart
640a 4c 90 60          JMP  Main
640d          EndMod [Mon_Hunt] Size = 96 [$60]

              ****************
              Module Load_Save
              ****************

640d ac 06 04          LDY  Disk_Unit
6410 84 ba             STY  FA
6412 a0 08             LDY  #8
6414 84 b9             STY  SA
6416 a0 00             LDY  #0
6418 84 bd             STY  BA
641a 84 b7             STY  FNLEN
641c 84 be             STY  FNBANK
641e 84 90             STY  STATUS
6420 a9 04             LDA  #>Mon_Data
6422 85 bc             STA  FNADR+1
6424 a9 0e             LDA  #<Mon_Data
6426 85 bb             STA  FNADR
6428 20 5c 6b _skip    JSR  Get_Char          ; skip blanks
642b f3 91 fc          LBEQ Mon_Error
642e c9 20             CMP  #' '
6430 f0 f6             BEQ  _skip
6432 c9 22             CMP  #QUOTE            ; must be quote
6434 d3 88 fc          LBNE Mon_Error

6437 a6 6f             LDX  Buf_Index
6439 bd 00 02 _copyfn  LDA  Buffer,X          ; copy filename
643c f0 4a             BEQ  _do               ; no more input
643e e8                INX
643f c9 22             CMP  #QUOTE
6441 f0 0c             BEQ  _unit             ; end of filename
6443 91 bb             STA  (FNADR),Y         ; store to filename
6445 e6 b7             INC  FNLEN
6447 c8                INY
6448 c0 13             CPY  #19               ; max = 16 plus prefix "@0:"
644a 90 ed             BCC  _copyfn
644c 4c be 60          JMP  Mon_Error         ; filename too long

644f 86 6f    _unit    STX  Buf_Index         ; update read position
6451 20 5c 6b          JSR  Get_Char
6454 f0 32             BEQ  _do               ; no more parameter
6456 20 2a 6a          JSR  Get_LAC
6459 b0 2d             BCS  _do
645b a5 59             LDA  Long_AC           ; unit #
645d 85 ba             STA  FA
645f 20 2a 6a          JSR  Get_LAC
6462 b0 24             BCS  _do
6464 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = start address
6467 85 bd             STA  BA                ; Bank
6469 20 2a 6a          JSR  Get_LAC           ; Long_AC = end address + 1
646c b0 42             BCS  _load             ; no end address -> load/verify
646e 20 1f 6b          JSR  Print_CR
6471 a6 59             LDX  Long_AC           ; X/Y = end address
6473 a4 5a             LDY  Long_AC+1
6475 a5 93             LDA  VERCK             ; A = load/verify/save
6477 c9 53             CMP  #'S'
6479 d3 43 fc          LBNE Mon_Error         ; must be Save
647c a9 00             LDA  #0
647e 85 b9             STA  SA                ; set SA for PRG
6480 a9 61             LDA  #Long_PC          ; Long_PC = start address
6482 20 d8 ff          JSR  SAVE
6485 4c 90 60 _exit    JMP  Main

6488 a5 93    _do      LDA  VERCK
648a c9 56             CMP  #'V'              ; Verify
648c f0 07             BEQ  _exec
648e c9 4c             CMP  #'L'              ; Load
6490 d3 2c fc          LBNE Mon_Error
6493 a9 00             LDA  #0                ; 0 = LOAD
6495 20 d5 ff _exec    JSR  LOAD              ; A == 0 : LOAD else VERIFY
6498 4f 90 ea          BBR4 STATUS,_exit
649b a5 93             LDA  VERCK
649d f3 1f fc          LBEQ Mon_Error
64a0 b3 ee fb          LBCS Main
64a3 20 7d ff          JSR  PRIMM
64a6 20 45 52          .BYTE " ERROR",0
64ad 4c 90 60          JMP  Main

64b0 a6 61    _load    LDX  Long_PC
64b2 a4 62             LDY  Long_PC+1
64b4 a9 00             LDA  #0                ; 0 = use X/Y as load address
64b6 85 b9             STA  SA                ; and ignore load address from file
64b8 80 ce             BRA  _do
64ba          EndMod [Load_Save] Size = 173 [$ad]

              ***************
              Module Mon_Fill
              ***************

64ba 20 93 6b          JSR  Param_Range       ; Long_PC = target
64bd b3 ff fb          LBCS Mon_Error         ; Long_CT = count
64c0 20 2a 6a          JSR  Get_LAC           ; Long_AC = fill byte
64c3 b3 f9 fb          LBCS Mon_Error
64c6 20 1f 6b          JSR  Print_CR
64c9 a3 00             LDZ  #0
64cb a5 59    _loop    LDA  Long_AC
64cd ea 92 61          STA  [Long_PC],Z
64d0 20 af 61          JSR  Inc_LPC
64d3 20 78 6b          JSR  Dec_LCT
64d6 10 f3             BPL  _loop
64d8 4c 90 60          JMP  Main
64db          EndMod [Mon_Fill] Size = 33 [$21]

              *******************
              Module Mon_Assemble
              *******************

64db 20 2a 6a          JSR  Get_LAC           ; get 1st. parameter
64de b3 de fb          LBCS Mon_Error
64e1 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = PC

64e4 a2 00    _start   LDX  #0                ; mne letter counter
64e6 86 66             STX  Long_DA+1         ; clear encoded MNE
64e8 86 6c             STX  Op_Flag           ; 6:long branch 5:32 bit
64ea 8e 04 04          STX  Op_Ix             ; operand byte index
64ed 8e 05 04          STX  Op_Len            ; operand length
64f0 20 5c 6b _getin   JSR  Get_Char
64f3 d0 05             BNE  _laba
64f5 e0 00             CPX  #0
64f7 f3 97 fb          LBEQ Main

64fa c9 20    _laba    CMP  #' '
64fc f0 e6             BEQ  _start            ; restart after blank

              ;        check for long branches

64fe e0 01             CPX  #1
6500 d0 0e             BNE  _labb             ; -> not 2nd. char
6502 c9 42             CMP  #'B'
6504 d0 0a             BNE  _labb             ; 2nd. char != 'B'
6506 ab 01 04          LDZ  Op_Mne
6509 c2 4c             CPZ  #'L'
650b d0 03             BNE  _labb             ; 1st. Char != 'L'
650d e7 6c             SMB6 Op_Flag           ; flag long branch
650f ca                DEX                    ; skip 'L'

6510 9d 01 04 _labb    STA  Op_Mne,X          ; next mne character
6513 e8                INX
6514 e0 03             CPX  #3
6516 d0 d8             BNE  _getin

              ;        encode 3 letter mnemonic

6518 bd 00 04 _lpenc   LDA  Op_Mne-1,X
651b 38                SEC
651c e9 3f             SBC  #$3f              ; offset
651e a0 05             LDY  #5                ; 5 bit code
6520 4a       _lpbit   LSR  A
6521 66 65             ROR  Long_DA
6523 66 66             ROR  Long_DA+1
6525 88                DEY
6526 d0 f8             BNE  _lpbit
6528 ca                DEX
6529 d0 ed             BNE  _lpenc

              ;        find packed MNE code in table

652b a2 5a             LDX  #90               ; # of mnemonics
652d a5 65             LDA  Long_DA
652f dd f4 70 _lpfind  CMP  MNE_L,X           ; compare left MNE
6532 d0 07             BNE  _nxfind
6534 bc 4f 71          LDY  MNE_R,X
6537 c4 66             CPY  Long_DA+1         ; compare right MNE
6539 f0 06             BEQ  _found
653b ca       _nxfind  DEX
653c 10 f1             BPL  _lpfind
653e 4c be 60          JMP  Mon_Error

6541 8e 00 04 _found   STX  Ix_Mne

              ;        find 1st. opcode for this mnemonic

6544 8a                TXA
6545 a2 00             LDX  #0
6547 dd aa 71 _lpopc   CMP  MNE_Index,X
654a f0 03             BEQ  _exopc
654c e8                INX
654d d0 f8             BNE  _lpopc
654f 86 6b    _exopc   STX  Op_Code

              ;        check for BBR BBS RMB SMB

6551 8a                TXA
6552 29 07             AND  #7
6554 c9 07             CMP  #7
6556 d0 1d             BNE  _labc

6558 20 5c 6b          JSR  Get_Char
655b c9 30             CMP  #'0'
655d 93 5f fb          LBCC Mon_Error
6560 c9 38             CMP  #'8'
6562 b3 5a fb          LBCS Mon_Error
6565 0a                ASL  A
6566 0a                ASL  A
6567 0a                ASL  A
6568 0a                ASL  A
6569 05 6b             ORA  Op_Code
656b 85 6b             STA  Op_Code

656d 20 5c 6b          JSR  Get_Char
6570 c9 20             CMP  #' '
6572 d3 4a fb          LBNE Mon_Error

              ;        read operand

6575 a9 00    _labc    LDA  #0
6577 85 6a    _labd    STA  Mode_Flags
6579 20 47 6a          JSR  Read_Number
657c b3 40 fb          LBCS Mon_Error
657f f0 1c             BEQ  _labg             ; no operand
6581 a5 5b             LDA  Long_AC+2
6583 d3 39 fb          LBNE Mon_Error         ; -> overflow
6586 a0 02             LDY  #2                ; Y=2 word operand
6588 a5 5a             LDA  Long_AC+1
658a d0 01             BNE  _labf             ; high byte not zero
658c 88                DEY                    ; Y=1 byte operand
658d ae 04 04 _labf    LDX  Op_Ix             ; X = operand value #
6590 98                TYA                    ; A = 1:byte or 2:word
6591 9d 05 04          STA  Op_Len,X          ; store operand length
6594 ee 04 04          INC  Op_Ix             ; ++index to operand value
6597 8a                TXA                    ; A = current index
6598 d0 03             BNE  _labg             ; -> at 2nd. byte
659a 20 5a 61          JSR  LAC_To_LCT        ; Long_CT = 1st. operand
659d c6 6f    _labg    DEC  Buf_Index         ; back to delimiter

659f 20 5c 6b _lpnop   JSR  Get_Char          ; get delimiter
65a2 f3 ed 00          LBEQ _adjust           ; end of operand
65a5 c9 20             CMP  #' '
65a7 f0 f6             BEQ  _lpnop

              ;        immediate

65a9 c9 23             CMP  #'#'
65ab d0 08             BNE  _lbra
65ad a5 6a             LDA  Mode_Flags
65af d0 70             BNE  _error
65b1 a9 80             LDA  #$80              ; immediate mode
65b3 80 c2             BRA  _labd

              ;        left bracket

65b5 c9 5b    _lbra    CMP  #'['
65b7 d0 0a             BNE  _indir
65b9 a5 6a             LDA  Mode_Flags
65bb d0 64             BNE  _error
65bd d7 6c             SMB5 Op_Flag           ; 32 bit mode
65bf a9 40             LDA  #$40              ; ( flag
65c1 80 b4             BRA  _labd

              ;        left parenthesis

65c3 c9 28    _indir   CMP  #'('
65c5 d0 08             BNE  _comma
65c7 a5 6a             LDA  Mode_Flags
65c9 d0 56             BNE  _error
65cb a9 40             LDA  #$40              ; ( flag
65cd 80 a8             BRA  _labd

              ;        comma

65cf c9 2c    _comma   CMP  #','
65d1 d0 1f             BNE  _stack
65d3 ad 04 04          LDA  Op_Ix             ; operand value #
65d6 f0 49             BEQ  _error
65d8 a2 04             LDX  #4                ; outside comma
65da a5 6a             LDA  Mode_Flags
65dc f0 0e             BEQ  _comma1           ; no flags yet
65de c9 78             CMP  #$78              ; ($nn,SP)
65e0 f0 0a             BEQ  _comma1
65e2 c9 48             CMP  #$48              ; ($nn)
65e4 f0 06             BEQ  _comma1
65e6 a2 20             LDX  #$20              ; , inside comma
65e8 c9 40             CMP  #$40              ; (
65ea d0 35             BNE  _error
65ec 8a       _comma1  TXA
65ed 05 6a             ORA  Mode_Flags
65ef 4c 77 65          JMP  _labd

              ;        stack relative

65f2 c9 53    _stack   CMP  #'S'
65f4 d0 12             BNE  _rbra
65f6 20 5c 6b          JSR  Get_Char
65f9 c9 50             CMP  #'P'
65fb d0 24             BNE  _error
65fd a5 6a             LDA  Mode_Flags
65ff c9 60             CMP  #$60              ; ($nn,
6601 d0 1e             BNE  _error
6603 09 10             ORA  #%0001 0000       ; SP flag
6605 4c 77 65          JMP  _labd

              ;        right bracket

6608 c9 5d    _rbra    CMP  #']'
660a d0 18             BNE  _right
660c 5f 6c 12          BBR5 Op_Flag,_error
660f ad 04 04          LDA  Op_Ix
6612 f3 aa fa          LBEQ Mon_Error         ; no value
6615 a5 6a             LDA  Mode_Flags
6617 c9 40             CMP  #$40              ; (
6619 d3 a3 fa          LBNE Mon_Error
661c 09 08             ORA  #%0000 1000       ; )
661e 4c 77 65          JMP  _labd

6621 4c be 60 _error   JMP  Mon_Error

              ;        right parenthesis

6624 c9 29    _right   CMP  #')'
6626 d0 1a             BNE  _X
6628 ad 04 04          LDA  Op_Ix
662b f3 91 fa          LBEQ Mon_Error         ; no value
662e a5 6a             LDA  Mode_Flags
6630 c9 40             CMP  #$40              ; (
6632 f0 09             BEQ  _right1
6634 c9 61             CMP  #$61              ; ($nn,X
6636 f0 05             BEQ  _right1
6638 c9 70             CMP  #$70              ; ($nn,SP
663a d3 82 fa          LBNE Mon_Error
663d 09 08    _right1  ORA  #%0000 1000       ; )
663f 4c 77 65          JMP  _labd

6642 c9 58    _X       CMP  #'X'
6644 d0 16             BNE  _Y
6646 ad 04 04          LDA  Op_Ix
6649 f3 73 fa          LBEQ Mon_Error
664c a5 6a             LDA  Mode_Flags
664e c9 60             CMP  #$60
6650 f0 05             BEQ  _X1
6652 c9 04             CMP  #4
6654 d3 68 fa          LBNE Mon_Error
6657 09 01    _X1      ORA  #%0000 0001
6659 4c 77 65          JMP  _labd

              ;        Y

665c c9 59    _Y       CMP  #'Y'
665e d0 1a             BNE  _Z
6660 ad 04 04          LDA  Op_Ix
6663 f3 59 fa          LBEQ Mon_Error
6666 a5 6a             LDA  Mode_Flags
6668 c9 4c             CMP  #$4c             ; ($nn),
666a f0 09             BEQ  _Y1
666c c9 04             CMP  #4               ; $nn,
666e f0 05             BEQ  _Y1
6670 c9 7c             CMP  #$7c             ; ($nn,SP),
6672 d3 4a fa          LBNE Mon_Error
6675 09 02    _Y1      ORA  #%0000 0010      ; Y
6677 4c 77 65          JMP  _labd

              ;        Z

667a c9 5a    _Z       CMP  #'Z'
667c d3 40 fa          LBNE Mon_Error
667f ad 04 04          LDA  Op_Ix
6682 f3 3a fa          LBEQ Mon_Error
6685 a5 6a             LDA  Mode_Flags
6687 c9 4c             CMP  #$4c              ; $nn,
6689 d3 33 fa          LBNE Mon_Error
668c 09 03             ORA  #%0000 0011       ; Z
668e 4c 77 65          JMP  _labd

              ;        BBR BBS RMB SMB  two operands

6691 ad 00 04 _adjust  LDA  Ix_Mne
6694 ae 04 04          LDX  Op_Ix             ; # if values
6697 f0 52             BEQ  _match            ; -> no operand
6699 ca                DEX
669a f0 25             BEQ  _one             ; ->  one operand
669c ca                DEX
669d d3 1f fa          LBNE Mon_Error         ; -> error if more than 2
66a0 c9 05             CMP  #5                ; BBR
66a2 f0 05             BEQ  _BB
66a4 c9 06             CMP  #6                ; BBS
66a6 d3 16 fa          LBNE Mon_Error
66a9 a5 5e    _BB      LDA  Long_CT+1
66ab d3 11 fa          LBNE Mon_Error
66ae a9 03             LDA  #3                ; offset
66b0 20 96 67          JSR  Branch_Target
66b3 a5 6b             LDA  Op_Code
66b5 a4 59             LDY  Long_AC
66b7 a6 5d             LDX  Long_CT
66b9 86 59             STX  Long_AC
66bb 84 5a             STY  Long_AC+1
66bd a0 02             LDY  #2
66bf 80 4d             BRA  _store

              ;        one operand in Long_CT

66c1 a6 5d    _one     LDX  Long_CT
66c3 a4 5e             LDY  Long_CT+1
66c5 86 59             STX  Long_AC
66c7 84 5a             STY  Long_AC+1            ; Aval = operand
66c9 a2 0a             LDX  #10
66cb dd a9 72 _lpbrain CMP  BRAIN-1,X
66ce f0 05             BEQ  _branch
66d0 ca                DEX
66d1 d0 f8             BNE  _lpbrain
66d3 80 16             BRA  _match

              ;        branch instruction

66d5 a5 6a    _branch  LDA  Mode_Flags
66d7 d3 e5 f9          LBNE Mon_Error         ; only value
66da a9 02             LDA  #2                ; branch offset
66dc 20 96 67          JSR  Branch_Target
66df a5 6b             LDA  Op_Code
66e1 a0 01             LDY  #1                ; short branch
66e3 6f 6c 03          BBR6 Op_Flag,_bran1
66e6 c8                INY                    ; long branch
66e7 09 03             ORA  #3
66e9 80 23    _bran1   BRA  _store

              ;        find opcode matching mnemonic and address mode

66eb 20 c1 67 _match   JSR  Mode_Index
66ee 20 a9 67 _lpmatch JSR  Match_Mode
66f1 f0 17             BEQ  _okmat
66f3 ad 05 04          LDA  Op_Len
66f6 f3 c6 f9          LBEQ Mon_Error
66f9 a5 6a             LDA  Mode_Flags
66fb 33 c1 f9          LBMI Mon_Error
66fe 29 3f             AND  #%0011 1111
6700 85 6a             STA  Mode_Flags
6702 ee 05 04          INC  Op_Len
6705 20 d3 67          JSR  Size_To_Mode
6708 80 e4             BRA  _lpmatch
670a ac 05 04 _okmat   LDY  Op_Len
670d 8a                TXA

              ;        store instruction bytes
              ;        -----------------------
              ;        A    = opcode
              ;        Y    = operand length
              ;        Long_AC = operand value

670e 85 6b    _store   STA  Op_Code
6710 84 6d             STY  Op_Size
6712 e6 6d             INC  Op_Size
6714 5f 6c 17          BBR5 Op_Flag,_storen
6717 a9 ea             LDA  #$ea              ; 32 bit prefix
6719 a3 00             LDZ  #0
671b ea 92 61          STA  [Long_PC],Z       ; store prefix
671e 1b                INZ
671f a5 6b             LDA  Op_Code
6721 ea 92 61          STA  [Long_PC],Z       ; store opcode
6724 1b                INZ
6725 a5 59             LDA  Long_AC
6727 ea 92 61          STA  [Long_PC],Z       ; store address
672a e6 6d             INC  Op_Size
672c 80 13             BRA  _print

672e 5a       _storen  PHY
672f fb                PLZ                    ; Z = Y
6730 f0 0a             BEQ  _store1

6732 b9 58 00 _lpsto   LDA  Long_AC-1,Y
6735 ea 92 61          STA  [Long_PC],Z
6738 3b                DEZ
6739 88                DEY
673a d0 f6             BNE  _lpsto

673c a5 6b    _store1  LDA  Op_Code
673e ea 92 61          STA  [Long_PC],Z

6741 20 7d ff _print   JSR  PRIMM
6744 0d 91 41          .BYTE 13,$91,"A \eQ",0
674b 20 1e 68          JSR  Print_Code
674e e6 6d             INC  Op_Size
6750 a5 6d             LDA  Op_Size
6752 20 85 6b          JSR  Add_LPC

              ; print out command 'A' together with next address
              ; and put it into buffer too,
              ; for easy entry of next assembler instruction

6755 20 7d ff          JSR  PRIMM
6758 0d 41 20          .BYTE CR,"A ",0

675c a9 41             LDA  #'A'
675e 8d 00 02          STA  Buffer
6761 a9 20             LDA  #' '
6763 8d 01 02          STA  Buffer+1
6766 a0 02             LDY  #2
6768 a2 02             LDX  #2                ; 6 digits
676a b5 61             LDA  Long_PC,X
676c d0 01             BNE  _auto
676e ca                DEX                    ; 4 digits
676f da       _auto    PHX
6770 b5 61             LDA  Long_PC,X
6772 20 38 6b          JSR  A_To_Hex
6775 99 00 02          STA  Buffer,Y
6778 20 d2 ff          JSR  CHROUT
677b c8                INY
677c 8a                TXA
677d 99 00 02          STA  Buffer,Y
6780 20 d2 ff          JSR  CHROUT
6783 c8                INY
6784 fa                PLX
6785 ca                DEX
6786 10 e7             BPL  _auto

6788 a9 20             LDA  #' '
678a 99 00 02          STA  Buffer,Y
678d 20 d2 ff          JSR  CHROUT
6790 c8                INY
6791 98                TYA
6792 aa                TAX
6793 4c 95 60          JMP  Main_A
6796          EndMod [Mon_Assemble] Size = 699 [$2bb]

              ********************
              Module Branch_Target
              ********************

6796 c3 59             DEW  Long_AC
6798 3a                DEC  A
6799 d0 fb             BNE  Branch_Target

              ;        Target - PC

679b 38                SEC
679c a5 59             LDA  Long_AC
679e e5 61             SBC  Long_PC
67a0 85 59             STA  Long_AC
67a2 a5 5a             LDA  Long_AC+1
67a4 e5 62             SBC  Long_PC+1
67a6 85 5a             STA  Long_AC+1
67a8 60                RTS
67a9          EndMod [Branch_Target] Size = 19 [$13]

              *****************
              Module Match_Mode
              *****************

              ;        find matching mnemonic and address mode

67a9 a6 6b             LDX  Op_Code           ; try this opcode
67ab a5 6a             LDA  Mode_Flags         ; size and address mode
67ad dd b4 72 _loop    CMP  LEN_ADM,X
67b0 f0 0e             BEQ  _return           ; success  ZF=1

              ;        search for next opcode with same mnemonic

67b2 e8       _next    INX                    ; next opcode
67b3 f0 0a             BEQ _error
67b5 bc aa 71          LDY  MNE_Index,X
67b8 cc 00 04          CPY  Ix_Mne            ; same mnemonic ?
67bb f0 f0             BEQ  _loop             ; -> compare again
67bd 80 f3             BRA  _next

67bf ca       _error   DEX                    ; X = $ff ZF=0
67c0 60       _return  RTS
67c1          EndMod [Match_Mode] Size = 24 [$18]

              *****************
              Module Mode_Index
              *****************

67c1 a5 6a             LDA  Mode_Flags
67c3 a2 00             LDX  #0
67c5 dd b4 73 _loop    CMP  ADMODE,X
67c8 f0 07             BEQ  _found
67ca e8                INX
67cb e0 10             CPX  #16
67cd 90 f6             BCC  _loop
67cf 8a                TXA
67d0 60                RTS
67d1 86 6a    _found   STX  Mode_Flags
67d3          EndMod [Mode_Index] Size = 18 [$12]

              *******************
              Module Size_To_Mode
              *******************

67d3 ad 05 04          LDA  Op_Len
67d6 4a                LSR  A
67d7 6a                ROR  A
67d8 6a                ROR  A
67d9 05 6a             ORA  Mode_Flags
67db 85 6a             STA  Mode_Flags
67dd a2 00             LDX  #0
67df 60                RTS
67e0          EndMod [Size_To_Mode] Size = 13 [$d]

              **********************
              Module Mon_Disassemble
              **********************

67e0 20 2a 6a          JSR  Get_LAC           ; get 1st. parameter
67e3 b0 08             BCS  _nopar
67e5 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = start address
67e8 20 2a 6a          JSR  Get_LAC           ; Long_AC = end address
67eb 90 06             BCC  range
67ed a9 20    _nopar   LDA  #32               ; disassemble 32 bytes
67ef 85 5d             STA  Long_CT
67f1 80 06             BRA  _loop
67f3 20 81 61 range    JSR  LAC_Minus_LPC     ; Long_CT = range
67f6 93 c6 f8          LBCC Mon_Error         ; -> negative

67f9 20 24 6b _loop    JSR  CR_Erase          ; prepare empty line
67fc 20 e1 ff          JSR  STOP
67ff f3 8f f8          LBEQ Main
6802 20 18 68          JSR  Dis_Code          ; disassemble one line
6805 e6 6d             INC  Op_Size
6807 a5 6d             LDA  Op_Size
6809 20 85 6b          JSR  Add_LPC           ; advance address
680c a5 5d             LDA  Long_CT
680e 38                SEC
680f e5 6d             SBC  Op_Size
6811 85 5d             STA  Long_CT
6813 b0 e4             BCS  _loop
6815 4c 90 60          JMP  Main
6818          EndMod [Mon_Disassemble] Size = 56 [$38]

              ***************
              Module Dis_Code
              ***************

6818 20 7d ff          JSR  PRIMM
681b 2e 20 00          .BYTE ". ",0
681e          EndMod [Dis_Code] Size = 6 [$6]

              *****************
              Module Print_Code
              *****************

              ;        print 24 bit address of instruction

681e 20 ed 6a          JSR  Hex_LPC          ; 24 bit address

              ;        read opcode and calculate length and address mode

6821 a0 00             LDY  #0
6823 84 6c             STY  Op_Flag           ; clear flags
6825 20 c1 61          JSR  Fetch             ; fetch from (banked) address

              ;        check for Q instructions

6828 c9 42             CMP  #$42              ; NEG
682a d0 0f             BNE  _nop
682c c8                INY                    ; Y = 1
682d 20 c1 61          JSR  Fetch
6830 c9 42             CMP  #$42              ; NEG
6832 d0 07             BNE  _nop
6834 c7 6c             SMB4 Op_Flag           ; Q flag
6836 a9 02             LDA  #2
6838 20 85 6b          JSR  Add_LPC           ; skip NEG NEG

              ;        check for 32 bit address mode

683b a0 00    _nop     LDY  #0
683d 20 c1 61          JSR  Fetch
6840 85 6b             STA  Op_Code
6842 aa                TAX
6843 c9 ea             CMP  #$ea              ; prefix ?
6845 d0 12             BNE  _normal
6847 c8                INY
6848 20 c1 61          JSR  Fetch             ; opcode after prefix
684b 29 1f             AND  #%0001 1111       ; identify ($nn),Z codes
684d c9 12             CMP  #%0001 0010
684f d0 08             BNE  _normal
6851 d7 6c             SMB5 Op_Flag           ; set extended flag
6853 20 c1 61          JSR  Fetch
6856 85 6b             STA  Op_Code           ; code after prefix
6858 aa                TAX

6859 bc b4 72 _normal  LDY  LEN_ADM,X         ; Y = length and address mode
685c 98                TYA                    ; A = length and address mode
685d 29 0f             AND  #15               ; A = address mode
685f aa                TAX                    ; X = address mode
6860 bd b4 73          LDA  ADMODE,X          ; A = mode flags
6863 85 69             STA  Adr_Flags         ; store
6865 98                TYA                    ; A = length and address mode
6866 29 c0             AND  #%1100 0000       ; mask instruction length
6868 0a                ASL  A                 ; rotate into lower two bits
6869 2a                ROL  A
686a 2a                ROL  A
686b 85 6d             STA  Op_Size           ; store
686d 5f 6c 02          BBR5 Op_Flag,_norm1
6870 e6 6d             INC  Op_Size
6872          _norm1

              ;        print instruction and operand bytes

6872 a0 00             LDY  #0
6874 a9 20             LDA  #' '
6876 4f 6c 02          BBR4 Op_Flag,_blpr
6879 a9 2a             LDA  #'*'              ; print * for NEG NEG
687b 20 d2 ff _blpr    JSR  CHROUT
687e 20 c1 61 _lphex   JSR  Fetch
6881 20 17 6b          JSR  Print_Hex_Blank
6884 c0 02             CPY  #2
6886 f0 13             BEQ  _long             ; stop after 3 bytes
6888 c4 6d             CPY  Op_Size
688a c8                INY
688b 90 f1             BCC  _lphex

              ;        fill up with blanks

688d c0 03    _lpfill  CPY  #3
688f b0 0a             BCS  _long
6891 20 7d ff          JSR  PRIMM
6894 20 20 20          .BYTE "   ",0
6898 c8                INY
6899 80 f2             BRA  _lpfill

              ;        detect long branches

689b a9 9e    _long    LDA  #YELLOW
689d 20 d2 ff          JSR  CHROUT
68a0 a6 6b             LDX  Op_Code
68a2 bd b4 72          LDA  LEN_ADM,X
68a5 c9 a0             CMP  #%1010 0000        ; long branch mode
68a7 d0 07             BNE  _locate
68a9 e7 6c             SMB6 Op_Flag            ; set long branch flag
68ab a9 4c             LDA  #'L'
68ad 20 d2 ff          JSR  CHROUT

              ;        locate mnemonic text

68b0 a6 6b    _locate  LDX  Op_Code           ; X = opcode
68b2 bc aa 71          LDY  MNE_Index,X       ; Y = index to mnemonic text
68b5 b9 f4 70          LDA  MNE_L,Y           ; A = packed left part
68b8 85 5a             STA  Long_AC+1
68ba b9 4f 71          LDA  MNE_R,Y           ; A = packed right part
68bd 85 59             STA  Long_AC

              ;        unpack and print mnemonic text

68bf a2 03             LDX  #3                ; 3 letters
68c1 a9 00    _lpmne   LDA  #0
68c3 a0 05             LDY  #5                ; 5 bits per letter
68c5 06 59    _lplet   ASL  Long_AC
68c7 26 5a             ROL  Long_AC+1
68c9 2a                ROL  A                 ; rotate letter into A
68ca 88                DEY
68cb d0 f8             BNE  _lplet            ; next bit
68cd 69 3f             ADC  #$3f              ; add offset (C = 0)
68cf ca                DEX
68d0 f0 06             BEQ  _lastc            ; 3rd. character
68d2 4b                TAZ                    ; remember
68d3 20 d2 ff          JSR  CHROUT            ; and print it
68d6 80 e9             BRA  _lpmne            ; next letter

68d8 4f 6c 21 _lastc   BBR4 Op_Flag,_lbra     ; -> no Q
68db c9 41             CMP  #'A'              ; LDA, STA, ORA
68dd f0 0c             BEQ  _Q3
68df c9 43             CMP  #'C'              ; DEC, INC
68e1 d0 0f             BNE  _Q4
68e3 c2 45             CPZ  #'E'              ; DEC
68e5 f0 04             BEQ  _Q3
68e7 c2 4e             CPZ  #'N'              ; INC
68e9 d0 07             BNE  _Q4
68eb a9 51    _Q3      LDA  #'Q'              ; LDQ, STQ, ORQ, INQ, DEQ
68ed 20 d2 ff          JSR  CHROUT
68f0 80 2e             BRA  _mne4
68f2 20 d2 ff _Q4      JSR  CHROUT
68f5 a9 51             LDA  #'Q'              ; add Q as 4th. char
68f7 20 d2 ff          JSR  CHROUT
68fa 80 27             BRA  _mne5

68fc 20 d2 ff _lbra    JSR  CHROUT            ; 3rd. character
68ff ef 6c 21          BBS6 Op_Flag,_mne5     ; long branch

              ;        check for 4-letter bit instructions

6902 a5 6b             LDA  Op_Code
6904 29 0f             AND  #15
6906 c9 07             CMP  #7                ; RMB & SMB
6908 f0 06             BEQ  _biti
690a c9 0f             CMP  #15               ; BBR & BBS
690c d0 12             BNE  _mne4
690e f7 6c             SMB7 Op_Flag           ; flag two operands
6910 a5 6b    _biti    LDA  Op_Code
6912 29 70             AND  #%0111 0000
6914 0a                ASL  A
6915 2a                ROL  A
6916 2a                ROL  A
6917 2a                ROL  A
6918 2a                ROL  A
6919 09 30             ORA  #'0'
691b 20 d2 ff          JSR  CHROUT
691e 80 03             BRA  _mne5

6920 20 1a 6b _mne4    JSR  Print_Blank
6923 20 1a 6b _mne5    JSR  Print_Blank
6926 a9 05             LDA  #WHITE
6928 20 d2 ff          JSR  CHROUT

              ;        check for accumulator operand

692b a5 6b             LDA  Op_Code
692d a2 08             LDX  #8
692f ca       _lpaccu  DEX
6930 30 12             BMI  _oper
6932 dd c4 73          CMP  ACCUMODE,X
6935 d0 f8             BNE  _lpaccu

6937 a9 41             LDA  #'A'
6939 4f 6c 02          BBR4 Op_Flag,_accu
693c a9 51             LDA  #'Q'
693e 20 d2 ff _accu    JSR  CHROUT
6941 4c 27 6a          JMP  _return

              ;        fetch and decode operand

6944 a6 6d    _oper    LDX  Op_Size
6946 f3 df 00          LBEQ _return           ; -> no operand

6949 7f 69 04          BBR7 Adr_Flags,_laba   ; bit 7: immediate
694c a9 23             LDA  #'#'
694e 80 0a             BRA  _labb
6950 6f 69 0a _laba    BBR6 Adr_Flags,_labc   ; bit 6: left (
6953 a9 28             LDA  #'('
6955 5f 6c 02          BBR5 Op_Flag,_labb
6958 a9 5b             LDA  #'['
695a 20 d2 ff _labb    JSR  CHROUT
695d a9 24    _labc    LDA  #'$'
695f 20 d2 ff          JSR  CHROUT

              ;        fetch operand to Long_AC

6962 a0 00             LDY  #0
6964 84 5a             STY  Long_AC+1
6966 c8       _lpfop   INY
6967 20 c1 61          JSR  Fetch
696a 99 58 00          STA  Long_AC-1,Y
696d c4 6d             CPY  Op_Size
696f 90 f5             BCC  _lpfop

              ;        interpret address modes

6971 a6 6b             LDX  Op_Code
6973 bd b4 72          LDA  LEN_ADM,X
6976 29 20             AND  #%0010 0000       ; branches
6978 d3 84 00          LBNE _rel

              ;        print 16 bit operand hi/lo or 8 bit operand

697b 5f 6c 0c          BBR5 Op_Flag,_proper
697e a5 5a             LDA  Long_AC+1
6980 20 2c 6b          JSR  Print_Hex         ; [$nn],Z
6983 a9 5d             LDA  #']'
6985 20 d2 ff          JSR  CHROUT
6988 80 35             BRA  _labf

698a a4 6d    _proper  LDY  Op_Size
698c 7f 6c 02          BBR7 Op_Flag,_lpoper
698f a0 01             LDY  #1
6991 b9 58 00 _lpoper  LDA  Long_AC-1,Y
6994 20 2c 6b          JSR  Print_Hex
6997 88                DEY
6998 d0 f7             BNE  _lpoper

699a 5f 69 1a          BBR5 Adr_Flags,_labe   ; comma flag
699d a9 2c             LDA  #','
699f 20 d2 ff          JSR  CHROUT

69a2 4f 69 0a          BBR4 Adr_Flags,_labd   ; SP flag
69a5 a9 53             LDA  #'S'
69a7 20 d2 ff          JSR  CHROUT
69aa a9 50             LDA  #'P'
69ac 20 d2 ff          JSR  CHROUT

69af 0f 69 05 _labd    BBR0 Adr_Flags,_labe   ; X flag
69b2 a9 58             LDA  #'X'
69b4 20 d2 ff          JSR  CHROUT

69b7 3f 69 05 _labe    BBR3 Adr_Flags,_labf   ; ) flag
69ba a9 29             LDA  #')'
69bc 20 d2 ff          JSR  CHROUT

69bf 4f 6c 08 _labf    BBR4 Op_Flag,_comch    ; not a Q instruction
69c2 a5 69             LDA  Adr_Flags
69c4 29 03             AND  #3
69c6 c9 01             CMP  #1
69c8 d0 5d             BNE  _return           ; Q only with ,X

69ca 2f 69 12 _comch   BBR2 Adr_Flags,_labg   ; , flag
69cd a9 2c             LDA  #','
69cf 20 d2 ff          JSR  CHROUT

69d2 a5 69             LDA  Adr_Flags
69d4 29 03             AND  #%0000 0011 ; $03
69d6 f0 07             BEQ  _labg
69d8 a8                TAY
69d9 b9 d3 73          LDA  Index_Char-1,Y
69dc 20 d2 ff          JSR  CHROUT

              ;        fetch 2nd. operand for BBR and BBS

69df 7f 6c 45 _labg    BBR7 Op_Flag,_return
69e2 a9 2c             LDA  #','
69e4 20 d2 ff          JSR  CHROUT
69e7 a9 24             LDA  #'$'
69e9 20 d2 ff          JSR  CHROUT
69ec a0 02             LDY  #2
69ee 20 c1 61          JSR  Fetch
69f1 85 59             STA  Long_AC
69f3 a9 00             LDA  #0
69f5 85 5a             STA  Long_AC+1
69f7 88                DEY
69f8 84 6d             STY  Op_Size           ; Op_Size = 1
69fa a9 03             LDA  #3                ; offset for relative address
69fc 80 02             BRA  _rela

69fe a9 02    _rel     LDA  #2                ; offset for relative address
6a00 48       _rela    PHA
6a01 a5 6d             LDA  Op_Size           ; 1:short   2:long
6a03 4a                LSR  A
6a04 6a                ROR  A
6a05 25 59             AND  Long_AC
6a07 10 04             BPL  _labh
6a09 a9 ff             LDA  #$ff              ; backward branch
6a0b 85 5a             STA  Long_AC+1

6a0d fa       _labh    PLX                    ; offset 2 or 3
6a0e e3 59    _lpinw   INW  Long_AC
6a10 ca                DEX
6a11 d0 fb             BNE  _lpinw

6a13 18                CLC
6a14 a5 59             LDA  Long_AC
6a16 65 61             ADC  Long_PC
6a18 48                PHA
6a19 a5 5a             LDA  Long_AC+1
6a1b 65 62             ADC  Long_PC+1
6a1d aa                TAX
6a1e 68                PLA
6a1f 20 11 6b          JSR  Print_XA_Hex
6a22 7f 6c 02          BBR7 Op_Flag,_return
6a25 e6 6d             INC  Op_Size
6a27 60       _return  RTS
6a28          EndMod [Print_Code] Size = 522 [$20a]

              **************
              Module Got_LAC
              **************

6a28 c6 6f             DEC  Buf_Index
6a2a          EndMod [Got_LAC] Size = 2 [$2]

              **************
              Module Get_LAC
              **************

6a2a 20 47 6a          JSR  Read_Number
6a2d b0 0f             BCS  _error            ; illegal character
6a2f f0 10             BEQ  _noval            ; no value
6a31 20 5a 6b          JSR  Got_Char          ; delimiter ?
6a34 f0 0d             BEQ  _end              ; end of input
6a36 c9 20             CMP  #' '
6a38 f0 0b             BEQ  _ok
6a3a c9 2c             CMP  #','
6a3c f0 07             BEQ  _ok
6a3e 4c be 60 _error   JMP  Mon_Error         ; stack is reset in Mon_Error

6a41 38       _noval   SEC
6a42 60                RTS

6a43 c6 6f    _end     DEC  Buf_Index
6a45 18       _ok      CLC
6a46 60                RTS
6a47          EndMod [Get_LAC] Size = 29 [$1d]

              ******************
              Module Read_Number
              ******************

6a47 da                PHX
6a48 5a                PHY
6a49 db                PHZ
6a4a a9 00             LDA  #0
6a4c 85 6e             STA  Dig_Cnt           ; count columns read
6a4e 85 59             STA  Long_AC           ; clear result Long_AC
6a50 85 5a             STA  Long_AC+1
6a52 85 5b             STA  Long_AC+2
6a54 85 5c             STA  Long_AC+3

6a56 20 4d 6b          JSR  Get_Glyph         ; get 1st. character
6a59 f3 8b 00          LBEQ _exit
6a5c c9 27             CMP  #APOSTR           ; character entry 'C
6a5e d0 0b             BNE  _numeric
6a60 20 5c 6b          JSR  Get_Char          ; character after '
6a63 85 59             STA  Long_AC
6a65 e6 6e             INC  Dig_Cnt
6a67 e6 6f             INC  Buf_Index         ; position on delimiter
6a69 80 7b             BRA  _exit

6a6b a0 03    _numeric LDY  #3                ; $ + % %
6a6d d9 04 61 _prefix  CMP  Cons_Prefix,Y     ; Y = base index
6a70 f0 06             BEQ  _digit            ; -> valid prefix
6a72 88                DEY
6a73 10 f8             BPL  _prefix
6a75 c8                INY                    ; Y = 0
6a76 c6 6f             DEC  Buf_Index         ; character is digit

6a78 20 5c 6b _digit   JSR  Get_Char          ; hex -> BCD
6a7b f0 69             BEQ  _exit             ; ? : ; and zero terminate
6a7d c9 30             CMP  #'0'
6a7f 90 65             BCC  _exit
6a81 c9 3a             CMP  #':'
6a83 90 0a             BCC  _valid            ; 0-9
6a85 c9 41             CMP  #'A'
6a87 90 5d             BCC  _exit
6a89 c9 47             CMP  #'G'
6a8b b0 59             BCS  _exit
6a8d e9 07             SBC  #7                ; hex conversion
6a8f e9 2f    _valid   SBC  #'0'-1
6a91 d9 cc 73          CMP  Num_Base,Y
6a94 b0 4d             BCS  _error
6a96 48                PHA                    ; push digit
6a97 e6 6e             INC  Dig_Cnt

6a99 c0 01             CPY  #1                ; decimal
6a9b d0 15             BNE  _laba

6a9d a2 03             LDX  #3                ; push Long_AC
6a9f b5 59    _push    LDA  Long_AC,X
6aa1 48                PHA
6aa2 ca                DEX
6aa3 10 fa             BPL  _push
6aa5 ba                TSX                    ; double pushed value
6aa6 1e 01 01          ASL  Stack+1,X
6aa9 3e 02 01          ROL  Stack+2,X
6aac 3e 03 01          ROL  Stack+3,X
6aaf 3e 04 01          ROL  Stack+4,X

6ab2 be d0 73 _laba    LDX  Num_Bits,Y
6ab5 06 59    _shift   ASL  Long_AC
6ab7 26 5a             ROL  Long_AC+1
6ab9 eb 5b 00          ROW  Long_AC+2
6abc b0 25             BCS  _error            ; overflow
6abe ca                DEX
6abf d0 f4             BNE  _shift

6ac1 c0 01             CPY  #1                ; decimal adjustment
6ac3 d0 0e             BNE  _labc
6ac5 a2 00             LDX  #0
6ac7 a3 03             LDZ  #3
6ac9 18                CLC
6aca 68       _pull    PLA
6acb 75 59             ADC  Long_AC,X
6acd 95 59             STA  Long_AC,X
6acf e8                INX
6ad0 3b                DEZ
6ad1 10 f7             BPL  _pull

6ad3 68       _labc    PLA                    ; pull digit
6ad4 18                CLC
6ad5 65 59             ADC  Long_AC
6ad7 85 59             STA  Long_AC
6ad9 90 9d             BCC  _digit
6adb e6 5a             INC  Long_AC+1
6add d0 99             BNE  _digit
6adf e3 5b             INW  Long_AC+2
6ae1 d0 95             BNE  _digit

6ae3 38       _error   SEC
6ae4 80 01             BRA  _return
6ae6 18       _exit    CLC
6ae7 fb       _return  PLZ
6ae8 7a                PLY
6ae9 fa                PLX
6aea a5 6e             LDA  Dig_Cnt           ; digits read
6aec 60                RTS
6aed          EndMod [Read_Number] Size = 166 [$a6]

              **************
              Module Hex_LPC
              **************

6aed a6 64             LDX  Long_PC+3
6aef f0 15             BEQ  _laba
6af1 a9 9e             LDA  #YELLOW
6af3 20 d2 ff          JSR  CHROUT
6af6 8a                TXA
6af7 20 2c 6b          JSR  Print_Hex
6afa a5 63             LDA  Long_PC+2
6afc 20 2c 6b          JSR  Print_Hex
6aff a9 05             LDA  #WHITE
6b01 20 d2 ff          JSR  CHROUT
6b04 80 07             BRA  _labb
6b06 a5 63    _laba    LDA  Long_PC+2
6b08 f0 03             BEQ  _labb
6b0a 20 2c 6b          JSR  Print_Hex
6b0d a6 62    _labb    LDX  Long_PC+1
6b0f a5 61             LDA  Long_PC
6b11          EndMod [Hex_LPC] Size = 36 [$24]

              *******************
              Module Print_XA_Hex
              *******************

6b11 48                PHA
6b12 8a                TXA
6b13 20 2c 6b          JSR  Print_Hex
6b16 68                PLA
6b17          EndMod [Print_XA_Hex] Size = 6 [$6]

              **********************
              Module Print_Hex_Blank
              **********************

6b17 20 2c 6b          JSR  Print_Hex
6b1a          EndMod [Print_Hex_Blank] Size = 3 [$3]

              ******************
              Module Print_Blank
              ******************

6b1a a9 20             LDA  #' '
6b1c 4c d2 ff          JMP  CHROUT
6b1f          EndMod [Print_Blank] Size = 5 [$5]

              ***************
              Module Print_CR
              ***************

6b1f a9 0d             LDA  #13
6b21 4c d2 ff          JMP  CHROUT
6b24          EndMod [Print_CR] Size = 5 [$5]

              ***************
              Module CR_Erase
              ***************

6b24 20 7d ff          JSR  PRIMM
6b27 0d 1b 51          .BYTE "\r\eQ",0
6b2b 60                RTS
6b2c          EndMod [CR_Erase] Size = 8 [$8]

              ****************
              Module Print_Hex
              ****************

6b2c da                PHX
6b2d 20 38 6b          JSR  A_To_Hex
6b30 20 d2 ff          JSR  CHROUT
6b33 8a                TXA
6b34 fa                PLX
6b35 4c d2 ff          JMP  CHROUT
6b38          EndMod [Print_Hex] Size = 12 [$c]

              ***************
              Module A_To_Hex
              ***************

6b38 48                PHA
6b39 20 42 6b          JSR  _nibble
6b3c aa                TAX
6b3d 68                PLA
6b3e 4a                LSR  A
6b3f 4a                LSR  A
6b40 4a                LSR  A
6b41 4a                LSR  A

6b42 29 0f    _nibble  AND  #15
6b44 c9 0a             CMP  #10
6b46 90 02             BCC  _lab
6b48 69 06             ADC  #6
6b4a 69 30    _lab     ADC  #'0'
6b4c 60                RTS
6b4d          EndMod [A_To_Hex] Size = 21 [$15]

              ****************
              Module Get_Glyph
              ****************
6b4d da                PHX
6b4e a9 20             LDA  #' '
6b50 a6 6f    _loop    LDX  Buf_Index
6b52 e6 6f             INC  Buf_Index
6b54 dd 00 02          CMP  Buffer,X
6b57 f0 f7             BEQ  _loop
6b59 fa                PLX                    ; fall through
6b5a          EndMod [Get_Glyph] Size = 13 [$d]

              ***************
              Module Got_Char
              ***************

6b5a c6 6f             DEC  Buf_Index
6b5c          EndMod [Got_Char] Size = 2 [$2]

              ***************
              Module Get_Char
              ***************

6b5c da                PHX                  ; save X
6b5d a6 6f             LDX  Buf_Index
6b5f e6 6f             INC  Buf_Index
6b61 bd 00 02          LDA  Buffer,X
6b64 e0 01             CPX  #1              ; column index
6b66 fa                PLX
6b67 90 08             BCC  _regc           ; branch at 1st. column
6b69 c9 3b             CMP  #';'            ; register ?
6b6b f0 0a             BEQ  _return
6b6d c9 3f             CMP  #'?'            ; error marker
6b6f f0 06             BEQ  _return
6b71 c9 00    _regc    CMP  #0              ; end of buffer ?
6b73 f0 02             BEQ  _return
6b75 c9 3a             CMP  #':'            ; end of statement ?
6b77 60       _return  RTS
6b78          EndMod [Get_Char] Size = 28 [$1c]


              **************
              Module Dec_LCT
              **************

6b78 a5 5d             LDA  Long_CT
6b7a 05 5e             ORA  Long_CT+1
6b7c d0 02             BNE  _skip
6b7e c3 5f             DEW  Long_CT+2
6b80 c3 5d    _skip    DEW  Long_CT
6b82 a5 60             LDA  Long_CT+3         ; set N flag
6b84 60                RTS
6b85          EndMod [Dec_LCT] Size = 13 [$d]

              **************
              Module Add_LPC
              **************

6b85 18                CLC
6b86 65 61             ADC  Long_PC
6b88 85 61             STA  Long_PC
6b8a 90 06             BCC  _return

              ************
6b8c          Inc_LPC_Page
              ************

6b8c e6 62             INC  Long_PC+1
6b8e d0 02             BNE  _return
6b90 e3 63             INW  Long_PC+2
6b92 60       _return  RTS

              ******************
              Module Param_Range
              ******************

              ; read two (address) parameters

              ; Long_CT = difference (2nd. minus 1st.)
              ; Long_PC = 1st. parameter
              ; Long_DA = 2nd. parameter

              ; carry on exit flags error

6b93 20 2a 6a          JSR  Get_LAC           ; get 1st. parameter
6b96 b0 12             BCS  _error
6b98 20 4e 61          JSR  LAC_To_LPC        ; Long_PC = 1st. address
6b9b 20 2a 6a          JSR  Get_LAC
6b9e b0 0a             BCS  _error
6ba0 20 66 61          JSR  LAC_To_LDA        ; Long_DA = 2nd. address
6ba3 20 81 61          JSR  LAC_Minus_LPC     ; Long_CT = range
6ba6 90 02             BCC  _error
6ba8 18                CLC
6ba9 60                RTS
6baa 38       _error   SEC
6bab 60                RTS
6bac          EndMod [Param_Range] Size = 25 [$19]

              ****************
              Module Converter
              ****************

6bac a2 00             LDX  #0
6bae 86 6f             STX  Buf_Index
6bb0 20 2a 6a          JSR  Get_LAC
6bb3 b3 09 f5          LBCS Mon_Error
6bb6 a2 00             LDX  #0
6bb8 da       _loop    PHX
6bb9 20 24 6b          JSR  CR_Erase
6bbc bd 04 61          LDA  Cons_Prefix,X
6bbf 20 d2 ff          JSR  CHROUT
6bc2 8a                TXA
6bc3 0a                ASL  A
6bc4 aa                TAX
6bc5 23 d1 6b          JSR  (Conv_Tab,X)
6bc8 fa                PLX
6bc9 e8                INX
6bca e0 05             CPX  #5
6bcc 90 ea             BCC  _loop
6bce 4c 90 60          JMP  Main

6bd1 1e 6c    Conv_Tab .WORD Print_Hexval
6bd3 27 6c             .WORD Print_Decimal
6bd5 ef 6b             .WORD Print_Octal
6bd7 e9 6b             .WORD Print_Dual
6bd9 db 6b             .WORD Print_Char
6bdb          EndMod [Converter] Size = 47 [$2f]

              *****************
              Module Print_Char
              *****************

6bdb a5 59             LDA  Long_AC
6bdd c9 20             CMP  #' '
6bdf 90 07             BCC  _return
6be1 c9 60             CMP  #$60
6be3 b0 03             BCS  _return
6be5 4c d2 ff          JMP  CHROUT
6be8 60       _return  RTS
6be9          EndMod [Print_Char] Size = 14 [$e]

              *****************
              Module Print_Dual
              *****************

6be9 a2 18             LDX  #24               ; digits
6beb a0 01             LDY  #1                ; bits per digit
6bed 80 04             BRA  _entry

              ***********
6bef          Print_Octal
              ***********

6bef a2 08             LDX  #8                ; digits
6bf1 a0 03             LDY  #3                ; bits per digit

6bf3 20 5a 61 _entry   JSR  LAC_To_LCT
6bf6 a3 00             LDZ  #0
6bf8 64 61             STZ  Long_PC
6bfa a3 30             LDZ  #'0'
6bfc 5a                PHY                    ; save start value
6bfd 7a       _loopa   PLY                    ; reinitialise
6bfe 5a                PHY
6bff a9 00             LDA  #0
6c01 06 5d    _loopb   ASL  Long_CT
6c03 eb 5e 00          ROW  Long_CT+1
6c06 2a                ROL  A
6c07 88                DEY
6c08 d0 f7             BNE  _loopb
6c0a e0 01             CPX  #1                ; print last character
6c0c f0 04             BEQ  _skip
6c0e 05 61             ORA  Long_PC
6c10 f0 07             BEQ  _next
6c12 09 30    _skip    ORA  #'0'
6c14 64 61             STZ  Long_PC
6c16 20 d2 ff          JSR  CHROUT
6c19 ca       _next    DEX
6c1a d0 e1             BNE  _loopa
6c1c 7a                PLY                    ; cleanup stack
6c1d 60                RTS
6c1e          EndMod [Print_Dual] Size = 53 [$35]

              *******************
              Module Print_Hexval
              *******************

6c1e 20 4e 61         JSR  LAC_To_LPC
6c21 a9 00            LDA  #0
6c23 85 64            STA  Long_PC+3
6c25 80 32            BRA  Print_BCD
6c27          EndMod [Print_Hexval] Size = 9 [$9]

              ********************
              Module Print_Decimal
              ********************

              ; max $ffffff = 16777215 (8 digits)

6c27 20 5a 61          JSR  LAC_To_LCT
6c2a a2 03             LDX  #3                ; 4 BCD bytes = 8 digits
6c2c a9 00             LDA  #0
6c2e 95 61    _clear   STA  Long_PC,X
6c30 ca                DEX
6c31 10 fb             BPL  _clear

6c33 a2 20             LDX  #32               ; source bits
6c35 f8                SED
6c36 06 5d    _loop    ASL  Long_CT
6c38 26 5e             ROL  Long_CT+1
6c3a eb 5f 00          ROW  Long_CT+2
6c3d a5 61             LDA  Long_PC
6c3f 65 61             ADC  Long_PC
6c41 85 61             STA  Long_PC
6c43 a5 62             LDA  Long_PC+1
6c45 65 62             ADC  Long_PC+1
6c47 85 62             STA  Long_PC+1
6c49 a5 63             LDA  Long_PC+2
6c4b 65 63             ADC  Long_PC+2
6c4d 85 63             STA  Long_PC+2
6c4f a5 64             LDA  Long_PC+3
6c51 65 64             ADC  Long_PC+3
6c53 85 64             STA  Long_PC+3
6c55 ca                DEX
6c56 d0 de             BNE  _loop
6c58 d8                CLD
6c59          EndMod [Print_Decimal] Size = 50 [$32]

              ****************
              Module Print_BCD
              ****************

6c59 a9 00             LDA  #0
6c5b 85 5d             STA  Long_CT
6c5d a3 30             LDZ  #'0'
6c5f a0 08             LDY  #8                ; max. digits
6c61 a2 03    _loopa   LDX  #3                ; 4 bytes
6c63 a9 00             LDA  #0
6c65 06 61    _loopb   ASL  Long_PC
6c67 26 62             ROL  Long_PC+1
6c69 eb 63 00          ROW  Long_PC+2
6c6c 2a                ROL  A
6c6d ca                DEX
6c6e 10 f5             BPL  _loopb

6c70 c0 01             CPY  #1                ; print last character
6c72 f0 04             BEQ  _skip
6c74 05 5d             ORA  Long_CT
6c76 f0 0d             BEQ  _next
6c78 09 30    _skip    ORA  #'0'
6c7a 64 5d             STZ  Long_CT
6c7c c9 3a             CMP  #$3a
6c7e 90 02             BCC  _print
6c80 69 06             ADC  #6                ; + carry
6c82 20 d2 ff _print   JSR  CHROUT
6c85 88       _next    DEY
6c86 d0 d9             BNE  _loopa
6c88 60                RTS
6c89          EndMod [Print_BCD] Size = 48 [$30]

              ****************
              Module Read_Unit
              ****************
6c89 20 47 6a          JSR  Read_Number       ; unit
6c8c b3 30 f4          LBCS Mon_Error
6c8f a5 59             LDA  Long_AC
6c91 c9 08             CMP  #8
6c93 93 29 f4          LBCC Mon_Error
6c96 c9 10             CMP  #16
6c98 b3 24 f4          LBCS Mon_Error
6c9b c6 6f             DEC  Buf_Index
6c9d 60                RTS
6c9e          EndMod [Read_Unit] Size = 21 [$15]

0870          MEM_BUF = $870
087f          MEM_DIR = $87F

              *****************
              Module Copy_Files
              *****************

              ; Input: Long_CT = directory cache

6c9e a9 24             LDA  #$24
6ca0 85 5d             STA  Long_CT
6ca2 a3 00    _lpent   LDZ  #0
6ca4 1b       _lpquote INZ
6ca5 ea b2 5d          LDA  [Long_CT],Z
6ca8 c9 42             CMP  #'B'              ; BLOCKS FREE
6caa f3 95 00          LBEQ _exit
6cad c9 20             CMP  #' '
6caf f0 f3             BEQ  _lpquote
6cb1 c9 22             CMP  #QUOTE
6cb3 d3 8c 00          LBNE _exit
6cb6 a0 00             LDY  #0
6cb8 1b       _lpfn    INZ
6cb9 ea b2 5d          LDA  [Long_CT],Z
6cbc c9 22             CMP  #QUOTE
6cbe f0 0a             BEQ  _endfn
6cc0 99 0e 04          STA  Mon_Data,Y
6cc3 c8                INY
6cc4 c0 10             CPY  #16
6cc6 90 f0             BCC  _lpfn
6cc8 80 77             BRA  _exit
6cca a9 2c    _endfn   LDA  #','
6ccc 99 0e 04          STA  Mon_Data,Y
6ccf c8                INY
6cd0 1b       _lptype  INZ
6cd1 ea b2 5d          LDA  [Long_CT],Z
6cd4 c9 20             CMP  #' '
6cd6 f0 f8             BEQ  _lptype
6cd8 99 0e 04          STA  Mon_Data,Y
6cdb 8d 0b 04          STA  File_Ext
6cde 1b                INZ
6cdf ea b2 5d          LDA  [Long_CT],Z
6ce2 8d 0c 04          STA  File_Ext+1
6ce5 1b                INZ
6ce6 ea b2 5d          LDA  [Long_CT],Z
6ce9 8d 0d 04          STA  File_Ext+2
6cec a9 00             LDA  #0
6cee c8                INY
6cef 84 b7             STY  FNLEN
6cf1 99 0e 04          STA  Mon_Data,Y
6cf4 85 59             STA  Long_AC
6cf6 85 5a             STA  Long_AC+1
6cf8 a9 70             LDA  #<MEM_BUF
6cfa 85 5b             STA  Long_AC+2
6cfc a9 08             LDA  #>MEM_BUF
6cfe 85 5c             STA  Long_AC+3

6d00 20 c9 6d          JSR  List_Filename
6d03 ad 07 04          LDA  Disk_Src
6d06 20 3a 6e          JSR  Load_File
6d09 a5 63             LDA  Long_PC+2
6d0b 29 0f             AND  #15
6d0d 20 38 6b          JSR  A_To_Hex
6d10 8a                TXA
6d11 20 d2 ff          JSR  CHROUT
6d14 a6 62             LDX  Long_PC+1
6d16 a5 61             LDA  Long_PC
6d18 20 11 6b          JSR  Print_XA_Hex
6d1b a4 b7             LDY  FNLEN
6d1d a9 2c             LDA  #','
6d1f 99 0e 04          STA  Mon_Data,Y
6d22 a9 57             LDA  #'W'
6d24 99 0f 04          STA  Mon_Data+1,Y
6d27 a9 00             LDA  #0
6d29 99 10 04          STA  Mon_Data+2,Y
6d2c ad 06 04          LDA  Disk_Unit         ; FA
6d2f 20 f5 6d          JSR  Save_File

6d32 18                CLC
6d33 a5 5d             LDA  Long_CT
6d35 69 20             ADC  #$20
6d37 85 5d             STA  Long_CT
6d39 93 67 ff          LBCC _lpent
6d3c e6 5e             INC  Long_CT+1
6d3e d3 62 ff          LBNE _lpent
6d41 60       _exit    RTS
6d42          EndMod [Copy_Files] Size = 164 [$a4]

              ********************
              Module Mon_Unit_Copy
              ********************

              ; Ut=s,pattern

6d42 20 89 6c          JSR  Read_Unit         ; target unit
6d45 8d 06 04          STA  Disk_Unit
6d48 20 4d 6b          JSR  Get_Glyph
6d4b c9 3d             CMP  #'='
6d4d d3 6f f3          LBNE Mon_Error
6d50 20 89 6c          JSR  Read_Unit         ; source unit
6d53 8d 07 04          STA  Disk_Src
6d56 85 ba             STA  FA
6d58 a0 ff             LDY  #-1
6d5a c8       _loopfn  INY
6d5b b9 a1 6d          LDA  _dir,Y
6d5e 99 0e 04          STA  Mon_Data,Y
6d61 d0 f7             BNE  _loopfn
6d63 20 4d 6b          JSR  Get_Glyph         ; delimiter ?
6d66 aa                TAX
6d67 f0 19             BEQ  _laba
6d69 c9 2c             CMP  #','
6d6b d3 51 f3          LBNE Mon_Error
6d6e a6 6f             LDX  Buf_Index
6d70 ca                DEX
6d71 a0 02             LDY  #2
6d73 e8       _pat     INX
6d74 c8                INY
6d75 c0 12             CPY  #18
6d77 b3 45 f3          LBCS Mon_Error
6d7a bd 00 02          LDA  Buffer,X
6d7d 99 0e 04          STA  Mon_Data,Y
6d80 d0 f1             BNE  _pat
6d82 a3 00    _laba    LDZ  #0
6d84 64 b9             STZ  SA                ; loading directory
6d86 64 59             STZ  Long_AC
6d88 64 5a             STZ  Long_AC+1
6d8a a9 7f             LDA  #<MEM_DIR
6d8c 85 5b             STA  Long_AC+2
6d8e a9 08             LDA  #>MEM_DIR
6d90 85 5c             STA  Long_AC+3
6d92 20 5a 61          JSR  LAC_To_LCT        ; Long_CT = directory pointer
6d95 ad 07 04          LDA  Disk_Src
6d98 20 3a 6e          JSR  Load_File
6d9b 20 9e 6c          JSR  Copy_Files
6d9e 4c 90 60          JMP  Main

6da1 24 30 3a _dir     .BYTE "$0:*",0
6da6          EndMod [Mon_Unit_Copy] Size = 100 [$64]


              ********************
              Module Send_Filename
              ********************

6da6 a5 ba            LDA  FA
6da8 20 b1 ff         JSR  LISTEN
6dab a5 b9            LDA  SA
6dad 09 f0            ORA  #$f0
6daf 20 93 ff         JSR  SECOND
6db2 a0 00            LDY  #0
6db4 84 90            STY  STATUS
6db6 b9 0e 04 _fname  LDA  Mon_Data,Y
6db9 f0 08            BEQ  _stop
6dbb 20 a8 ff         JSR  CIOUT
6dbe c8               INY
6dbf c0 14            CPY  #20
6dc1 90 f3            BCC  _fname
6dc3 20 ae ff _stop   JSR  UNLSN
6dc6 4c b3 6e         JMP  Get_Disk_Status
6dc9          EndMod [Send_Filename] Size = 35 [$23]

              ********************
              Module List_Filename
              ********************
6dc9 20 24 6b         JSR  CR_Erase
6dcc a0 ff            LDY  #-1
6dce c8       _loop   INY
6dcf b9 0e 04         LDA  Mon_Data,Y
6dd2 c9 2c            CMP  #','
6dd4 f0 05            BEQ  _fill
6dd6 20 d2 ff         JSR  CHROUT
6dd9 80 f3            BRA  _loop
6ddb a9 20    _fill   LDA  #' '
6ddd 20 d2 ff _blank  JSR  CHROUT
6de0 c8               INY
6de1 c0 10            CPY  #16
6de3 90 f8            BCC  _blank
6de5 a0 00            LDY  #0
6de7 b9 0b 04 _ext    LDA  File_Ext,Y
6dea 20 d2 ff         JSR  CHROUT
6ded c8               INY
6dee c0 03            CPY  #3
6df0 90 f5            BCC  _ext
6df2 4c 1a 6b         JMP  Print_Blank
6df5          EndMod [List_Filename] Size = 44 [$2c]

              ****************
              Module Save_File
              ****************

              ; Input : (Long_AC) = start address
              ;         (Long_PC) = last  address

6df5 85 ba            STA  FA
6df7 a2 01            LDX  #1
6df9 86 b9            STX  SA
6dfb 20 a6 6d         JSR  Send_Filename
6dfe d0 37            BNE  _error
6e00 a5 ba            LDA  FA
6e02 20 b1 ff         JSR  LISTEN
6e05 a5 b9            LDA  SA
6e07 09 60            ORA  #$60
6e09 20 93 ff         JSR  SECOND
6e0c a3 00            LDZ  #0
6e0e 64 90            STZ  STATUS
6e10 ea b2 59 _loop   LDA  [Long_AC],Z
6e13 20 a8 ff         JSR  CIOUT
6e16 d4 61            CPZ  Long_PC
6e18 d0 0c            BNE  _cont
6e1a a5 5a            LDA  Long_AC+1
6e1c c5 62            CMP  Long_PC+1
6e1e d0 06            BNE  _cont
6e20 a5 5b            LDA  Long_AC+2
6e22 c5 63            CMP  Long_PC+2
6e24 f0 0b            BEQ  _stop

6e26 a6 90    _cont   LDX  STATUS
6e28 d0 07            BNE  _stop
6e2a 1b               INZ
6e2b d0 e3            BNE  _loop
6e2d e3 5a            INW  Long_AC+1
6e2f d0 df            BNE  _loop
6e31 20 ae ff _stop   JSR  UNLSN
6e34 4c 6e 6e         JMP  Close_File
6e37 4c f4 6e _error  JMP  Print_Disk_Msg
6e3a          EndMod [Save_File] Size = 69 [$45]

              ****************
              Module Load_File
              ****************

              ; Input : (Long_AC) = start address
              ; Output: (Long_PC) = last  address

6e3a 85 ba            STA  FA
6e3c a2 00            LDX  #0
6e3e 86 b9            STX  SA
6e40 20 4e 61         JSR  LAC_To_LPC      ; Long_PC = load address
6e43 20 a6 6d         JSR  Send_Filename
6e46 d0 35            BNE  _error
6e48 a5 ba            LDA  FA
6e4a 20 b4 ff         JSR  TALK
6e4d a5 b9            LDA  SA
6e4f 09 60            ORA  #$60
6e51 20 96 ff         JSR  TKSA
6e54 a3 00            LDZ  #0
6e56 64 90            STZ  STATUS
6e58 20 a5 ff _loop   JSR  ACPTR
6e5b ea 92 61         STA  [Long_PC],Z
6e5e a6 90            LDX  STATUS
6e60 d0 07            BNE  _stop
6e62 1b               INZ
6e63 d0 f3            BNE  _loop
6e65 e3 62            INW  Long_PC+1
6e67 d0 ef            BNE  _loop
6e69 64 61    _stop   STZ  Long_PC
6e6b 20 ab ff         JSR  UNTALK

              **********
6e6e          Close_File
              **********

6e6e a5 ba            LDA  FA
6e70 20 b1 ff         JSR  LISTEN
6e73 a5 b9            LDA  SA
6e75 09 e0            ORA  #$e0
6e77 20 93 ff         JSR  SECOND
6e7a 4c ae ff         JMP  UNLSN
6e7d 4c f4 6e _error  JMP  Print_Disk_Msg
6e80          EndMod [Load_File] Size = 70 [$46]

              ***************
              Module Mon_Disk
              ***************

6e80 c6 6f             DEC  Buf_Index
6e82 a6 6f             LDX  Buf_Index
6e84 bd 00 02          LDA  Buffer,X
6e87 f0 68             BEQ  Print_Disk_Status
6e89 85 5d             STA  Long_CT           ; dir marker
6e8b a0 ff             LDY  #$ff              ; SA = 15
6e8d c9 24             CMP  #'$'
6e8f d0 02             BNE  _lab
6e91 a0 f0             LDY  #$f0              ; SA =  0
6e93 a5 ba    _lab     LDA  FA
6e95 20 b1 ff          JSR  LISTEN
6e98 98                TYA                    ; SA
6e99 20 93 ff          JSR  SECOND
6e9c bd 00 02 _loop    LDA  Buffer,X
6e9f f0 06             BEQ  _close
6ea1 20 a8 ff          JSR  CIOUT
6ea4 e8                INX
6ea5 80 f5             BRA  _loop
6ea7 20 ae ff _close   JSR  UNLSN
6eaa a5 5d             LDA  Long_CT
6eac c9 24             CMP  #'$'
6eae d0 41             BNE  Print_Disk_Status
6eb0 4c 42 6f          JMP  Directory

6eb3          EndMod [Mon_Disk] Size = 51 [$33]

              **********************
              Module Get_Disk_Status
              **********************

6eb3 a5 ba             LDA  FA
6eb5 20 b4 ff          JSR  TALK
6eb8 a9 6f             LDA  #$6f
6eba 20 96 ff          JSR  TKSA
6ebd 20 a5 ff          JSR  ACPTR             ; 1st. digit
6ec0 8d 36 04          STA  Disk_Msg
6ec3 0a                ASL  A
6ec4 0a                ASL  A
6ec5 0a                ASL  A
6ec6 0a                ASL  A
6ec7 8d 0a 04          STA  Disk_Status       ; BCD
6eca 20 a5 ff          JSR  ACPTR             ; 2nd. digit
6ecd 8d 37 04          STA  Disk_Msg+1
6ed0 29 0f             AND  #15
6ed2 0d 0a 04          ORA  Disk_Status
6ed5 8d 0a 04          STA  Disk_Status       ; complete BCD number

6ed8 a0 01             LDY  #1
6eda c8       _loop    INY
6edb 20 a5 ff          JSR  ACPTR
6ede 99 36 04          STA  Disk_Msg,Y
6ee1 c9 20             CMP  #' '
6ee3 b0 f5             BCS  _loop
6ee5 a9 00             LDA  #0
6ee7 99 36 04          STA  Disk_Msg,Y
6eea 20 ab ff          JSR  UNTALK
6eed ad 0a 04          LDA  Disk_Status
6ef0 60                RTS
6ef1          EndMod [Get_Disk_Status] Size = 62 [$3e]

              ************************
              Module Print_Disk_Status
              ************************

6ef1 20 b3 6e          JSR  Get_Disk_Status

              **************
6ef4          Print_Disk_Msg
              **************

6ef4 20 1f 6b          JSR  Print_CR
6ef7 a0 00             LDY  #0
6ef9 b9 36 04 _loop    LDA  Disk_Msg,Y
6efc f0 06             BEQ  _exit
6efe 20 d2 ff          JSR  CHROUT
6f01 c8                INY
6f02 80 f5             BRA  _loop
6f04 4c 1f 6b _exit    JMP  Print_CR
6f07          EndMod [Print_Disk_Status] Size = 22 [$16]

              ; @[u] : print disk status for unit u
              ; @[u],$[=pattern] : print directory
              ; @[u],command : send disk command and read status
              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)
              ; @[u],U2 mem track startsec [endsec] : write disk sector(s)

              **************
              Module Mon_DOS
              **************

6f07 a2 08             LDX  #8                ; default device
6f09 20 4d 6b          JSR  Get_Glyph
6f0c c9 30             CMP  #'0'
6f0e 90 17             BCC  _unit
6f10 c9 3a             CMP  #':'
6f12 b0 13             BCS  _unit
6f14 c6 6f             DEC  Buf_Index
6f16 20 47 6a          JSR  Read_Number
6f19 b0 0c             BCS  _unit
6f1b a6 59             LDX  Long_AC           ; unit
6f1d e0 04             CPX  #4
6f1f 93 9d f1          LBCC Mon_Error
6f22 e0 1f             CPX  #31
6f24 b3 98 f1          LBCS Mon_Error
6f27 86 ba    _unit    STX  FA
6f29 c6 6f             DEC  Buf_Index
6f2b 20 5c 6b _next    JSR  Get_Char
6f2e f0 0c             BEQ  _status           ; only @u
6f30 c9 20             CMP  #' '
6f32 f0 f7             BEQ  _next
6f34 c9 2c             CMP  #','
6f36 f0 f3             BEQ  _next
6f38 c9 55             CMP  #'U'              ; sector read/write
6f3a f0 4e             BEQ  DOS_U
6f3c 20 80 6e _status  JSR  Mon_Disk
6f3f 4c 90 60          JMP  Main
6f42          EndMod [Mon_DOS] Size = 59 [$3b]

              ****************
              Module Directory
              ****************

6f42 a5 ba             LDA  FA
6f44 20 b4 ff          JSR  TALK
6f47 a9 60             LDA  #$60
6f49 85 b9             STA  SA
6f4b 20 96 ff          JSR  TKSA
6f4e a9 00             LDA  #0
6f50 85 90             STA  STATUS

6f52 a3 06             LDZ  #6                ; load address, pseudo link, pseudo number
6f54 aa       _loopb   TAX                    ; X = previous byte
6f55 20 a5 ff          JSR  ACPTR             ; A = current  byte
6f58 a4 90             LDY  STATUS
6f5a d0 2b             BNE  _exit
6f5c 3b                DEZ
6f5d d0 f5             BNE  _loopb            ; X/A = last read word

6f5f 86 59             STX  Long_AC
6f61 85 5a             STA  Long_AC+1
6f63 64 5b             STZ  Long_AC+2
6f65 64 5c             STZ  Long_AC+3
6f67 20 27 6c          JSR  Print_Decimal     ; file size
6f6a 20 1a 6b          JSR  Print_Blank

6f6d 20 a5 ff _loopc   JSR  ACPTR             ; print file entry
6f70 f0 09             BEQ  _cr
6f72 a4 90             LDY  STATUS
6f74 d0 11             BNE  _exit
6f76 20 d2 ff          JSR  CHROUT
6f79 90 f2             BCC  _loopc

6f7b 20 1f 6b _cr      JSR  Print_CR
6f7e 20 e1 ff          JSR  STOP
6f81 f0 04             BEQ  _exit
6f83 a3 04             LDZ  #4
6f85 80 cd             BRA  _loopb            ; next file
6f87 4c ab ff _exit    JMP  UNTALK
6f8a          EndMod [Directory] Size = 72 [$48]

              ************
              Module DOS_U
              ************

6f8a 20 5c 6b          JSR  Get_Char
6f8d c9 31             CMP  #'1'            ; U1: read
6f8f 93 2d f1          LBCC Mon_Error
6f92 c9 33             CMP  #'3'            ; U2: write
6f94 b3 28 f1          LBCS Mon_Error
6f97 8d 0f 04          STA  Mon_Data+1      ; U type
6f9a e6 6f             INC  Buf_Index
6f9c 20 2a 6a          JSR  Get_LAC
6f9f b3 1d f1          LBCS Mon_Error
6fa2 20 4e 61          JSR  LAC_To_LPC      ; Long_PC = memory address

6fa5 20 2a 6a          JSR  Get_LAC
6fa8 b3 14 f1          LBCS Mon_Error
6fab a5 59             LDA  Long_AC
6fad 8d 08 04          STA  Disk_Track

6fb0 20 2a 6a          JSR  Get_LAC
6fb3 b3 09 f1          LBCS Mon_Error
6fb6 a5 59             LDA  Long_AC
6fb8 8d 09 04          STA  Disk_Sector

6fbb 20 2a 6a          JSR  Get_LAC
6fbe 20 5a 61          JSR  LAC_To_LCT        ; Long_CT = sector count
6fc1 c3 5d             DEW  Long_CT           ; Long_CT = -1 for single

6fc3 20 c1 70          JSR  Open_Disk_Buffer

6fc6 ad 0f 04 _loop    LDA  Mon_Data+1
6fc9 4a                LSR  A
6fca f0 0a             BEQ  _write
6fcc 20 f1 6f          JSR  Find_Next_Sector
6fcf d0 17             BNE  _error
6fd1 20 4b 70          JSR  Read_Sector
6fd4 80 08             BRA  _next

6fd6 20 65 70 _write   JSR  Write_Sector
6fd9 20 f1 6f          JSR  Find_Next_Sector
6fdc d0 0a             BNE  _error

6fde 20 8c 6b _next    JSR  Inc_LPC_Page
6fe1 ee 09 04          INC  Disk_Sector
6fe4 c3 5d             DEW  Long_CT
6fe6 10 de             BPL  _loop

6fe8 20 f4 6e _error   JSR  Print_Disk_Msg
6feb 20 dd 70          JSR  Close_Disk_Buffer
6fee 4c 90 60          JMP  Main
6ff1          EndMod [DOS_U] Size = 103 [$67]

              ***********************
              Module Find_Next_Sector
              ***********************

6ff1 20 9f 70          JSR  Build_U_String
6ff4 20 3a 70          JSR  Send_Disk_Command
6ff7 20 b3 6e          JSR  Get_Disk_Status
6ffa f0 1d             BEQ  _return           ; OK
6ffc c9 66             CMP  #$66              ; illegal track or sector
6ffe d0 13             BNE  _error            ; error
7000 a9 00             LDA  #0
7002 8d 09 04          STA  Disk_Sector
7005 ee 08 04          INC  Disk_Track        ; try next track
7008 20 9f 70          JSR  Build_U_String
700b 20 3a 70          JSR  Send_Disk_Command
700e 20 b3 6e          JSR  Get_Disk_Status
7011 f0 06             BEQ  _return
7013 20 f4 6e _error   JSR  Print_Disk_Msg
7016 ad 0a 04          LDA  Disk_Status
7019 60       _return  RTS
701a          EndMod [Find_Next_Sector] Size = 41 [$29]

              ***************************
              Module Open_Command_Channel
              ***************************

701a a5 ba             LDA  FA
701c 20 b1 ff          JSR  LISTEN
701f a9 ff             LDA  #$ff
7021 20 93 ff          JSR  SECOND
7024 a0 00             LDY  #0
7026 84 90             STY  STATUS
7028 60                RTS
7029          EndMod [Open_Command_Channel] Size = 15 [$f]

              ***************
              Module Reset_BP
              ***************

7029 20 1a 70          JSR  Open_Command_Channel
702c b9 e6 73 _loop    LDA  BP_ZERO,Y
702f f0 06             BEQ  _end
7031 20 a8 ff          JSR  CIOUT
7034 c8                INY
7035 80 f5             BRA  _loop
7037 4c ae ff _end     JMP  UNLSN
703a          EndMod [Reset_BP] Size = 17 [$11]

              ************************
              Module Send_Disk_Command
              ************************

703a 20 1a 70          JSR  Open_Command_Channel
703d b9 0e 04 _loop    LDA  Mon_Data,Y
7040 f0 06             BEQ  _end
7042 20 a8 ff          JSR  CIOUT
7045 c8                INY
7046 80 f5             BRA  _loop
7048 4c ae ff _end     JMP  UNLSN
704b          EndMod [Send_Disk_Command] Size = 17 [$11]

              ******************
              Module Read_Sector
              ******************

704b a5 ba             LDA  FA
704d 20 b4 ff          JSR  TALK
7050 a9 69             LDA  #$69              ; SA = 9
7052 20 96 ff          JSR  TKSA
7055 a3 00             LDZ  #0
7057 64 90             STZ  STATUS
7059 20 a5 ff _loop    JSR  ACPTR
705c ea 92 61          STA  [Long_PC],Z
705f 1b                INZ
7060 d0 f7             BNE  _loop
7062 4c ab ff          JMP  UNTALK
7065          EndMod [Read_Sector] Size = 26 [$1a]

              ******************
              Module Write_Sector
              ******************

7065 20 29 70          JSR  Reset_BP          ; reset disk buffer pointer
7068 a5 ba             LDA  FA
706a 20 b1 ff          JSR  LISTEN
706d a9 69             LDA  #$69              ; SA = 9
706f 20 96 ff          JSR  TKSA
7072 a3 00             LDZ  #0
7074 64 90             STZ  STATUS
7076 ea b2 61 _loop    LDA  [Long_PC],Z
7079 20 a8 ff          JSR  CIOUT
707c 1b                INZ
707d d0 f7             BNE  _loop
707f 20 ae ff          JSR  UNLSN
7082 60                RTS
7083          EndMod [Write_Sector] Size = 30 [$1e]

              *************
              Module Set_TS
              *************

              ; Input  A = track or sector
              ;        X = string index

7083 c9 64    _100      CMP  #100
7085 90 07              BCC  _10
7087 fe 0e 04           INC  Mon_Data,X
708a e9 64              SBC  #100
708c 80 f5              BRA  _100
708e c9 0a    _10       CMP  #10
7090 90 07              BCC  _1
7092 fe 0f 04           INC  Mon_Data+1,X
7095 e9 0a              SBC  #10
7097 80 f5              BRA  _10
7099 09 30    _1        ORA  #'0'
709b 9d 10 04           STA  Mon_Data+2,X
709e 60                 RTS
709f          EndMod [Set_TS] Size = 28 [$1c]

              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)

              ; U1:CHANNEL DRIVE TRACK SECTOR

              *********************
              Module Build_U_String
              *********************

709f a2 0e             LDX  #14
70a1 bd d7 73 _loop    LDA  U1,X
70a4 9d 0e 04          STA  Mon_Data,X
70a7 ca                DEX
70a8 e0 02             CPX  #2
70aa b0 f5             BCS  _loop
70ac a9 55             LDA  #'U'
70ae 8d 0e 04          STA  Mon_Data
70b1 ad 08 04          LDA  Disk_Track
70b4 a2 07             LDX  #7
70b6 20 83 70          JSR  Set_TS
70b9 ad 09 04          LDA  Disk_Sector
70bc a2 0b             LDX  #11
70be 4c 83 70          JMP  Set_TS
70c1          EndMod [Build_U_String] Size = 34 [$22]

              ***********************
              Module Open_Disk_Buffer
              ***********************

70c1 a9 00             LDA  #0
70c3 85 90             STA  STATUS
70c5 a5 ba             LDA  FA
70c7 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
70ca a9 f9             LDA  #$f9            ; sa = 9
70cc 20 93 ff          JSR  SECOND
70cf a9 23             LDA  #'#'            ; open buffer
70d1 20 a8 ff          JSR  CIOUT
70d4 20 ae ff          JSR  UNLSN
70d7 a5 90             LDA  STATUS
70d9 d3 16 fe          LBNE Print_Disk_Status
70dc 60                RTS
70dd          EndMod [Open_Disk_Buffer] Size = 28 [$1c]

              ************************
              Module Close_Disk_Buffer
              ************************

70dd a9 00             LDA  #0
70df 85 90             STA  STATUS
70e1 a5 ba             LDA  FA
70e3 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
70e6 a9 e9             LDA  #$e9            ; sa = 9
70e8 20 93 ff          JSR  SECOND
70eb 20 ae ff          JSR  UNLSN
70ee a5 90             LDA  STATUS
70f0 d3 ff fd          LBNE Print_Disk_Status
70f3 60                RTS
70f4          EndMod [Close_Disk_Buffer] Size = 23 [$17]


              ; The 3 letter mnemonics are encoded as three 5-bit values
              ; and stored in a left byte MNE_L and a right byte MNE_R
              ; The 5 bit value is computed by subtracting $3f from the
              ; ASCII value, so '?'-> 0, '@'->1, 'A'->2, 'B'->3,'Z'->27
              ; For example "ADC" is encoded as 2, 5, 4
              ; ----------------
              ; 7654321076543210
              ; 00010
              ;      00101
              ;           00100
              ;                0
              ;
              ; The operator >" stores the left (high) byte of the packed value
              ; The operator <" stores the right (low) byte of the packed value

              *****
70f4          MNE_L
              *****

70f4 11                .BYTE >"ADC"
70f5 13                .BYTE >"AND"
70f6 15                .BYTE >"ASL"
70f7 15                .BYTE >"ASR"
70f8 15                .BYTE >"ASW"
70f9 18                .BYTE >"BBR"
70fa 18                .BYTE >"BBS"
70fb 19                .BYTE >"BCC"
70fc 19                .BYTE >"BCS"
70fd 19                .BYTE >"BEQ"
70fe 1a                .BYTE >"BIT"
70ff 1b                .BYTE >"BMI"
7100 1b                .BYTE >"BNE"
7101 1c                .BYTE >"BPL"
7102 1c                .BYTE >"BRA"
7103 1c                .BYTE >"BRK"
7104 1d                .BYTE >"BSR"
7105 1d                .BYTE >"BVC"
7106 1d                .BYTE >"BVS"
7107 23                .BYTE >"CLC"
7108 23                .BYTE >"CLD"
7109 23                .BYTE >"CLE"
710a 23                .BYTE >"CLI"
710b 23                .BYTE >"CLV"
710c 23                .BYTE >"CMP"
710d 24                .BYTE >"CPX"
710e 24                .BYTE >"CPY"
710f 24                .BYTE >"CPZ"
7110 29                .BYTE >"DEC"
7111 29                .BYTE >"DEW"
7112 29                .BYTE >"DEX"
7113 29                .BYTE >"DEY"
7114 29                .BYTE >"DEZ"
7115 34                .BYTE >"EOR"
7116 53                .BYTE >"INC"
7117 53                .BYTE >"INW"
7118 53                .BYTE >"INX"
7119 53                .BYTE >"INY"
711a 53                .BYTE >"INZ"
711b 5b                .BYTE >"JMP"
711c 5d                .BYTE >"JSR"
711d 69                .BYTE >"LDA"
711e 69                .BYTE >"LDX"
711f 69                .BYTE >"LDY"
7120 69                .BYTE >"LDZ"
7121 6d                .BYTE >"LSR"
7122 70                .BYTE >"MAP"
7123 79                .BYTE >"NEG"
7124 7c                .BYTE >"NOP"
7125 84                .BYTE >"ORA"
7126 8a                .BYTE >"PHA"
7127 8a                .BYTE >"PHP"
7128 8a                .BYTE >"PHW"
7129 8a                .BYTE >"PHX"
712a 8a                .BYTE >"PHY"
712b 8a                .BYTE >"PHZ"
712c 8b                .BYTE >"PLA"
712d 8b                .BYTE >"PLP"
712e 8b                .BYTE >"PLX"
712f 8b                .BYTE >"PLY"
7130 8b                .BYTE >"PLZ"
7131 9b                .BYTE >"RMB"
7132 9c                .BYTE >"ROL"
7133 9c                .BYTE >"ROR"
7134 9c                .BYTE >"ROW"
7135 9d                .BYTE >"RTI"
7136 9d                .BYTE >"RTS"
7137 a0                .BYTE >"SBC"
7138 a1                .BYTE >"SEC"
7139 a1                .BYTE >"SED"
713a a1                .BYTE >"SEE"
713b a1                .BYTE >"SEI"
713c a3                .BYTE >"SMB"
713d a5                .BYTE >"STA"
713e a5                .BYTE >"STX"
713f a5                .BYTE >"STY"
7140 a5                .BYTE >"STZ"
7141 a8                .BYTE >"TAB"
7142 a8                .BYTE >"TAX"
7143 a8                .BYTE >"TAY"
7144 a8                .BYTE >"TAZ"
7145 a8                .BYTE >"TBA"
7146 ac                .BYTE >"TRB"
7147 ad                .BYTE >"TSB"
7148 ad                .BYTE >"TSX"
7149 ad                .BYTE >"TSY"
714a ae                .BYTE >"TXA"
714b ae                .BYTE >"TXS"
714c ae                .BYTE >"TYA"
714d ae                .BYTE >"TYS"
714e ae                .BYTE >"TZA"

              *****
714f          MNE_R
              *****

714f 48                .BYTE <"ADC" ; 00
7150 ca                .BYTE <"AND" ; 01
7151 1a                .BYTE <"ASL" ; 02
7152 26                .BYTE <"ASR" ; 03
7153 30                .BYTE <"ASW" ; 04
7154 e6                .BYTE <"BBR" ; 05
7155 e8                .BYTE <"BBS" ; 06
7156 08                .BYTE <"BCC" ; 07
7157 28                .BYTE <"BCS" ; 08
7158 a4                .BYTE <"BEQ" ; 09
7159 aa                .BYTE <"BIT" ; 0a
715a 94                .BYTE <"BMI" ; 0b
715b cc                .BYTE <"BNE" ; 0c
715c 5a                .BYTE <"BPL" ; 0d
715d c4                .BYTE <"BRA" ; 0e
715e d8                .BYTE <"BRK" ; 0f
715f 26                .BYTE <"BSR" ; 10
7160 c8                .BYTE <"BVC" ; 11
7161 e8                .BYTE <"BVS" ; 12
7162 48                .BYTE <"CLC" ; 13
7163 4a                .BYTE <"CLD" ; 14
7164 4c                .BYTE <"CLE" ; 15
7165 54                .BYTE <"CLI" ; 16
7166 6e                .BYTE <"CLV" ; 17
7167 a2                .BYTE <"CMP" ; 18
7168 72                .BYTE <"CPX" ; 19
7169 74                .BYTE <"CPY" ; 1a
716a 76                .BYTE <"CPZ" ; 1b
716b 88                .BYTE <"DEC" ; 1c
716c b0                .BYTE <"DEW" ; 1d
716d b2                .BYTE <"DEX" ; 1e
716e b4                .BYTE <"DEY" ; 1f
716f b6                .BYTE <"DEZ"
7170 26                .BYTE <"EOR"
7171 c8                .BYTE <"INC"
7172 f0                .BYTE <"INW"
7173 f2                .BYTE <"INX"
7174 f4                .BYTE <"INY"
7175 f6                .BYTE <"INZ"
7176 a2                .BYTE <"JMP"
7177 26                .BYTE <"JSR"
7178 44                .BYTE <"LDA"
7179 72                .BYTE <"LDX"
717a 74                .BYTE <"LDY"
717b 76                .BYTE <"LDZ"
717c 26                .BYTE <"LSR"
717d a2                .BYTE <"MAP"
717e 90                .BYTE <"NEG"
717f 22                .BYTE <"NOP"
7180 c4                .BYTE <"ORA"
7181 44                .BYTE <"PHA"
7182 62                .BYTE <"PHP"
7183 70                .BYTE <"PHW"
7184 72                .BYTE <"PHX"
7185 74                .BYTE <"PHY"
7186 76                .BYTE <"PHZ"
7187 44                .BYTE <"PLA"
7188 62                .BYTE <"PLP"
7189 72                .BYTE <"PLX"
718a 74                .BYTE <"PLY"
718b 76                .BYTE <"PLZ"
718c 86                .BYTE <"RMB"
718d 1a                .BYTE <"ROL"
718e 26                .BYTE <"ROR"
718f 30                .BYTE <"ROW"
7190 54                .BYTE <"RTI"
7191 68                .BYTE <"RTS"
7192 c8                .BYTE <"SBC"
7193 88                .BYTE <"SEC"
7194 8a                .BYTE <"SED"
7195 8c                .BYTE <"SEE"
7196 94                .BYTE <"SEI"
7197 86                .BYTE <"SMB"
7198 44                .BYTE <"STA"
7199 72                .BYTE <"STX"
719a 74                .BYTE <"STY"
719b 76                .BYTE <"STZ"
719c 86                .BYTE <"TAB"
719d b2                .BYTE <"TAX"
719e b4                .BYTE <"TAY"
719f b6                .BYTE <"TAZ"
71a0 c4                .BYTE <"TBA"
71a1 c6                .BYTE <"TRB"
71a2 06                .BYTE <"TSB"
71a3 32                .BYTE <"TSX"
71a4 34                .BYTE <"TSY"
71a5 44                .BYTE <"TXA"
71a6 68                .BYTE <"TXS"
71a7 84                .BYTE <"TYA"
71a8 a8                .BYTE <"TYS"
71a9 c4                .BYTE <"TZA"

              *********
71aa          MNE_Index
              *********

              ; an index for all 256 opcodes, describing
              ; where to find the 3-letter mnemonic

71aa 0f 31 15          .BYTE $0f,$31,$15,$46,$53,$31,$02,$3d
71b2 33 31 02          .BYTE $33,$31,$02,$55,$53,$31,$02,$05
71ba 0d 31 31          .BYTE $0d,$31,$31,$0d,$52,$31,$02,$3d
71c2 13 31 22          .BYTE $13,$31,$22,$26,$52,$31,$02,$05
71ca 28 01 28          .BYTE $28,$01,$28,$28,$0a,$01,$3e,$3d
71d2 39 01 3e          .BYTE $39,$01,$3e,$59,$0a,$01,$3e,$05
71da 0b 01 01          .BYTE $0b,$01,$01,$0b,$0a,$01,$3e,$3d
71e2 44 01 1c          .BYTE $44,$01,$1c,$20,$0a,$01,$3e,$05
71ea 41 21 2f          .BYTE $41,$21,$2f,$03,$03,$21,$2d,$3d
71f2 32 21 2d          .BYTE $32,$21,$2d,$50,$27,$21,$2d,$05
71fa 11 21 21          .BYTE $11,$21,$21,$11,$03,$21,$2d,$3d
7202 16 21 36          .BYTE $16,$21,$36,$4d,$2e,$21,$2d,$05
720a 42 00 42          .BYTE $42,$00,$42,$10,$4c,$00,$3f,$3d
7212 38 00 3f          .BYTE $38,$00,$3f,$5a,$27,$00,$3f,$05
721a 12 00 00          .BYTE $12,$00,$00,$12,$4c,$00,$3f,$3d
7222 47 00 3b          .BYTE $47,$00,$3b,$51,$27,$00,$3f,$05
722a 0e 49 49          .BYTE $0e,$49,$49,$0e,$4b,$49,$4a,$48
7232 1f 0a 56          .BYTE $1f,$0a,$56,$4b,$4b,$49,$4a,$06
723a 07 49 49          .BYTE $07,$49,$49,$07,$4b,$49,$4a,$48
7242 58 49 57          .BYTE $58,$49,$57,$4a,$4c,$49,$4c,$06
724a 2b 29 2a          .BYTE $2b,$29,$2a,$2c,$2b,$29,$2a,$48
7252 4f 29 4e          .BYTE $4f,$29,$4e,$2c,$2b,$29,$2a,$06
725a 08 29 29          .BYTE $08,$29,$29,$08,$2b,$29,$2a,$48
7262 17 29 54          .BYTE $17,$29,$54,$2c,$2b,$29,$2a,$06
726a 1a 18 1b          .BYTE $1a,$18,$1b,$1d,$1a,$18,$1c,$48
7272 25 18 1e          .BYTE $25,$18,$1e,$04,$1a,$18,$1c,$06
727a 0c 18 18          .BYTE $0c,$18,$18,$0c,$1b,$18,$1c,$48
7282 14 18 35          .BYTE $14,$18,$35,$37,$1b,$18,$1c,$06
728a 19 43 29          .BYTE $19,$43,$29,$23,$19,$43,$22,$48
7292 24 43 30          .BYTE $24,$43,$30,$40,$19,$43,$22,$06
729a 09 43 43          .BYTE $09,$43,$43,$09,$34,$43,$22,$48
72a2 45 43 3a          .BYTE $45,$43,$3a,$3c,$34,$43,$22,$06

              *****
72aa          BRAIN
              *****

              ;              index values for branch mnemonics

              ;              BCC BCS BEQ BMI BNE BPL BRA BSR BVC BVS
72aa 07 08 09          .BYTE $07,$08,$09,$0b,$0c,$0d,$0e,$10,$11,$12

              *******
72b4          LEN_ADM
              *******

              ; a table of instruction length, flags
              ; and address mode for all 256 opcodes

              ; 7-6: operand length %00.. 0: implied
              ;                     %01.. 1: direct page, indirect
              ;                     %10.. 2: absolute, etc.
              ;                     %11.. 3: BBR and BBS

              ;   5: relative       %0110 0000 $60 short branch
              ;                     %1010 0000 $a0 long  branch

              ;   4:

              ; 3-0: index of address mode


72b4 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $00
72bc 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $08
72c4 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $10
72cc 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $18
72d4 80 44 8b          .BYTE $80,$44,$8b,$84,$40,$40,$40,$40 ; $20
72dc 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $28
72e4 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $30
72ec 00 88 00          .BYTE $00,$88,$00,$00,$87,$87,$87,$c0 ; $38
72f4 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $40
72fc 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $48
7304 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $50
730c 00 88 00          .BYTE $00,$88,$00,$00,$00,$87,$87,$c0 ; $58
7314 00 44 41          .BYTE $00,$44,$41,$a0,$40,$40,$40,$40 ; $60
731c 00 41 00          .BYTE $00,$41,$00,$00,$8b,$80,$80,$c0 ; $68
7324 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $70
732c 00 88 00          .BYTE $00,$88,$00,$00,$84,$87,$87,$c0 ; $78
7334 60 44 4d          .BYTE $60,$44,$4d,$a0,$40,$40,$40,$40 ; $80
733c 00 41 00          .BYTE $00,$41,$00,$87,$80,$80,$80,$c0 ; $88
7344 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $90
734c 00 88 00          .BYTE $00,$88,$00,$88,$80,$87,$87,$c0 ; $98
7354 41 44 41          .BYTE $41,$44,$41,$41,$40,$40,$40,$40 ; $a0
735c 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $a8
7364 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $b0
736c 00 88 00          .BYTE $00,$88,$00,$87,$87,$87,$88,$c0 ; $b8
7374 41 44 41          .BYTE $41,$44,$41,$40,$40,$40,$40,$40 ; $c0
737c 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $c8
7384 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $d0
738c 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $d8
7394 41 44 4d          .BYTE $41,$44,$4d,$40,$40,$40,$40,$40 ; $e0
739c 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $e8
73a4 60 45 46          .BYTE $60,$45,$46,$a0,$81,$47,$47,$40 ; $f0
73ac 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $f8

              ******
73b4          ADMODE
              ******

              ; printout flags for 16 address modes
              ;               76543210
              ;               --------
              ;            7  x         #
              ;            6   x        (
              ;            5    x       ,
              ;            4     x      SP
              ;            3      x     )
              ;            2       x    ,
              ;            1/0      xx  01:X  10:Y  11:Z

73b4 00                .BYTE %00000000 ; 0             implicit/direct
73b5 80                .BYTE %10000000 ; 1 #$nn        immediate
73b6 00                .BYTE %00000000 ; 2             ----------
73b7 00                .BYTE %00000000 ; 3             ----------
73b8 69                .BYTE %01101001 ; 4 ($nn,X)     indirect X
73b9 4e                .BYTE %01001110 ; 5 ($nn),Y     indirect Y
73ba 4f                .BYTE %01001111 ; 6 ($nn),Z     indirect Z
73bb 05                .BYTE %00000101 ; 7 $nn,X       indexed  X
73bc 06                .BYTE %00000110 ; 8 $nn,Y       indexed  Y
73bd 05                .BYTE %00000101 ; 9 $nn,X       indexed  X
73be 06                .BYTE %00000110 ; a $nn,Y       ----------
73bf 48                .BYTE %01001000 ; b ($nnnn,X)   JMP & JSR
73c0 69                .BYTE %01101001 ; c ($nn,X)     ----------
73c1 7e                .BYTE %01111110 ; d ($nn,SP),Y  LDA & STA
73c2 00                .BYTE %00000000 ; e
73c3 04                .BYTE %00000100 ; f

              ;              ASL INC ROL DEC LSR ROR NEG ASR
73c4 0a 1a 2a ACCUMODE .BYTE $0a,$1a,$2a,$3a,$4a,$6a,$42,$43

73cc 10 0a 08 Num_Base .BYTE 16,10, 8, 2 ; hex, dec, oct, bin
73d0 04 03 03 Num_Bits .BYTE  4, 3, 3, 1 ; hex, dec, oct, bin

73d4 58 59 5a Index_Char .BYTE "XYZ"

              ;                0123456789abcd
73d7 55 31 3a U1        .BYTE "U1:9 0 000 000",0 ; channel 9, drive, track, sector
73e6 42 2d 50 BP_ZERO   .BYTE "B-P 9 0",0        ; set buffer pointer to 0

              ***************
              Module Reg_Text
              ***************
73ee 20 7d ff          JSR  PRIMM
73f1 0d 20 20          .BYTE "\r    PC   SR AC XR YR ZR BP  SP  NVEBDIZC\r; \eQ",0
7420 60                RTS
7421          EndMod [Reg_Text] Size = 51 [$33]

              ***************
              Module Mon_Help
              ***************
7421 20 7d ff    JSR PRIMM

7424 96 41 05    .BYTE LRED,"A",WHITE,"SSEMBLE     - A ADDRESS MNEMONIC OPERAND",CR
7450 96 42 05    .BYTE LRED,"B",WHITE,"ITMAPS      - B [FROM]",CR
746a 96 43 05    .BYTE LRED,"C",WHITE,"OMPARE      - C FROM TO WITH",CR
748a 96 44 05    .BYTE LRED,"D",WHITE,"ISASSEMBLE  - D [FROM [TO]]",CR
74a9 96 46 05    .BYTE LRED,"F",WHITE,"ILL         - F FROM TO FILLBYTE",CR
74cd 96 47 05    .BYTE LRED,"G",WHITE,"O           - G [ADDRESS]",CR
74ea 96 48 05    .BYTE LRED,"H",WHITE,"UNT         - H FROM TO (STRING OR BYTES)",CR
7517 96 4a 05    .BYTE LRED,"J",WHITE,"SR          - J ADDRESS",CR
7532 96 4c 05    .BYTE LRED,"L",WHITE,"OAD         - L FILENAME [UNIT [ADDRESS]]",CR
755f 96 4d 05    .BYTE LRED,"M",WHITE,"EMORY       - M [FROM [TO]]",CR
757e 96 52 05    .BYTE LRED,"R",WHITE,"EGISTERS    - R",CR
7591 96 53 05    .BYTE LRED,"S",WHITE,"AVE         - S FILENAME UNIT FROM TO",CR
75ba 96 54 05    .BYTE LRED,"T",WHITE,"RANSFER     - T FROM TO TARGET",CR
75dc 96 56 05    .BYTE LRED,"V",WHITE,"ERIFY       - V FILENAME [UNIT [ADDRESS]]",CR
7609 45 96 58    .BYTE "E",LRED,"X",WHITE,"IT         - X",CR
761c 96 2e 05    .BYTE LRED,".",WHITE,"<DOT>       - . ADDRESS MNEMONIC OPERAND",CR
7648 96 3e 05    .BYTE LRED,">",WHITE,"<GREATER>   - > ADDRESS BYTE SEQUENCE",CR
7671 96 3b 05    .BYTE LRED,";",WHITE,"<SEMICOLON> - ; REGISTER CONTENTS",CR
7696 96 40 05    .BYTE LRED,"@",WHITE,"DOS         - @ [DOS COMMAND]",CR
76b7 96 3f 05    .BYTE LRED,"?",WHITE,"HELP        - ?",CR
76ca 00          .BYTE 0
76cb 4c 90 60    JMP Main
76ce          End_Mod

76ce ff ff ff          .FILL $8000-* ($ff) ; 2354 bytes


  481 Symbols
-------------
Bank                           $0002    45D   299    302    352    360
                                       525    527    530    779
PCH                            $0003    46D   287    295    325
PCL                            $0004    47D   293    296    324
SR                             $0005    48D   376
WHITE                          $0005    31D   479    739    747    893
                                       907   1820   2114   3504   3505
                                      3506   3507   3508   3509   3510
                                      3511   3512   3513   3514   3515
                                      3516   3517   3518   3519   3520
                                      3521   3522   3523
AC                             $0006    49D   316
XR                             $0007    50
YR                             $0008    51
ZR                             $0009    52
BP                             $000a    58
SPH                            $000b    59D   334    368
SPL                            $000c    60D   336    370    819    830
                                       834
CR                             $000d    35D   406    460   1510   3504
                                      3505   3506   3507   3508   3509
                                      3510   3511   3512   3513   3514
                                      3515   3516   3517   3518   3519
                                      3520   3521   3522   3523
REV                            $0012    36D   460
CRIGHT                         $001d    37D   437
QUOTE                          $0022    38D  1055   1062   2490   2495
APOSTR                         $0027    39D   992   2015
Long_AC                        $0059    73D   226    228    236    240
                                       524    526    528    529    540
                                       554    568    583    585    599
                                       615    627    629    637    638
                                       640    641    778    796    937
                                       939    949    951    972    974
                                      1007   1076   1085   1086   1128
                                      1243   1246   1413   1415   1416
                                      1424   1425   1480   1489   1548
                                      1555   1557   1558   1560   1757
                                      1759   1766   1767   1857   1860
                                      1874   1883   1932   1934   1945
                                      1948   1951   1956   1959   2008
                                      2009   2010   2011   2018   2052
                                      2063   2064   2065   2076   2077
                                      2084   2085   2087   2089   2331
                                      2463   2521   2522   2524   2526
                                      2595   2596   2598   2600   2676
                                      2680   2683   2691   2845   2884
                                      2885   2886   2887   2923   2928
Long_CT                        $005d    74D   229    230    232    233
                                       237    241    555    584    601
                                       698    699    702   1408   1414
                                      1422   1423   1628   1640   1643
                                      2244   2245   2247   2248   2249
                                      2363   2364   2406   2407   2408
                                      2431   2445   2448   2482   2485
                                      2494   2506   2512   2515   2550
                                      2552   2554   2750   2765   2933
                                      2951
Long_PC                        $0061    75D   541    600    616    649
                                       651    674    676    751    797
                                       799    843    845    861    863
                                       946    948    969    971   1092
                                      1111   1112   1129   1475   1478
                                      1481   1490   1496   1518   1522
                                      1556   1559   1957   1960   2106
                                      2112   2117   2120   2121   2258
                                      2259   2266   2268   2357   2370
                                      2373   2387   2400   2409   2410
                                      2411   2412   2413   2414   2415
                                      2416   2417   2418   2419   2420
                                      2436   2437   2438   2531   2536
                                      2537   2678   2681   2684   2719
                                      2724   2726   3031   3048
Long_DA                        $0065    76D   569    659    660    662
                                       663    718    721    724    740
                                       748    749    934    936   1015
                                      1023   1145   1181   1182   1191
                                      1195
Adr_Flags                      $0069    80D  1705   1843   1846   1888
                                      1892   1898   1902   1907   1912
                                      1916
Mode_Flags                     $006a    81D  1239   1267   1276   1286
                                      1298   1308   1318   1331   1345
                                      1359   1373   1389   1435   1453
                                      1456   1571   1592   1601   1612
                                      1613
Op_Code                        $006b    82D  1211   1229   1230   1412
                                      1439   1469   1477   1495   1570
                                      1686   1697   1744   1754   1800
                                      1807   1825   1866
Op_Flag                        $006c    83D  1146   1166   1278   1328
                                      1441   1472   1667   1678   1695
                                      1712   1720   1748   1778   1796
                                      1806   1833   1848   1873   1881
                                      1906   1925   1964
Op_Size                        $006d    87D  1470   1471   1482   1501
                                      1502   1637   1638   1642   1711
                                      1713   1727   1840   1861   1880
                                      1936   1942   1965
Dig_Cnt                        $006e    88D  2007   2019   2046   2098
Buf_Index                      $006f    89D   410   1058   1071   1256
                                      1973   1994   2020   2029   2204
                                      2205   2215   2223   2224   2302
                                      2468   2583   2746   2747   2842
                                      2851   2916
STATUS                         $0090    94D  1046   1103   2621   2675
                                      2687   2717   2720   2874   2879
                                      2893   2990   3029   3047   3107
                                      3115   3125   3131
VERCK                          $0093    95D   446   1087   1096   1104
LRED                           $0096    33D   747    891    905   3504
                                      3505   3506   3507   3508   3509
                                      3510   3511   3512   3513   3514
                                      3515   3516   3517   3518   3519
                                      3520   3521   3522   3523
YELLOW                         $009e    32D   460   1742   2108
FNLEN                          $00b7    96D  1044   1065   2519   2539
SA                             $00b9    97D  1041   1091   1114   2594
                                      2617   2666   2671   2707   2713
                                      2735   2871
FA                             $00ba    98D  1039   1077   2572   2615
                                      2664   2669   2705   2711   2733
                                      2755   2776   2850   2868   2985
                                      3024   3042   3108   3126
FNADR                          $00bb    99D  1048   1050   1064
BA                             $00bd   100D  1043   1081
FNBANK                         $00be   101D  1045
NDX                            $00d0   103
MODE_80                        $00d7   104D   696    758    802    889
                                       903
B_Margin                       $00e4   106
T_Margin                       $00e5   107
L_Margin                       $00e6   108
R_Margin                       $00e7   109
QTSW                           $00f4   111D   859
Stack                          $0100   113D  2057   2058   2059   2060
Buffer                         $0200   114D   402    411   1059   1513
                                      1515   1524   1528   1536   2206
                                      2225   2590   2748   2759
IIRQ                           $0314   116
IBRK                           $0316   117
EXMON                          $032e   118
Ix_Mne                         $0400   122D  1201   1397   1580
Op_Mne                         $0401   123D  1163   1169   1176
Op_Ix                          $0404   124D  1147   1249   1252   1295
                                      1329   1343   1357   1371   1387
                                      1398
Op_Len                         $0405   125D  1148   1251   1451   1457
                                      1460   1608
Disk_Unit                      $0406   126D  1038   2546   2566
Disk_Src                       $0407   127D  2529   2571   2602
Disk_Track                     $0408   128D  2924   2971   3094
Disk_Sector                    $0409   129D  2929   2950   2970   3097
Disk_Status                    $040a   130D  2786   2790   2791   2802
                                      2977
File_Ext                       $040b   131D  2510   2513   2516   2649
Mon_Data                       $040e   133D   998   1008   1020   1047
                                      1049   2497   2503   2509   2520
                                      2541   2543   2545   2576   2591
                                      2622   2638   2915   2937   3012
                                      3065   3070   3074   3088   3093
Disk_Msg                       $0436   134D  2781   2788   2796   2800
                                      2818
MEM_BUF                        $0870  2472D  2523   2525
MEM_DIR                        $087f  2473D  2597   2599
header                         $1fff   185
Link                           $2029   197D   189
header_loop                    $205a   236D   239    243
Monitor_Call                   $6000   257
Monitor_Break                  $6003   263
Monitor_Switch                 $6006   269
Mon_Break                      $6009   275D   266
Mon_Break_loop                 $6019   286D   289
Mon_Break_nopage               $6025   296D   294
Mon_Break_bank                 $6030   301D   299
Mon_Call                       $6036   307D   260
Mon_Call_loop                  $603d   316D   318
Mon_Call_store                 $6046   324
Mon_Start                      $604a   329D   303
Mon_Register                   $6058   344D   495
Mon_Register_loopa             $605d   352D   356
Mon_Register_loopb             $6068   360D   364
Mon_Register_loopc             $6081   377D   385
Mon_Register_flag              $6089   382D   380
Main                           $6090   389D   413    440    710    766
                                       783    810    835    944    956
                                       981   1027   1031   1094   1106
                                      1109   1133   1152   1635   1645
                                      2318   2605   2861   2956   3525
Main_A                         $6095   398D  1541
Main_loop                      $6095   401D   407
Main_getcomm                   $60ab   412D   415
Mon_Switch                     $60b4   419D   272
Mon_Switch_loop                $60b6   423D   426
Mon_Error                      $60be   431D   405    694    922    924
                                       964    966    989    996   1052
                                      1056   1069   1089   1100   1105
                                      1123   1125   1141   1199   1222
                                      1224   1234   1241   1244   1330
                                      1333   1337   1344   1351   1358
                                      1363   1372   1379   1386   1388
                                      1391   1403   1407   1409   1436
                                      1452   1454   1631   1989   2304
                                      2462   2465   2467   2569   2582
                                      2589   2847   2849   2912   2914
                                      2918   2922   2927
Mon_Select                     $60cb   443D   424
Print_Commands                 $60d8   456D   280    310
Command_Char                   $60f2   463D   423
Cons_Prefix                    $6104   470D  2024   2308
Load_Save_Verify               $6109   476
Jump_Table                     $610f   483D   452
LAC_To_PC                      $613d   511D   774    818    829
LAC_To_PC_error                $614d   531D   523
LAC_To_LPC                     $614e   535D   689    737    792   1080
                                      1142   1624   2285   2385   2708
                                      2919
LAC_To_LPC_loop                $6151   540D   543
LAC_To_LCT                     $615a   549D  1255   2355   2397   2601
                                      2932
LAC_To_LCT_loop                $615d   554D   557
LAC_To_LDA                     $6166   563D  2288
LAC_To_LDA_loop                $6169   568D   571
LAC_Plus_LCT                   $6172   577D   932
LAC_Plus_LCT_loop              $6176   583D   587
LAC_Minus_LPC                  $6181   593D   693   1630   2289
LAC_Minus_LPC_loop             $6185   599D   603
LAC_Compare_LPC                $6190   609D   927
LAC_Compare_LPC_loop           $6194   615D   618
Inc_LAC                        $619d   624D   953    977
Inc_LAC_return                 $61a3   630D   628
Dec_LAC                        $61a4   634D   941
Dec_LAC_skip                   $61ac   641D   639
Inc_LPC                        $61af   646D   762    952    978   1028
                                      1130
Inc_LPC_return                 $61b5   652D   650
Dec_LDA                        $61b6   656D   940
Dec_LDA_skip                   $61be   663D   661
Fetch                          $61c1   668D  1019   1668   1675   1685
                                      1691   1696   1723   1859   1931
Fetch_banked                   $61c8   676D   674
Mon_Memory                     $61ce   683D   494
Mon_Memory_shift               $61e9   698D   696    701
Mon_Memory_row                 $61f4   705D   688    691    709
Mon_Memory_exit                $61ff   710D   706
Print_Bits                     $6202   714D   752
Print_Bits_loop                $6207   720D   726
Print_Bits_set                 $620e   723D   721
Mon_Bits                       $6218   732D   487
Mon_Bits_lab                   $6220   738D   736
Mon_Bits_row                   $6229   743D   765
Mon_Bits_col                   $622f   746D   760
Mon_Bits_next                  $624b   760D   758
Mon_Set_Register               $625a   770D   502
Mon_Set_Register_loop          $6262   776D   782
Mon_Set_Register_exit          $6271   783D   777
Mon_Set_Memory                 $6274   787D   501
Mon_Set_Memory_loop            $627e   794D   804
Mon_Set_Memory_banked          $6289   799D   797
Mon_Set_Memory_next            $6293   804D   802
Mon_Set_Memory_exit            $6295   806D   791    795
Mon_Go                         $62a2   814D   491
Mon_JSR                        $62ae   825D   493
Dump_4_Bytes                   $62c0   839D   892    894
Dump_4_Bytes_loop              $62c3   843D   850
Dump_4_Bytes_banked            $62c7   845D   843
Dump_4_Chars                   $62d3   855D   906    908
Dump_4_Chars_loop              $62da   861D   873
Dump_4_Chars_banked            $62de   863D   861
Dump_4_Chars_laba              $62e7   868D   866
Dump_Row                       $62f2   878D   707    809
Dump_Row_loop                  $6306   891D   889    896
Dump_Row_lchr                  $6320   905D   903    910
Mon_Transfer                   $6333   918D   496
Mon_Transfer_lpback            $6349   934D   943
Mon_Transfer_rb                $634d   936D   934
Mon_Transfer_wb                $6353   939D   937
Mon_Transfer_forward           $6363   946D   928    955
Mon_Transfer_rf                $6367   948D   946
Mon_Transfer_wf                $636d   951D   949
Mon_Compare                    $637d   960D   488
Mon_Compare_loop               $638e   969D   980
Mon_Compare_rf                 $6392   971D   969
Mon_Compare_cf                 $6398   974D   972
Mon_Compare_laba               $639f   977D   975
Mon_Hunt                       $63ad   985D   492
Mon_Hunt_lpstr                 $63c4   998D  1003
Mon_Hunt_bin                   $63d3  1006D   993
Mon_Hunt_lpbin                 $63d6  1007D  1013
Mon_Hunt_hunt                  $63e5  1015D  1001   1004   1011
Mon_Hunt_lpstart               $63ea  1018D  1030
Mon_Hunt_lpins                 $63ec  1019D  1024
Mon_Hunt_next                  $63fc  1026D  1021
Load_Save                      $640d  1035D   448
Load_Save_skip                 $6428  1051D  1054
Load_Save_copyfn               $6439  1059D  1068
Load_Save_unit                 $644f  1071D  1063
Load_Save_exit                 $6485  1094D  1103
Load_Save_do                   $6488  1096D  1060   1073   1075   1079
                                      1115
Load_Save_exec                 $6495  1102D  1098
Load_Save_load                 $64b0  1111D  1083
Mon_Fill                       $64ba  1119D   490
Mon_Fill_loop                  $64cb  1128D  1132
Mon_Assemble                   $64db  1137D   486    500
Mon_Assemble_start             $64e4  1144D  1155
Mon_Assemble_getin             $64f0  1149D  1172
Mon_Assemble_laba              $64fa  1154D  1150
Mon_Assemble_labb              $6510  1169D  1160   1162   1165
Mon_Assemble_lpenc             $6518  1176D  1186
Mon_Assemble_lpbit             $6520  1180D  1184
Mon_Assemble_lpfind            $652f  1192D  1198
Mon_Assemble_nxfind            $653b  1197D  1193
Mon_Assemble_found             $6541  1201D  1196
Mon_Assemble_lpopc             $6547  1207D  1210
Mon_Assemble_exopc             $654f  1211D  1208
Mon_Assemble_labc              $6575  1238D  1218
Mon_Assemble_labd              $6577  1239D  1270   1280   1289   1309
                                      1322   1335   1353   1365   1381
                                      1393
Mon_Assemble_labf              $658d  1249D  1247
Mon_Assemble_labg              $659d  1256D  1242   1254
Mon_Assemble_lpnop             $659f  1258D  1261
Mon_Assemble_lbra              $65b5  1274D  1266
Mon_Assemble_indir             $65c3  1284D  1275
Mon_Assemble_comma             $65cf  1293D  1285
Mon_Assemble_comma1            $65ec  1307D  1299   1301   1303
Mon_Assemble_stack             $65f2  1313D  1294
Mon_Assemble_rbra              $6608  1326D  1314
Mon_Assemble_error             $6621  1337D  1268   1277   1287   1296
                                      1306   1317   1320   1328
Mon_Assemble_right             $6624  1341D  1327
Mon_Assemble_right1            $663d  1352D  1347   1349
Mon_Assemble_X                 $6642  1355D  1342
Mon_Assemble_X1                $6657  1364D  1361
Mon_Assemble_Y                 $665c  1369D  1356
Mon_Assemble_Y1                $6675  1380D  1375   1377
Mon_Assemble_Z                 $667a  1385D  1370
Mon_Assemble_adjust            $6691  1397D  1259
Mon_Assemble_BB                $66a9  1408D  1405
Mon_Assemble_one               $66c1  1422D  1401
Mon_Assemble_lpbrain           $66cb  1427D  1430
Mon_Assemble_branch            $66d5  1435D  1428
Mon_Assemble_bran1             $66e9  1444D  1441
Mon_Assemble_match             $66eb  1448D  1399   1431
Mon_Assemble_lpmatch           $66ee  1449D  1459
Mon_Assemble_okmat             $670a  1460D  1450
Mon_Assemble_store             $670e  1469D  1418   1444
Mon_Assemble_storen            $672e  1485D  1472
Mon_Assemble_lpsto             $6732  1489D  1493
Mon_Assemble_store1            $673c  1495D  1487
Mon_Assemble_print             $6741  1498D  1483
Mon_Assemble_auto              $676f  1521D  1519   1533
Branch_Target                  $6796  1545D  1411   1438   1550
Match_Mode                     $67a9  1565D  1449
Match_Mode_loop                $67ad  1572D  1581
Match_Mode_next                $67b2  1577D  1582
Match_Mode_error               $67bf  1584D  1578
Match_Mode_return              $67c0  1585D  1573
Mode_Index                     $67c1  1589D  1448
Mode_Index_loop                $67c5  1594D  1598
Mode_Index_found               $67d1  1601D  1595
Size_To_Mode                   $67d3  1605D  1458
Mon_Disassemble                $67e0  1619D   489
Mon_Disassemble_nopar          $67ed  1627D  1623
range                          $67f3  1630D  1626
Mon_Disassemble_loop           $67f9  1633D  1629   1644
Dis_Code                       $6818  1649D  1636
Print_Code                     $681e  1657D  1500
Print_Code_nop                 $683b  1684D  1673   1677
Print_Code_normal              $6859  1700D  1689   1694
Print_Code_norm1               $6872  1714D  1712
Print_Code_blpr                $687b  1722D  1720
Print_Code_lphex               $687e  1723D  1729
Print_Code_lpfill              $688d  1733D  1738
Print_Code_long                $689b  1742D  1726   1734
Print_Code_locate              $68b0  1754D  1747
Print_Code_lpmne               $68c1  1764D  1776
Print_Code_lplet               $68c5  1766D  1770
Print_Code_lastc               $68d8  1778D  1773
Print_Code_Q3                  $68eb  1787D  1780   1784
Print_Code_Q4                  $68f2  1790D  1782   1786
Print_Code_lbra                $68fc  1795D  1778
Print_Code_biti                $6910  1807D  1803
Print_Code_mne4                $6920  1818D  1789   1805
Print_Code_mne5                $6923  1819D  1793   1796   1816
Print_Code_lpaccu              $692f  1827D  1830
Print_Code_accu                $693e  1835D  1833
Print_Code_oper                $6944  1840D  1828
Print_Code_laba                $6950  1846D  1843
Print_Code_labb                $695a  1850D  1845   1848
Print_Code_labc                $695d  1851D  1846
Print_Code_lpfop               $6966  1858D  1862
Print_Code_proper              $698a  1880D  1873
Print_Code_lpoper              $6991  1883D  1881   1886
Print_Code_labd                $69af  1898D  1892
Print_Code_labe                $69b7  1902D  1888   1898
Print_Code_labf                $69bf  1906D  1878   1902
Print_Code_comch               $69ca  1912D  1906
Print_Code_labg                $69df  1925D  1912   1918
Print_Code_rel                 $69fe  1940D  1869
Print_Code_rela                $6a00  1941D  1938
Print_Code_labh                $6a0d  1950D  1946
Print_Code_lpinw               $6a0e  1951D  1953
Print_Code_return              $6a27  1966D  1836   1841   1910   1925
                                      1964
Got_LAC                        $6a28  1970D  1006
Get_LAC                        $6a2a  1977D   686    690    735    773
                                       776    790    794    817    828
                                       923    965   1010   1074   1078
                                      1082   1124   1140   1622   1625
                                      2283   2286   2303   2917   2921
                                      2926   2931
Get_LAC_error                  $6a3e  1989D  1981
Get_LAC_noval                  $6a41  1991D  1982
Get_LAC_end                    $6a43  1994D  1984
Get_LAC_ok                     $6a45  1995D  1986   1988
Read_Number                    $6a47  2000D  1240   1980   2461   2843
Read_Number_numeric            $6a6b  2023D  2016
Read_Number_prefix             $6a6d  2024D  2027
Read_Number_digit              $6a78  2031D  2025   2086   2088   2090
Read_Number_valid              $6a8f  2042D  2036
Read_Number_push               $6a9f  2052D  2055
Read_Number_laba               $6ab2  2062D  2049
Read_Number_shift              $6ab5  2063D  2068
Read_Number_pull               $6aca  2075D  2080
Read_Number_labc               $6ad3  2082D  2071
Read_Number_error              $6ae3  2092D  2044   2066
Read_Number_exit               $6ae6  2094D  2014   2021   2032   2034
                                      2038   2040
Read_Number_return             $6ae7  2095D  2093
Hex_LPC                        $6aed  2103D   744    885    976   1025
                                      1662
Hex_LPC_laba                   $6b06  2117D  2107
Hex_LPC_labb                   $6b0d  2120D  2116   2118
Print_XA_Hex                   $6b11  2125D  1963   2538
Print_Hex_Blank                $6b17  2135D   361    371    846   1724
Print_Blank                    $6b1a  2142D  1818   1819   2654   2889
Print_CR                       $6b1f  2150D   392    738    761    882
                                       967   1016   1084   1126   2816
                                      2823   2898
CR_Erase                       $6b24  2158D  1633   2307   2635
Print_Hex                      $6b2c  2167D   353    369   1875   1884
                                      2111   2113   2119   2130   2138
A_To_Hex                       $6b38  2179D  1523   2171   2533
A_To_Hex_nibble                $6b42  2191D  2183
A_To_Hex_lab                   $6b4a  2195D  2193
Get_Glyph                      $6b4d  2200D  2013   2567   2578   2837
Get_Glyph_loop                 $6b50  2204D  2207
Got_Char                       $6b5a  2212D  1983
Get_Char                       $6b5c  2219D   412    991    994   1000
                                      1051   1072   1149   1220   1232
                                      1258   1315   2017   2031   2852
                                      2910
Get_Char_regc                  $6b71  2233D  2228
Get_Char_return                $6b77  2236D  2230   2232   2234
Dec_LCT                        $6b78  2241D   942    954    979   1029
                                      1131
Dec_LCT_skip                   $6b80  2248D  2246
Add_LPC                        $6b85  2254D   912   1503   1639   1680
Inc_LPC_Page                   $6b8c  2263D  2949
Add_LPC_return                 $6b92  2269D  2260   2267
Param_Range                    $6b93  2272D   921    963    988   1122
Param_Range_error              $6baa  2293D  2284   2287   2290
Converter                      $6bac  2298D   504    505    506    507
                                       508
Converter_loop                 $6bb8  2306D  2317
Conv_Tab                       $6bd1  2320D  2313
Print_Char                     $6bdb  2328D  2324
Print_Char_return              $6be8  2337D  2333   2335
Print_Dual                     $6be9  2341D  2323
Print_Octal                    $6bef  2349D  2322
Print_Dual_entry               $6bf3  2355D  2346
Print_Dual_loopa               $6bfd  2360D  2376
Print_Dual_loopb               $6c01  2363D  2367
Print_Dual_skip                $6c12  2372D  2369
Print_Dual_next                $6c19  2375D  2371
Print_Hexval                   $6c1e  2382D  2320
Print_Decimal                  $6c27  2392D  2321   2888
Print_Decimal_clear            $6c2e  2400D  2402
Print_Decimal_loop             $6c36  2406D  2422
Print_BCD                      $6c59  2427D  2388
Print_BCD_loopa                $6c61  2434D  2454
Print_BCD_loopb                $6c65  2436D  2441
Print_BCD_skip                 $6c78  2447D  2444
Print_BCD_print                $6c82  2452D  2450
Print_BCD_next                 $6c85  2453D  2446
Read_Unit                      $6c89  2459D  2565   2570
Copy_Files                     $6c9e  2476D  2604
Copy_Files_lpent               $6ca2  2483D  2553   2555
Copy_Files_lpquote             $6ca4  2484D  2489
Copy_Files_lpfn                $6cb8  2493D  2500
Copy_Files_endfn               $6cca  2502D  2496
Copy_Files_lptype              $6cd0  2505D  2508
Copy_Files_exit                $6d41  2556D  2487   2491   2501
Mon_Unit_Copy                  $6d42  2560D   497
Mon_Unit_Copy_loopfn           $6d5a  2574D  2577
Mon_Unit_Copy_pat              $6d73  2586D  2592
Mon_Unit_Copy_laba             $6d82  2593D  2580
Mon_Unit_Copy_dir              $6da1  2607D  2575
Send_Filename                  $6da6  2612D  2667   2709
Send_Filename_fname            $6db6  2622D  2627
Send_Filename_stop             $6dc3  2628D  2623
List_Filename                  $6dc9  2633D  2528
List_Filename_loop             $6dce  2637D  2642
List_Filename_fill             $6ddb  2643D  2640
List_Filename_blank            $6ddd  2644D  2647
List_Filename_ext              $6de7  2649D  2653
Save_File                      $6df5  2658D  2547
Save_File_loop                 $6e10  2676D  2690   2692
Save_File_cont                 $6e26  2687D  2679   2682
Save_File_stop                 $6e31  2693D  2685   2688
Save_File_error                $6e37  2695D  2668
Load_File                      $6e3a  2699D  2530   2603
Load_File_loop                 $6e58  2718D  2723   2725
Load_File_stop                 $6e69  2726D  2721
Close_File                     $6e6e  2730D  2694
Load_File_error                $6e7d  2739D  2710
Mon_Disk                       $6e80  2743D  2860
Mon_Disk_lab                   $6e93  2755D  2753
Mon_Disk_loop                  $6e9c  2759D  2763
Mon_Disk_close                 $6ea7  2764D  2760
Get_Disk_Status                $6eb3  2773D  2629   2810   2965   2974
Get_Disk_Status_loop           $6eda  2794D  2798
Print_Disk_Status              $6ef1  2807D  2749   2767   3116   3132
Print_Disk_Msg                 $6ef4  2813D  2695   2739   2954   2976
Print_Disk_Status_loop         $6ef9  2818D  2822
Print_Disk_Status_exit         $6f04  2823D  2819
Mon_DOS                        $6f07  2833D   499
Mon_DOS_unit                   $6f27  2850D  2839   2841   2844
Mon_DOS_next                   $6f2b  2852D  2855   2857
Mon_DOS_status                 $6f3c  2860D  2853
Directory                      $6f42  2865D  2768
Directory_loopb                $6f54  2877D  2882   2902
Directory_loopc                $6f6d  2891D  2896
Directory_cr                   $6f7b  2898D  2892
Directory_exit                 $6f87  2903D  2880   2894   2900
DOS_U                          $6f8a  2907D  2859
DOS_U_loop                     $6fc6  2937D  2952
DOS_U_write                    $6fd6  2945D  2939
DOS_U_next                     $6fde  2949D  2943
DOS_U_error                    $6fe8  2954D  2941   2947
Find_Next_Sector               $6ff1  2960D  2940   2946
Find_Next_Sector_error         $7013  2976D  2968
Find_Next_Sector_return        $7019  2978D  2966   2975
Open_Command_Channel           $701a  2982D  2998   3011
Reset_BP                       $7029  2995D  3041
Reset_BP_loop                  $702c  2999D  3003
Reset_BP_end                   $7037  3004D  3000
Send_Disk_Command              $703a  3008D  2964   2973
Send_Disk_Command_loop         $703d  3012D  3016
Send_Disk_Command_end          $7048  3017D  3013
Read_Sector                    $704b  3021D  2942
Read_Sector_loop               $7059  3030D  3033
Write_Sector                   $7065  3038D  2945
Write_Sector_loop              $7076  3048D  3051
Set_TS_100                     $7083  3063D  3067
Set_TS                         $7083  3057D  3096   3099
Set_TS_10                      $708e  3068D  3064   3072
Set_TS_1                       $7099  3073D  3069
Build_U_String                 $709f  3083D  2963   2972
Build_U_String_loop            $70a1  3087D  3091
Open_Disk_Buffer               $70c1  3103D  2935
Close_Disk_Buffer              $70dd  3121D  2955
MNE_L                          $70f4  3153D  1192   1756
MNE_R                          $714f  3249D  1194   1758
MNE_Index                      $71aa  3345D  1207   1579   1755
BRAIN                          $72aa  3385D  1427
LEN_ADM                        $72b4  3394D  1572   1700   1745   1867
ADMODE                         $73b4  3448D  1594   1704
ACCUMODE                       $73c4  3480D  1829
Num_Base                       $73cc  3482D  2043
Num_Bits                       $73d0  3483D  2062
Index_Char                     $73d4  3485D  1920
U1                             $73d7  3488D  3087
BP_ZERO                        $73e6  3489D  2999
Reg_Text                       $73ee  3492D   347
Mon_Help                       $7421  3500D   503
End_Mod                        $76ce  3526
EXIT                           $cfaf   136D   322    323    498
SETBNK                         $ff6b   138
JSRFAR                         $ff6e   139D   832
JMPFAR                         $ff71   140D   821
LDA_FAR                        $ff74   141
STA_FAR                        $ff77   142
CMP_FAR                        $ff7a   143
PRIMM                          $ff7d   144D   278    436    459    806
                                       898   1107   1498   1509   1652
                                      1735   2161   3494   3502
CINT                           $ff81   145
IOINIT                         $ff84   146
SETMSG                         $ff90   147D   338
SECOND                         $ff93   148D  2619   2673   2737   2758
                                      2988   3111   3129
TKSA                           $ff96   149D  2715   2779   2872   3027
                                      3045
MEMTOP                         $ff99   150
MEMBOT                         $ff9c   151
KEY                            $ff9f   152
SETTMO                         $ffa2   153
ACPTR                          $ffa5   154D  2718   2780   2787   2795
                                      2878   2891   3030
CIOUT                          $ffa8   155D  2624   2677   2761   3001
                                      3014   3049   3113
UNTALK                         $ffab   156D  2727   2801   2903   3034
UNLSN                          $ffae   157D  2628   2693   2738   2764
                                      3004   3017   3052   3114   3130
LISTEN                         $ffb1   158D  2616   2670   2734   2756
                                      2986   3043   3109   3127
TALK                           $ffb4   159D  2712   2777   2869   3025
READSS                         $ffb7   160
SETLFS                         $ffba   161
SETNAM                         $ffbd   162
OPEN                           $ffc0   163
CLOSE                          $ffc3   164
CHKIN                          $ffc6   165
CHKOUT                         $ffc9   166
CLRCHN                         $ffcc   167
CHRIN                          $ffcf   168D   401
CHROUT                         $ffd2   169D   382    723    750    842
                                       860    869    884   1525   1529
                                      1537   1722   1743   1750   1775
                                      1788   1790   1792   1795   1815
                                      1821   1835   1850   1852   1877
                                      1890   1894   1896   1900   1904
                                      1914   1921   1927   1929   2109
                                      2115   2146   2154   2172   2175
                                      2309   2336   2374   2452   2535
                                      2641   2644   2650   2820   2895
LOAD                           $ffd5   170D  1102
SAVE                           $ffd8   171D  1093
SETTIM                         $ffdb   172
GETTIM                         $ffde   173
STOP                           $ffe1   174D   705   1026   1634   2899
GETIN                          $ffe4   175
CLALL                          $ffe7   176
SCAN                           $ffea   177
SCRORG                         $ffed   178
PLOT                           $fff0   179
Long_AC                        $0059    73D   226    228    236    240
                                       524    526    528    529    540
                                       554    568    583    585    599
                                       615    627    629    637    638
                                       640    641    778    796    937
                                       939    949    951    972    974
                                      1007   1076   1085   1086   1128
                                      1243   1246   1413   1415   1416
                                      1424   1425   1480   1489   1548
                                      1555   1557   1558   1560   1757
                                      1759   1766   1767   1857   1860
                                      1874   1883   1932   1934   1945
                                      1948   1951   1956   1959   2008
                                      2009   2010   2011   2018   2052
                                      2063   2064   2065   2076   2077
                                      2084   2085   2087   2089   2331
                                      2463   2521   2522   2524   2526
                                      2595   2596   2598   2600   2676
                                      2680   2683   2691   2845   2884
                                      2885   2886   2887   2923   2928
Long_PC                        $0061    75D   541    600    616    649
                                       651    674    676    751    797
                                       799    843    845    861    863
                                       946    948    969    971   1092
                                      1111   1112   1129   1475   1478
                                      1481   1490   1496   1518   1522
                                      1556   1559   1957   1960   2106
                                      2112   2117   2120   2121   2258
                                      2259   2266   2268   2357   2370
                                      2373   2387   2400   2409   2410
                                      2411   2412   2413   2414   2415
                                      2416   2417   2418   2419   2420
                                      2436   2437   2438   2531   2536
                                      2537   2678   2681   2684   2719
                                      2724   2726   3031   3048
Long_CT                        $005d    74D   229    230    232    233
                                       237    241    555    584    601
                                       698    699    702   1408   1414
                                      1422   1423   1628   1640   1643
                                      2244   2245   2247   2248   2249
                                      2363   2364   2406   2407   2408
                                      2431   2445   2448   2482   2485
                                      2494   2506   2512   2515   2550
                                      2552   2554   2750   2765   2933
                                      2951
WHITE                          $0005    31D   479    739    747    893
                                       907   1820   2114   3504   3505
                                      3506   3507   3508   3509   3510
                                      3511   3512   3513   3514   3515
                                      3516   3517   3518   3519   3520
                                      3521   3522   3523
LRED                           $0096    33D   747    891    905   3504
                                      3505   3506   3507   3508   3509
                                      3510   3511   3512   3513   3514
                                      3515   3516   3517   3518   3519
                                      3520   3521   3522   3523
CR                             $000d    35D   406    460   1510   3504
                                      3505   3506   3507   3508   3509
                                      3510   3511   3512   3513   3514
                                      3515   3516   3517   3518   3519
                                      3520   3521   3522   3523
Op_Flag                        $006c    83D  1146   1166   1278   1328
                                      1441   1472   1667   1678   1695
                                      1712   1720   1748   1778   1796
                                      1806   1833   1848   1873   1881
                                      1906   1925   1964
Buf_Index                      $006f    89D   410   1058   1071   1256
                                      1973   1994   2020   2029   2204
                                      2205   2215   2223   2224   2302
                                      2468   2583   2746   2747   2842
                                      2851   2916
Mode_Flags                     $006a    81D  1239   1267   1276   1286
                                      1298   1308   1318   1331   1345
                                      1359   1373   1389   1435   1453
                                      1456   1571   1592   1601   1612
                                      1613
Long_DA                        $0065    76D   569    659    660    662
                                       663    718    721    724    740
                                       748    749    934    936   1015
                                      1023   1145   1181   1182   1191
                                      1195
FA                             $00ba    98D  1039   1077   2572   2615
                                      2664   2669   2705   2711   2733
                                      2755   2776   2850   2868   2985
                                      3024   3042   3108   3126
STATUS                         $0090    94D  1046   1103   2621   2675
                                      2687   2717   2720   2874   2879
                                      2893   2990   3029   3047   3107
                                      3115   3125   3131
Op_Size                        $006d    87D  1470   1471   1482   1501
                                      1502   1637   1638   1642   1711
                                      1713   1727   1840   1861   1880
                                      1936   1942   1965
Op_Code                        $006b    82D  1211   1229   1230   1412
                                      1439   1469   1477   1495   1570
                                      1686   1697   1744   1754   1800
                                      1807   1825   1866
SA                             $00b9    97D  1041   1091   1114   2594
                                      2617   2666   2671   2707   2713
                                      2735   2871
Adr_Flags                      $0069    80D  1705   1843   1846   1888
                                      1892   1898   1902   1907   1912
                                      1916
Bank                           $0002    45D   299    302    352    360
                                       525    527    530    779
MODE_80                        $00d7   104D   696    758    802    889
                                       903
SPL                            $000c    60D   336    370    819    830
                                       834
FNLEN                          $00b7    96D  1044   1065   2519   2539
VERCK                          $0093    95D   446   1087   1096   1104
Dig_Cnt                        $006e    88D  2007   2019   2046   2098
QUOTE                          $0022    38D  1055   1062   2490   2495
FNADR                          $00bb    99D  1048   1050   1064
YELLOW                         $009e    32D   460   1742   2108
PCL                            $0004    47D   293    296    324
PCH                            $0003    46D   287    295    325
BA                             $00bd   100D  1043   1081
APOSTR                         $0027    39D   992   2015
SPH                            $000b    59D   334    368
QTSW                           $00f4   111D   859
FNBANK                         $00be   101D  1045
CRIGHT                         $001d    37D   437
REV                            $0012    36D   460
AC                             $0006    49D   316
SR                             $0005    48D   376
R_Margin                       $00e7   109
L_Margin                       $00e6   108
T_Margin                       $00e5   107
B_Margin                       $00e4   106
NDX                            $00d0   103
BP                             $000a    58
ZR                             $0009    52
YR                             $0008    51
XR                             $0007    50
Long_AC                        $0059    73D   226    228    236    240
                                       524    526    528    529    540
                                       554    568    583    585    599
                                       615    627    629    637    638
                                       640    641    778    796    937
                                       939    949    951    972    974
                                      1007   1076   1085   1086   1128
                                      1243   1246   1413   1415   1416
                                      1424   1425   1480   1489   1548
                                      1555   1557   1558   1560   1757
                                      1759   1766   1767   1857   1860
                                      1874   1883   1932   1934   1945
                                      1948   1951   1956   1959   2008
                                      2009   2010   2011   2018   2052
                                      2063   2064   2065   2076   2077
                                      2084   2085   2087   2089   2331
                                      2463   2521   2522   2524   2526
                                      2595   2596   2598   2600   2676
                                      2680   2683   2691   2845   2884
                                      2885   2886   2887   2923   2928
Long_PC                        $0061    75D   541    600    616    649
                                       651    674    676    751    797
                                       799    843    845    861    863
                                       946    948    969    971   1092
                                      1111   1112   1129   1475   1478
                                      1481   1490   1496   1518   1522
                                      1556   1559   1957   1960   2106
                                      2112   2117   2120   2121   2258
                                      2259   2266   2268   2357   2370
                                      2373   2387   2400   2409   2410
                                      2411   2412   2413   2414   2415
                                      2416   2417   2418   2419   2420
                                      2436   2437   2438   2531   2536
                                      2537   2678   2681   2684   2719
                                      2724   2726   3031   3048
Long_CT                        $005d    74D   229    230    232    233
                                       237    241    555    584    601
                                       698    699    702   1408   1414
                                      1422   1423   1628   1640   1643
                                      2244   2245   2247   2248   2249
                                      2363   2364   2406   2407   2408
                                      2431   2445   2448   2482   2485
                                      2494   2506   2512   2515   2550
                                      2552   2554   2750   2765   2933
                                      2951
WHITE                          $0005    31D   479    739    747    893
                                       907   1820   2114   3504   3505
                                      3506   3507   3508   3509   3510
                                      3511   3512   3513   3514   3515
                                      3516   3517   3518   3519   3520
                                      3521   3522   3523
Mon_Data                       $040e   133D   998   1008   1020   1047
                                      1049   2497   2503   2509   2520
                                      2541   2543   2545   2576   2591
                                      2622   2638   2915   2937   3012
                                      3065   3070   3074   3088   3093
LRED                           $0096    33D   747    891    905   3504
                                      3505   3506   3507   3508   3509
                                      3510   3511   3512   3513   3514
                                      3515   3516   3517   3518   3519
                                      3520   3521   3522   3523
CR                             $000d    35D   406    460   1510   3504
                                      3505   3506   3507   3508   3509
                                      3510   3511   3512   3513   3514
                                      3515   3516   3517   3518   3519
                                      3520   3521   3522   3523
Op_Flag                        $006c    83D  1146   1166   1278   1328
                                      1441   1472   1667   1678   1695
                                      1712   1720   1748   1778   1796
                                      1806   1833   1848   1873   1881
                                      1906   1925   1964
Buf_Index                      $006f    89D   410   1058   1071   1256
                                      1973   1994   2020   2029   2204
                                      2205   2215   2223   2224   2302
                                      2468   2583   2746   2747   2842
                                      2851   2916
Mode_Flags                     $006a    81D  1239   1267   1276   1286
                                      1298   1308   1318   1331   1345
                                      1359   1373   1389   1435   1453
                                      1456   1571   1592   1601   1612
                                      1613
Long_DA                        $0065    76D   569    659    660    662
                                       663    718    721    724    740
                                       748    749    934    936   1015
                                      1023   1145   1181   1182   1191
                                      1195
FA                             $00ba    98D  1039   1077   2572   2615
                                      2664   2669   2705   2711   2733
                                      2755   2776   2850   2868   2985
                                      3024   3042   3108   3126
STATUS                         $0090    94D  1046   1103   2621   2675
                                      2687   2717   2720   2874   2879
                                      2893   2990   3029   3047   3107
                                      3115   3125   3131
Op_Size                        $006d    87D  1470   1471   1482   1501
                                      1502   1637   1638   1642   1711
                                      1713   1727   1840   1861   1880
                                      1936   1942   1965
Op_Code                        $006b    82D  1211   1229   1230   1412
                                      1439   1469   1477   1495   1570
                                      1686   1697   1744   1754   1800
                                      1807   1825   1866
Buffer                         $0200   114D   402    411   1059   1513
                                      1515   1524   1528   1536   2206
                                      2225   2590   2748   2759
SA                             $00b9    97D  1041   1091   1114   2594
                                      2617   2666   2671   2707   2713
                                      2735   2871
Op_Ix                          $0404   124D  1147   1249   1252   1295
                                      1329   1343   1357   1371   1387
                                      1398
Adr_Flags                      $0069    80D  1705   1843   1846   1888
                                      1892   1898   1902   1907   1912
                                      1916
Bank                           $0002    45D   299    302    352    360
                                       525    527    530    779
Op_Len                         $0405   125D  1148   1251   1451   1457
                                      1460   1608
Disk_Msg                       $0436   134D  2781   2788   2796   2800
                                      2818
Disk_Status                    $040a   130D  2786   2790   2791   2802
                                      2977
MODE_80                        $00d7   104D   696    758    802    889
                                       903
SPL                            $000c    60D   336    370    819    830
                                       834
File_Ext                       $040b   131D  2510   2513   2516   2649
Disk_Sector                    $0409   129D  2929   2950   2970   3097
Stack                          $0100   113D  2057   2058   2059   2060
FNLEN                          $00b7    96D  1044   1065   2519   2539
VERCK                          $0093    95D   446   1087   1096   1104
Dig_Cnt                        $006e    88D  2007   2019   2046   2098
QUOTE                          $0022    38D  1055   1062   2490   2495
Disk_Track                     $0408   128D  2924   2971   3094
Disk_Src                       $0407   127D  2529   2571   2602
Disk_Unit                      $0406   126D  1038   2546   2566
Op_Mne                         $0401   123D  1163   1169   1176
Ix_Mne                         $0400   122D  1201   1397   1580
FNADR                          $00bb    99D  1048   1050   1064
YELLOW                         $009e    32D   460   1742   2108
PCL                            $0004    47D   293    296    324
PCH                            $0003    46D   287    295    325
header_loop                    $205a   236D   239    243
MEM_DIR                        $087f  2473D  2597   2599
MEM_BUF                        $0870  2472D  2523   2525
BA                             $00bd   100D  1043   1081
APOSTR                         $0027    39D   992   2015
SPH                            $000b    59D   334    368
Link                           $2029   197D   189
QTSW                           $00f4   111D   859
FNBANK                         $00be   101D  1045
CRIGHT                         $001d    37D   437
REV                            $0012    36D   460
AC                             $0006    49D   316
SR                             $0005    48D   376
header                         $1fff   185
EXMON                          $032e   118
IBRK                           $0316   117
IIRQ                           $0314   116
R_Margin                       $00e7   109
L_Margin                       $00e6   108
T_Margin                       $00e5   107
B_Margin                       $00e4   106
NDX                            $00d0   103
BP                             $000a    58
ZR                             $0009    52
YR                             $0008    51
XR                             $0007    50
