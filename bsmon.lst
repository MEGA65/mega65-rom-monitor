              *******************************
              * BSM = Bit Shifter's Monitor *
              * for The MEGA65  28-Nov_2020 *
              *******************************

              .CPU 45GS02

              .STORE $6000,$2000,"bsmon.rom"

              *************
              * Constants *
              *************

0005          WHITE  = $05
009e          YELLOW = $9e
0096          LRED   = $96

000d          CR     = $0d
0012          REV    = $12
001d          CRIGHT = $1d
0022          QUOTE  = $22
0027          APOSTR = $27

              ************************************************
              * Register storage for JMPFAR and JSRFAR calls *
              ************************************************

0002          Bank       =  2
0003          PCH        =  3
0004          PCL        =  4
0005          SR         =  5
0006          AC         =  6
0007          XR         =  7
0008          YR         =  8
0009          ZR         =  9

              *************************************
              * Used direct (zero) page addresses *
              *************************************

000a          BP         = 10
000b          SPH        = 11
000c          SPL        = 12

              ; following variables overlap with the BASIC floating point area

              ; $59 - $5d : temporary floating point accumulator
              ; $5e - $62 : temporary floating point accumulator
              ; $63 - $69 : primary   floating point accumulator
              ; $6a - $6f : secondary floating point accumulator

              ; A set of 32 bit variables also used as 32 bit pointer

0059          & = $59

0059          Long_AC    .BSS 4  ; 32 bit accumulator
005d          Long_CT    .BSS 4  ; 32 bit counter
0061          Long_PC    .BSS 4  ; 32 bit program counter
0065          Long_DA    .BSS 4  ; 32 bit data pointer

              ; Flags used in BBR BBS instructions

0069          Adr_Flags  .BSS 1
006a          Mode_Flags .BSS 1
006b          Op_Code    .BSS 1
006c          Op_Flag    .BSS 1
006d          COL        .BSS 1
006e          Buf_Index  .BSS 1

              ; operating system variables


0090          STATUS     = $90
0093          VERCK      = $93
00b7          FNLEN      = $b7
00b9          SA         = $b9
00ba          FA         = $ba
00bb          FNADR      = $bb
00bd          BA         = $bd
00be          FNBANK     = $be

00d0          NDX        = $d0        ; length of keyboard buffer
00d7          MODE_80    = $d7        ; 80 column / 40 volumn flag

00e4          B_Margin   = $e4        ; SCBOT  default = 24
00e5          T_Margin   = $e5        ; SCTOP  default =  0
00e6          L_Margin   = $e6        ; SCLF   default =  0
00e7          R_Margin   = $e7        ; SCRT   default = 39 or 79

00f4          QTSW       = $f4        ; Quote switch

0200          Buffer     = $0200      ; input buffer

0314          IIRQ       = $0314
0316          IBRK       = $0316
032e          EXMON      = $032e


0400          Mon_Data   = $0400      ; 32 byte bufer for hunt and filename
0420          X_Vector   = $0420      ; exit vector (ROM version dependent)

042c          Op_Size    = $042c
042d          Op_Mne     = $042d

0434          Op_Bits    = $0434
0435          Op_Ix      = $0435
0437          Ix_Mne     = $0437
0439          Op_Len     = $0439

1106          Unit       = $1106
cf2e          EXIT_OLD   = $cf2e      ; exit address for ROM 910110
cfa4          EXIT       = $cfa4      ; exit address for ROM 911001

ff6b          SETBNK     = $ff6b
ff6e          JSRFAR     = $ff6e
ff71          JMPFAR     = $ff71
ff74          LDA_FAR    = $ff74
ff77          STA_FAR    = $ff77
ff7d          PRIMM      = $ff7d
ff90          SETMSG     = $ff90
ffba          SETLFS     = $ffba
ffbd          SETNAM     = $ffbd
ffc0          OPEN       = $ffc0
ffc3          CLOSE      = $ffc3
ffc6          CHKIN      = $ffc6
ffc9          CHKOUT     = $ffc9
ffcc          CLRCHN     = $ffcc
ffcf          CHRIN      = $ffcf
ffd2          CHROUT     = $ffd2
ffd5          LOAD       = $ffd5
ffd8          SAVE       = $ffd8
ffdb          SETTIM     = $ffdb
ffde          GETTIM     = $ffde
ffe1          STOP       = $ffe1
ffe4          GETIN      = $ffe4
ffe7          CLALL      = $ffe7
ffea          SCAN       = $ffea
ffed          SCRORG     = $ffed
fff0          PLOT       = $fff0

1fff          * = $1fff
                      .STORE $1fff,$0101,"bsm.prg"

              *************
              Module header
              *************

1fff 01 20            .WORD $2001             ; load address
2001 29 20            .WORD Link              ; line link
2003 e4 07            .WORD 2020              ; line number
2005 fe 02            .BYTE $fe,$02           ; BANK token
2007 30 3a            .BYTE "0:"              ; BANK argument
2009 9e               .BYTE $9e               ; SYS  token
200a 28 38 32         .BYTE "(8235):"         ; $202d
2011 8f               .BYTE $8f               ; REM  token
2012 20 42 49         .BYTE " BIT SHIFTER 28-NOV-20",0
2029 00 00    Link    .WORD 0                 ; BASIC end marker

                      ; copy image to $030000

202b 78               SEI

              ; map memory to monitor configuration

202c a9 a0            LDA  #$a0
202e a2 82            LDX  #$82
2030 a0 00            LDY  #$00
2032 a3 83            LDZ  #$83
2034 5c               MAP
2035 ea               EOM

              ; VIC IV registers visible

2036 a9 47            LDA  #$47
2038 8d 2f d0         STA  $d02f
203b a9 53            LDA  #$53
203d 8d 2f d0         STA  $d02f

              ; toggle write protection

2040 a9 70            LDA  #$70
2042 8d 40 d6         STA  $D640
2045 ea               NOP

2046 a3 00            LDZ  #0
2048 64 59            STZ  Long_AC
204a a9 21            LDA  #$21
204c 85 5a            STA  Long_AC+1
204e 64 5d            STZ  Long_CT
2050 64 5e            STZ  Long_CT+1
2052 a9 03            LDA  #3
2054 85 5f            STA  Long_CT+2
2056 64 60            STZ  Long_CT+3
2058 a2 20            LDX  #$20

205a b2 59    _loop   LDA  (Long_AC),Z
205c ea 92 5d         STA  [Long_CT],Z
205f 1b               INZ
2060 d0 f8            BNE  _loop
2062 e6 5a            INC  Long_AC+1
2064 e6 5e            INC  Long_CT+1
2066 ca               DEX
2067 d0 f1            BNE  _loop

2069 a9 70            LDA  #$70
206b 8d 40 d6         STA  $D640              ; toggle write protection
206e ea               NOP

206f 60               RTS
2070          EndMod [header] Size = 113 [$71]

2070 00 00 00         .FILL $2100-* (0) ; 144 bytes

6000          * = $6000

              ********************
6000          Monitor_Call ; $6000
              ********************

6000 4c 3c 60          JMP  Mon_Call

              *********************
6003          Monitor_Break ; $6003
              *********************

6003 4c 09 60          JMP  Mon_Break

              **********************
6006          Monitor_Switch ; $6009
              **********************

6006 4c c9 60          JMP  Mon_Switch

              ****************
              Module Mon_Break
              ****************

6009 20 7d ff          JSR  PRIMM
600c 0d 42 52          .BYTE "\rBREAK\a",0
6014 20 f0 60          JSR  Print_Commands

              ; pull BP, Z, Y, X, A,SR,PCL,PCH
              ;       7  6  5  4  3  2  1  0

6017 a2 07             LDX  #7
6019 2c a4 cf          BIT  EXIT      ; version
601c 10 01             BPL  _loop
601e ca                DEX
601f 68       _loop    PLA
6020 95 03             STA  PCH,X
6022 ca                DEX
6023 10 fa             BPL  _loop

              ; decrement PC to point after BRK

6025 a5 04             LDA  PCL
6027 d0 02             BNE  _nopage
6029 c6 03             DEC  PCH
602b c6 04    _nopage  DEC  PCL

602d ad 1d 01          LDA  $011d
6030 7f 02 03          BBR7 Bank,_bank
6033 ad 1f 01          LDA  $011f
6036 29 0f    _bank    AND  #15
6038 85 02             STA  Bank
603a 80 23             BRA  Mon_Start
603c          EndMod [Mon_Break] Size = 51 [$33]

              ***************
              Module Mon_Call
              ***************

603c 20 f0 60          JSR  Print_Commands

              ;        clear register for monitor call

603f a9 00             LDA  #0
6041 a2 06             LDX  #6
6043 95 06    _loop    STA  AC,X
6045 ca                DEX
6046 10 fb             BPL  _loop

              ;        set default PC to "exit to BASIC"

6048 a9 a4             LDA  #<EXIT     ; ROM 911110
604a a2 cf             LDX  #>EXIT
604c 2c a4 cf          BIT  EXIT       ; $20 (JSR) or $ff ?
604f 10 04             BPL  _store
6051 a9 2e             LDA  #<EXIT_OLD ; ROM 910111
6053 a2 cf             LDX  #>EXIT_OLD
6055 85 04    _store   STA  PCL
6057 8d 20 04          STA  X_Vector
605a 86 03             STX  PCH
605c 8e 21 04          STX  X_Vector+1
605f          EndMod [Mon_Call] Size = 35 [$23]

              ****************
              Module Mon_Start
              ****************

605f d8                CLD
6060 0b                TSY
6061 84 0b             STY  SPH
6063 ba                TSX
6064 86 0c             STX  SPL
6066 a9 c0             LDA  #$c0
6068 20 90 ff          JSR  SETMSG
606b 58                CLI
606c ea                NOP
606d          EndMod [Mon_Start] Size = 14 [$e]

              ***************************
              Module Mon_Register ; $6042
              ***************************

606d 20 05 70          JSR  Reg_Text

              ; print Bank,PCH

6070 a0 00             LDY  #0
6072 b9 02 00 _loopa   LDA  Bank,Y
6075 20 2d 6b          JSR  Print_Hex
6078 c8                INY
6079 c0 02             CPY  #2
607b 90 f5             BCC  _loopa

              ; print SR,PCL,A,X,Y,Z,BP

607d b9 02 00 _loopb   LDA  Bank,Y
6080 20 18 6b          JSR  Print_Hex_Blank
6083 c8                INY
6084 c0 09             CPY  #9
6086 90 f5             BCC  _loopb

              ; print 16 bit stack pointer

6088 a5 0b             LDA  SPH
608a 20 2d 6b          JSR  Print_Hex
608d a5 0c             LDA  SPL
608f 20 18 6b          JSR  Print_Hex_Blank

              ; print flags

6092 a0 08             LDY  #8
6094 a5 05             LDA  SR
6096 0a       _loopc   ASL  A
6097 48                PHA
6098 a9 2d             LDA  #'-'
609a 90 02             BCC  _flag
609c a9 31             LDA  #'1'
609e 20 d2 ff _flag    JSR  CHROUT
60a1 68                PLA
60a2 88                DEY
60a3 d0 f1             BNE  _loopc
60a5          EndMod [Mon_Register] Size = 56 [$38]

              ***********
              Module Main
              ***********

60a5 20 20 6b          JSR  Print_CR
60a8 a2 00             LDX  #0

              ; read one line into buffer

              ******
60aa          Main_A
              ******

60aa 20 cf ff _loop    JSR  CHRIN
60ad 9d 00 02          STA  Buffer,X
60b0 e8                INX
60b1 e0 50             CPX  #80
60b3 b0 1e             BCS  Mon_Error         ; input too long
60b5 c9 0d             CMP  #CR
60b7 d0 f1             BNE  _loop

60b9 a9 00             LDA  #0
60bb 85 6e             STA  Buf_Index
60bd 9d ff 01          STA  Buffer-1,X        ; terminate buffer
60c0 20 50 6b _getcomm JSR  Get_Char
60c3 f0 e0             BEQ  Main
60c5 c9 20             CMP  #' '
60c7 f0 f7             BEQ  _getcomm
60c9          EndMod [Main] Size = 36 [$24]

              *****************
              Module Mon_Switch
              *****************

60c9 a2 18             LDX  #24
60cb dd 0a 61 _loop    CMP  Command_Char,X
60ce f0 10             BEQ  Mon_Select
60d0 ca                DEX
60d1 10 f8             BPL  _loop

              ;        fall through to error routine if not found

              ****************
              Module Mon_Error
              ****************

              ; put a question mark at the end of the text

60d3 20 7d ff          JSR  PRIMM
60d6 1b 4f 1d          .BYTE "\eO",CRIGHT,'?',0
60db a2 f8             LDX  #$f8              ; reset stack pointer
60dd 9a                TXS
60de 80 c5             BRA  Main

              *****************
              Module Mon_Select
              *****************

60e0 85 93             STA  VERCK
60e2 e0 16             CPX  #22
60e4 b3 38 03          LBCS  Load_Save
60e7 8a                TXA
60e8 0a                ASL  A
60e9 aa                TAX
60ea 20 f9 69          JSR  Got_LAC           ; get 1st. parameter
60ed 7c 26 61          JMP  (Jump_Table,X)
60f0          EndMod [Mon_Select] Size = 16 [$10]

              **************
60f0          Print_Commands
              **************

60f0 20 7d ff          JSR  PRIMM
60f3 0d 9e 12          .BYTE CR,YELLOW,REV,"BS MONITOR COMMANDS:"

              ************
610a          Command_Char
              ************

                       ;      0123456789abcdef
610a 41 42 43          .BYTE "ABCDFGHJMRTX@.>;?"

              ***********
611b          Cons_Prefix
              ***********

611b 24 2b 26          .BYTE "$+&%'"

              ****************
6120          Load_Save_Verify
              ****************

6120 4c 53 56          .BYTE "LSV",WHITE,0
6125 60                RTS

              **********
6126          Jump_Table
              **********

6126 ec 64             .WORD Mon_Assemble     ; A
6128 49 62             .WORD Mon_Bits         ; B
612a 94 63             .WORD Mon_Compare      ; C
612c 00 68             .WORD Mon_Disassemble  ; D
612e cb 64             .WORD Mon_Fill         ; F
6130 ca 62             .WORD Mon_Go           ; G
6132 be 63             .WORD Mon_Hunt         ; H
6134 d3 62             .WORD Mon_JSR          ; J
6136 00 62             .WORD Mon_Memory       ; M
6138 6d 60             .WORD Mon_Register     ; R
613a 56 63             .WORD Mon_Transfer     ; T
613c 50 61             .WORD Mon_Exit         ; X
613e be 6c             .WORD Mon_DOS          ; @
6140 ec 64             .WORD Mon_Assemble     ; .
6142 9b 62             .WORD Mon_Set_Memory   ; >
6144 84 62             .WORD Mon_Set_Register ; ;
6146 38 70             .WORD Mon_Help         ; ?
6148 ab 6b             .WORD Converter        ; $
614a ab 6b             .WORD Converter        ; +
614c ab 6b             .WORD Converter        ; &
614e ab 6b             .WORD Converter        ; %


              ***************
              Module Mon_Exit
              ***************

6150 6c 20 04          JMP  (X_Vector)

              ****************
              Module LAC_To_PC
              ****************

              ; called from Mon_Set_Register, Mon_Go and Mon_JSR
              ; as the first instruction. The carry flag was set from
              ; the routine Get_LAC if an error occured.
              ; Notice that the Bank, PCH and PCL values are stored
              ; high to low, reverse to the standard order.

              ; Bank, PCH and PCL are part of a list, that is used by
              ; the routines FAR_JMP and FAR_JSR of the operating system

6153 b0 0c             BCS  _error
6155 a5 59             LDA  Long_AC
6157 85 04             STA  Bank+2
6159 a5 5a             LDA  Long_AC+1
615b 85 03             STA  Bank+1
615d a5 5b             LDA  Long_AC+2
615f 85 02             STA  Bank
6161 60       _error   RTS
6162          EndMod [LAC_To_PC] Size = 15 [$f]

              *****************
              Module LAC_To_LPC
              *****************

              ; copy long accumulator to long program counter

6162 a5 59             LDA  Long_AC
6164 85 61             STA  Long_PC
6166 a5 5a             LDA  Long_AC+1
6168 85 62             STA  Long_PC+1
616a a5 5b             LDA  Long_AC+2
616c 85 63             STA  Long_PC+2
616e a5 5c             LDA  Long_AC+3
6170 85 64             STA  Long_PC+3
6172 60                RTS
6173          EndMod [LAC_To_LPC] Size = 17 [$11]

              *****************
              Module LAC_To_LCT
              *****************

              ; copy long accumulator to long counter

6173 a5 59             LDA  Long_AC
6175 85 5d             STA  Long_CT
6177 a5 5a             LDA  Long_AC+1
6179 85 5e             STA  Long_CT+1
617b a5 5b             LDA  Long_AC+2
617d 85 5f             STA  Long_CT+2
617f a5 5c             LDA  Long_AC+3
6181 85 60             STA  Long_CT+3
6183 60                RTS
6184          EndMod [LAC_To_LCT] Size = 17 [$11]

              *****************
              Module LAC_To_LDA
              *****************

              ; copy long accumulator to long data

6184 a5 59             LDA  Long_AC
6186 85 65             STA  Long_DA
6188 a5 5a             LDA  Long_AC+1
618a 85 66             STA  Long_DA+1
618c a5 5b             LDA  Long_AC+2
618e 85 67             STA  Long_DA+2
6190 a5 5c             LDA  Long_AC+3
6192 85 68             STA  Long_DA+3
6194 60                RTS
6195          EndMod [LAC_To_LDA] Size = 17 [$11]

              *******************
              Module LAC_Plus_LCT
              *******************

6195 18                CLC
6196 a5 59             LDA  Long_AC
6198 65 5d             ADC  Long_CT
619a 85 59             STA  Long_AC
619c a5 5a             LDA  Long_AC+1
619e 65 5e             ADC  Long_CT+1
61a0 85 5a             STA  Long_AC+1
61a2 a5 5b             LDA  Long_AC+2
61a4 65 5f             ADC  Long_CT+2
61a6 85 5b             STA  Long_AC+2
61a8 a5 5c             LDA  Long_AC+3
61aa 65 60             ADC  Long_CT+3
61ac 85 5c             STA  Long_AC+3
61ae 60                RTS
61af          EndMod [LAC_Plus_LCT] Size = 26 [$1a]

              ********************
              Module LAC_Minus_LPC
              ********************

61af 38                SEC
61b0 a5 59             LDA  Long_AC
61b2 e5 61             SBC  Long_PC
61b4 85 59             STA  Long_AC
61b6 a5 5a             LDA  Long_AC+1
61b8 e5 62             SBC  Long_PC+1
61ba 85 5a             STA  Long_AC+1
61bc a5 5b             LDA  Long_AC+2
61be e5 63             SBC  Long_PC+2
61c0 85 5b             STA  Long_AC+2
61c2 a5 5c             LDA  Long_AC+3
61c4 e5 64             SBC  Long_PC+3
61c6 85 5c             STA  Long_AC+3
61c8 60                RTS
61c9          EndMod [LAC_Minus_LPC] Size = 26 [$1a]

              **********************
              Module LAC_Compare_LPC
              **********************

61c9 a5 59             LDA  Long_AC
61cb c5 61             CMP  Long_PC
61cd a5 5a             LDA  Long_AC+1
61cf e5 62             SBC  Long_PC+1
61d1 a5 5b             LDA  Long_AC+2
61d3 e5 63             SBC  Long_PC+2
61d5 a5 5c             LDA  Long_AC+3
61d7 e5 64             SBC  Long_PC+3
61d9 60                RTS
61da          EndMod [LAC_Compare_LPC] Size = 17 [$11]

              **************
              Module Inc_LAC
              **************

61da e3 59             INW  Long_AC
61dc d0 02             BNE  _return
61de e3 5b             INW  Long_AC+2
61e0 60       _return  RTS
61e1          EndMod [Inc_LAC] Size = 7 [$7]

              **************
              Module Dec_LAC
              **************

61e1 a5 59             LDA  Long_AC
61e3 05 5a             ORA  Long_AC+1
61e5 d0 02             BNE  _skip
61e7 c3 5b             DEW  Long_AC+2
61e9 c3 59    _skip    DEW  Long_AC
61eb 60                RTS
61ec          EndMod [Dec_LAC] Size = 11 [$b]

              **************
              Module Inc_LPC
              **************

61ec e3 61             INW  Long_PC
61ee d0 02             BNE  _return
61f0 e3 63             INW  Long_PC+2
61f2 60       _return  RTS
61f3          EndMod [Inc_LPC] Size = 7 [$7]

              ************
              Module Fetch
              ************

61f3 db                PHZ
61f4 98                TYA
61f5 4b                TAZ
61f6 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
61f9 ea                NOP                    ; use LDA  [Long_PC],Z
61fa b2 61    _banked  LDA  (Long_PC),Z
61fc fb                PLZ
61fd 29 ff             AND  #$ff
61ff 60                RTS
6200          EndMod [Fetch] Size = 13 [$d]

              *****************
              Module Mon_Memory
              *****************

6200 a3 10             LDZ  #16               ; default row count
6202 90 02             BCC  _param
6204 80 1f             BRA  _row

6206 20 62 61 _param   JSR  LAC_To_LPC        ; Long_PC = start address
6209 20 f9 69          JSR  Got_LAC           ; Long_AC = end address
620c b0 17             BCS  _row              ; not given

620e 20 af 61          JSR  LAC_Minus_LPC     ; Long_AC = range
6211 93 c0 fe          LBCC Mon_Error         ; negative range -> error
6214 a2 04             LDX  #4                ; 16 bytes / line
6216 7f d7 01          BBR7 MODE_80,_shift
6219 ca                DEX                    ;  8 bytes / line
621a 46 5a    _shift   LSR  Long_AC+1
621c 66 59             ROR  Long_AC
621e ca                DEX
621f d0 f9             BNE  _shift
6221 ab 59 00          LDZ  Long_AC           ; row count
6224 1b                INZ

6225 20 e1 ff _row     JSR  STOP
6228 f0 06             BEQ  _exit
622a 20 14 63          JSR  Dump_Row
622d 3b                DEZ
622e d0 f5             BNE  _row
6230 4c a5 60 _exit    JMP  Main
6233          EndMod [Mon_Memory] Size = 51 [$33]

              *****************
              Module Print_Bits
              *****************

6233 db                PHZ
6234 85 65             STA  Long_DA
6236 a0 08             LDY  #8
6238 a9 2a    _loop    LDA  #'*'
623a ff 65 02          BBS7 Long_DA,_set
623d a9 2e             LDA  #'.'
623f 20 d2 ff _set     JSR  CHROUT
6242 06 65             ASL  Long_DA
6244 88                DEY
6245 d0 f1             BNE  _loop
6247 fb                PLZ
6248 60                RTS
6249          EndMod [Print_Bits] Size = 22 [$16]

              ***************
              Module Mon_Bits
              ***************

6249 b3 88 fe          LBCS Mon_Error
624c 20 62 61          JSR  LAC_To_LPC        ; Long_PC = start address
624f 20 20 6b          JSR  Print_CR
6252 a9 05             LDA  #WHITE
6254 85 66             STA  Long_DA+1

6256 a2 08             LDX  #8
6258 da       _row     PHX
6259 20 ee 6a          JSR  Hex_LPC
625c a3 00             LDZ  #0
625e 38       _col     SEC
625f a9 9b             LDA  #WHITE+LRED       ; toggle colour
6261 e5 66             SBC  Long_DA+1
6263 85 66             STA  Long_DA+1
6265 20 d2 ff          JSR  CHROUT
6268 ea b2 61          LDA  [Long_PC],Z
626b 20 33 62          JSR  Print_Bits
626e 18                CLC
626f 6b                TZA
6270 69 08             ADC  #8
6272 4b                TAZ
6273 c9 40             CMP  #64
6275 90 e7             BCC  _col
6277 20 20 6b          JSR  Print_CR
627a 20 ec 61          JSR  Inc_LPC
627d fa                PLX
627e ca                DEX
627f d0 d7             BNE  _row
6281 4c a5 60          JMP  Main
6284          EndMod [Mon_Bits] Size = 59 [$3b]

              ***********************
              Module Mon_Set_Register
              ***********************

6284 20 53 61          JSR  LAC_To_PC
6287 a0 03             LDY  #3
6289 20 f9 69 _loop    JSR  Got_LAC
628c b0 0a             BCS  _exit
628e a5 59             LDA  Long_AC
6290 99 02 00          STA  Bank,Y
6293 c8                INY
6294 c0 09             CPY  #9
6296 90 f1             BCC  _loop
6298 4c a5 60 _exit    JMP  Main
629b          EndMod [Mon_Set_Register] Size = 23 [$17]

              *********************
              Module Mon_Set_Memory
              *********************

629b b0 20             BCS  _exit
629d 20 62 61          JSR  LAC_To_LPC        ; Long_PC = row address
62a0 a3 00             LDZ  #0
62a2 20 f9 69 _loop    JSR  Got_LAC
62a5 90 04             BCC  _valid
62a7 c9 27             CMP  #APOSTR           ; flag for character entry
62a9 d0 12             BNE  _exit
62ab a5 59    _valid   LDA  Long_AC
62ad ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
62b0 ea                NOP                    ; use STA  [Long_PC],Z
62b1 92 61    _banked  STA  (Long_PC),Z
62b3 1b                INZ
62b4 c2 10             CPZ  #16
62b6 7f d7 02          BBR7 MODE_80,_next
62b9 c2 08             CPZ  #8
62bb 90 e5    _next    BCC  _loop

62bd 20 7d ff _exit    JSR  PRIMM
62c0 1b 4f             .BYTE "\eO"
62c2 91 00             .BYTE $91,$00
62c4 20 14 63          JSR  Dump_Row
62c7 4c a5 60          JMP  Main
62ca          EndMod [Mon_Set_Memory] Size = 47 [$2f]

              *************
              Module Mon_Go
              *************

62ca 20 53 61          JSR  LAC_To_PC
62cd a6 0c             LDX  SPL
62cf 9a                TXS
62d0 4c 71 ff          JMP  JMPFAR
62d3          EndMod [Mon_Go] Size = 9 [$9]

              **************
              Module Mon_JSR
              **************

62d3 20 53 61          JSR  LAC_To_PC
62d6 a6 0c             LDX  SPL
62d8 9a                TXS
62d9 20 6e ff          JSR  JSRFAR
62dc ba                TSX
62dd 86 0c             STX  SPL
62df 4c a5 60          JMP  Main
62e2          EndMod [Mon_JSR] Size = 15 [$f]

              *******************
              Module Dump_4_Bytes
              *******************

62e2 20 d2 ff          JSR  CHROUT            ; colour
62e5 ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62e8 ea                NOP                    ; use LDA  [Long_PC],Z
62e9 b2 61    _banked  LDA  (Long_PC),Z
62eb 20 18 6b          JSR  Print_Hex_Blank
62ee 1b                INZ
62ef 6b                TZA
62f0 29 03             AND  #3
62f2 d0 f1             BNE  _loop
62f4 60                RTS
62f5          EndMod [Dump_4_Bytes] Size = 19 [$13]

              *******************
              Module Dump_4_Chars
              *******************

62f5 a0 00             LDY  #0
62f7 84 f4             STY  QTSW              ; disable quote mode
62f9 20 d2 ff          JSR  CHROUT            ; colour
62fc ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62ff ea                NOP                    ; use LDA  [Long_PC],Z
6300 b2 61    _banked  LDA  (Long_PC),Z
6302 a8                TAY
6303 29 60             AND  #%0110 0000
6305 d0 02             BNE  _laba
6307 a0 2e             LDY  #'.'
6309 98       _laba    TYA
630a 20 d2 ff          JSR  CHROUT
630d 1b                INZ
630e 6b                TZA
630f 29 03             AND  #3
6311 d0 e9             BNE  _loop
6313 60                RTS
6314          EndMod [Dump_4_Chars] Size = 31 [$1f]

              ***************
              Module Dump_Row
              ***************

6314 db                PHZ
6315 20 20 6b          JSR  Print_CR
6318 a9 3e             LDA  #'>'
631a 20 d2 ff          JSR  CHROUT
631d 20 ee 6a          JSR  Hex_LPC

6320 a3 00             LDZ  #0
6322 a2 02             LDX  #2                ; 2 blocks in 80 columns
6324 7f d7 01          BBR7 MODE_80,_loop
6327 ca                DEX                    ; 1 block  in 40 columns
6328 a9 96    _loop    LDA  #LRED
632a 20 e2 62          JSR  Dump_4_Bytes
632d a9 05             LDA  #WHITE
632f 20 e2 62          JSR  Dump_4_Bytes
6332 ca                DEX
6333 d0 f3             BNE  _loop

6335 20 7d ff          JSR  PRIMM
6338 3a 12 00          .BYTE $3a,$12,$00      ; : reverse on

633b a3 00             LDZ  #0
633d a2 02             LDX  #2                ; 4 blocks in 80 columns
633f 7f d7 01          BBR7 MODE_80,_lchr
6342 ca                DEX                    ; 2 blocks in 40 columns
6343 a9 96    _lchr    LDA  #LRED
6345 20 f5 62          JSR  Dump_4_Chars
6348 a9 05             LDA  #WHITE
634a 20 f5 62          JSR  Dump_4_Chars
634d ca                DEX
634e d0 f3             BNE  _lchr
6350 6b                TZA
6351 20 84 6b          JSR  Add_LPC
6354 fb                PLZ
6355 60                RTS
6356          EndMod [Dump_Row] Size = 66 [$42]

              *******************
              Module Mon_Transfer
              *******************

6356 20 92 6b          JSR  Param_Range       ; Long_PC = source
6359 b3 78 fd          LBCS Mon_Error         ; Long_CT = count
635c 20 f9 69          JSR  Got_LAC           ; Long_AC = target
635f b3 72 fd          LBCS Mon_Error

6362 a3 00             LDZ  #0
6364 20 c9 61          JSR  LAC_Compare_LPC   ; target - source
6367 90 17             BCC  _forward

              ;        source < target: backward transfer

6369 20 95 61          JSR  LAC_Plus_LCT      ; Long_AC = end of target

636c ea b2 65 _lpback  LDA  [Long_DA],Z       ; backward copy
636f ea 92 59          STA  [Long_AC],Z
6372 20 6c 6b          JSR  Dec_LDA
6375 20 e1 61          JSR  Dec_LAC
6378 20 77 6b          JSR  Dec_LCT
637b 10 ef             BPL  _lpback
637d 4c a5 60          JMP  Main

6380 ea b2 61 _forward LDA  [Long_PC],Z       ; forward copy
6383 ea 92 59          STA  [Long_AC],Z
6386 20 ec 61          JSR  Inc_LPC
6389 20 da 61          JSR  Inc_LAC
638c 20 77 6b          JSR  Dec_LCT
638f 10 ef             BPL  _forward
6391 4c a5 60          JMP  Main
6394          EndMod [Mon_Transfer] Size = 62 [$3e]

              ******************
              Module Mon_Compare
              ******************

6394 20 92 6b          JSR  Param_Range       ; Long_PC = source
6397 b3 3a fd          LBCS Mon_Error         ; Long_CT = count
639a 20 f9 69          JSR  Got_LAC           ; Long_AC = target
639d b3 34 fd          LBCS Mon_Error
63a0 20 20 6b          JSR  Print_CR
63a3 a3 00             LDZ  #0
63a5 ea b2 61 _loop    LDA  [Long_PC],Z
63a8 ea d2 59          CMP  [Long_AC],Z
63ab f0 03             BEQ  _laba
63ad 20 ee 6a          JSR  Hex_LPC
63b0 20 da 61 _laba    JSR  Inc_LAC
63b3 20 ec 61          JSR  Inc_LPC
63b6 20 77 6b          JSR  Dec_LCT
63b9 10 ea             BPL  _loop
63bb 4c a5 60          JMP  Main
63be          EndMod [Mon_Compare] Size = 42 [$2a]

              ***************
              Module Mon_Hunt
              ***************

63be 20 92 6b          JSR  Param_Range       ; Long_PC = start
63c1 b3 10 fd          LBCS Mon_Error         ; Long_CT = count
63c4 a0 00             LDY  #0
63c6 20 50 6b          JSR  Get_Char
63c9 c9 27             CMP  #APOSTR
63cb d0 17             BNE  _bin
63cd 20 50 6b          JSR  Get_Char          ; string hunt
63d0 c9 00             CMP  #0
63d2 f3 ff fc          LBEQ Mon_Error         ; null string

63d5 99 00 04 _lpstr   STA  Mon_Data,Y
63d8 c8                INY
63d9 20 50 6b          JSR  Get_Char
63dc f0 18             BEQ  _hunt
63de c0 20             CPY  #32               ;max. string length
63e0 d0 f3             BNE  _lpstr
63e2 80 12             BRA  _hunt

63e4 20 f7 69 _bin     JSR  Get_LAC
63e7 a5 59    _lpbin   LDA  Long_AC
63e9 99 00 04          STA  Mon_Data,Y
63ec c8                INY
63ed 20 f9 69          JSR  Got_LAC
63f0 b0 04             BCS  _hunt
63f2 c0 20             CPY  #32               ;max. data length
63f4 d0 f1             BNE  _lpbin

63f6 84 65    _hunt    STY  Long_DA           ; hunt length
63f8 20 20 6b          JSR  Print_CR

63fb a0 00    _lpstart LDY  #0
63fd 20 f3 61 _lpins   JSR  Fetch
6400 d9 00 04          CMP  Mon_Data,Y
6403 d0 08             BNE  _next
6405 c8                INY
6406 c4 65             CPY  Long_DA
6408 d0 f3             BNE  _lpins
640a 20 ee 6a          JSR  Hex_LPC           ; match
640d 20 e1 ff _next    JSR  STOP
6410 f3 93 fc          LBEQ Main
6413 20 ec 61          JSR  Inc_LPC
6416 20 77 6b          JSR  Dec_LCT
6419 10 e0             BPL  _lpstart
641b 4c a5 60          JMP  Main
641e          EndMod [Mon_Hunt] Size = 96 [$60]

              ****************
              Module Load_Save
              ****************

641e ac 06 11          LDY  Unit
6421 84 ba             STY  FA
6423 a0 08             LDY  #8
6425 84 b9             STY  SA
6427 a0 00             LDY  #0
6429 84 bd             STY  BA
642b 84 b7             STY  FNLEN
642d 84 be             STY  FNBANK
642f 84 90             STY  STATUS
6431 a9 04             LDA  #>Mon_Data
6433 85 bc             STA  FNADR+1
6435 a9 00             LDA  #<Mon_Data
6437 85 bb             STA  FNADR
6439 20 50 6b _skip    JSR  Get_Char          ; skip blanks
643c f3 95 fc          LBEQ Mon_Error
643f c9 20             CMP  #' '
6441 f0 f6             BEQ  _skip
6443 c9 22             CMP  #QUOTE            ; must be quote
6445 d3 8c fc          LBNE Mon_Error

6448 a6 6e             LDX  Buf_Index
644a bd 00 02 _copyfn  LDA  Buffer,X          ; copy filename
644d f0 4a             BEQ  _do               ; no more input
644f e8                INX
6450 c9 22             CMP  #QUOTE
6452 f0 0c             BEQ  _unit             ; end of filename
6454 91 bb             STA  (FNADR),Y         ; store to filename
6456 e6 b7             INC  FNLEN
6458 c8                INY
6459 c0 13             CPY  #19               ; max = 16 plus prefix "@0:"
645b 90 ed             BCC  _copyfn
645d 4c d3 60          JMP  Mon_Error         ; filename too long

6460 86 6e    _unit    STX  Buf_Index         ; update read position
6462 20 50 6b          JSR  Get_Char
6465 f0 32             BEQ  _do               ; no more parameter
6467 20 f9 69          JSR  Got_LAC
646a b0 2d             BCS  _do
646c a5 59             LDA  Long_AC           ; unit #
646e 85 ba             STA  FA
6470 20 f9 69          JSR  Got_LAC
6473 b0 24             BCS  _do
6475 20 62 61          JSR  LAC_To_LPC        ; Long_PC = start address
6478 85 bd             STA  BA                ; Bank
647a 20 f9 69          JSR  Got_LAC           ; Long_AC = end address + 1
647d b0 42             BCS  _load             ; no end address -> load/verify
647f 20 20 6b          JSR  Print_CR
6482 a6 59             LDX  Long_AC           ; X/Y = end address
6484 a4 5a             LDY  Long_AC+1
6486 a5 93             LDA  VERCK             ; A = load/verify/save
6488 c9 53             CMP  #'S'
648a d3 47 fc          LBNE Mon_Error         ; must be Save
648d a9 00             LDA  #0
648f 85 b9             STA  SA                ; set SA for PRG
6491 a9 61             LDA  #Long_PC          ; Long_PC = start address
6493 20 d8 ff          JSR  SAVE
6496 4c a5 60 _exit    JMP  Main

6499 a5 93    _do      LDA  VERCK
649b c9 56             CMP  #'V'              ; Verify
649d f0 07             BEQ  _exec
649f c9 4c             CMP  #'L'              ; Load
64a1 d3 30 fc          LBNE Mon_Error
64a4 a9 00             LDA  #0                ; 0 = LOAD
64a6 20 d5 ff _exec    JSR  LOAD              ; A == 0 : LOAD else VERIFY
64a9 4f 90 ea          BBR4 STATUS,_exit
64ac a5 93             LDA  VERCK
64ae f3 23 fc          LBEQ Mon_Error
64b1 b3 f2 fb          LBCS Main
64b4 20 7d ff          JSR  PRIMM
64b7 20 45 52          .BYTE " ERROR",0
64be 4c a5 60          JMP  Main

64c1 a6 61    _load    LDX  Long_PC
64c3 a4 62             LDY  Long_PC+1
64c5 a9 00             LDA  #0                ; 0 = use X/Y as load address
64c7 85 b9             STA  SA                ; and ignore load address from file
64c9 80 ce             BRA  _do
64cb          EndMod [Load_Save] Size = 173 [$ad]

              ***************
              Module Mon_Fill
              ***************

64cb 20 92 6b          JSR  Param_Range       ; Long_PC = target
64ce b3 03 fc          LBCS Mon_Error         ; Long_CT = count
64d1 20 f9 69          JSR  Got_LAC           ; Long_AC = fill byte
64d4 b3 fd fb          LBCS Mon_Error
64d7 20 20 6b          JSR  Print_CR
64da a3 00             LDZ  #0
64dc a5 59    _loop    LDA  Long_AC
64de ea 92 61          STA  [Long_PC],Z
64e1 20 ec 61          JSR  Inc_LPC
64e4 20 77 6b          JSR  Dec_LCT
64e7 10 f3             BPL  _loop
64e9 4c a5 60          JMP  Main
64ec          EndMod [Mon_Fill] Size = 33 [$21]

              *******************
              Module Mon_Assemble
              *******************

64ec b3 e5 fb          LBCS Mon_Error
64ef 20 62 61          JSR  LAC_To_LPC        ; Long_PC = PC

64f2 a2 00    _start   LDX  #0                ; mne letter counter
64f4 86 66             STX  Long_DA+1         ; clear encoded MNE
64f6 86 6c             STX  Op_Flag           ; 6:long branch 5:32 bit
64f8 8e 35 04          STX  Op_Ix             ; operand byte index
64fb 8e 39 04          STX  Op_Len            ; operand length
64fe 20 50 6b _getin   JSR  Get_Char
6501 d0 05             BNE  _laba
6503 e0 00             CPX  #0
6505 f3 9e fb          LBEQ Main

6508 c9 20    _laba    CMP  #' '
650a f0 e6             BEQ  _start            ; restart after blank

              ;        check for long branches

650c e0 01             CPX  #1
650e d0 0e             BNE  _labb             ; -> not 2nd. char
6510 c9 42             CMP  #'B'
6512 d0 0a             BNE  _labb             ; 2nd. char != 'B'
6514 ab 2d 04          LDZ  Op_Mne
6517 c2 4c             CPZ  #'L'
6519 d0 03             BNE  _labb             ; 1st. Char != 'L'
651b e7 6c             SMB6 Op_Flag           ; flag long branch
651d ca                DEX                    ; skip 'L'

651e 9d 2d 04 _labb    STA  Op_Mne,X          ; next mne character
6521 e8                INX
6522 e0 03             CPX  #3
6524 d0 d8             BNE  _getin

              ;        encode 3 letter mnemonic

6526 bd 2c 04 _lpenc   LDA  Op_Mne-1,X
6529 38                SEC
652a e9 3f             SBC  #$3f              ; offset
652c a0 05             LDY  #5                ; 5 bit code
652e 4a       _lpbit   LSR  A
652f 66 65             ROR  Long_DA
6531 66 66             ROR  Long_DA+1
6533 88                DEY
6534 d0 f8             BNE  _lpbit
6536 ca                DEX
6537 d0 ed             BNE  _lpenc

              ;        find packed MNE code in table

6539 a2 5a             LDX  #90               ; # of mnemonics
653b a5 65             LDA  Long_DA
653d dd 22 6d _lpfind  CMP  MNE_L,X           ; compare left MNE
6540 d0 07             BNE  _nxfind
6542 bc 7d 6d          LDY  MNE_R,X
6545 c4 66             CPY  Long_DA+1         ; compare right MNE
6547 f0 06             BEQ  _found
6549 ca       _nxfind  DEX
654a 10 f1             BPL  _lpfind
654c 4c d3 60          JMP  Mon_Error

654f 8e 37 04 _found   STX  Ix_Mne

              ;        find 1st. opcode for this mnemonic

6552 8a                TXA
6553 a2 00             LDX  #0
6555 dd d8 6d _lpopc   CMP  MNE_Index,X
6558 f0 03             BEQ  _exopc
655a e8                INX
655b d0 f8             BNE  _lpopc
655d 86 6b    _exopc   STX  Op_Code

              ;        check for BBR BBS RMB SMB

655f 8a                TXA
6560 29 07             AND  #7
6562 c9 07             CMP  #7
6564 d0 1d             BNE  _labc

6566 20 50 6b          JSR  Get_Char
6569 c9 30             CMP  #'0'
656b 93 66 fb          LBCC Mon_Error
656e c9 38             CMP  #'8'
6570 b3 61 fb          LBCS Mon_Error
6573 0a                ASL  A
6574 0a                ASL  A
6575 0a                ASL  A
6576 0a                ASL  A
6577 05 6b             ORA  Op_Code
6579 85 6b             STA  Op_Code

657b 20 50 6b          JSR  Get_Char
657e c9 20             CMP  #' '
6580 d3 51 fb          LBNE Mon_Error

              ;        read operand

6583 a9 00    _labc    LDA  #0
6585 85 6a    _labd    STA  Mode_Flags
6587 20 27 6a          JSR  Read_Number
658a b3 47 fb          LBCS Mon_Error
658d f0 29             BEQ  _labg             ; no operand
658f a5 5b             LDA  Long_AC+2
6591 d3 40 fb          LBNE Mon_Error         ; -> overflow
6594 a0 02             LDY  #2                ; Y=2 word operand
6596 ad 34 04          LDA  Op_Bits
6599 c9 08             CMP  #8
659b 90 06             BCC  _labe             ; -> binary: no 4 digit check
659d a5 6d             LDA  COL
659f c9 04             CMP  #4                ; 4 digits force word operand
65a1 f0 05             BEQ  _labf
65a3 a5 5a    _labe    LDA  Long_AC+1
65a5 d0 01             BNE  _labf             ; high byte not zero
65a7 88                DEY                    ; Y=1 byte operand
65a8 ae 35 04 _labf    LDX  Op_Ix             ; X = operand value #
65ab 98                TYA                    ; A = 1:byte or 2:word
65ac 9d 39 04          STA  Op_Len,X          ; store operand length
65af ee 35 04          INC  Op_Ix             ; ++index to operand value
65b2 8a                TXA                    ; A = current index
65b3 d0 03             BNE  _labg             ; -> at 2nd. byte
65b5 20 73 61          JSR  LAC_To_LCT        ; Long_CT = 1st. operand
65b8 c6 6e    _labg    DEC  Buf_Index         ; back to delimiter

65ba 20 50 6b _lpnop   JSR  Get_Char          ; get delimiter
65bd f3 ed 00          LBEQ _adjust           ; end of operand
65c0 c9 20             CMP  #' '
65c2 f0 f6             BEQ  _lpnop

              ;        immediate

65c4 c9 23             CMP  #'#'
65c6 d0 08             BNE  _lbra
65c8 a5 6a             LDA  Mode_Flags
65ca d0 70             BNE  _error
65cc a9 80             LDA  #$80              ; immediate mode
65ce 80 b5             BRA  _labd

              ;        left bracket

65d0 c9 5b    _lbra    CMP  #'['
65d2 d0 0a             BNE  _indir
65d4 a5 6a             LDA  Mode_Flags
65d6 d0 64             BNE  _error
65d8 d7 6c             SMB5 Op_Flag           ; 32 bit mode
65da a9 40             LDA  #$40              ; ( flag
65dc 80 a7             BRA  _labd

              ;        left parenthesis

65de c9 28    _indir   CMP  #'('
65e0 d0 08             BNE  _comma
65e2 a5 6a             LDA  Mode_Flags
65e4 d0 56             BNE  _error
65e6 a9 40             LDA  #$40              ; ( flag
65e8 80 9b             BRA  _labd

              ;        comma

65ea c9 2c    _comma   CMP  #','
65ec d0 1f             BNE  _stack
65ee ad 35 04          LDA  Op_Ix             ; operand value #
65f1 f0 49             BEQ  _error
65f3 a2 04             LDX  #4                ; outside comma
65f5 a5 6a             LDA  Mode_Flags
65f7 f0 0e             BEQ  _comma1           ; no flags yet
65f9 c9 78             CMP  #$78              ; ($nn,SP)
65fb f0 0a             BEQ  _comma1
65fd c9 48             CMP  #$48              ; ($nn)
65ff f0 06             BEQ  _comma1
6601 a2 20             LDX  #$20              ; , inside comma
6603 c9 40             CMP  #$40              ; (
6605 d0 35             BNE  _error
6607 8a       _comma1  TXA
6608 05 6a             ORA  Mode_Flags
660a 4c 85 65          JMP  _labd

              ;        stack relative

660d c9 53    _stack   CMP  #'S'
660f d0 12             BNE  _rbra
6611 20 50 6b          JSR  Get_Char
6614 c9 50             CMP  #'P'
6616 d0 24             BNE  _error
6618 a5 6a             LDA  Mode_Flags
661a c9 60             CMP  #$60              ; ($nn,
661c d0 1e             BNE  _error
661e 09 10             ORA  #%0001 0000       ; SP flag
6620 4c 85 65          JMP  _labd

              ;        right bracket

6623 c9 5d    _rbra    CMP  #']'
6625 d0 18             BNE  _right
6627 5f 6c 12          BBR5 Op_Flag,_error
662a ad 35 04          LDA  Op_Ix
662d f3 a4 fa          LBEQ Mon_Error         ; no value
6630 a5 6a             LDA  Mode_Flags
6632 c9 40             CMP  #$40              ; (
6634 d3 9d fa          LBNE Mon_Error
6637 09 08             ORA  #%0000 1000       ; )
6639 4c 85 65          JMP  _labd

663c 4c d3 60 _error   JMP  Mon_Error

              ;        right parenthesis

663f c9 29    _right   CMP  #')'
6641 d0 1a             BNE  _X
6643 ad 35 04          LDA  Op_Ix
6646 f3 8b fa          LBEQ Mon_Error         ; no value
6649 a5 6a             LDA  Mode_Flags
664b c9 40             CMP  #$40              ; (
664d f0 09             BEQ  _right1
664f c9 61             CMP  #$61              ; ($nn,X
6651 f0 05             BEQ  _right1
6653 c9 70             CMP  #$70              ; ($nn,SP
6655 d3 7c fa          LBNE Mon_Error
6658 09 08    _right1  ORA  #%0000 1000       ; )
665a 4c 85 65          JMP  _labd

665d c9 58    _X       CMP  #'X'
665f d0 16             BNE  _Y
6661 ad 35 04          LDA  Op_Ix
6664 f3 6d fa          LBEQ Mon_Error
6667 a5 6a             LDA  Mode_Flags
6669 c9 60             CMP  #$60
666b f0 05             BEQ  _X1
666d c9 04             CMP  #4
666f d3 62 fa          LBNE Mon_Error
6672 09 01    _X1      ORA  #%0000 0001
6674 4c 85 65          JMP  _labd

              ;        Y

6677 c9 59    _Y       CMP  #'Y'
6679 d0 1a             BNE  _Z
667b ad 35 04          LDA  Op_Ix
667e f3 53 fa          LBEQ Mon_Error
6681 a5 6a             LDA  Mode_Flags
6683 c9 4c             CMP  #$4c             ; ($nn),
6685 f0 09             BEQ  _Y1
6687 c9 04             CMP  #4               ; $nn,
6689 f0 05             BEQ  _Y1
668b c9 7c             CMP  #$7c             ; ($nn,SP),
668d d3 44 fa          LBNE Mon_Error
6690 09 02    _Y1      ORA  #%0000 0010      ; Y
6692 4c 85 65          JMP  _labd

              ;        Z

6695 c9 5a    _Z       CMP  #'Z'
6697 d3 3a fa          LBNE Mon_Error
669a ad 35 04          LDA  Op_Ix
669d f3 34 fa          LBEQ Mon_Error
66a0 a5 6a             LDA  Mode_Flags
66a2 c9 4c             CMP  #$4c              ; $nn,
66a4 d3 2d fa          LBNE Mon_Error
66a7 09 03             ORA  #%0000 0011       ; Z
66a9 4c 85 65          JMP  _labd

              ;        BBR BBS RMB SMB  two operands

66ac ad 37 04 _adjust  LDA  Ix_Mne
66af ae 35 04          LDX  Op_Ix             ; # if values
66b2 f0 52             BEQ  _match            ; -> no operand
66b4 ca                DEX
66b5 f0 25             BEQ  _one             ; ->  one operand
66b7 ca                DEX
66b8 d3 19 fa          LBNE Mon_Error         ; -> error if more than 2
66bb c9 05             CMP  #5                ; BBR
66bd f0 05             BEQ  _BB
66bf c9 06             CMP  #6                ; BBS
66c1 d3 10 fa          LBNE Mon_Error
66c4 a5 5e    _BB      LDA  Long_CT+1
66c6 d3 0b fa          LBNE Mon_Error
66c9 a9 03             LDA  #3                ; offset
66cb 20 b6 67          JSR  Branch_Target
66ce a5 6b             LDA  Op_Code
66d0 a4 59             LDY  Long_AC
66d2 a6 5d             LDX  Long_CT
66d4 86 59             STX  Long_AC
66d6 84 5a             STY  Long_AC+1
66d8 a0 02             LDY  #2
66da 80 4d             BRA  _store

              ;        one operand in Long_CT

66dc a6 5d    _one     LDX  Long_CT
66de a4 5e             LDY  Long_CT+1
66e0 86 59             STX  Long_AC
66e2 84 5a             STY  Long_AC+1            ; Aval = operand
66e4 a2 0a             LDX  #10
66e6 dd d7 6e _lpbrain CMP  BRAIN-1,X
66e9 f0 05             BEQ  _branch
66eb ca                DEX
66ec d0 f8             BNE  _lpbrain
66ee 80 16             BRA  _match

              ;        branch instruction

66f0 a5 6a    _branch  LDA  Mode_Flags
66f2 d3 df f9          LBNE Mon_Error         ; only value
66f5 a9 02             LDA  #2                ; branch offset
66f7 20 b6 67          JSR  Branch_Target
66fa a5 6b             LDA  Op_Code
66fc a0 01             LDY  #1                ; short branch
66fe 6f 6c 03          BBR6 Op_Flag,_bran1
6701 c8                INY                    ; long branch
6702 09 03             ORA  #3
6704 80 23    _bran1   BRA  _store

              ;        find opcode matching mnemonic and address mode

6706 20 e1 67 _match   JSR  Mode_Index
6709 20 c9 67 _lpmatch JSR  Match_Mode
670c f0 17             BEQ  _okmat
670e ad 39 04          LDA  Op_Len
6711 f3 c0 f9          LBEQ Mon_Error
6714 a5 6a             LDA  Mode_Flags
6716 33 bb f9          LBMI Mon_Error
6719 29 3f             AND  #%0011 1111
671b 85 6a             STA  Mode_Flags
671d ee 39 04          INC  Op_Len
6720 20 f3 67          JSR  Size_To_Mode
6723 80 e4             BRA  _lpmatch
6725 ac 39 04 _okmat   LDY  Op_Len
6728 8a                TXA

              ;        store instruction bytes
              ;        -----------------------
              ;        A    = opcode
              ;        Y    = operand length
              ;        Long_AC = operand value

6729 85 6b    _store   STA  Op_Code
672b 8c 2c 04          STY  Op_Size
672e ee 2c 04          INC  Op_Size
6731 5f 6c 18          BBR5 Op_Flag,_storen
6734 a9 ea             LDA  #$ea              ; 32 bit prefix
6736 a3 00             LDZ  #0
6738 ea 92 61          STA  [Long_PC],Z       ; store prefix
673b 1b                INZ
673c a5 6b             LDA  Op_Code
673e ea 92 61          STA  [Long_PC],Z       ; store opcode
6741 1b                INZ
6742 a5 59             LDA  Long_AC
6744 ea 92 61          STA  [Long_PC],Z       ; store address
6747 ee 2c 04          INC  Op_Size
674a 80 13             BRA  _print

674c 5a       _storen  PHY
674d fb                PLZ                    ; Z = Y
674e f0 0a             BEQ  _store1

6750 b9 58 00 _lpsto   LDA  Long_AC-1,Y
6753 ea 92 61          STA  [Long_PC],Z
6756 3b                DEZ
6757 88                DEY
6758 d0 f6             BNE  _lpsto

675a a5 6b    _store1  LDA  Op_Code
675c ea 92 61          STA  [Long_PC],Z

675f 20 7d ff _print   JSR  PRIMM
6762 0d 91 41          .BYTE 13,$91,"A \eQ",0
6769 20 3e 68          JSR  Print_Code
676c ee 2c 04          INC  Op_Size
676f ad 2c 04          LDA  Op_Size
6772 20 84 6b          JSR  Add_LPC

              ; print out command 'A' together with next address
              ; and put it into buffer too,
              ; for easy entry of next assembler instruction

6775 20 7d ff          JSR  PRIMM
6778 0d 41 20          .BYTE CR,"A ",0

677c a9 41             LDA  #'A'
677e 8d 00 02          STA  Buffer
6781 a9 20             LDA  #' '
6783 8d 01 02          STA  Buffer+1
6786 a0 02             LDY  #2
6788 a2 02             LDX  #2                ; 6 digits
678a b5 61             LDA  Long_PC,X
678c d0 01             BNE  _auto
678e ca                DEX                    ; 4 digits
678f da       _auto    PHX
6790 b5 61             LDA  Long_PC,X
6792 20 39 6b          JSR  A_To_Hex
6795 99 00 02          STA  Buffer,Y
6798 20 d2 ff          JSR  CHROUT
679b c8                INY
679c 8a                TXA
679d 99 00 02          STA  Buffer,Y
67a0 20 d2 ff          JSR  CHROUT
67a3 c8                INY
67a4 fa                PLX
67a5 ca                DEX
67a6 10 e7             BPL  _auto

67a8 a9 20             LDA  #' '
67aa 99 00 02          STA  Buffer,Y
67ad 20 d2 ff          JSR  CHROUT
67b0 c8                INY
67b1 98                TYA
67b2 aa                TAX
67b3 4c aa 60          JMP  Main_A
67b6          EndMod [Mon_Assemble] Size = 714 [$2ca]

              ********************
              Module Branch_Target
              ********************

67b6 c3 59             DEW  Long_AC
67b8 3a                DEC  A
67b9 d0 fb             BNE  Branch_Target

              ;        Target - PC

67bb 38                SEC
67bc a5 59             LDA  Long_AC
67be e5 61             SBC  Long_PC
67c0 85 59             STA  Long_AC
67c2 a5 5a             LDA  Long_AC+1
67c4 e5 62             SBC  Long_PC+1
67c6 85 5a             STA  Long_AC+1
67c8 60                RTS
67c9          EndMod [Branch_Target] Size = 19 [$13]

              *****************
              Module Match_Mode
              *****************

              ;        find matching mnemonic and address mode

67c9 a6 6b             LDX  Op_Code           ; try this opcode
67cb a5 6a             LDA  Mode_Flags         ; size and address mode
67cd dd e2 6e _loop    CMP  LEN_ADM,X
67d0 f0 0e             BEQ  _return           ; success  ZF=1

              ;        search for next opcode with same mnemonic

67d2 e8       _next    INX                    ; next opcode
67d3 f0 0a             BEQ _error
67d5 bc d8 6d          LDY  MNE_Index,X
67d8 cc 37 04          CPY  Ix_Mne            ; same mnemonic ?
67db f0 f0             BEQ  _loop             ; -> compare again
67dd 80 f3             BRA  _next

67df ca       _error   DEX                    ; X = $ff ZF=0
67e0 60       _return  RTS
67e1          EndMod [Match_Mode] Size = 24 [$18]

              *****************
              Module Mode_Index
              *****************

67e1 a5 6a             LDA  Mode_Flags
67e3 a2 00             LDX  #0
67e5 dd e2 6f _loop    CMP  ADMODE,X
67e8 f0 07             BEQ  _found
67ea e8                INX
67eb e0 10             CPX  #16
67ed 90 f6             BCC  _loop
67ef 8a                TXA
67f0 60                RTS
67f1 86 6a    _found   STX  Mode_Flags
67f3          EndMod [Mode_Index] Size = 18 [$12]

              *******************
              Module Size_To_Mode
              *******************

67f3 ad 39 04          LDA  Op_Len
67f6 4a                LSR  A
67f7 6a                ROR  A
67f8 6a                ROR  A
67f9 05 6a             ORA  Mode_Flags
67fb 85 6a             STA  Mode_Flags
67fd a2 00             LDX  #0
67ff 60                RTS
6800          EndMod [Size_To_Mode] Size = 13 [$d]

              **********************
              Module Mon_Disassemble
              **********************

6800 b0 08             BCS  _nopar
6802 20 62 61          JSR  LAC_To_LPC        ; Long_PC = start address
6805 20 f9 69          JSR  Got_LAC           ; Long_AC = end address
6808 90 06             BCC  range
680a a9 20    _nopar   LDA  #32               ; disassemble 32 bytes
680c 85 59             STA  Long_AC
680e 80 06             BRA  _loop
6810 20 af 61 range    JSR  LAC_Minus_LPC     ; Long_AC = range
6813 93 be f8          LBCC Mon_Error         ; -> negative

6816 20 25 6b _loop    JSR  CR_Erase          ; prepare empty line
6819 20 e1 ff          JSR  STOP
681c f3 87 f8          LBEQ Main
681f 20 38 68          JSR  Dis_Code          ; disassemble one line
6822 ee 2c 04          INC  Op_Size
6825 ad 2c 04          LDA  Op_Size
6828 20 84 6b          JSR  Add_LPC           ; advance address
682b a5 59             LDA  Long_AC
682d 38                SEC
682e ed 2c 04          SBC  Op_Size
6831 85 59             STA  Long_AC
6833 b0 e1             BCS  _loop
6835 4c a5 60          JMP  Main
6838          EndMod [Mon_Disassemble] Size = 56 [$38]

              ***************
              Module Dis_Code
              ***************

6838 20 7d ff          JSR  PRIMM
683b 2e 20 00          .BYTE ". ",0
683e          EndMod [Dis_Code] Size = 6 [$6]

              *****************
              Module Print_Code
              *****************

              ;        print 24 bit address of instruction

683e 20 ee 6a          JSR  Hex_LPC          ; 24 bit address
6841 20 1b 6b          JSR  Print_Blank

              ;        read opcode and calculate length and address mode

6844 a0 00             LDY  #0
6846 84 6c             STY  Op_Flag           ; clear flags
6848 20 f3 61          JSR  Fetch             ; fetch from (banked) address
684b 85 6b             STA  Op_Code           ; store it
684d aa                TAX                    ; save in X

              ;        check for 32 bit address mode

684e c9 ea             CMP  #$ea              ; prefix ?
6850 d0 12             BNE  _normal
6852 c8                INY
6853 20 f3 61          JSR  Fetch             ; opcode after prefix
6856 29 1f             AND  #%0001 1111       ; identify ($nn),Z codes
6858 c9 12             CMP  #%0001 0010
685a d0 08             BNE  _normal
685c d7 6c             SMB5 Op_Flag           ; set extended flag
685e 20 f3 61          JSR  Fetch
6861 85 6b             STA  Op_Code           ; code after prefix
6863 aa                TAX

6864 bc e2 6e _normal  LDY  LEN_ADM,X         ; Y = length and address mode
6867 98                TYA                    ; A = length and address mode
6868 29 0f             AND  #15               ; A = address mode
686a aa                TAX                    ; X = address mode
686b bd e2 6f          LDA  ADMODE,X          ; A = mode flags
686e 85 69             STA  Adr_Flags         ; store
6870 98                TYA                    ; A = length and address mode
6871 29 c0             AND  #%1100 0000       ; mask instruction length
6873 0a                ASL  A                 ; rotate into lower two bits
6874 2a                ROL  A
6875 2a                ROL  A
6876 8d 2c 04          STA  Op_Size           ; store
6879 5f 6c 03          BBR5 Op_Flag,_norm1
687c ee 2c 04          INC  Op_Size
687f          _norm1

              ;        print instruction and operand bytes

687f a0 00             LDY  #0
6881 20 f3 61 _lphex   JSR  Fetch
6884 20 18 6b          JSR  Print_Hex_Blank
6887 c0 02             CPY  #2
6889 f0 14             BEQ  _long             ; stop after 3 bytes
688b cc 2c 04          CPY  Op_Size
688e c8                INY
688f 90 f0             BCC  _lphex

              ;        fill up with blanks

6891 c0 03    _lpfill  CPY  #3
6893 b0 0a             BCS  _long
6895 20 7d ff          JSR  PRIMM
6898 20 20 20          .BYTE "   ",0
689c c8                INY
689d 80 f2             BRA  _lpfill

              ;        detect long branches

689f a9 9e    _long    LDA  #YELLOW
68a1 20 d2 ff          JSR  CHROUT
68a4 a6 6b             LDX  Op_Code
68a6 bd e2 6e          LDA  LEN_ADM,X
68a9 c9 a0             CMP  #%1010 0000        ; long branch mode
68ab d0 07             BNE  _locate
68ad e7 6c             SMB6 Op_Flag            ; set long branch flag
68af a9 4c             LDA  #'L'
68b1 20 d2 ff          JSR  CHROUT

              ;        locate mnemonic text

68b4 a6 6b    _locate  LDX  Op_Code           ; X = opcode
68b6 bc d8 6d          LDY  MNE_Index,X       ; Y = index to mnemonic text
68b9 b9 22 6d          LDA  MNE_L,Y           ; A = packed left part
68bc 85 5e             STA  Long_CT+1
68be b9 7d 6d          LDA  MNE_R,Y           ; A = packed right part
68c1 85 5d             STA  Long_CT

              ;        unpack and print mnemonic text

68c3 a2 03             LDX  #3                ; 3 letters
68c5 a9 00    _lpmne   LDA  #0
68c7 a0 05             LDY  #5                ; 5 bits per letter
68c9 06 5d    _lplet   ASL  Long_CT
68cb 26 5e             ROL  Long_CT+1
68cd 2a                ROL  A                 ; rotate letter into A
68ce 88                DEY
68cf d0 f8             BNE  _lplet            ; next bit

68d1 69 3f             ADC  #$3f              ; add offset (C = 0)
68d3 20 d2 ff          JSR  CHROUT            ; and print it
68d6 ca                DEX
68d7 d0 ec             BNE  _lpmne            ; next letter

68d9 ef 6c 21          BBS6 Op_Flag,_mne5     ; long branch

              ;        check for 4-letter bit instructions

68dc a5 6b             LDA  Op_Code
68de 29 0f             AND  #15
68e0 c9 07             CMP  #7                ; RMB & SMB
68e2 f0 06             BEQ  _biti
68e4 c9 0f             CMP  #15               ; BBR & BBS
68e6 d0 12             BNE  _mne4
68e8 f7 6c             SMB7 Op_Flag           ; flag two operands
68ea a5 6b    _biti    LDA  Op_Code
68ec 29 70             AND  #%0111 0000
68ee 0a                ASL  A
68ef 2a                ROL  A
68f0 2a                ROL  A
68f1 2a                ROL  A
68f2 2a                ROL  A
68f3 09 30             ORA  #'0'
68f5 20 d2 ff          JSR  CHROUT
68f8 80 03             BRA  _mne5

68fa 20 1b 6b _mne4    JSR  Print_Blank
68fd 20 1b 6b _mne5    JSR  Print_Blank
6900 a9 05             LDA  #WHITE
6902 20 d2 ff          JSR  CHROUT

              ;        check for accumulator operand

6905 a5 6b             LDA  Op_Code
6907 a2 08             LDX  #8
6909 ca       _lpaccu  DEX
690a 30 0d             BMI  _oper
690c dd f2 6f          CMP  ACCUMODE,X
690f d0 f8             BNE  _lpaccu

6911 a9 41             LDA  #'A'
6913 20 d2 ff          JSR  CHROUT
6916 4c f6 69          JMP  _return

              ;        fetch and decode operand

6919 ae 2c 04 _oper    LDX  Op_Size
691c f3 d8 00          LBEQ _return           ; -> no operand

691f 7f 69 04          BBR7 Adr_Flags,_laba   ; bit 7: immediate
6922 a9 23             LDA  #'#'
6924 80 0a             BRA  _labb
6926 6f 69 0a _laba    BBR6 Adr_Flags,_labc   ; bit 6: left (
6929 a9 28             LDA  #'('
692b 5f 6c 02          BBR5 Op_Flag,_labb
692e a9 5b             LDA  #'['
6930 20 d2 ff _labb    JSR  CHROUT
6933 a9 24    _labc    LDA  #'$'
6935 20 d2 ff          JSR  CHROUT

              ;        fetch operand to Long_CT

6938 a0 00             LDY  #0
693a 84 5e             STY  Long_CT+1
693c c8       _lpfop   INY
693d 20 f3 61          JSR  Fetch
6940 99 5c 00          STA  Long_CT-1,Y
6943 cc 2c 04          CPY  Op_Size
6946 90 f4             BCC  _lpfop

              ;        interpret address modes

6948 a6 6b             LDX  Op_Code
694a bd e2 6e          LDA  LEN_ADM,X
694d 29 20             AND  #%0010 0000       ; branches
694f d0 7a             BNE  _rel

              ;        print 16 bit operand hi/lo or 8 bit operand

6951 5f 6c 0c          BBR5 Op_Flag,_proper
6954 a5 5e             LDA  Long_CT+1
6956 20 2d 6b          JSR  Print_Hex         ; [$nn],Z
6959 a9 5d             LDA  #']'
695b 20 d2 ff          JSR  CHROUT
695e 80 36             BRA  _labf

6960 ac 2c 04 _proper  LDY  Op_Size
6963 7f 6c 02          BBR7 Op_Flag,_lpoper
6966 a0 01             LDY  #1
6968 b9 5c 00 _lpoper  LDA  Long_CT-1,Y
696b 20 2d 6b          JSR  Print_Hex
696e 88                DEY
696f d0 f7             BNE  _lpoper

6971 5f 69 1a          BBR5 Adr_Flags,_labe   ; comma flag
6974 a9 2c             LDA  #','
6976 20 d2 ff          JSR  CHROUT

6979 4f 69 0a          BBR4 Adr_Flags,_labd   ; SP flag
697c a9 53             LDA  #'S'
697e 20 d2 ff          JSR  CHROUT
6981 a9 50             LDA  #'P'
6983 20 d2 ff          JSR  CHROUT

6986 0f 69 05 _labd    BBR0 Adr_Flags,_labe   ; X flag
6989 a9 58             LDA  #'X'
698b 20 d2 ff          JSR  CHROUT

698e 3f 69 05 _labe    BBR3 Adr_Flags,_labf   ; ) flag
6991 a9 29             LDA  #')'
6993 20 d2 ff          JSR  CHROUT

6996 2f 69 12 _labf    BBR2 Adr_Flags,_labg   ; , flag
6999 a9 2c             LDA  #','
699b 20 d2 ff          JSR  CHROUT

699e a5 69             LDA  Adr_Flags
69a0 29 03             AND  #%0000 0011 ; $03
69a2 f0 07             BEQ  _labg
69a4 a8                TAY
69a5 b9 01 70          LDA  Index_Char-1,Y
69a8 20 d2 ff          JSR  CHROUT

              ;        fetch 2nd. operand for BBR and BBS

69ab 7f 6c 48 _labg    BBR7 Op_Flag,_return
69ae a9 2c             LDA  #','
69b0 20 d2 ff          JSR  CHROUT
69b3 a9 24             LDA  #'$'
69b5 20 d2 ff          JSR  CHROUT
69b8 a0 02             LDY  #2
69ba 20 f3 61          JSR  Fetch
69bd 85 5d             STA  Long_CT
69bf a9 00             LDA  #0
69c1 85 5e             STA  Long_CT+1
69c3 88                DEY
69c4 8c 2c 04          STY  Op_Size           ; Op_Size = 1
69c7 a9 03             LDA  #3                ; offset for relative address
69c9 80 02             BRA  _rela

69cb a9 02    _rel     LDA  #2                ; offset for relative address
69cd 48       _rela    PHA
69ce ad 2c 04          LDA  Op_Size           ; 1:short   2:long
69d1 4a                LSR  A
69d2 6a                ROR  A
69d3 25 5d             AND  Long_CT
69d5 10 04             BPL  _labh
69d7 a9 ff             LDA  #$ff              ; backward branch
69d9 85 5e             STA  Long_CT+1

69db fa       _labh    PLX                    ; offset 2 or 3
69dc e3 5d    _lpinw   INW  Long_CT
69de ca                DEX
69df d0 fb             BNE  _lpinw

69e1 18                CLC
69e2 a5 5d             LDA  Long_CT
69e4 65 61             ADC  Long_PC
69e6 48                PHA
69e7 a5 5e             LDA  Long_CT+1
69e9 65 62             ADC  Long_PC+1
69eb aa                TAX
69ec 68                PLA
69ed 20 12 6b          JSR  Print_XA_Hex
69f0 7f 6c 03          BBR7 Op_Flag,_return
69f3 ee 2c 04          INC  Op_Size
69f6 60       _return  RTS
69f7          EndMod [Print_Code] Size = 441 [$1b9]

              **************
              Module Get_LAC
              **************

69f7 c6 6e             DEC  Buf_Index
69f9          EndMod [Get_LAC] Size = 2 [$2]

              **************
              Module Got_LAC
              **************

69f9 5a                PHY                    ; save Y
69fa db                PHZ                    ; save Z
69fb 20 27 6a          JSR  Read_Number
69fe b0 1b             BCS  _error
6a00 a5 6d             LDA  COL
6a02 c9 27             CMP  #39
6a04 f0 18             BEQ  _noval
6a06 20 4e 6b          JSR  Got_Char
6a09 d0 08             BNE  _delim
6a0b c6 6e             DEC  Buf_Index
6a0d a5 6d             LDA  COL
6a0f f0 0d             BEQ  _noval
6a11 80 0e             BRA  _ok

6a13 c9 20    _delim   CMP  #' '
6a15 f0 0a             BEQ  _ok
6a17 c9 2c             CMP  #','
6a19 f0 06             BEQ  _ok
6a1b 4c d3 60 _error   JMP  Mon_Error         ; stack is reset in Mon_Error

6a1e 38       _noval   SEC
6a1f 80 01             BRA  _return
6a21 18       _ok      CLC
6a22 fb       _return  PLZ
6a23 7a                PLY
6a24 a5 6d             LDA  COL
6a26 60                RTS
6a27          EndMod [Got_LAC] Size = 46 [$2e]

              ******************
              Module Read_Number
              ******************

6a27 da                PHX
6a28 5a                PHY
6a29 a9 00             LDA  #0
6a2b 85 6d             STA  COL               ; count columns read

6a2d a2 03             LDX  #3                ; clear result Long_AC
6a2f 95 59    _clear   STA  Long_AC,X
6a31 ca                DEX
6a32 10 fb             BPL  _clear

6a34 20 50 6b _next    JSR  Get_Char          ; get 1st. character
6a37 f3 af 00          LBEQ _exit             ; -> empty input (COL = 0)
6a3a c9 20             CMP  #' '
6a3c f0 f6             BEQ  _next             ; skip leading blanks

6a3e a0 03             LDY  #3                ; $ + % %
6a40 d9 1b 61 _prefix  CMP  Cons_Prefix,Y     ; Y = base index
6a43 f0 25             BEQ  _base             ; -> valid prefix
6a45 88                DEY
6a46 10 f8             BPL  _prefix

6a48 c9 27             CMP  #$27              ; check for apostrophe
6a4a d0 1b             BNE  _defhex           ; -> no prefix
6a4c 85 6d             STA  COL               ; remember ' input
6a4e a6 6e             LDX  Buf_Index
6a50 bd 00 02          LDA  Buffer,X
6a53 d0 04             BNE  _char
6a55 a9 20             LDA  #' '              ; default
6a57 c6 6e             DEC  Buf_Index
6a59 e6 6e    _char    INC  Buf_Index
6a5b e6 6e             INC  Buf_Index
6a5d 85 59             STA  Long_AC
6a5f a0 02             LDY  #2
6a61 8c 34 04          STY  Op_Bits
6a64 4c e8 6a          JMP  _exit

6a67 c8       _defhex  INY                    ; Y = 0
6a68 c6 6e             DEC  Buf_Index
6a6a b9 fe 6f _base    LDA  Num_Bits,Y
6a6d 8d 34 04          STA  Op_Bits

6a70 20 50 6b _digit   JSR  Get_Char
6a73 f0 73             BEQ  _exit             ; ? : ; and zero terminate
6a75 c9 30             CMP  #'0'
6a77 90 6f             BCC  _exit             ; NaN
6a79 c9 3a             CMP  #':'
6a7b 90 0a             BCC  _valid            ; 0-9
6a7d c9 41             CMP  #'A'
6a7f 90 67             BCC  _exit
6a81 c9 47             CMP  #'G'
6a83 b0 63             BCS  _exit
6a85 e9 07             SBC  #7                ; hex conversion
6a87 e9 2f    _valid   SBC  #'0'-1
6a89 d9 fa 6f          CMP  Num_Base,Y
6a8c b0 57             BCS  _error
6a8e 4b                TAZ                    ; binary digit
6a8f e6 6d             INC  COL
6a91 c0 01             CPY  #1                ; decimal
6a93 d0 03             BNE  _laba

6a95 20 84 61          JSR  LAC_To_LDA
6a98 ae 34 04 _laba    LDX  Op_Bits
6a9b 06 59    _shift   ASL  Long_AC
6a9d 26 5a             ROL  Long_AC+1
6a9f eb 5b 00          ROW  Long_AC+2
6aa2 b0 41             BCS  _error            ; overflow
6aa4 ca                DEX
6aa5 d0 f4             BNE  _shift

6aa7 c0 01             CPY  #1                ; decimal adjustment
6aa9 d0 23             BNE  _labc
6aab 18                CLC
6aac eb 65 00          ROW  Long_DA
6aaf eb 67 00          ROW  Long_DA+2
6ab2 b0 31             BCS  _error
6ab4 a5 65             LDA  Long_DA              ; Long_AC = digit * 8
6ab6 65 59             ADC  Long_AC              ; Long_DA = digit * 2
6ab8 85 59             STA  Long_AC
6aba a5 66             LDA  Long_DA+1
6abc 65 5a             ADC  Long_AC+1
6abe 85 5a             STA  Long_AC+1
6ac0 a5 67             LDA  Long_DA+2
6ac2 65 5b             ADC  Long_AC+2
6ac4 85 5b             STA  Long_AC+2
6ac6 a5 68             LDA  Long_DA+3
6ac8 65 5c             ADC  Long_AC+3
6aca 85 5c             STA  Long_AC+3
6acc b0 17             BCS  _error

6ace 18       _labc    CLC
6acf 6b                TZA                    ; digit
6ad0 65 59             ADC  Long_AC
6ad2 85 59             STA  Long_AC
6ad4 8a                TXA                    ; X = 0
6ad5 65 5a             ADC  Long_AC+1
6ad7 85 5a             STA  Long_AC+1
6ad9 8a                TXA
6ada 65 5b             ADC  Long_AC+2
6adc 85 5b             STA  Long_AC+2
6ade 8a                TXA
6adf 65 5c             ADC  Long_AC+3
6ae1 85 5c             STA  Long_AC+3
6ae3 90 8b             BCC  _digit
6ae5 38       _error   SEC
6ae6 80 01             BRA  _return
6ae8 18       _exit    CLC
6ae9 7a       _return  PLY
6aea fa                PLX
6aeb a5 6d             LDA  COL               ; # of digits
6aed 60                RTS
6aee          EndMod [Read_Number] Size = 199 [$c7]

              **************
              Module Hex_LPC
              **************

6aee a6 64             LDX  Long_PC+3
6af0 f0 15             BEQ  _laba
6af2 a9 9e             LDA  #YELLOW
6af4 20 d2 ff          JSR  CHROUT
6af7 8a                TXA
6af8 20 2d 6b          JSR  Print_Hex
6afb a5 63             LDA  Long_PC+2
6afd 20 2d 6b          JSR  Print_Hex
6b00 a9 05             LDA  #WHITE
6b02 20 d2 ff          JSR  CHROUT
6b05 80 07             BRA  _labb
6b07 a5 63    _laba    LDA  Long_PC+2
6b09 f0 03             BEQ  _labb
6b0b 20 2d 6b          JSR  Print_Hex
6b0e a6 62    _labb    LDX  Long_PC+1
6b10 a5 61             LDA  Long_PC
6b12          EndMod [Hex_LPC] Size = 36 [$24]

              *******************
              Module Print_XA_Hex
              *******************

6b12 48                PHA
6b13 8a                TXA
6b14 20 2d 6b          JSR  Print_Hex
6b17 68                PLA
6b18          EndMod [Print_XA_Hex] Size = 6 [$6]

              **********************
              Module Print_Hex_Blank
              **********************

6b18 20 2d 6b          JSR  Print_Hex
6b1b          EndMod [Print_Hex_Blank] Size = 3 [$3]

              ******************
              Module Print_Blank
              ******************

6b1b a9 20             LDA  #' '
6b1d 4c d2 ff          JMP  CHROUT
6b20          EndMod [Print_Blank] Size = 5 [$5]

              ***************
              Module Print_CR
              ***************

6b20 a9 0d             LDA  #13
6b22 4c d2 ff          JMP  CHROUT
6b25          EndMod [Print_CR] Size = 5 [$5]

              ***************
              Module CR_Erase
              ***************

6b25 20 7d ff          JSR  PRIMM
6b28 0d 1b 51          .BYTE "\r\eQ",0
6b2c 60                RTS
6b2d          EndMod [CR_Erase] Size = 8 [$8]

              ****************
              Module Print_Hex
              ****************

6b2d da                PHX
6b2e 20 39 6b          JSR  A_To_Hex
6b31 20 d2 ff          JSR  CHROUT
6b34 8a                TXA
6b35 fa                PLX
6b36 4c d2 ff          JMP  CHROUT
6b39          EndMod [Print_Hex] Size = 12 [$c]

              ***************
              Module A_To_Hex
              ***************

6b39 48                PHA
6b3a 20 43 6b          JSR  _nibble
6b3d aa                TAX
6b3e 68                PLA
6b3f 4a                LSR  A
6b40 4a                LSR  A
6b41 4a                LSR  A
6b42 4a                LSR  A

6b43 29 0f    _nibble  AND  #15
6b45 c9 0a             CMP  #10
6b47 90 02             BCC  _lab
6b49 69 06             ADC  #6
6b4b 69 30    _lab     ADC  #'0'
6b4d 60                RTS
6b4e          EndMod [A_To_Hex] Size = 21 [$15]

              ***************
              Module Got_Char
              ***************

6b4e c6 6e             DEC  Buf_Index
6b50          EndMod [Got_Char] Size = 2 [$2]

              ***************
              Module Get_Char
              ***************

6b50 da                PHX
6b51 a6 6e             LDX  Buf_Index
6b53 e6 6e             INC  Buf_Index
6b55 bd 00 02          LDA  Buffer,X
6b58 e0 01             CPX  #1
6b5a fa                PLX
6b5b 90 08             BCC  _regc
6b5d c9 3b             CMP  #';'            ; register
6b5f f0 0a             BEQ  _return
6b61 c9 3f             CMP  #'?'            ; help
6b63 f0 06             BEQ  _return
6b65 c9 00    _regc    CMP  #0
6b67 f0 02             BEQ  _return
6b69 c9 3a             CMP  #':'
6b6b 60       _return  RTS
6b6c          EndMod [Get_Char] Size = 28 [$1c]

              **************
              Module Dec_LDA
              **************

6b6c a5 65             LDA  Long_DA
6b6e 05 66             ORA  Long_DA+1
6b70 d0 02             BNE  _skip
6b72 c3 67             DEW  Long_DA+2
6b74 c3 65    _skip    DEW  Long_DA
6b76 60                RTS
6b77          EndMod [Dec_LDA] Size = 11 [$b]

              **************
              Module Dec_LCT
              **************

6b77 a5 5d             LDA  Long_CT
6b79 05 5e             ORA  Long_CT+1
6b7b d0 02             BNE  _skip
6b7d c3 5f             DEW  Long_CT+2
6b7f c3 5d    _skip    DEW  Long_CT
6b81 a5 60             LDA  Long_CT+3         ; set N flag
6b83 60                RTS
6b84          EndMod [Dec_LCT] Size = 13 [$d]

              **************
              Module Add_LPC
              **************

6b84 18                CLC
6b85 65 61             ADC  Long_PC
6b87 85 61             STA  Long_PC
6b89 90 06             BCC  _return
6b8b e6 62             INC  Long_PC+1
6b8d d0 02             BNE  _return
6b8f e3 63             INW  Long_PC+2
6b91 60       _return  RTS

              ******************
              Module Param_Range
              ******************

              ; read two (address) parameters

              ; Long_CT = difference (2nd. minus 1st.)
              ; Long_PC = 1st. parameter
              ; Long_DA = 2nd. parameter

              ; carry on exit flags error

6b92 b0 15             BCS  _error
6b94 20 62 61          JSR  LAC_To_LPC
6b97 20 f9 69          JSR  Got_LAC
6b9a b0 0d             BCS  _error
6b9c 20 84 61          JSR  LAC_To_LDA
6b9f 20 af 61          JSR  LAC_Minus_LPC
6ba2 20 73 61          JSR  LAC_To_LCT
6ba5 90 02             BCC  _error
6ba7 18                CLC
6ba8 60                RTS
6ba9 38       _error   SEC
6baa 60                RTS
6bab          EndMod [Param_Range] Size = 25 [$19]

              ****************
              Module Converter
              ****************

6bab a2 00             LDX  #0
6bad 86 6e             STX  Buf_Index
6baf 20 f9 69          JSR  Got_LAC
6bb2 a2 00             LDX  #0
6bb4 da       _loop    PHX
6bb5 20 25 6b          JSR  CR_Erase
6bb8 bd 1b 61          LDA  Cons_Prefix,X
6bbb 20 d2 ff          JSR  CHROUT
6bbe 8a                TXA
6bbf 0a                ASL  A
6bc0 aa                TAX
6bc1 23 cd 6b          JSR  (Conv_Tab,X)
6bc4 fa                PLX
6bc5 e8                INX
6bc6 e0 04             CPX  #4
6bc8 90 ea             BCC  _loop
6bca 4c a5 60          JMP  Main

6bcd 0a 6c    Conv_Tab .WORD Print_Hexval
6bcf 13 6c             .WORD Print_Decimal
6bd1 db 6b             .WORD Print_Octal
6bd3 d5 6b             .WORD Print_Dual
6bd5          EndMod [Converter] Size = 42 [$2a]

              *****************
              Module Print_Dual
              *****************

6bd5 a2 18             LDX  #24               ; digits
6bd7 a0 01             LDY  #1                ; bits per digit
6bd9 80 04             BRA  _entry

              ***********
6bdb          Print_Octal
              ***********

6bdb a2 08             LDX  #8                ; digits
6bdd a0 03             LDY  #3                ; bits per digit

6bdf 20 73 61 _entry   JSR  LAC_To_LCT
6be2 a3 00             LDZ  #0
6be4 64 61             STZ  Long_PC
6be6 a3 30             LDZ  #'0'
6be8 5a                PHY                    ; save start value
6be9 7a       _loopa   PLY                    ; reinitialise
6bea 5a                PHY
6beb a9 00             LDA  #0
6bed 06 5d    _loopb   ASL  Long_CT
6bef eb 5e 00          ROW  Long_CT+1
6bf2 2a                ROL  A
6bf3 88                DEY
6bf4 d0 f7             BNE  _loopb
6bf6 e0 01             CPX  #1                ; print last character
6bf8 f0 04             BEQ  _skip
6bfa 05 61             ORA  Long_PC
6bfc f0 07             BEQ  _next
6bfe 09 30    _skip    ORA  #'0'
6c00 64 61             STZ  Long_PC
6c02 20 d2 ff          JSR  CHROUT
6c05 ca       _next    DEX
6c06 d0 e1             BNE  _loopa
6c08 7a                PLY                    ; cleanup stack
6c09 60                RTS
6c0a          EndMod [Print_Dual] Size = 53 [$35]

              *******************
              Module Print_Hexval
              *******************

6c0a 20 62 61         JSR  LAC_To_LPC
6c0d a9 00            LDA  #0
6c0f 85 64            STA  Long_PC+3
6c11 80 32            BRA  Print_BCD
6c13          EndMod [Print_Hexval] Size = 9 [$9]

              ********************
              Module Print_Decimal
              ********************

              ; max $ffffff = 16777215 (8 digits)

6c13 20 73 61          JSR  LAC_To_LCT
6c16 a2 03             LDX  #3                ; 4 BCD bytes = 8 digits
6c18 a9 00             LDA  #0
6c1a 95 61    _clear   STA  Long_PC,X
6c1c ca                DEX
6c1d 10 fb             BPL  _clear

6c1f a2 20             LDX  #32               ; source bits
6c21 f8                SED
6c22 06 5d    _loop    ASL  Long_CT
6c24 26 5e             ROL  Long_CT+1
6c26 eb 5f 00          ROW  Long_CT+2
6c29 a5 61             LDA  Long_PC
6c2b 65 61             ADC  Long_PC
6c2d 85 61             STA  Long_PC
6c2f a5 62             LDA  Long_PC+1
6c31 65 62             ADC  Long_PC+1
6c33 85 62             STA  Long_PC+1
6c35 a5 63             LDA  Long_PC+2
6c37 65 63             ADC  Long_PC+2
6c39 85 63             STA  Long_PC+2
6c3b a5 64             LDA  Long_PC+3
6c3d 65 64             ADC  Long_PC+3
6c3f 85 64             STA  Long_PC+3
6c41 ca                DEX
6c42 d0 de             BNE  _loop
6c44 d8                CLD
6c45          EndMod [Print_Decimal] Size = 50 [$32]

              ****************
              Module Print_BCD
              ****************

6c45 a9 00             LDA  #0
6c47 85 5d             STA  Long_CT
6c49 a3 30             LDZ  #'0'
6c4b a0 08             LDY  #8                ; max. digits
6c4d a2 03    _loopa   LDX  #3                ; 4 bytes
6c4f a9 00             LDA  #0
6c51 06 61    _loopb   ASL  Long_PC
6c53 26 62             ROL  Long_PC+1
6c55 eb 63 00          ROW  Long_PC+2
6c58 2a                ROL  A
6c59 ca                DEX
6c5a 10 f5             BPL  _loopb

6c5c c0 01             CPY  #1                ; print last character
6c5e f0 04             BEQ  _skip
6c60 05 5d             ORA  Long_CT
6c62 f0 0d             BEQ  _next
6c64 09 30    _skip    ORA  #'0'
6c66 64 5d             STZ  Long_CT
6c68 c9 3a             CMP  #$3a
6c6a 90 02             BCC  _print
6c6c 69 06             ADC  #6                ; + carry
6c6e 20 d2 ff _print   JSR  CHROUT
6c71 88       _next    DEY
6c72 d0 d9             BNE  _loopa
6c74 60                RTS
6c75          EndMod [Print_BCD] Size = 48 [$30]


              ***************
              Module Mon_Disk
              ***************

6c75 a2 01             LDX  #1
6c77 bd 00 02          LDA  Buffer,X
6c7a c9 24             CMP  #'$'
6c7c f0 05             BEQ  _laba

              ; calculate length of string

6c7e a6 6e             LDX  Buf_Index
6c80 bd 00 02          LDA  Buffer,X
6c83 85 5d    _laba    STA  Long_CT
6c85 da                PHX
6c86 a9 ff             LDA  #-1

6c88 1a       _loopa   INC  A
6c89 e8                INX
6c8a bc ff 01          LDY  Buffer-1,X
6c8d d0 f9             BNE  _loopa

6c8f fa                PLX                    ; address low
6c90 a0 02             LDY  #>Buffer          ; address high
6c92 20 bd ff          JSR  SETNAM

6c95 a0 0f             LDY  #15               ; SA = command
6c97 a5 5d             LDA  Long_CT
6c99 c9 24             CMP  #'$'
6c9b d0 02             BNE  _nodir
6c9d a0 60             LDY  #$60              ; SA = directory
6c9f a9 00    _nodir   LDA  #0                ; lfn for PRG reading
6ca1 a6 59             LDX  Long_AC              ; device
6ca3 20 ba ff          JSR  SETLFS
6ca6 20 c0 ff          JSR  OPEN
6ca9 b0 12             BCS  _return
6cab 20 cc ff          JSR  CLRCHN
6cae 20 20 6b          JSR  Print_CR
6cb1 a2 00             LDX  #0
6cb3 20 c6 ff          JSR  CHKIN
6cb6 b0 05             BCS  _return
6cb8 a5 5d             LDA  Long_CT
6cba c9 24             CMP  #'$'
6cbc 18                CLC
6cbd 60       _return  RTS
6cbe          EndMod [Mon_Disk] Size = 73 [$49]

              **************
              Module Mon_DOS
              **************

6cbe d0 04             BNE  _device
6cc0 a2 08             LDX  #8                ; default device
6cc2 86 59             STX  Long_AC
6cc4 a6 59    _device  LDX  Long_AC              ; device

6cc6 e0 04             CPX  #4
6cc8 93 09 f4          LBCC Mon_Error
6ccb e0 1f             CPX  #31
6ccd b3 04 f4          LBCS Mon_Error

6cd0 20 75 6c          JSR  Mon_Disk
6cd3 b0 10             BCS  DOS_Exit
6cd5 f0 1a             BEQ  Directory

6cd7 20 cf ff _loop    JSR  CHRIN
6cda 20 d2 ff          JSR  CHROUT
6cdd a6 90             LDX  STATUS
6cdf d0 04             BNE  DOS_Exit
6ce1 c9 20             CMP  #' '
6ce3 b0 f2             BCS  _loop
6ce5          EndMod [Mon_DOS] Size = 39 [$27]

              ***************
              Module DOS_Exit
              ***************

6ce5 20 cc ff          JSR  CLRCHN
6ce8 a9 00             LDA  #0                ; lfn
6cea 38                SEC                    ; special CLOSE
6ceb 20 c3 ff          JSR  CLOSE
6cee 4c a5 60          JMP  Main
6cf1          EndMod [DOS_Exit] Size = 12 [$c]

              ****************
              Module Directory
              ****************

6cf1 a3 06             LDZ  #6                ; load address, pseudo link, pseudo number
6cf3 aa       _loopb   TAX                    ; X = previous byte
6cf4 20 cf ff          JSR  CHRIN             ; A = current  byte
6cf7 a4 90             LDY  STATUS
6cf9 d0 ea             BNE  DOS_Exit
6cfb 3b                DEZ
6cfc d0 f5             BNE  _loopb            ; X/A = last read word

6cfe 86 59             STX  Long_AC
6d00 85 5a             STA  Long_AC+1
6d02 20 13 6c          JSR  Print_Decimal     ; file size
6d05 20 1b 6b          JSR  Print_Blank

6d08 20 cf ff _loopc   JSR  CHRIN             ; print file entry
6d0b f0 09             BEQ  _cr
6d0d a4 90             LDY  STATUS
6d0f d0 d4             BNE  DOS_Exit
6d11 20 d2 ff          JSR  CHROUT
6d14 90 f2             BCC  _loopc

6d16 20 20 6b _cr      JSR  Print_CR
6d19 20 e1 ff          JSR  STOP
6d1c f0 c7             BEQ  DOS_Exit
6d1e a3 04             LDZ  #4
6d20 80 d1             BRA  _loopb            ; next file
6d22          EndMod [Directory] Size = 49 [$31]

              ; The 3 letter mnemonics are encoded as three 5-bit values
              ; and stored in a left byte MNE_L and a right byte MNE_R
              ; The 5 bit value is computed by subtracting $3f from the
              ; ASCII value, so '?'-> 0, '@'->1, 'A'->2, 'B'->3,'Z'->27
              ; For example "ADC" is encoded as 2, 5, 4
              ; ----------------
              ; 7654321076543210
              ; 00010
              ;      00101
              ;           00100
              ;                0
              ;
              ; The operator >" stores the right byte of the packed value
              ; The operator <" stores the left  byte of the packed value

              *****
6d22          MNE_L
              *****

6d22 11                .BYTE >"ADC"
6d23 13                .BYTE >"AND"
6d24 15                .BYTE >"ASL"
6d25 15                .BYTE >"ASR"
6d26 15                .BYTE >"ASW"
6d27 18                .BYTE >"BBR"
6d28 18                .BYTE >"BBS"
6d29 19                .BYTE >"BCC"
6d2a 19                .BYTE >"BCS"
6d2b 19                .BYTE >"BEQ"
6d2c 1a                .BYTE >"BIT"
6d2d 1b                .BYTE >"BMI"
6d2e 1b                .BYTE >"BNE"
6d2f 1c                .BYTE >"BPL"
6d30 1c                .BYTE >"BRA"
6d31 1c                .BYTE >"BRK"
6d32 1d                .BYTE >"BSR"
6d33 1d                .BYTE >"BVC"
6d34 1d                .BYTE >"BVS"
6d35 23                .BYTE >"CLC"
6d36 23                .BYTE >"CLD"
6d37 23                .BYTE >"CLE"
6d38 23                .BYTE >"CLI"
6d39 23                .BYTE >"CLV"
6d3a 23                .BYTE >"CMP"
6d3b 24                .BYTE >"CPX"
6d3c 24                .BYTE >"CPY"
6d3d 24                .BYTE >"CPZ"
6d3e 29                .BYTE >"DEC"
6d3f 29                .BYTE >"DEW"
6d40 29                .BYTE >"DEX"
6d41 29                .BYTE >"DEY"
6d42 29                .BYTE >"DEZ"
6d43 34                .BYTE >"EOR"
6d44 53                .BYTE >"INC"
6d45 53                .BYTE >"INW"
6d46 53                .BYTE >"INX"
6d47 53                .BYTE >"INY"
6d48 53                .BYTE >"INZ"
6d49 5b                .BYTE >"JMP"
6d4a 5d                .BYTE >"JSR"
6d4b 69                .BYTE >"LDA"
6d4c 69                .BYTE >"LDX"
6d4d 69                .BYTE >"LDY"
6d4e 69                .BYTE >"LDZ"
6d4f 6d                .BYTE >"LSR"
6d50 70                .BYTE >"MAP"
6d51 79                .BYTE >"NEG"
6d52 7c                .BYTE >"NOP"
6d53 84                .BYTE >"ORA"
6d54 8a                .BYTE >"PHA"
6d55 8a                .BYTE >"PHP"
6d56 8a                .BYTE >"PHW"
6d57 8a                .BYTE >"PHX"
6d58 8a                .BYTE >"PHY"
6d59 8a                .BYTE >"PHZ"
6d5a 8b                .BYTE >"PLA"
6d5b 8b                .BYTE >"PLP"
6d5c 8b                .BYTE >"PLX"
6d5d 8b                .BYTE >"PLY"
6d5e 8b                .BYTE >"PLZ"
6d5f 9b                .BYTE >"RMB"
6d60 9c                .BYTE >"ROL"
6d61 9c                .BYTE >"ROR"
6d62 9c                .BYTE >"ROW"
6d63 9d                .BYTE >"RTI"
6d64 9d                .BYTE >"RTS"
6d65 a0                .BYTE >"SBC"
6d66 a1                .BYTE >"SEC"
6d67 a1                .BYTE >"SED"
6d68 a1                .BYTE >"SEE"
6d69 a1                .BYTE >"SEI"
6d6a a3                .BYTE >"SMB"
6d6b a5                .BYTE >"STA"
6d6c a5                .BYTE >"STX"
6d6d a5                .BYTE >"STY"
6d6e a5                .BYTE >"STZ"
6d6f a8                .BYTE >"TAB"
6d70 a8                .BYTE >"TAX"
6d71 a8                .BYTE >"TAY"
6d72 a8                .BYTE >"TAZ"
6d73 a8                .BYTE >"TBA"
6d74 ac                .BYTE >"TRB"
6d75 ad                .BYTE >"TSB"
6d76 ad                .BYTE >"TSX"
6d77 ad                .BYTE >"TSY"
6d78 ae                .BYTE >"TXA"
6d79 ae                .BYTE >"TXS"
6d7a ae                .BYTE >"TYA"
6d7b ae                .BYTE >"TYS"
6d7c ae                .BYTE >"TZA"

              *****
6d7d          MNE_R
              *****

6d7d 48                .BYTE <"ADC" ; 00
6d7e ca                .BYTE <"AND" ; 01
6d7f 1a                .BYTE <"ASL" ; 02
6d80 26                .BYTE <"ASR" ; 03
6d81 30                .BYTE <"ASW" ; 04
6d82 e6                .BYTE <"BBR" ; 05
6d83 e8                .BYTE <"BBS" ; 06
6d84 08                .BYTE <"BCC" ; 07
6d85 28                .BYTE <"BCS" ; 08
6d86 a4                .BYTE <"BEQ" ; 09
6d87 aa                .BYTE <"BIT" ; 0a
6d88 94                .BYTE <"BMI" ; 0b
6d89 cc                .BYTE <"BNE" ; 0c
6d8a 5a                .BYTE <"BPL" ; 0d
6d8b c4                .BYTE <"BRA" ; 0e
6d8c d8                .BYTE <"BRK" ; 0f
6d8d 26                .BYTE <"BSR" ; 10
6d8e c8                .BYTE <"BVC" ; 11
6d8f e8                .BYTE <"BVS" ; 12
6d90 48                .BYTE <"CLC" ; 13
6d91 4a                .BYTE <"CLD" ; 14
6d92 4c                .BYTE <"CLE" ; 15
6d93 54                .BYTE <"CLI" ; 16
6d94 6e                .BYTE <"CLV" ; 17
6d95 a2                .BYTE <"CMP" ; 18
6d96 72                .BYTE <"CPX" ; 19
6d97 74                .BYTE <"CPY" ; 1a
6d98 76                .BYTE <"CPZ" ; 1b
6d99 88                .BYTE <"DEC" ; 1c
6d9a b0                .BYTE <"DEW" ; 1d
6d9b b2                .BYTE <"DEX" ; 1e
6d9c b4                .BYTE <"DEY" ; 1f
6d9d b6                .BYTE <"DEZ"
6d9e 26                .BYTE <"EOR"
6d9f c8                .BYTE <"INC"
6da0 f0                .BYTE <"INW"
6da1 f2                .BYTE <"INX"
6da2 f4                .BYTE <"INY"
6da3 f6                .BYTE <"INZ"
6da4 a2                .BYTE <"JMP"
6da5 26                .BYTE <"JSR"
6da6 44                .BYTE <"LDA"
6da7 72                .BYTE <"LDX"
6da8 74                .BYTE <"LDY"
6da9 76                .BYTE <"LDZ"
6daa 26                .BYTE <"LSR"
6dab a2                .BYTE <"MAP"
6dac 90                .BYTE <"NEG"
6dad 22                .BYTE <"NOP"
6dae c4                .BYTE <"ORA"
6daf 44                .BYTE <"PHA"
6db0 62                .BYTE <"PHP"
6db1 70                .BYTE <"PHW"
6db2 72                .BYTE <"PHX"
6db3 74                .BYTE <"PHY"
6db4 76                .BYTE <"PHZ"
6db5 44                .BYTE <"PLA"
6db6 62                .BYTE <"PLP"
6db7 72                .BYTE <"PLX"
6db8 74                .BYTE <"PLY"
6db9 76                .BYTE <"PLZ"
6dba 86                .BYTE <"RMB"
6dbb 1a                .BYTE <"ROL"
6dbc 26                .BYTE <"ROR"
6dbd 30                .BYTE <"ROW"
6dbe 54                .BYTE <"RTI"
6dbf 68                .BYTE <"RTS"
6dc0 c8                .BYTE <"SBC"
6dc1 88                .BYTE <"SEC"
6dc2 8a                .BYTE <"SED"
6dc3 8c                .BYTE <"SEE"
6dc4 94                .BYTE <"SEI"
6dc5 86                .BYTE <"SMB"
6dc6 44                .BYTE <"STA"
6dc7 72                .BYTE <"STX"
6dc8 74                .BYTE <"STY"
6dc9 76                .BYTE <"STZ"
6dca 86                .BYTE <"TAB"
6dcb b2                .BYTE <"TAX"
6dcc b4                .BYTE <"TAY"
6dcd b6                .BYTE <"TAZ"
6dce c4                .BYTE <"TBA"
6dcf c6                .BYTE <"TRB"
6dd0 06                .BYTE <"TSB"
6dd1 32                .BYTE <"TSX"
6dd2 34                .BYTE <"TSY"
6dd3 44                .BYTE <"TXA"
6dd4 68                .BYTE <"TXS"
6dd5 84                .BYTE <"TYA"
6dd6 a8                .BYTE <"TYS"
6dd7 c4                .BYTE <"TZA"

              *********
6dd8          MNE_Index
              *********

              ; an index for all 256 opcodes, describing
              ; where to find the 3-letter mnemonic

6dd8 0f 31 15          .BYTE $0f,$31,$15,$46,$53,$31,$02,$3d
6de0 33 31 02          .BYTE $33,$31,$02,$55,$53,$31,$02,$05
6de8 0d 31 31          .BYTE $0d,$31,$31,$0d,$52,$31,$02,$3d
6df0 13 31 22          .BYTE $13,$31,$22,$26,$52,$31,$02,$05
6df8 28 01 28          .BYTE $28,$01,$28,$28,$0a,$01,$3e,$3d
6e00 39 01 3e          .BYTE $39,$01,$3e,$59,$0a,$01,$3e,$05
6e08 0b 01 01          .BYTE $0b,$01,$01,$0b,$0a,$01,$3e,$3d
6e10 44 01 1c          .BYTE $44,$01,$1c,$20,$0a,$01,$3e,$05
6e18 41 21 2f          .BYTE $41,$21,$2f,$03,$03,$21,$2d,$3d
6e20 32 21 2d          .BYTE $32,$21,$2d,$50,$27,$21,$2d,$05
6e28 11 21 21          .BYTE $11,$21,$21,$11,$03,$21,$2d,$3d
6e30 16 21 36          .BYTE $16,$21,$36,$4d,$2e,$21,$2d,$05
6e38 42 00 42          .BYTE $42,$00,$42,$10,$4c,$00,$3f,$3d
6e40 38 00 3f          .BYTE $38,$00,$3f,$5a,$27,$00,$3f,$05
6e48 12 00 00          .BYTE $12,$00,$00,$12,$4c,$00,$3f,$3d
6e50 47 00 3b          .BYTE $47,$00,$3b,$51,$27,$00,$3f,$05
6e58 0e 49 49          .BYTE $0e,$49,$49,$0e,$4b,$49,$4a,$48
6e60 1f 0a 56          .BYTE $1f,$0a,$56,$4b,$4b,$49,$4a,$06
6e68 07 49 49          .BYTE $07,$49,$49,$07,$4b,$49,$4a,$48
6e70 58 49 57          .BYTE $58,$49,$57,$4a,$4c,$49,$4c,$06
6e78 2b 29 2a          .BYTE $2b,$29,$2a,$2c,$2b,$29,$2a,$48
6e80 4f 29 4e          .BYTE $4f,$29,$4e,$2c,$2b,$29,$2a,$06
6e88 08 29 29          .BYTE $08,$29,$29,$08,$2b,$29,$2a,$48
6e90 17 29 54          .BYTE $17,$29,$54,$2c,$2b,$29,$2a,$06
6e98 1a 18 1b          .BYTE $1a,$18,$1b,$1d,$1a,$18,$1c,$48
6ea0 25 18 1e          .BYTE $25,$18,$1e,$04,$1a,$18,$1c,$06
6ea8 0c 18 18          .BYTE $0c,$18,$18,$0c,$1b,$18,$1c,$48
6eb0 14 18 35          .BYTE $14,$18,$35,$37,$1b,$18,$1c,$06
6eb8 19 43 29          .BYTE $19,$43,$29,$23,$19,$43,$22,$48
6ec0 24 43 30          .BYTE $24,$43,$30,$40,$19,$43,$22,$06
6ec8 09 43 43          .BYTE $09,$43,$43,$09,$34,$43,$22,$48
6ed0 45 43 3a          .BYTE $45,$43,$3a,$3c,$34,$43,$22,$06

              *****
6ed8          BRAIN
              *****

              ;              index values for branch mnemonics

              ;              BCC BCS BEQ BMI BNE BPL BRA BSR BVC BVS
6ed8 07 08 09          .BYTE $07,$08,$09,$0b,$0c,$0d,$0e,$10,$11,$12

              *******
6ee2          LEN_ADM
              *******

              ; a table of instruction length, flags
              ; and address mode for all 256 opcodes

              ; 7-6: operand length %00.. 0: implied
              ;                     %01.. 1: direct page, indirect
              ;                     %10.. 2: absolute, etc.
              ;                     %11.. 3: BBR and BBS

              ;   5: relative       %0110 0000 $60 short branch
              ;                     %1010 0000 $a0 long  branch

              ;   4:

              ; 3-0: index of address mode


6ee2 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $00
6eea 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $08
6ef2 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $10
6efa 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $18
6f02 80 44 8b          .BYTE $80,$44,$8b,$84,$40,$40,$40,$40 ; $20
6f0a 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $28
6f12 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $30
6f1a 00 88 00          .BYTE $00,$88,$00,$00,$87,$87,$87,$c0 ; $38
6f22 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $40
6f2a 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $48
6f32 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $50
6f3a 00 88 00          .BYTE $00,$88,$00,$00,$00,$87,$87,$c0 ; $58
6f42 00 44 41          .BYTE $00,$44,$41,$a0,$40,$40,$40,$40 ; $60
6f4a 00 41 00          .BYTE $00,$41,$00,$00,$8b,$80,$80,$c0 ; $68
6f52 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $70
6f5a 00 88 00          .BYTE $00,$88,$00,$00,$84,$87,$87,$c0 ; $78
6f62 60 44 4d          .BYTE $60,$44,$4d,$a0,$40,$40,$40,$40 ; $80
6f6a 00 41 00          .BYTE $00,$41,$00,$87,$80,$80,$80,$c0 ; $88
6f72 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $90
6f7a 00 88 00          .BYTE $00,$88,$00,$88,$80,$87,$87,$c0 ; $98
6f82 41 44 41          .BYTE $41,$44,$41,$41,$40,$40,$40,$40 ; $a0
6f8a 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $a8
6f92 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $b0
6f9a 00 88 00          .BYTE $00,$88,$00,$87,$87,$87,$88,$c0 ; $b8
6fa2 41 44 41          .BYTE $41,$44,$41,$40,$40,$40,$40,$40 ; $c0
6faa 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $c8
6fb2 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $d0
6fba 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $d8
6fc2 41 44 4d          .BYTE $41,$44,$4d,$40,$40,$40,$40,$40 ; $e0
6fca 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $e8
6fd2 60 45 46          .BYTE $60,$45,$46,$a0,$81,$47,$47,$40 ; $f0
6fda 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $f8

              ******
6fe2          ADMODE
              ******

              ; printout flags for 16 address modes
              ;               76543210
              ;               --------
              ;            7  x         #
              ;            6   x        (
              ;            5    x       ,
              ;            4     x      SP
              ;            3      x     )
              ;            2       x    ,
              ;            1/0      xx  01:X  10:Y  11:Z

6fe2 00                .BYTE %00000000 ; 0             implicit/direct
6fe3 80                .BYTE %10000000 ; 1 #$nn        immediate
6fe4 00                .BYTE %00000000 ; 2             ----------
6fe5 00                .BYTE %00000000 ; 3             ----------
6fe6 69                .BYTE %01101001 ; 4 ($nn,X)     indirect X
6fe7 4e                .BYTE %01001110 ; 5 ($nn),Y     indirect Y
6fe8 4f                .BYTE %01001111 ; 6 ($nn),Z     indirect Z
6fe9 05                .BYTE %00000101 ; 7 $nn,X       indexed  X
6fea 06                .BYTE %00000110 ; 8 $nn,Y       indexed  Y
6feb 05                .BYTE %00000101 ; 9 $nn,X       indexed  X
6fec 06                .BYTE %00000110 ; a $nn,Y       ----------
6fed 48                .BYTE %01001000 ; b ($nnnn,X)   JMP & JSR
6fee 69                .BYTE %01101001 ; c ($nn,X)     ----------
6fef 7e                .BYTE %01111110 ; d ($nn,SP),Y  LDA & STA
6ff0 00                .BYTE %00000000 ; e
6ff1 04                .BYTE %00000100 ; f

              ;              ASL INC ROL DEC LSR ROR NEG ASR
6ff2 0a 1a 2a ACCUMODE .BYTE $0a,$1a,$2a,$3a,$4a,$6a,$42,$43

6ffa 10 0a 08 Num_Base .BYTE 16,10, 8, 2 ; hex, dec, oct, bin
6ffe 04 03 03 Num_Bits .BYTE  4, 3, 3, 1 ; hex, dec, oct, bin

7002 58 59 5a Index_Char .BYTE "XYZ"

              ***************
              Module Reg_Text
              ***************
7005 20 7d ff          JSR  PRIMM
7008 0d 20 20          .BYTE "\r    PC   SR AC XR YR ZR BP  SP  NVEBDIZC\r; \eQ",0
7037 60                RTS
7038          EndMod [Reg_Text] Size = 51 [$33]

              ***************
              Module Mon_Help
              ***************
7038 20 7d ff    JSR PRIMM

703b 96 41 05    .BYTE LRED,"A",WHITE,"SSEMBLE     - A ADDRESS MNEMONIC OPERAND",CR
7067 96 43 05    .BYTE LRED,"C",WHITE,"OMPARE      - C FROM TO WITH",CR
7087 96 44 05    .BYTE LRED,"D",WHITE,"ISASSEMBLE  - D [FROM [TO]]",CR
70a6 96 46 05    .BYTE LRED,"F",WHITE,"ILL         - F FROM TO FILLBYTE",CR
70ca 96 47 05    .BYTE LRED,"G",WHITE,"O           - G [ADDRESS]",CR
70e7 96 48 05    .BYTE LRED,"H",WHITE,"UNT         - H FROM TO (STRING OR BYTES)",CR
7114 96 4a 05    .BYTE LRED,"J",WHITE,"SR          - J ADDRESS",CR
712f 96 4c 05    .BYTE LRED,"L",WHITE,"OAD         - L FILENAME [UNIT [ADDRESS]]",CR
715c 96 4d 05    .BYTE LRED,"M",WHITE,"EMORY       - M [FROM [TO]]",CR
717b 96 52 05    .BYTE LRED,"R",WHITE,"EGISTERS    - R",CR
718e 96 53 05    .BYTE LRED,"S",WHITE,"AVE         - S FILENAME UNIT FROM TO",CR
71b7 96 54 05    .BYTE LRED,"T",WHITE,"RANSFER     - T FROM TO TARGET",CR
71d9 96 56 05    .BYTE LRED,"V",WHITE,"ERIFY       - V FILENAME [UNIT [ADDRESS]]",CR
7206 45 96 58    .BYTE "E",LRED,"X",WHITE,"IT         - X",CR
7219 96 2e 05    .BYTE LRED,".",WHITE,"<DOT>       - . ADDRESS MNEMONIC OPERAND",CR
7245 96 3e 05    .BYTE LRED,">",WHITE,"<GREATER>   - > ADDRESS BYTE SEQUENCE",CR
726e 96 3b 05    .BYTE LRED,";",WHITE,"<SEMICOLON> - ; REGISTER CONTENTS",CR
7293 96 40 05    .BYTE LRED,"@",WHITE,"DOS         - @ [DOS COMMAND]",CR
72b4 96 3f 05    .BYTE LRED,"?",WHITE,"HELP        - ?",CR
72c7 00          .BYTE 0
72c8 4c a5 60    JMP Main
72cb          End_Mod

72cb ff ff ff          .FILL $8000-* ($ff) ; 3749 bytes ; 3381 bytes


  373 Symbols
-------------
Bank                           $0002    28D   262    265    321    329
                                       500    502    504    755
PCH                            $0003    29D   250    258    293
PCL                            $0004    30D   256    259    291
SR                             $0005    31D   345
WHITE                          $0005    14D   449    718    726    868
                                       882   1751   2060   2862   2863
                                      2864   2865   2866   2867   2868
                                      2869   2870   2871   2872   2873
                                      2874   2875   2876   2877   2878
                                      2879   2880
AC                             $0006    32D   279
XR                             $0007    33
YR                             $0008    34
ZR                             $0009    35
BP                             $000a    41
SPH                            $000b    42D   303    337
SPL                            $000c    43D   305    339    795    805
                                       809
CR                             $000d    18D   375    430   1478   2862
                                      2863   2864   2865   2866   2867
                                      2868   2869   2870   2871   2872
                                      2873   2874   2875   2876   2877
                                      2878   2879   2880
REV                            $0012    19D   430
CRIGHT                         $001d    20D   406
QUOTE                          $0022    21D  1018   1025
APOSTR                         $0027    22D   771    955
Long_AC                        $0059    56D   186    188    196    200
                                       499    501    503    514    516
                                       518    520    531    533    535
                                       537    548    550    552    554
                                       564    566    567    569    570
                                       572    573    575    584    586
                                       587    589    590    592    593
                                       595    603    605    607    609
                                       618    620    628    629    631
                                       632    678    679    682    754
                                       773    910    918    937    970
                                      1039   1048   1049   1091   1205
                                      1214   1381   1383   1384   1392
                                      1393   1448   1457   1516   1523
                                      1525   1526   1528   1595   1607
                                      1610   1942   1967   1998   1999
                                      2000   2012   2013   2015   2016
                                      2018   2019   2021   2022   2027
                                      2028   2030   2031   2033   2034
                                      2036   2037   2416   2437   2438
                                      2480   2481
Long_CT                        $005d    57D   189    190    192    193
                                       197    201    532    534    536
                                       538    565    568    571    574
                                      1376   1382   1390   1391   1707
                                      1709   1716   1717   1786   1789
                                      1803   1812   1855   1857   1868
                                      1871   1874   1879   1882   2189
                                      2190   2192   2193   2194   2288
                                      2289   2331   2332   2333   2356
                                      2370   2373   2397   2411   2425
Long_PC                        $0061    58D   515    517    519    521
                                       585    588    591    594    604
                                       606    608    610    640    642
                                       653    655    730    774    776
                                       818    820    836    838    917
                                       936   1055   1074   1075   1092
                                      1443   1446   1449   1458   1464
                                      1486   1490   1524   1527   1880
                                      1883   2052   2058   2063   2066
                                      2067   2203   2204   2206   2208
                                      2282   2295   2298   2312   2325
                                      2334   2335   2336   2337   2338
                                      2339   2340   2341   2342   2343
                                      2344   2345   2361   2362   2363
Long_DA                        $0065    59D   549    551    553    555
                                       698    701    704    719    727
                                       728    909    978    986   1107
                                      1143   1144   1153   1157   2008
                                      2009   2011   2014   2017   2020
                                      2177   2178   2180   2181
Adr_Flags                      $0069    63D  1659   1772   1775   1817
                                      1821   1827   1831   1835   1839
Mode_Flags                     $006a    64D  1201   1235   1244   1254
                                      1266   1276   1286   1299   1313
                                      1327   1341   1357   1403   1421
                                      1424   1539   1560   1569   1580
                                      1581
Op_Code                        $006b    65D  1173   1191   1192   1380
                                      1407   1437   1445   1463   1538
                                      1637   1651   1694   1704   1731
                                      1738   1756   1795
Op_Flag                        $006c    66D  1108   1128   1246   1296
                                      1409   1440   1635   1649   1666
                                      1698   1727   1737   1777   1802
                                      1810   1848   1887
COL                            $006d    67D  1211   1907   1913   1928
                                      1939   1959   1992   2044
Buf_Index                      $006e    68D   379   1021   1034   1224
                                      1896   1912   1960   1964   1965
                                      1966   1973   2149   2157   2158
                                      2242   2395
STATUS                         $0090    73D  1009   1066   2451   2475
                                      2487
VERCK                          $0093    74D   415   1050   1059   1067
LRED                           $0096    16D   726    866    880   2862
                                      2863   2864   2865   2866   2867
                                      2868   2869   2870   2871   2872
                                      2873   2874   2875   2876   2877
                                      2878   2879   2880
YELLOW                         $009e    15D   430   1692   2054
FNLEN                          $00b7    75D  1007   1028
SA                             $00b9    76D  1004   1054   1077
FA                             $00ba    77D  1002   1040
FNADR                          $00bb    78D  1011   1013   1027
BA                             $00bd    79D  1006   1044
FNBANK                         $00be    80D  1008
NDX                            $00d0    82
MODE_80                        $00d7    83D   676    779    864    878
B_Margin                       $00e4    85
T_Margin                       $00e5    86
L_Margin                       $00e6    87
R_Margin                       $00e7    88
QTSW                           $00f4    90D   834
Buffer                         $0200    92D   371    380   1022   1481
                                      1483   1492   1496   1504   1961
                                      2159   2389   2396   2403   2407
IIRQ                           $0314    94
IBRK                           $0316    95
EXMON                          $032e    96
Mon_Data                       $0400    99D   961    971    983   1010
                                      1012
X_Vector                       $0420   100D   292    294    483
Op_Size                        $042c   102D  1438   1439   1450   1469
                                      1470   1604   1605   1609   1665
                                      1667   1677   1769   1790   1809
                                      1859   1865   1888
Op_Mne                         $042d   103D  1125   1131   1138
Op_Bits                        $0434   105D  1208   1969   1975   1997
Op_Ix                          $0435   106D  1109   1217   1220   1263
                                      1297   1311   1325   1339   1355
                                      1366
Ix_Mne                         $0437   107D  1163   1365   1548
Op_Len                         $0439   108D  1110   1219   1419   1425
                                      1428   1576
Unit                           $1106   110D  1001
header                         $1fff   145
Link                           $2029   157D   149
header_loop                    $205a   196D   199    203
Monitor_Call                   $6000   217
Monitor_Break                  $6003   223
Monitor_Switch                 $6006   229
Mon_Break                      $6009   235D   226
Mon_Break_loop                 $601f   249D   247    252
Mon_Break_nopage               $602b   259D   257
Mon_Break_bank                 $6036   264D   262
Mon_Call                       $603c   270D   220
Mon_Call_loop                  $6043   279D   281
Mon_Call_store                 $6055   291D   288
Mon_Start                      $605f   298D   266
Mon_Register                   $606d   313D   465
Mon_Register_loopa             $6072   321D   325
Mon_Register_loopb             $607d   329D   333
Mon_Register_loopc             $6096   346D   354
Mon_Register_flag              $609e   351D   349
Main                           $60a5   358D   382    409    690    743
                                       759    787    810    915    923
                                       944    990    994   1057   1069
                                      1072   1096   1114   1602   1612
                                      2257   2465   2882
Main_A                         $60aa   367D  1509
Main_loop                      $60aa   370D   376
Main_getcomm                   $60c0   381D   384
Mon_Switch                     $60c9   388D   232
Mon_Switch_loop                $60cb   392D   395
Mon_Error                      $60d3   400D   374    674    715    897
                                       899    931    933    952    959
                                      1015   1019   1032   1052   1063
                                      1068   1086   1088   1103   1161
                                      1184   1186   1196   1203   1206
                                      1298   1301   1305   1312   1319
                                      1326   1331   1340   1347   1354
                                      1356   1359   1371   1375   1377
                                      1404   1420   1422   1598   1921
                                      2441   2443
Mon_Select                     $60e0   412D   393
Print_Commands                 $60f0   426D   240    273
Command_Char                   $610a   433D   392
Cons_Prefix                    $611b   440D  1952   2247
Load_Save_Verify               $6120   446
Jump_Table                     $6126   453D   422
Mon_Exit                       $6150   480D   467
LAC_To_PC                      $6153   486D   750    794    804
LAC_To_PC_error                $6161   505D   498
LAC_To_LPC                     $6162   509D   669    716    767   1043
                                      1104   1591   2224   2310
LAC_To_LCT                     $6173   526D  1223   2229   2280   2322
LAC_To_LDA                     $6184   543D  1996   2227
LAC_Plus_LCT                   $6195   560D   907
LAC_Minus_LPC                  $61af   580D   673   1597   2228
LAC_Compare_LPC                $61c9   600D   902
Inc_LAC                        $61da   615D   920    940
Inc_LAC_return                 $61e0   621D   619
Dec_LAC                        $61e1   625D   912
Dec_LAC_skip                   $61e9   632D   630
Inc_LPC                        $61ec   637D   739    919    941    991
                                      1093
Inc_LPC_return                 $61f2   643D   641
Fetch                          $61f3   647D   982   1636   1645   1650
                                      1673   1788   1854
Fetch_banked                   $61fa   655D   653
Mon_Memory                     $6200   662D   464
Mon_Memory_param               $6206   669D   666
Mon_Memory_shift               $621a   678D   676    681
Mon_Memory_row                 $6225   685D   667    671    689
Mon_Memory_exit                $6230   690D   686
Print_Bits                     $6233   694D   731
Print_Bits_loop                $6238   700D   706
Print_Bits_set                 $623f   703D   701
Mon_Bits                       $6249   712D   457
Mon_Bits_row                   $6258   722D   742
Mon_Bits_col                   $625e   725D   737
Mon_Set_Register               $6284   747D   471
Mon_Set_Register_loop          $6289   752D   758
Mon_Set_Register_exit          $6298   759D   753
Mon_Set_Memory                 $629b   763D   470
Mon_Set_Memory_loop            $62a2   769D   781
Mon_Set_Memory_valid           $62ab   773D   770
Mon_Set_Memory_banked          $62b1   776D   774
Mon_Set_Memory_next            $62bb   781D   779
Mon_Set_Memory_exit            $62bd   783D   766    772
Mon_Go                         $62ca   791D   461
Mon_JSR                        $62d3   801D   463
Dump_4_Bytes                   $62e2   814D   867    869
Dump_4_Bytes_loop              $62e5   818D   825
Dump_4_Bytes_banked            $62e9   820D   818
Dump_4_Chars                   $62f5   830D   881    883
Dump_4_Chars_loop              $62fc   836D   848
Dump_4_Chars_banked            $6300   838D   836
Dump_4_Chars_laba              $6309   843D   841
Dump_Row                       $6314   853D   687    786
Dump_Row_loop                  $6328   866D   864    871
Dump_Row_lchr                  $6343   880D   878    885
Mon_Transfer                   $6356   893D   466
Mon_Transfer_lpback            $636c   909D   914
Mon_Transfer_forward           $6380   917D   903    922
Mon_Compare                    $6394   927D   458
Mon_Compare_loop               $63a5   936D   943
Mon_Compare_laba               $63b0   940D   938
Mon_Hunt                       $63be   948D   462
Mon_Hunt_lpstr                 $63d5   961D   966
Mon_Hunt_bin                   $63e4   969D   956
Mon_Hunt_lpbin                 $63e7   970D   976
Mon_Hunt_hunt                  $63f6   978D   964    967    974
Mon_Hunt_lpstart               $63fb   981D   993
Mon_Hunt_lpins                 $63fd   982D   987
Mon_Hunt_next                  $640d   989D   984
Load_Save                      $641e   998D   417
Load_Save_skip                 $6439  1014D  1017
Load_Save_copyfn               $644a  1022D  1031
Load_Save_unit                 $6460  1034D  1026
Load_Save_exit                 $6496  1057D  1066
Load_Save_do                   $6499  1059D  1023   1036   1038   1042
                                      1078
Load_Save_exec                 $64a6  1065D  1061
Load_Save_load                 $64c1  1074D  1046
Mon_Fill                       $64cb  1082D   460
Mon_Fill_loop                  $64dc  1091D  1095
Mon_Assemble                   $64ec  1100D   456    469
Mon_Assemble_start             $64f2  1106D  1117
Mon_Assemble_getin             $64fe  1111D  1134
Mon_Assemble_laba              $6508  1116D  1112
Mon_Assemble_labb              $651e  1131D  1122   1124   1127
Mon_Assemble_lpenc             $6526  1138D  1148
Mon_Assemble_lpbit             $652e  1142D  1146
Mon_Assemble_lpfind            $653d  1154D  1160
Mon_Assemble_nxfind            $6549  1159D  1155
Mon_Assemble_found             $654f  1163D  1158
Mon_Assemble_lpopc             $6555  1169D  1172
Mon_Assemble_exopc             $655d  1173D  1170
Mon_Assemble_labc              $6583  1200D  1180
Mon_Assemble_labd              $6585  1201D  1238   1248   1257   1277
                                      1290   1303   1321   1333   1349
                                      1361
Mon_Assemble_labe              $65a3  1214D  1210
Mon_Assemble_labf              $65a8  1217D  1213   1215
Mon_Assemble_labg              $65b8  1224D  1204   1222
Mon_Assemble_lpnop             $65ba  1226D  1229
Mon_Assemble_lbra              $65d0  1242D  1234
Mon_Assemble_indir             $65de  1252D  1243
Mon_Assemble_comma             $65ea  1261D  1253
Mon_Assemble_comma1            $6607  1275D  1267   1269   1271
Mon_Assemble_stack             $660d  1281D  1262
Mon_Assemble_rbra              $6623  1294D  1282
Mon_Assemble_error             $663c  1305D  1236   1245   1255   1264
                                      1274   1285   1288   1296
Mon_Assemble_right             $663f  1309D  1295
Mon_Assemble_right1            $6658  1320D  1315   1317
Mon_Assemble_X                 $665d  1323D  1310
Mon_Assemble_X1                $6672  1332D  1329
Mon_Assemble_Y                 $6677  1337D  1324
Mon_Assemble_Y1                $6690  1348D  1343   1345
Mon_Assemble_Z                 $6695  1353D  1338
Mon_Assemble_adjust            $66ac  1365D  1227
Mon_Assemble_BB                $66c4  1376D  1373
Mon_Assemble_one               $66dc  1390D  1369
Mon_Assemble_lpbrain           $66e6  1395D  1398
Mon_Assemble_branch            $66f0  1403D  1396
Mon_Assemble_bran1             $6704  1412D  1409
Mon_Assemble_match             $6706  1416D  1367   1399
Mon_Assemble_lpmatch           $6709  1417D  1427
Mon_Assemble_okmat             $6725  1428D  1418
Mon_Assemble_store             $6729  1437D  1386   1412
Mon_Assemble_storen            $674c  1453D  1440
Mon_Assemble_lpsto             $6750  1457D  1461
Mon_Assemble_store1            $675a  1463D  1455
Mon_Assemble_print             $675f  1466D  1451
Mon_Assemble_auto              $678f  1489D  1487   1501
Branch_Target                  $67b6  1513D  1379   1406   1518
Match_Mode                     $67c9  1533D  1417
Match_Mode_loop                $67cd  1540D  1549
Match_Mode_next                $67d2  1545D  1550
Match_Mode_error               $67df  1552D  1546
Match_Mode_return              $67e0  1553D  1541
Mode_Index                     $67e1  1557D  1416
Mode_Index_loop                $67e5  1562D  1566
Mode_Index_found               $67f1  1569D  1563
Size_To_Mode                   $67f3  1573D  1426
Mon_Disassemble                $6800  1587D   459
Mon_Disassemble_nopar          $680a  1594D  1590
range                          $6810  1597D  1593
Mon_Disassemble_loop           $6816  1600D  1596   1611
Dis_Code                       $6838  1616D  1603
Print_Code                     $683e  1624D  1468
Print_Code_normal              $6864  1654D  1643   1648
Print_Code_norm1               $687f  1668D  1666
Print_Code_lphex               $6881  1673D  1679
Print_Code_lpfill              $6891  1683D  1688
Print_Code_long                $689f  1692D  1676   1684
Print_Code_locate              $68b4  1704D  1697
Print_Code_lpmne               $68c5  1714D  1725
Print_Code_lplet               $68c9  1716D  1720
Print_Code_biti                $68ea  1738D  1734
Print_Code_mne4                $68fa  1749D  1736
Print_Code_mne5                $68fd  1750D  1727   1747
Print_Code_lpaccu              $6909  1758D  1761
Print_Code_oper                $6919  1769D  1759
Print_Code_laba                $6926  1775D  1772
Print_Code_labb                $6930  1779D  1774   1777
Print_Code_labc                $6933  1780D  1775
Print_Code_lpfop               $693c  1787D  1791
Print_Code_proper              $6960  1809D  1802
Print_Code_lpoper              $6968  1812D  1810   1815
Print_Code_labd                $6986  1827D  1821
Print_Code_labe                $698e  1831D  1817   1827
Print_Code_labf                $6996  1835D  1807   1831
Print_Code_labg                $69ab  1848D  1835   1841
Print_Code_rel                 $69cb  1863D  1798
Print_Code_rela                $69cd  1864D  1861
Print_Code_labh                $69db  1873D  1869
Print_Code_lpinw               $69dc  1874D  1876
Print_Code_return              $69f6  1889D  1765   1770   1848   1887
Get_LAC                        $69f7  1893D   969
Got_LAC                        $69f9  1900D   421    670    752    769
                                       898    932    973   1037   1041
                                      1045   1087   1592   2225   2243
Got_LAC_delim                  $6a13  1917D  1911
Got_LAC_error                  $6a1b  1921D  1906
Got_LAC_noval                  $6a1e  1923D  1909   1914
Got_LAC_ok                     $6a21  1925D  1915   1918   1920
Got_LAC_return                 $6a22  1926D  1924
Read_Number                    $6a27  1933D  1202   1905
Read_Number_clear              $6a2f  1942D  1944
Read_Number_next               $6a34  1946D  1949
Read_Number_prefix             $6a40  1952D  1955
Read_Number_char               $6a59  1965D  1962
Read_Number_defhex             $6a67  1972D  1958
Read_Number_base               $6a6a  1974D  1953
Read_Number_digit              $6a70  1977D  2038
Read_Number_valid              $6a87  1988D  1982
Read_Number_laba               $6a98  1997D  1994
Read_Number_shift              $6a9b  1998D  2003
Read_Number_labc               $6ace  2025D  2006
Read_Number_error              $6ae5  2039D  1990   2001   2010   2023
Read_Number_exit               $6ae8  2041D  1947   1970   1978   1980
                                      1984   1986
Read_Number_return             $6ae9  2042D  2040
Hex_LPC                        $6aee  2049D   723    860    939    988
                                      1629
Hex_LPC_laba                   $6b07  2063D  2053
Hex_LPC_labb                   $6b0e  2066D  2062   2064
Print_XA_Hex                   $6b12  2071D  1886
Print_Hex_Blank                $6b18  2081D   330    340    821   1674
Print_Blank                    $6b1b  2088D  1630   1749   1750   2483
Print_CR                       $6b20  2096D   361    717    738    857
                                       934    979   1047   1089   2421
                                      2492
CR_Erase                       $6b25  2104D  1600   2246
Print_Hex                      $6b2d  2113D   322    338   1804   1813
                                      2057   2059   2065   2076   2084
A_To_Hex                       $6b39  2125D  1491   2117
A_To_Hex_nibble                $6b43  2137D  2129
A_To_Hex_lab                   $6b4b  2141D  2139
Got_Char                       $6b4e  2146D  1910
Get_Char                       $6b50  2153D   381    954    957    963
                                      1014   1035   1111   1182   1194
                                      1226   1283   1946   1977
Get_Char_regc                  $6b65  2167D  2162
Get_Char_return                $6b6b  2170D  2164   2166   2168
Dec_LDA                        $6b6c  2174D   911
Dec_LDA_skip                   $6b74  2181D  2179
Dec_LCT                        $6b77  2186D   913    921    942    992
                                      1094
Dec_LCT_skip                   $6b7f  2193D  2191
Add_LPC                        $6b84  2199D   887   1471   1606
Add_LPC_return                 $6b91  2209D  2205   2207
Param_Range                    $6b92  2212D   896    930    951   1085
Param_Range_error              $6ba9  2233D  2223   2226   2230
Converter                      $6bab  2238D   473    474    475    476
Converter_loop                 $6bb4  2245D  2256
Conv_Tab                       $6bcd  2259D  2252
Print_Dual                     $6bd5  2266D  2262
Print_Octal                    $6bdb  2274D  2261
Print_Dual_entry               $6bdf  2280D  2271
Print_Dual_loopa               $6be9  2285D  2301
Print_Dual_loopb               $6bed  2288D  2292
Print_Dual_skip                $6bfe  2297D  2294
Print_Dual_next                $6c05  2300D  2296
Print_Hexval                   $6c0a  2307D  2259
Print_Decimal                  $6c13  2317D  2260   2482
Print_Decimal_clear            $6c1a  2325D  2327
Print_Decimal_loop             $6c22  2331D  2347
Print_BCD                      $6c45  2352D  2313
Print_BCD_loopa                $6c4d  2359D  2379
Print_BCD_loopb                $6c51  2361D  2366
Print_BCD_skip                 $6c64  2372D  2369
Print_BCD_print                $6c6e  2377D  2375
Print_BCD_next                 $6c71  2378D  2371
Mon_Disk                       $6c75  2385D  2445
Mon_Disk_laba                  $6c83  2397D  2391
Mon_Disk_loopa                 $6c88  2401D  2404
Mon_Disk_nodir                 $6c9f  2415D  2413
Mon_Disk_return                $6cbd  2428D  2419   2424
Mon_DOS                        $6cbe  2432D   468
Mon_DOS_device                 $6cc4  2438D  2435
Mon_DOS_loop                   $6cd7  2449D  2454
DOS_Exit                       $6ce5  2458D  2446   2452   2476   2488
                                      2494
Directory                      $6cf1  2469D  2447
Directory_loopb                $6cf3  2473D  2478   2496
Directory_loopc                $6d08  2485D  2490
Directory_cr                   $6d16  2492D  2486
MNE_L                          $6d22  2515D  1154   1706
MNE_R                          $6d7d  2611D  1156   1708
MNE_Index                      $6dd8  2707D  1169   1547   1705
BRAIN                          $6ed8  2747D  1395
LEN_ADM                        $6ee2  2756D  1540   1654   1695   1796
ADMODE                         $6fe2  2810D  1562   1658
ACCUMODE                       $6ff2  2842D  1760
Num_Base                       $6ffa  2844D  1989
Num_Bits                       $6ffe  2845D  1974
Index_Char                     $7002  2847D  1843
Reg_Text                       $7005  2850D   316
Mon_Help                       $7038  2858D   472
End_Mod                        $72cb  2883
EXIT_OLD                       $cf2e   111D   289    290
EXIT                           $cfa4   112D   246    285    286    287
SETBNK                         $ff6b   114
JSRFAR                         $ff6e   115D   807
JMPFAR                         $ff71   116D   797
LDA_FAR                        $ff74   117
STA_FAR                        $ff77   118
PRIMM                          $ff7d   119D   238    405    429    783
                                       873   1070   1466   1477   1619
                                      1685   2107   2852   2860
SETMSG                         $ff90   120D   307
SETLFS                         $ffba   121D  2417
SETNAM                         $ffbd   122D  2408
OPEN                           $ffc0   123D  2418
CLOSE                          $ffc3   124D  2464
CHKIN                          $ffc6   125D  2423
CHKOUT                         $ffc9   126
CLRCHN                         $ffcc   127D  2420   2461
CHRIN                          $ffcf   128D   370   2449   2474   2485
CHROUT                         $ffd2   129D   351    703    729    817
                                       835    844    859   1493   1497
                                      1505   1693   1700   1723   1746
                                      1752   1764   1779   1781   1806
                                      1819   1823   1825   1829   1833
                                      1837   1844   1850   1852   2055
                                      2061   2092   2100   2118   2121
                                      2248   2299   2377   2450   2489
LOAD                           $ffd5   130D  1065
SAVE                           $ffd8   131D  1056
SETTIM                         $ffdb   132
GETTIM                         $ffde   133
STOP                           $ffe1   134D   685    989   1601   2493
GETIN                          $ffe4   135
CLALL                          $ffe7   136
SCAN                           $ffea   137
SCRORG                         $ffed   138
PLOT                           $fff0   139
Long_AC                        $0059    56D   186    188    196    200
                                       499    501    503    514    516
                                       518    520    531    533    535
                                       537    548    550    552    554
                                       564    566    567    569    570
                                       572    573    575    584    586
                                       587    589    590    592    593
                                       595    603    605    607    609
                                       618    620    628    629    631
                                       632    678    679    682    754
                                       773    910    918    937    970
                                      1039   1048   1049   1091   1205
                                      1214   1381   1383   1384   1392
                                      1393   1448   1457   1516   1523
                                      1525   1526   1528   1595   1607
                                      1610   1942   1967   1998   1999
                                      2000   2012   2013   2015   2016
                                      2018   2019   2021   2022   2027
                                      2028   2030   2031   2033   2034
                                      2036   2037   2416   2437   2438
                                      2480   2481
Long_PC                        $0061    58D   515    517    519    521
                                       585    588    591    594    604
                                       606    608    610    640    642
                                       653    655    730    774    776
                                       818    820    836    838    917
                                       936   1055   1074   1075   1092
                                      1443   1446   1449   1458   1464
                                      1486   1490   1524   1527   1880
                                      1883   2052   2058   2063   2066
                                      2067   2203   2204   2206   2208
                                      2282   2295   2298   2312   2325
                                      2334   2335   2336   2337   2338
                                      2339   2340   2341   2342   2343
                                      2344   2345   2361   2362   2363
Long_CT                        $005d    57D   189    190    192    193
                                       197    201    532    534    536
                                       538    565    568    571    574
                                      1376   1382   1390   1391   1707
                                      1709   1716   1717   1786   1789
                                      1803   1812   1855   1857   1868
                                      1871   1874   1879   1882   2189
                                      2190   2192   2193   2194   2288
                                      2289   2331   2332   2333   2356
                                      2370   2373   2397   2411   2425
Long_DA                        $0065    59D   549    551    553    555
                                       698    701    704    719    727
                                       728    909    978    986   1107
                                      1143   1144   1153   1157   2008
                                      2009   2011   2014   2017   2020
                                      2177   2178   2180   2181
WHITE                          $0005    14D   449    718    726    868
                                       882   1751   2060   2862   2863
                                      2864   2865   2866   2867   2868
                                      2869   2870   2871   2872   2873
                                      2874   2875   2876   2877   2878
                                      2879   2880
LRED                           $0096    16D   726    866    880   2862
                                      2863   2864   2865   2866   2867
                                      2868   2869   2870   2871   2872
                                      2873   2874   2875   2876   2877
                                      2878   2879   2880
CR                             $000d    18D   375    430   1478   2862
                                      2863   2864   2865   2866   2867
                                      2868   2869   2870   2871   2872
                                      2873   2874   2875   2876   2877
                                      2878   2879   2880
Mode_Flags                     $006a    64D  1201   1235   1244   1254
                                      1266   1276   1286   1299   1313
                                      1327   1341   1357   1403   1421
                                      1424   1539   1560   1569   1580
                                      1581
Op_Flag                        $006c    66D  1108   1128   1246   1296
                                      1409   1440   1635   1649   1666
                                      1698   1727   1737   1777   1802
                                      1810   1848   1887
Op_Code                        $006b    65D  1173   1191   1192   1380
                                      1407   1437   1445   1463   1538
                                      1637   1651   1694   1704   1731
                                      1738   1756   1795
Buf_Index                      $006e    68D   379   1021   1034   1224
                                      1896   1912   1960   1964   1965
                                      1966   1973   2149   2157   2158
                                      2242   2395
Adr_Flags                      $0069    63D  1659   1772   1775   1817
                                      1821   1827   1831   1835   1839
COL                            $006d    67D  1211   1907   1913   1928
                                      1939   1959   1992   2044
Bank                           $0002    28D   262    265    321    329
                                       500    502    504    755
STATUS                         $0090    73D  1009   1066   2451   2475
                                      2487
SPL                            $000c    43D   305    339    795    805
                                       809
MODE_80                        $00d7    83D   676    779    864    878
VERCK                          $0093    74D   415   1050   1059   1067
FNADR                          $00bb    78D  1011   1013   1027
SA                             $00b9    76D  1004   1054   1077
YELLOW                         $009e    15D   430   1692   2054
PCL                            $0004    30D   256    259    291
PCH                            $0003    29D   250    258    293
BA                             $00bd    79D  1006   1044
FA                             $00ba    77D  1002   1040
FNLEN                          $00b7    75D  1007   1028
APOSTR                         $0027    22D   771    955
QUOTE                          $0022    21D  1018   1025
SPH                            $000b    42D   303    337
QTSW                           $00f4    90D   834
FNBANK                         $00be    80D  1008
CRIGHT                         $001d    20D   406
REV                            $0012    19D   430
AC                             $0006    32D   279
SR                             $0005    31D   345
R_Margin                       $00e7    88
L_Margin                       $00e6    87
T_Margin                       $00e5    86
B_Margin                       $00e4    85
NDX                            $00d0    82
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
Long_AC                        $0059    56D   186    188    196    200
                                       499    501    503    514    516
                                       518    520    531    533    535
                                       537    548    550    552    554
                                       564    566    567    569    570
                                       572    573    575    584    586
                                       587    589    590    592    593
                                       595    603    605    607    609
                                       618    620    628    629    631
                                       632    678    679    682    754
                                       773    910    918    937    970
                                      1039   1048   1049   1091   1205
                                      1214   1381   1383   1384   1392
                                      1393   1448   1457   1516   1523
                                      1525   1526   1528   1595   1607
                                      1610   1942   1967   1998   1999
                                      2000   2012   2013   2015   2016
                                      2018   2019   2021   2022   2027
                                      2028   2030   2031   2033   2034
                                      2036   2037   2416   2437   2438
                                      2480   2481
Long_PC                        $0061    58D   515    517    519    521
                                       585    588    591    594    604
                                       606    608    610    640    642
                                       653    655    730    774    776
                                       818    820    836    838    917
                                       936   1055   1074   1075   1092
                                      1443   1446   1449   1458   1464
                                      1486   1490   1524   1527   1880
                                      1883   2052   2058   2063   2066
                                      2067   2203   2204   2206   2208
                                      2282   2295   2298   2312   2325
                                      2334   2335   2336   2337   2338
                                      2339   2340   2341   2342   2343
                                      2344   2345   2361   2362   2363
Long_CT                        $005d    57D   189    190    192    193
                                       197    201    532    534    536
                                       538    565    568    571    574
                                      1376   1382   1390   1391   1707
                                      1709   1716   1717   1786   1789
                                      1803   1812   1855   1857   1868
                                      1871   1874   1879   1882   2189
                                      2190   2192   2193   2194   2288
                                      2289   2331   2332   2333   2356
                                      2370   2373   2397   2411   2425
Long_DA                        $0065    59D   549    551    553    555
                                       698    701    704    719    727
                                       728    909    978    986   1107
                                      1143   1144   1153   1157   2008
                                      2009   2011   2014   2017   2020
                                      2177   2178   2180   2181
WHITE                          $0005    14D   449    718    726    868
                                       882   1751   2060   2862   2863
                                      2864   2865   2866   2867   2868
                                      2869   2870   2871   2872   2873
                                      2874   2875   2876   2877   2878
                                      2879   2880
LRED                           $0096    16D   726    866    880   2862
                                      2863   2864   2865   2866   2867
                                      2868   2869   2870   2871   2872
                                      2873   2874   2875   2876   2877
                                      2878   2879   2880
CR                             $000d    18D   375    430   1478   2862
                                      2863   2864   2865   2866   2867
                                      2868   2869   2870   2871   2872
                                      2873   2874   2875   2876   2877
                                      2878   2879   2880
Mode_Flags                     $006a    64D  1201   1235   1244   1254
                                      1266   1276   1286   1299   1313
                                      1327   1341   1357   1403   1421
                                      1424   1539   1560   1569   1580
                                      1581
Op_Size                        $042c   102D  1438   1439   1450   1469
                                      1470   1604   1605   1609   1665
                                      1667   1677   1769   1790   1809
                                      1859   1865   1888
Op_Flag                        $006c    66D  1108   1128   1246   1296
                                      1409   1440   1635   1649   1666
                                      1698   1727   1737   1777   1802
                                      1810   1848   1887
Op_Code                        $006b    65D  1173   1191   1192   1380
                                      1407   1437   1445   1463   1538
                                      1637   1651   1694   1704   1731
                                      1738   1756   1795
Buf_Index                      $006e    68D   379   1021   1034   1224
                                      1896   1912   1960   1964   1965
                                      1966   1973   2149   2157   2158
                                      2242   2395
Buffer                         $0200    92D   371    380   1022   1481
                                      1483   1492   1496   1504   1961
                                      2159   2389   2396   2403   2407
Op_Ix                          $0435   106D  1109   1217   1220   1263
                                      1297   1311   1325   1339   1355
                                      1366
Adr_Flags                      $0069    63D  1659   1772   1775   1817
                                      1821   1827   1831   1835   1839
COL                            $006d    67D  1211   1907   1913   1928
                                      1939   1959   1992   2044
Bank                           $0002    28D   262    265    321    329
                                       500    502    504    755
Op_Len                         $0439   108D  1110   1219   1419   1425
                                      1428   1576
Mon_Data                       $0400    99D   961    971    983   1010
                                      1012
STATUS                         $0090    73D  1009   1066   2451   2475
                                      2487
SPL                            $000c    43D   305    339    795    805
                                       809
Op_Bits                        $0434   105D  1208   1969   1975   1997
MODE_80                        $00d7    83D   676    779    864    878
VERCK                          $0093    74D   415   1050   1059   1067
Ix_Mne                         $0437   107D  1163   1365   1548
Op_Mne                         $042d   103D  1125   1131   1138
X_Vector                       $0420   100D   292    294    483
FNADR                          $00bb    78D  1011   1013   1027
SA                             $00b9    76D  1004   1054   1077
YELLOW                         $009e    15D   430   1692   2054
PCL                            $0004    30D   256    259    291
PCH                            $0003    29D   250    258    293
header_loop                    $205a   196D   199    203
BA                             $00bd    79D  1006   1044
FA                             $00ba    77D  1002   1040
FNLEN                          $00b7    75D  1007   1028
APOSTR                         $0027    22D   771    955
QUOTE                          $0022    21D  1018   1025
SPH                            $000b    42D   303    337
Link                           $2029   157D   149
Unit                           $1106   110D  1001
QTSW                           $00f4    90D   834
FNBANK                         $00be    80D  1008
CRIGHT                         $001d    20D   406
REV                            $0012    19D   430
AC                             $0006    32D   279
SR                             $0005    31D   345
header                         $1fff   145
EXMON                          $032e    96
IBRK                           $0316    95
IIRQ                           $0314    94
R_Margin                       $00e7    88
L_Margin                       $00e6    87
T_Margin                       $00e5    86
B_Margin                       $00e4    85
NDX                            $00d0    82
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
