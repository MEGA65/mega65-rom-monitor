              *******************************
              * BSM = Bit Shifter's Monitor *
              * for The MEGA65  10-Dec_2020 *
              *******************************

              .CPU 45GS02

              .STORE $6000,$2000,"bsmon.rom"

              *************
              * Constants *
              *************

0005          WHITE  = $05
009e          YELLOW = $9e
0096          LRED   = $96

000d          CR     = $0d
0012          REV    = $12
001d          CRIGHT = $1d
0022          QUOTE  = $22
0027          APOSTR = $27

              ************************************************
              * Register storage for JMPFAR and JSRFAR calls *
              ************************************************

0002          Bank       =  2
0003          PCH        =  3
0004          PCL        =  4
0005          SR         =  5
0006          AC         =  6
0007          XR         =  7
0008          YR         =  8
0009          ZR         =  9

              *************************************
              * Used direct (zero) page addresses *
              *************************************

000a          BP         = 10
000b          SPH        = 11
000c          SPL        = 12

              ; following variables overlap with the BASIC floating point area

              ; $59 - $5d : temporary floating point accumulator
              ; $5e - $62 : temporary floating point accumulator
              ; $63 - $69 : primary   floating point accumulator
              ; $6a - $6f : secondary floating point accumulator

              ; A set of 32 bit variables also used as 32 bit pointer

0059          & = $59

0059          Long_AC    .BSS 4  ; 32 bit accumulator
005d          Long_CT    .BSS 4  ; 32 bit counter
0061          Long_PC    .BSS 4  ; 32 bit program counter
0065          Long_DA    .BSS 4  ; 32 bit data pointer

              ; Flags are  used in BBR BBS instructions

0069          Adr_Flags  .BSS 1
006a          Mode_Flags .BSS 1
006b          Op_Code    .BSS 1
006c          Op_Flag    .BSS 1  ; 7: two operands
                                 ; 6: long branch
                                 ; 5: 32 bit address
                                 ; 4: Q register
006d          Op_Size    .BSS 1
006e          Dig_Cnt    .BSS 1
006f          Buf_Index  .BSS 1

              ; operating system variables


0090          STATUS     = $90
0093          VERCK      = $93
00b7          FNLEN      = $b7
00b9          SA         = $b9
00ba          FA         = $ba
00bb          FNADR      = $bb
00bd          BA         = $bd
00be          FNBANK     = $be

00d0          NDX        = $d0        ; length of keyboard buffer
00d7          MODE_80    = $d7        ; 80 column / 40 volumn flag

00e4          B_Margin   = $e4        ; SCBOT  default = 24
00e5          T_Margin   = $e5        ; SCTOP  default =  0
00e6          L_Margin   = $e6        ; SCLF   default =  0
00e7          R_Margin   = $e7        ; SCRT   default = 39 or 79

00f4          QTSW       = $f4        ; Quote switch

0200          Buffer     = $0200      ; input buffer

0314          IIRQ       = $0314
0316          IBRK       = $0316
032e          EXMON      = $032e

0400          & = $400                ; bottom of BASIC runtime stack
                                      ; should be a safe space
0400          X_Vector    .BSS  2     ; exit vector (ROM version dependent)
0402          Ix_Mne      .BSS  1     ; index to mnemonics table
0403          Op_Mne      .BSS  3     ; 3 bytes for mnemonic
0406          Op_Ix       .BSS  1     ; type of constant
0407          Op_Len      .BSS  1     ; length of operand
0408          Disk_Unit   .BSS  1     ; unit = device
0409          Disk_Track  .BSS  1     ; logical track  1 -> 255
040a          Disk_Sector .BSS  1     ; logical sector 0 -> 255
040b          Disk_Status .BSS  1     ; BCD value of status

040c          Mon_Data    .BSS 40     ; buffer for hunt and filename
0434          Disk_Msg    .BSS 40     ; disk status as text message

cf2e          EXIT_OLD   = $cf2e      ; exit address for ROM 910110
cfa4          EXIT       = $cfa4      ; exit address for ROM 911001

ff6b          SETBNK     = $ff6b
ff6e          JSRFAR     = $ff6e
ff71          JMPFAR     = $ff71
ff74          LDA_FAR    = $ff74
ff77          STA_FAR    = $ff77
ff7a          CMP_FAR    = $ff7a
ff7d          PRIMM      = $ff7d
ff81          CINT       = $ff81
ff84          IOINIT     = $ff84
ff90          SETMSG     = $ff90
ff93          SECOND     = $ff93
ff96          TKSA       = $ff96
ff99          MEMTOP     = $ff99
ff9c          MEMBOT     = $ff9c
ff9f          KEY        = $ff9f
ffa2          SETTMO     = $ffa2
ffa5          ACPTR      = $ffa5
ffa8          CIOUT      = $ffa8
ffab          UNTALK     = $ffab
ffae          UNLSN      = $ffae
ffb1          LISTEN     = $ffb1
ffb4          TALK       = $ffb4
ffb7          READSS     = $ffb7
ffba          SETLFS     = $ffba
ffbd          SETNAM     = $ffbd
ffc0          OPEN       = $ffc0
ffc3          CLOSE      = $ffc3
ffc6          CHKIN      = $ffc6
ffc9          CHKOUT     = $ffc9
ffcc          CLRCHN     = $ffcc
ffcf          CHRIN      = $ffcf
ffd2          CHROUT     = $ffd2
ffd5          LOAD       = $ffd5
ffd8          SAVE       = $ffd8
ffdb          SETTIM     = $ffdb
ffde          GETTIM     = $ffde
ffe1          STOP       = $ffe1
ffe4          GETIN      = $ffe4
ffe7          CLALL      = $ffe7
ffea          SCAN       = $ffea
ffed          SCRORG     = $ffed
fff0          PLOT       = $fff0

1fff          * = $1fff
                      .STORE $1fff,$0101,"bsm.prg"

              *************
              Module header
              *************

1fff 01 20            .WORD $2001             ; load address
2001 29 20            .WORD Link              ; line link
2003 e4 07            .WORD 2020              ; line number
2005 fe 02            .BYTE $fe,$02           ; BANK token
2007 30 3a            .BYTE "0:"              ; BANK argument
2009 9e               .BYTE $9e               ; SYS  token
200a 28 38 32         .BYTE "(8235):"         ; $202d
2011 8f               .BYTE $8f               ; REM  token
2012 20 42 49         .BYTE " BIT SHIFTER 10-DEC-20",0
2029 00 00    Link    .WORD 0                 ; BASIC end marker

                      ; copy image to $030000

202b 78               SEI

              ; map memory to monitor configuration

202c a9 a0            LDA  #$a0
202e a2 82            LDX  #$82
2030 a0 00            LDY  #$00
2032 a3 83            LDZ  #$83
2034 5c               MAP
2035 ea               EOM

              ; VIC IV registers visible

2036 a9 47            LDA  #$47
2038 8d 2f d0         STA  $d02f
203b a9 53            LDA  #$53
203d 8d 2f d0         STA  $d02f

              ; toggle write protection

2040 a9 70            LDA  #$70
2042 8d 40 d6         STA  $D640
2045 ea               NOP

2046 a3 00            LDZ  #0
2048 64 59            STZ  Long_AC
204a a9 21            LDA  #$21
204c 85 5a            STA  Long_AC+1
204e 64 5d            STZ  Long_CT
2050 64 5e            STZ  Long_CT+1
2052 a9 03            LDA  #3
2054 85 5f            STA  Long_CT+2
2056 64 60            STZ  Long_CT+3
2058 a2 20            LDX  #$20

205a b2 59    _loop   LDA  (Long_AC),Z
205c ea 92 5d         STA  [Long_CT],Z
205f 1b               INZ
2060 d0 f8            BNE  _loop
2062 e6 5a            INC  Long_AC+1
2064 e6 5e            INC  Long_CT+1
2066 ca               DEX
2067 d0 f1            BNE  _loop

2069 a9 70            LDA  #$70
206b 8d 40 d6         STA  $D640              ; toggle write protection
206e ea               NOP

206f 60               RTS
2070          EndMod [header] Size = 113 [$71]

2070 00 00 00         .FILL $2100-* (0) ; 144 bytes

6000          * = $6000

              ********************
6000          Monitor_Call ; $6000
              ********************

6000 4c 3c 60          JMP  Mon_Call

              *********************
6003          Monitor_Break ; $6003
              *********************

6003 4c 09 60          JMP  Mon_Break

              **********************
6006          Monitor_Switch ; $6009
              **********************

6006 4c c9 60          JMP  Mon_Switch

              ****************
              Module Mon_Break
              ****************

6009 20 7d ff          JSR  PRIMM
600c 0d 42 52          .BYTE "\rBREAK\a",0
6014 20 ed 60          JSR  Print_Commands

              ; pull BP, Z, Y, X, A,SR,PCL,PCH
              ;       7  6  5  4  3  2  1  0

6017 a2 07             LDX  #7
6019 2c a4 cf          BIT  EXIT      ; version
601c 10 01             BPL  _loop
601e ca                DEX
601f 68       _loop    PLA
6020 95 03             STA  PCH,X
6022 ca                DEX
6023 10 fa             BPL  _loop

              ; decrement PC to point after BRK

6025 a5 04             LDA  PCL
6027 d0 02             BNE  _nopage
6029 c6 03             DEC  PCH
602b c6 04    _nopage  DEC  PCL

602d ad 1d 01          LDA  $011d
6030 7f 02 03          BBR7 Bank,_bank
6033 ad 1f 01          LDA  $011f
6036 29 0f    _bank    AND  #15
6038 85 02             STA  Bank
603a 80 23             BRA  Mon_Start
603c          EndMod [Mon_Break] Size = 51 [$33]

              ***************
              Module Mon_Call
              ***************

603c 20 ed 60          JSR  Print_Commands

              ;        clear register for monitor call

603f a9 00             LDA  #0
6041 a2 06             LDX  #6
6043 95 06    _loop    STA  AC,X
6045 ca                DEX
6046 10 fb             BPL  _loop

              ;        set default PC to "exit to BASIC"

6048 a9 a4             LDA  #<EXIT     ; ROM 911110
604a a2 cf             LDX  #>EXIT
604c 2c a4 cf          BIT  EXIT       ; $20 (JSR) or $ff ?
604f 10 04             BPL  _store
6051 a9 2e             LDA  #<EXIT_OLD ; ROM 910111
6053 a2 cf             LDX  #>EXIT_OLD
6055 85 04    _store   STA  PCL
6057 8d 00 04          STA  X_Vector
605a 86 03             STX  PCH
605c 8e 01 04          STX  X_Vector+1
605f          EndMod [Mon_Call] Size = 35 [$23]

              ****************
              Module Mon_Start
              ****************

605f d8                CLD
6060 0b                TSY
6061 84 0b             STY  SPH
6063 ba                TSX
6064 86 0c             STX  SPL
6066 a9 c0             LDA  #$c0
6068 20 90 ff          JSR  SETMSG
606b 58                CLI
606c ea                NOP
606d          EndMod [Mon_Start] Size = 14 [$e]

              ***************************
              Module Mon_Register ; $6042
              ***************************

606d 20 d4 71          JSR  Reg_Text

              ; print Bank,PCH

6070 a0 00             LDY  #0
6072 b9 02 00 _loopa   LDA  Bank,Y
6075 20 19 6b          JSR  Print_Hex
6078 c8                INY
6079 c0 02             CPY  #2
607b 90 f5             BCC  _loopa

              ; print SR,PCL,A,X,Y,Z,BP

607d b9 02 00 _loopb   LDA  Bank,Y
6080 20 04 6b          JSR  Print_Hex_Blank
6083 c8                INY
6084 c0 09             CPY  #9
6086 90 f5             BCC  _loopb

              ; print 16 bit stack pointer

6088 a5 0b             LDA  SPH
608a 20 19 6b          JSR  Print_Hex
608d a5 0c             LDA  SPL
608f 20 04 6b          JSR  Print_Hex_Blank

              ; print flags

6092 a0 08             LDY  #8
6094 a5 05             LDA  SR
6096 0a       _loopc   ASL  A
6097 48                PHA
6098 a9 2d             LDA  #'-'
609a 90 02             BCC  _flag
609c a9 31             LDA  #'1'
609e 20 d2 ff _flag    JSR  CHROUT
60a1 68                PLA
60a2 88                DEY
60a3 d0 f1             BNE  _loopc
60a5          EndMod [Mon_Register] Size = 56 [$38]

              ***********
              Module Main
              ***********

60a5 20 0c 6b          JSR  Print_CR
60a8 a2 00             LDX  #0

              ; read one line into buffer

              ******
60aa          Main_A
              ******

60aa 20 cf ff _loop    JSR  CHRIN
60ad 9d 00 02          STA  Buffer,X
60b0 e8                INX
60b1 e0 50             CPX  #80
60b3 b0 1e             BCS  Mon_Error         ; input too long
60b5 c9 0d             CMP  #CR
60b7 d0 f1             BNE  _loop

60b9 a9 00             LDA  #0
60bb 85 6f             STA  Buf_Index
60bd 9d ff 01          STA  Buffer-1,X        ; terminate buffer
60c0 20 49 6b _getcomm JSR  Get_Char
60c3 f0 e0             BEQ  Main
60c5 c9 20             CMP  #' '
60c7 f0 f7             BEQ  _getcomm
60c9          EndMod [Main] Size = 36 [$24]

              *****************
              Module Mon_Switch
              *****************

60c9 a2 18             LDX  #24
60cb dd 07 61 _loop    CMP  Command_Char,X
60ce f0 10             BEQ  Mon_Select
60d0 ca                DEX
60d1 10 f8             BPL  _loop

              ;        fall through to error routine if not found

              ****************
              Module Mon_Error
              ****************

              ; put a question mark at the end of the text

60d3 20 7d ff          JSR  PRIMM
60d6 1b 4f 1d          .BYTE "\eO",CRIGHT,'?',0
60db a2 f8             LDX  #$f8              ; reset stack pointer
60dd 9a                TXS
60de 80 c5             BRA  Main

              *****************
              Module Mon_Select
              *****************

60e0 85 93             STA  VERCK
60e2 e0 16             CPX  #22
60e4 b3 22 03          LBCS  Load_Save
60e7 8a                TXA
60e8 0a                ASL  A
60e9 aa                TAX
60ea 7c 23 61          JMP  (Jump_Table,X)
60ed          EndMod [Mon_Select] Size = 13 [$d]

              **************
60ed          Print_Commands
              **************

60ed 20 7d ff          JSR  PRIMM
60f0 0d 9e 12          .BYTE CR,YELLOW,REV,"BS MONITOR COMMANDS:"

              ************
6107          Command_Char
              ************

                       ;      0123456789abcdef
6107 41 42 43          .BYTE "ABCDFGHJMRTX@.>;?"

              ***********
6118          Cons_Prefix
              ***********

6118 24 2b 26          .BYTE "$+&%'"

              ****************
611d          Load_Save_Verify
              ****************

611d 4c 53 56          .BYTE "LSV",WHITE,0
6122 60                RTS

              **********
6123          Jump_Table
              **********

6123 d6 64             .WORD Mon_Assemble     ; A
6125 29 62             .WORD Mon_Bits         ; B
6127 7e 63             .WORD Mon_Compare      ; C
6129 db 67             .WORD Mon_Disassemble  ; D
612b b5 64             .WORD Mon_Fill         ; F
612d ae 62             .WORD Mon_Go           ; G
612f a8 63             .WORD Mon_Hunt         ; H
6131 ba 62             .WORD Mon_JSR          ; J
6133 df 61             .WORD Mon_Memory       ; M
6135 6d 60             .WORD Mon_Register     ; R
6137 40 63             .WORD Mon_Transfer     ; T
6139 4d 61             .WORD Mon_Exit         ; X
613b ed 6c             .WORD Mon_DOS          ; @
613d d6 64             .WORD Mon_Assemble     ; .
613f 80 62             .WORD Mon_Set_Memory   ; >
6141 66 62             .WORD Mon_Set_Register ; ;
6143 07 72             .WORD Mon_Help         ; ?
6145 99 6b             .WORD Converter        ; $
6147 99 6b             .WORD Converter        ; +
6149 99 6b             .WORD Converter        ; &
614b 99 6b             .WORD Converter        ; %


              ***************
              Module Mon_Exit
              ***************

614d 6c 00 04          JMP  (X_Vector)

              ****************
              Module LAC_To_PC
              ****************

              ; called from Mon_Set_Register, Mon_Go and Mon_JSR
              ; as the first instruction. The carry flag was set from
              ; the routine Got_LAC if an error occured.
              ; Notice that the Bank, PCH and PCL values are stored
              ; high to low, reverse to the standard order.

              ; Bank, PCH and PCL are part of a list, that is used by
              ; the routines FAR_JMP and FAR_JSR of the operating system

6150 b0 0c             BCS  _error
6152 a5 59             LDA  Long_AC
6154 85 04             STA  Bank+2
6156 a5 5a             LDA  Long_AC+1
6158 85 03             STA  Bank+1
615a a5 5b             LDA  Long_AC+2
615c 85 02             STA  Bank
615e 60       _error   RTS
615f          EndMod [LAC_To_PC] Size = 15 [$f]

              *****************
              Module LAC_To_LPC
              *****************

615f da                PHX
6160 a2 03             LDX  #3
6162 b5 59    _loop    LDA  Long_AC,X
6164 95 61             STA  Long_PC,X
6166 ca                DEX
6167 10 f9             BPL  _loop
6169 fa                PLX
616a 60                RTS
616b          EndMod [LAC_To_LPC] Size = 12 [$c]

              *****************
              Module LAC_To_LCT
              *****************

616b da                PHX
616c a2 03             LDX  #3
616e b5 59    _loop    LDA  Long_AC,X
6170 95 5d             STA  Long_CT,X
6172 ca                DEX
6173 10 f9             BPL  _loop
6175 fa                PLX
6176 60                RTS
6177          EndMod [LAC_To_LCT] Size = 12 [$c]

              *****************
              Module LAC_To_LDA
              *****************

6177 da                PHX
6178 a2 03             LDX  #3
617a b5 59    _loop    LDA  Long_AC,X
617c 95 65             STA  Long_DA,X
617e ca                DEX
617f 10 f9             BPL  _loop
6181 fa                PLX
6182 60                RTS
6183          EndMod [LAC_To_LDA] Size = 12 [$c]

              *******************
              Module LAC_Plus_LCT
              *******************

6183 da                PHX
6184 a2 fc             LDX  #252              ; use ZP wrap around
6186 18                CLC
6187 b5 5d    _loop    LDA  Long_AC+4,X
6189 75 61             ADC  Long_CT+4,X
618b 95 5d             STA  Long_AC+4,X
618d e8                INX
618e d0 f7             BNE  _loop
6190 fa                PLX
6191 60                RTS
6192          EndMod [LAC_Plus_LCT] Size = 15 [$f]

              ********************
              Module LAC_Minus_LPC
              ********************

6192 da                PHX
6193 a2 fc             LDX  #252              ; use ZP wrap around
6195 38                SEC
6196 b5 5d    _loop    LDA  Long_AC+4,X
6198 f5 65             SBC  Long_PC+4,X
619a 95 61             STA  Long_CT+4,X
619c e8                INX
619d d0 f7             BNE  _loop
619f fa                PLX
61a0 60                RTS
61a1          EndMod [LAC_Minus_LPC] Size = 15 [$f]

              **********************
              Module LAC_Compare_LPC
              **********************

61a1 da                PHX
61a2 a2 fc             LDX  #252              ; use ZP wrap around
61a4 38                SEC
61a5 b5 5d    _loop    LDA  Long_AC+4,X
61a7 f5 65             SBC  Long_PC+4,X
61a9 e8                INX
61aa d0 f9             BNE  _loop
61ac fa                PLX
61ad 60                RTS
61ae          EndMod [LAC_Compare_LPC] Size = 13 [$d]

              **************
              Module Inc_LAC
              **************

61ae e3 59             INW  Long_AC
61b0 d0 02             BNE  _return
61b2 e3 5b             INW  Long_AC+2
61b4 60       _return  RTS
61b5          EndMod [Inc_LAC] Size = 7 [$7]

              **************
              Module Dec_LAC
              **************

61b5 a5 59             LDA  Long_AC
61b7 05 5a             ORA  Long_AC+1
61b9 d0 02             BNE  _skip
61bb c3 5b             DEW  Long_AC+2
61bd c3 59    _skip    DEW  Long_AC
61bf 60                RTS
61c0          EndMod [Dec_LAC] Size = 11 [$b]

              **************
              Module Inc_LPC
              **************

61c0 e3 61             INW  Long_PC
61c2 d0 02             BNE  _return
61c4 e3 63             INW  Long_PC+2
61c6 60       _return  RTS
61c7          EndMod [Inc_LPC] Size = 7 [$7]

              **************
              Module Dec_LDA
              **************

61c7 a5 65             LDA  Long_DA
61c9 05 66             ORA  Long_DA+1
61cb d0 02             BNE  _skip
61cd c3 67             DEW  Long_DA+2
61cf c3 65    _skip    DEW  Long_DA
61d1 60                RTS
61d2          EndMod [Dec_LDA] Size = 11 [$b]

              ************
              Module Fetch
              ************

61d2 db                PHZ
61d3 98                TYA
61d4 4b                TAZ
61d5 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
61d8 ea                NOP                    ; use LDA  [Long_PC],Z
61d9 b2 61    _banked  LDA  (Long_PC),Z
61db fb                PLZ
61dc 29 ff             AND  #$ff
61de 60                RTS
61df          EndMod [Fetch] Size = 13 [$d]

              *****************
              Module Mon_Memory
              *****************

61df 20 25 6a          JSR  Get_LAC           ; get 1st. parameter
61e2 a3 10             LDZ  #16               ; default row count
61e4 b0 1f             BCS  _row              ; no address
61e6 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = start address
61e9 20 25 6a          JSR  Get_LAC           ; Long_AC = end address
61ec b0 17             BCS  _row              ; not given

61ee 20 92 61          JSR  LAC_Minus_LPC     ; Long_CT = range
61f1 93 e0 fe          LBCC Mon_Error         ; negative range -> error
61f4 a2 04             LDX  #4                ; 16 bytes / line
61f6 7f d7 01          BBR7 MODE_80,_shift
61f9 ca                DEX                    ;  8 bytes / line
61fa 46 5e    _shift   LSR  Long_CT+1
61fc 66 5d             ROR  Long_CT
61fe ca                DEX
61ff d0 f9             BNE  _shift
6201 ab 5d 00          LDZ  Long_CT           ; row count
6204 1b                INZ

6205 20 e1 ff _row     JSR  STOP
6208 f0 06             BEQ  _exit
620a 20 fe 62          JSR  Dump_Row
620d 3b                DEZ
620e d0 f5             BNE  _row
6210 4c a5 60 _exit    JMP  Main
6213          EndMod [Mon_Memory] Size = 52 [$34]

              *****************
              Module Print_Bits
              *****************

6213 db                PHZ
6214 85 65             STA  Long_DA
6216 a0 08             LDY  #8
6218 a9 2a    _loop    LDA  #'*'
621a ff 65 02          BBS7 Long_DA,_set
621d a9 2e             LDA  #'.'
621f 20 d2 ff _set     JSR  CHROUT
6222 06 65             ASL  Long_DA
6224 88                DEY
6225 d0 f1             BNE  _loop
6227 fb                PLZ
6228 60                RTS
6229          EndMod [Print_Bits] Size = 22 [$16]

              ***************
              Module Mon_Bits
              ***************

6229 20 25 6a          JSR  Get_LAC           ; get 1st. parameter
622c b0 03             BCS  _lab
622e 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = start address
6231 20 0c 6b _lab     JSR  Print_CR
6234 a9 05             LDA  #WHITE
6236 85 66             STA  Long_DA+1

6238 a2 08             LDX  #8
623a da       _row     PHX
623b 20 da 6a          JSR  Hex_LPC
623e a3 00             LDZ  #0
6240 38       _col     SEC
6241 a9 9b             LDA  #WHITE+LRED       ; toggle colour
6243 e5 66             SBC  Long_DA+1
6245 85 66             STA  Long_DA+1
6247 20 d2 ff          JSR  CHROUT
624a ea b2 61          LDA  [Long_PC],Z
624d 20 13 62          JSR  Print_Bits
6250 18                CLC
6251 6b                TZA
6252 69 08             ADC  #8
6254 4b                TAZ
6255 c9 40             CMP  #64
6257 90 e7             BCC  _col
6259 20 0c 6b          JSR  Print_CR
625c 20 c0 61          JSR  Inc_LPC
625f fa                PLX
6260 ca                DEX
6261 d0 d7             BNE  _row
6263 4c a5 60          JMP  Main
6266          EndMod [Mon_Bits] Size = 61 [$3d]

              ***********************
              Module Mon_Set_Register
              ***********************

6266 20 25 6a          JSR  Get_LAC           ; get 1st. parameter
6269 20 50 61          JSR  LAC_To_PC
626c a0 03             LDY  #3
626e 20 25 6a _loop    JSR  Get_LAC
6271 b0 0a             BCS  _exit
6273 a5 59             LDA  Long_AC
6275 99 02 00          STA  Bank,Y
6278 c8                INY
6279 c0 09             CPY  #9
627b 90 f1             BCC  _loop
627d 4c a5 60 _exit    JMP  Main
6280          EndMod [Mon_Set_Register] Size = 26 [$1a]

              *********************
              Module Mon_Set_Memory
              *********************

6280 20 25 6a          JSR  Get_LAC           ; get 1st. parameter
6283 b0 1c             BCS  _exit
6285 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = row address
6288 a3 00             LDZ  #0
628a 20 25 6a _loop    JSR  Get_LAC
628d b0 12             BCS  _exit
628f a5 59             LDA  Long_AC
6291 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
6294 ea                NOP                    ; use STA  [Long_PC],Z
6295 92 61    _banked  STA  (Long_PC),Z
6297 1b                INZ
6298 c2 10             CPZ  #16
629a 7f d7 02          BBR7 MODE_80,_next
629d c2 08             CPZ  #8
629f 90 e9    _next    BCC  _loop

62a1 20 7d ff _exit    JSR  PRIMM
62a4 1b 4f             .BYTE "\eO"
62a6 91 00             .BYTE $91,$00
62a8 20 fe 62          JSR  Dump_Row
62ab 4c a5 60          JMP  Main
62ae          EndMod [Mon_Set_Memory] Size = 46 [$2e]

              *************
              Module Mon_Go
              *************

62ae 20 25 6a          JSR  Get_LAC           ; get 1st. parameter
62b1 20 50 61          JSR  LAC_To_PC
62b4 a6 0c             LDX  SPL
62b6 9a                TXS
62b7 4c 71 ff          JMP  JMPFAR
62ba          EndMod [Mon_Go] Size = 12 [$c]

              **************
              Module Mon_JSR
              **************

62ba 20 25 6a          JSR  Get_LAC           ; get 1st. parameter
62bd 20 50 61          JSR  LAC_To_PC
62c0 a6 0c             LDX  SPL
62c2 9a                TXS
62c3 20 6e ff          JSR  JSRFAR
62c6 ba                TSX
62c7 86 0c             STX  SPL
62c9 4c a5 60          JMP  Main
62cc          EndMod [Mon_JSR] Size = 18 [$12]

              *******************
              Module Dump_4_Bytes
              *******************

62cc 20 d2 ff          JSR  CHROUT            ; colour
62cf ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62d2 ea                NOP                    ; use LDA  [Long_PC],Z
62d3 b2 61    _banked  LDA  (Long_PC),Z
62d5 20 04 6b          JSR  Print_Hex_Blank
62d8 1b                INZ
62d9 6b                TZA
62da 29 03             AND  #3
62dc d0 f1             BNE  _loop
62de 60                RTS
62df          EndMod [Dump_4_Bytes] Size = 19 [$13]

              *******************
              Module Dump_4_Chars
              *******************

62df a0 00             LDY  #0
62e1 84 f4             STY  QTSW              ; disable quote mode
62e3 20 d2 ff          JSR  CHROUT            ; colour
62e6 ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62e9 ea                NOP                    ; use LDA  [Long_PC],Z
62ea b2 61    _banked  LDA  (Long_PC),Z
62ec a8                TAY
62ed 29 60             AND  #%0110 0000
62ef d0 02             BNE  _laba
62f1 a0 2e             LDY  #'.'
62f3 98       _laba    TYA
62f4 20 d2 ff          JSR  CHROUT
62f7 1b                INZ
62f8 6b                TZA
62f9 29 03             AND  #3
62fb d0 e9             BNE  _loop
62fd 60                RTS
62fe          EndMod [Dump_4_Chars] Size = 31 [$1f]

              ***************
              Module Dump_Row
              ***************

62fe db                PHZ
62ff 20 0c 6b          JSR  Print_CR
6302 a9 3e             LDA  #'>'
6304 20 d2 ff          JSR  CHROUT
6307 20 da 6a          JSR  Hex_LPC

630a a3 00             LDZ  #0
630c a2 02             LDX  #2                ; 2 blocks in 80 columns
630e 7f d7 01          BBR7 MODE_80,_loop
6311 ca                DEX                    ; 1 block  in 40 columns
6312 a9 96    _loop    LDA  #LRED
6314 20 cc 62          JSR  Dump_4_Bytes
6317 a9 05             LDA  #WHITE
6319 20 cc 62          JSR  Dump_4_Bytes
631c ca                DEX
631d d0 f3             BNE  _loop

631f 20 7d ff          JSR  PRIMM
6322 3a 12 00          .BYTE $3a,$12,$00      ; : reverse on

6325 a3 00             LDZ  #0
6327 a2 02             LDX  #2                ; 4 blocks in 80 columns
6329 7f d7 01          BBR7 MODE_80,_lchr
632c ca                DEX                    ; 2 blocks in 40 columns
632d a9 96    _lchr    LDA  #LRED
632f 20 df 62          JSR  Dump_4_Chars
6332 a9 05             LDA  #WHITE
6334 20 df 62          JSR  Dump_4_Chars
6337 ca                DEX
6338 d0 f3             BNE  _lchr
633a 6b                TZA
633b 20 72 6b          JSR  Add_LPC
633e fb                PLZ
633f 60                RTS
6340          EndMod [Dump_Row] Size = 66 [$42]

              *******************
              Module Mon_Transfer
              *******************

6340 20 80 6b          JSR  Param_Range       ; Long_PC = source
6343 b3 8e fd          LBCS Mon_Error         ; Long_CT = count
6346 20 25 6a          JSR  Get_LAC           ; Long_AC = target
6349 b3 88 fd          LBCS Mon_Error

634c a3 00             LDZ  #0
634e 20 a1 61          JSR  LAC_Compare_LPC   ; target - source
6351 90 17             BCC  _forward

              ;        source < target: backward transfer

6353 20 83 61          JSR  LAC_Plus_LCT      ; Long_AC = end of target

6356 ea b2 65 _lpback  LDA  [Long_DA],Z       ; backward copy
6359 ea 92 59          STA  [Long_AC],Z
635c 20 c7 61          JSR  Dec_LDA
635f 20 b5 61          JSR  Dec_LAC
6362 20 65 6b          JSR  Dec_LCT
6365 10 ef             BPL  _lpback
6367 4c a5 60          JMP  Main

636a ea b2 61 _forward LDA  [Long_PC],Z       ; forward copy
636d ea 92 59          STA  [Long_AC],Z
6370 20 c0 61          JSR  Inc_LPC
6373 20 ae 61          JSR  Inc_LAC
6376 20 65 6b          JSR  Dec_LCT
6379 10 ef             BPL  _forward
637b 4c a5 60          JMP  Main
637e          EndMod [Mon_Transfer] Size = 62 [$3e]

              ******************
              Module Mon_Compare
              ******************

637e 20 80 6b          JSR  Param_Range       ; Long_PC = source
6381 b3 50 fd          LBCS Mon_Error         ; Long_CT = count
6384 20 25 6a          JSR  Get_LAC           ; Long_AC = target
6387 b3 4a fd          LBCS Mon_Error
638a 20 0c 6b          JSR  Print_CR
638d a3 00             LDZ  #0
638f ea b2 61 _loop    LDA  [Long_PC],Z
6392 ea d2 59          CMP  [Long_AC],Z
6395 f0 03             BEQ  _laba
6397 20 da 6a          JSR  Hex_LPC
639a 20 ae 61 _laba    JSR  Inc_LAC
639d 20 c0 61          JSR  Inc_LPC
63a0 20 65 6b          JSR  Dec_LCT
63a3 10 ea             BPL  _loop
63a5 4c a5 60          JMP  Main
63a8          EndMod [Mon_Compare] Size = 42 [$2a]

              ***************
              Module Mon_Hunt
              ***************

63a8 20 80 6b          JSR  Param_Range       ; Long_PC = start
63ab b3 26 fd          LBCS Mon_Error         ; Long_CT = count
63ae a0 00             LDY  #0
63b0 20 49 6b          JSR  Get_Char
63b3 c9 27             CMP  #APOSTR
63b5 d0 17             BNE  _bin
63b7 20 49 6b          JSR  Get_Char          ; string hunt
63ba c9 00             CMP  #0
63bc f3 15 fd          LBEQ Mon_Error         ; null string

63bf 99 0c 04 _lpstr   STA  Mon_Data,Y
63c2 c8                INY
63c3 20 49 6b          JSR  Get_Char
63c6 f0 18             BEQ  _hunt
63c8 c0 20             CPY  #32               ;max. string length
63ca d0 f3             BNE  _lpstr
63cc 80 12             BRA  _hunt

63ce 20 23 6a _bin     JSR  Got_LAC
63d1 a5 59    _lpbin   LDA  Long_AC
63d3 99 0c 04          STA  Mon_Data,Y
63d6 c8                INY
63d7 20 25 6a          JSR  Get_LAC
63da b0 04             BCS  _hunt
63dc c0 20             CPY  #32               ;max. data length
63de d0 f1             BNE  _lpbin

63e0 84 65    _hunt    STY  Long_DA           ; hunt length
63e2 20 0c 6b          JSR  Print_CR

63e5 a0 00    _lpstart LDY  #0
63e7 20 d2 61 _lpins   JSR  Fetch
63ea d9 0c 04          CMP  Mon_Data,Y
63ed d0 08             BNE  _next
63ef c8                INY
63f0 c4 65             CPY  Long_DA
63f2 d0 f3             BNE  _lpins
63f4 20 da 6a          JSR  Hex_LPC           ; match
63f7 20 e1 ff _next    JSR  STOP
63fa f3 a9 fc          LBEQ Main
63fd 20 c0 61          JSR  Inc_LPC
6400 20 65 6b          JSR  Dec_LCT
6403 10 e0             BPL  _lpstart
6405 4c a5 60          JMP  Main
6408          EndMod [Mon_Hunt] Size = 96 [$60]

              ****************
              Module Load_Save
              ****************

6408 ac 08 04          LDY  Disk_Unit
640b 84 ba             STY  FA
640d a0 08             LDY  #8
640f 84 b9             STY  SA
6411 a0 00             LDY  #0
6413 84 bd             STY  BA
6415 84 b7             STY  FNLEN
6417 84 be             STY  FNBANK
6419 84 90             STY  STATUS
641b a9 04             LDA  #>Mon_Data
641d 85 bc             STA  FNADR+1
641f a9 0c             LDA  #<Mon_Data
6421 85 bb             STA  FNADR
6423 20 49 6b _skip    JSR  Get_Char          ; skip blanks
6426 f3 ab fc          LBEQ Mon_Error
6429 c9 20             CMP  #' '
642b f0 f6             BEQ  _skip
642d c9 22             CMP  #QUOTE            ; must be quote
642f d3 a2 fc          LBNE Mon_Error

6432 a6 6f             LDX  Buf_Index
6434 bd 00 02 _copyfn  LDA  Buffer,X          ; copy filename
6437 f0 4a             BEQ  _do               ; no more input
6439 e8                INX
643a c9 22             CMP  #QUOTE
643c f0 0c             BEQ  _unit             ; end of filename
643e 91 bb             STA  (FNADR),Y         ; store to filename
6440 e6 b7             INC  FNLEN
6442 c8                INY
6443 c0 13             CPY  #19               ; max = 16 plus prefix "@0:"
6445 90 ed             BCC  _copyfn
6447 4c d3 60          JMP  Mon_Error         ; filename too long

644a 86 6f    _unit    STX  Buf_Index         ; update read position
644c 20 49 6b          JSR  Get_Char
644f f0 32             BEQ  _do               ; no more parameter
6451 20 25 6a          JSR  Get_LAC
6454 b0 2d             BCS  _do
6456 a5 59             LDA  Long_AC           ; unit #
6458 85 ba             STA  FA
645a 20 25 6a          JSR  Get_LAC
645d b0 24             BCS  _do
645f 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = start address
6462 85 bd             STA  BA                ; Bank
6464 20 25 6a          JSR  Get_LAC           ; Long_AC = end address + 1
6467 b0 42             BCS  _load             ; no end address -> load/verify
6469 20 0c 6b          JSR  Print_CR
646c a6 59             LDX  Long_AC           ; X/Y = end address
646e a4 5a             LDY  Long_AC+1
6470 a5 93             LDA  VERCK             ; A = load/verify/save
6472 c9 53             CMP  #'S'
6474 d3 5d fc          LBNE Mon_Error         ; must be Save
6477 a9 00             LDA  #0
6479 85 b9             STA  SA                ; set SA for PRG
647b a9 61             LDA  #Long_PC          ; Long_PC = start address
647d 20 d8 ff          JSR  SAVE
6480 4c a5 60 _exit    JMP  Main

6483 a5 93    _do      LDA  VERCK
6485 c9 56             CMP  #'V'              ; Verify
6487 f0 07             BEQ  _exec
6489 c9 4c             CMP  #'L'              ; Load
648b d3 46 fc          LBNE Mon_Error
648e a9 00             LDA  #0                ; 0 = LOAD
6490 20 d5 ff _exec    JSR  LOAD              ; A == 0 : LOAD else VERIFY
6493 4f 90 ea          BBR4 STATUS,_exit
6496 a5 93             LDA  VERCK
6498 f3 39 fc          LBEQ Mon_Error
649b b3 08 fc          LBCS Main
649e 20 7d ff          JSR  PRIMM
64a1 20 45 52          .BYTE " ERROR",0
64a8 4c a5 60          JMP  Main

64ab a6 61    _load    LDX  Long_PC
64ad a4 62             LDY  Long_PC+1
64af a9 00             LDA  #0                ; 0 = use X/Y as load address
64b1 85 b9             STA  SA                ; and ignore load address from file
64b3 80 ce             BRA  _do
64b5          EndMod [Load_Save] Size = 173 [$ad]

              ***************
              Module Mon_Fill
              ***************

64b5 20 80 6b          JSR  Param_Range       ; Long_PC = target
64b8 b3 19 fc          LBCS Mon_Error         ; Long_CT = count
64bb 20 25 6a          JSR  Get_LAC           ; Long_AC = fill byte
64be b3 13 fc          LBCS Mon_Error
64c1 20 0c 6b          JSR  Print_CR
64c4 a3 00             LDZ  #0
64c6 a5 59    _loop    LDA  Long_AC
64c8 ea 92 61          STA  [Long_PC],Z
64cb 20 c0 61          JSR  Inc_LPC
64ce 20 65 6b          JSR  Dec_LCT
64d1 10 f3             BPL  _loop
64d3 4c a5 60          JMP  Main
64d6          EndMod [Mon_Fill] Size = 33 [$21]

              *******************
              Module Mon_Assemble
              *******************

64d6 20 25 6a          JSR  Get_LAC           ; get 1st. parameter
64d9 b3 f8 fb          LBCS Mon_Error
64dc 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = PC

64df a2 00    _start   LDX  #0                ; mne letter counter
64e1 86 66             STX  Long_DA+1         ; clear encoded MNE
64e3 86 6c             STX  Op_Flag           ; 6:long branch 5:32 bit
64e5 8e 06 04          STX  Op_Ix             ; operand byte index
64e8 8e 07 04          STX  Op_Len            ; operand length
64eb 20 49 6b _getin   JSR  Get_Char
64ee d0 05             BNE  _laba
64f0 e0 00             CPX  #0
64f2 f3 b1 fb          LBEQ Main

64f5 c9 20    _laba    CMP  #' '
64f7 f0 e6             BEQ  _start            ; restart after blank

              ;        check for long branches

64f9 e0 01             CPX  #1
64fb d0 0e             BNE  _labb             ; -> not 2nd. char
64fd c9 42             CMP  #'B'
64ff d0 0a             BNE  _labb             ; 2nd. char != 'B'
6501 ab 03 04          LDZ  Op_Mne
6504 c2 4c             CPZ  #'L'
6506 d0 03             BNE  _labb             ; 1st. Char != 'L'
6508 e7 6c             SMB6 Op_Flag           ; flag long branch
650a ca                DEX                    ; skip 'L'

650b 9d 03 04 _labb    STA  Op_Mne,X          ; next mne character
650e e8                INX
650f e0 03             CPX  #3
6511 d0 d8             BNE  _getin

              ;        encode 3 letter mnemonic

6513 bd 02 04 _lpenc   LDA  Op_Mne-1,X
6516 38                SEC
6517 e9 3f             SBC  #$3f              ; offset
6519 a0 05             LDY  #5                ; 5 bit code
651b 4a       _lpbit   LSR  A
651c 66 65             ROR  Long_DA
651e 66 66             ROR  Long_DA+1
6520 88                DEY
6521 d0 f8             BNE  _lpbit
6523 ca                DEX
6524 d0 ed             BNE  _lpenc

              ;        find packed MNE code in table

6526 a2 5a             LDX  #90               ; # of mnemonics
6528 a5 65             LDA  Long_DA
652a dd da 6e _lpfind  CMP  MNE_L,X           ; compare left MNE
652d d0 07             BNE  _nxfind
652f bc 35 6f          LDY  MNE_R,X
6532 c4 66             CPY  Long_DA+1         ; compare right MNE
6534 f0 06             BEQ  _found
6536 ca       _nxfind  DEX
6537 10 f1             BPL  _lpfind
6539 4c d3 60          JMP  Mon_Error

653c 8e 02 04 _found   STX  Ix_Mne

              ;        find 1st. opcode for this mnemonic

653f 8a                TXA
6540 a2 00             LDX  #0
6542 dd 90 6f _lpopc   CMP  MNE_Index,X
6545 f0 03             BEQ  _exopc
6547 e8                INX
6548 d0 f8             BNE  _lpopc
654a 86 6b    _exopc   STX  Op_Code

              ;        check for BBR BBS RMB SMB

654c 8a                TXA
654d 29 07             AND  #7
654f c9 07             CMP  #7
6551 d0 1d             BNE  _labc

6553 20 49 6b          JSR  Get_Char
6556 c9 30             CMP  #'0'
6558 93 79 fb          LBCC Mon_Error
655b c9 38             CMP  #'8'
655d b3 74 fb          LBCS Mon_Error
6560 0a                ASL  A
6561 0a                ASL  A
6562 0a                ASL  A
6563 0a                ASL  A
6564 05 6b             ORA  Op_Code
6566 85 6b             STA  Op_Code

6568 20 49 6b          JSR  Get_Char
656b c9 20             CMP  #' '
656d d3 64 fb          LBNE Mon_Error

              ;        read operand

6570 a9 00    _labc    LDA  #0
6572 85 6a    _labd    STA  Mode_Flags
6574 20 42 6a          JSR  Read_Number
6577 b3 5a fb          LBCS Mon_Error
657a f0 1c             BEQ  _labg             ; no operand
657c a5 5b             LDA  Long_AC+2
657e d3 53 fb          LBNE Mon_Error         ; -> overflow
6581 a0 02             LDY  #2                ; Y=2 word operand
6583 a5 5a             LDA  Long_AC+1
6585 d0 01             BNE  _labf             ; high byte not zero
6587 88                DEY                    ; Y=1 byte operand
6588 ae 06 04 _labf    LDX  Op_Ix             ; X = operand value #
658b 98                TYA                    ; A = 1:byte or 2:word
658c 9d 07 04          STA  Op_Len,X          ; store operand length
658f ee 06 04          INC  Op_Ix             ; ++index to operand value
6592 8a                TXA                    ; A = current index
6593 d0 03             BNE  _labg             ; -> at 2nd. byte
6595 20 6b 61          JSR  LAC_To_LCT        ; Long_CT = 1st. operand
6598 c6 6f    _labg    DEC  Buf_Index         ; back to delimiter

659a 20 49 6b _lpnop   JSR  Get_Char          ; get delimiter
659d f3 ed 00          LBEQ _adjust           ; end of operand
65a0 c9 20             CMP  #' '
65a2 f0 f6             BEQ  _lpnop

              ;        immediate

65a4 c9 23             CMP  #'#'
65a6 d0 08             BNE  _lbra
65a8 a5 6a             LDA  Mode_Flags
65aa d0 70             BNE  _error
65ac a9 80             LDA  #$80              ; immediate mode
65ae 80 c2             BRA  _labd

              ;        left bracket

65b0 c9 5b    _lbra    CMP  #'['
65b2 d0 0a             BNE  _indir
65b4 a5 6a             LDA  Mode_Flags
65b6 d0 64             BNE  _error
65b8 d7 6c             SMB5 Op_Flag           ; 32 bit mode
65ba a9 40             LDA  #$40              ; ( flag
65bc 80 b4             BRA  _labd

              ;        left parenthesis

65be c9 28    _indir   CMP  #'('
65c0 d0 08             BNE  _comma
65c2 a5 6a             LDA  Mode_Flags
65c4 d0 56             BNE  _error
65c6 a9 40             LDA  #$40              ; ( flag
65c8 80 a8             BRA  _labd

              ;        comma

65ca c9 2c    _comma   CMP  #','
65cc d0 1f             BNE  _stack
65ce ad 06 04          LDA  Op_Ix             ; operand value #
65d1 f0 49             BEQ  _error
65d3 a2 04             LDX  #4                ; outside comma
65d5 a5 6a             LDA  Mode_Flags
65d7 f0 0e             BEQ  _comma1           ; no flags yet
65d9 c9 78             CMP  #$78              ; ($nn,SP)
65db f0 0a             BEQ  _comma1
65dd c9 48             CMP  #$48              ; ($nn)
65df f0 06             BEQ  _comma1
65e1 a2 20             LDX  #$20              ; , inside comma
65e3 c9 40             CMP  #$40              ; (
65e5 d0 35             BNE  _error
65e7 8a       _comma1  TXA
65e8 05 6a             ORA  Mode_Flags
65ea 4c 72 65          JMP  _labd

              ;        stack relative

65ed c9 53    _stack   CMP  #'S'
65ef d0 12             BNE  _rbra
65f1 20 49 6b          JSR  Get_Char
65f4 c9 50             CMP  #'P'
65f6 d0 24             BNE  _error
65f8 a5 6a             LDA  Mode_Flags
65fa c9 60             CMP  #$60              ; ($nn,
65fc d0 1e             BNE  _error
65fe 09 10             ORA  #%0001 0000       ; SP flag
6600 4c 72 65          JMP  _labd

              ;        right bracket

6603 c9 5d    _rbra    CMP  #']'
6605 d0 18             BNE  _right
6607 5f 6c 12          BBR5 Op_Flag,_error
660a ad 06 04          LDA  Op_Ix
660d f3 c4 fa          LBEQ Mon_Error         ; no value
6610 a5 6a             LDA  Mode_Flags
6612 c9 40             CMP  #$40              ; (
6614 d3 bd fa          LBNE Mon_Error
6617 09 08             ORA  #%0000 1000       ; )
6619 4c 72 65          JMP  _labd

661c 4c d3 60 _error   JMP  Mon_Error

              ;        right parenthesis

661f c9 29    _right   CMP  #')'
6621 d0 1a             BNE  _X
6623 ad 06 04          LDA  Op_Ix
6626 f3 ab fa          LBEQ Mon_Error         ; no value
6629 a5 6a             LDA  Mode_Flags
662b c9 40             CMP  #$40              ; (
662d f0 09             BEQ  _right1
662f c9 61             CMP  #$61              ; ($nn,X
6631 f0 05             BEQ  _right1
6633 c9 70             CMP  #$70              ; ($nn,SP
6635 d3 9c fa          LBNE Mon_Error
6638 09 08    _right1  ORA  #%0000 1000       ; )
663a 4c 72 65          JMP  _labd

663d c9 58    _X       CMP  #'X'
663f d0 16             BNE  _Y
6641 ad 06 04          LDA  Op_Ix
6644 f3 8d fa          LBEQ Mon_Error
6647 a5 6a             LDA  Mode_Flags
6649 c9 60             CMP  #$60
664b f0 05             BEQ  _X1
664d c9 04             CMP  #4
664f d3 82 fa          LBNE Mon_Error
6652 09 01    _X1      ORA  #%0000 0001
6654 4c 72 65          JMP  _labd

              ;        Y

6657 c9 59    _Y       CMP  #'Y'
6659 d0 1a             BNE  _Z
665b ad 06 04          LDA  Op_Ix
665e f3 73 fa          LBEQ Mon_Error
6661 a5 6a             LDA  Mode_Flags
6663 c9 4c             CMP  #$4c             ; ($nn),
6665 f0 09             BEQ  _Y1
6667 c9 04             CMP  #4               ; $nn,
6669 f0 05             BEQ  _Y1
666b c9 7c             CMP  #$7c             ; ($nn,SP),
666d d3 64 fa          LBNE Mon_Error
6670 09 02    _Y1      ORA  #%0000 0010      ; Y
6672 4c 72 65          JMP  _labd

              ;        Z

6675 c9 5a    _Z       CMP  #'Z'
6677 d3 5a fa          LBNE Mon_Error
667a ad 06 04          LDA  Op_Ix
667d f3 54 fa          LBEQ Mon_Error
6680 a5 6a             LDA  Mode_Flags
6682 c9 4c             CMP  #$4c              ; $nn,
6684 d3 4d fa          LBNE Mon_Error
6687 09 03             ORA  #%0000 0011       ; Z
6689 4c 72 65          JMP  _labd

              ;        BBR BBS RMB SMB  two operands

668c ad 02 04 _adjust  LDA  Ix_Mne
668f ae 06 04          LDX  Op_Ix             ; # if values
6692 f0 52             BEQ  _match            ; -> no operand
6694 ca                DEX
6695 f0 25             BEQ  _one             ; ->  one operand
6697 ca                DEX
6698 d3 39 fa          LBNE Mon_Error         ; -> error if more than 2
669b c9 05             CMP  #5                ; BBR
669d f0 05             BEQ  _BB
669f c9 06             CMP  #6                ; BBS
66a1 d3 30 fa          LBNE Mon_Error
66a4 a5 5e    _BB      LDA  Long_CT+1
66a6 d3 2b fa          LBNE Mon_Error
66a9 a9 03             LDA  #3                ; offset
66ab 20 91 67          JSR  Branch_Target
66ae a5 6b             LDA  Op_Code
66b0 a4 59             LDY  Long_AC
66b2 a6 5d             LDX  Long_CT
66b4 86 59             STX  Long_AC
66b6 84 5a             STY  Long_AC+1
66b8 a0 02             LDY  #2
66ba 80 4d             BRA  _store

              ;        one operand in Long_CT

66bc a6 5d    _one     LDX  Long_CT
66be a4 5e             LDY  Long_CT+1
66c0 86 59             STX  Long_AC
66c2 84 5a             STY  Long_AC+1            ; Aval = operand
66c4 a2 0a             LDX  #10
66c6 dd 8f 70 _lpbrain CMP  BRAIN-1,X
66c9 f0 05             BEQ  _branch
66cb ca                DEX
66cc d0 f8             BNE  _lpbrain
66ce 80 16             BRA  _match

              ;        branch instruction

66d0 a5 6a    _branch  LDA  Mode_Flags
66d2 d3 ff f9          LBNE Mon_Error         ; only value
66d5 a9 02             LDA  #2                ; branch offset
66d7 20 91 67          JSR  Branch_Target
66da a5 6b             LDA  Op_Code
66dc a0 01             LDY  #1                ; short branch
66de 6f 6c 03          BBR6 Op_Flag,_bran1
66e1 c8                INY                    ; long branch
66e2 09 03             ORA  #3
66e4 80 23    _bran1   BRA  _store

              ;        find opcode matching mnemonic and address mode

66e6 20 bc 67 _match   JSR  Mode_Index
66e9 20 a4 67 _lpmatch JSR  Match_Mode
66ec f0 17             BEQ  _okmat
66ee ad 07 04          LDA  Op_Len
66f1 f3 e0 f9          LBEQ Mon_Error
66f4 a5 6a             LDA  Mode_Flags
66f6 33 db f9          LBMI Mon_Error
66f9 29 3f             AND  #%0011 1111
66fb 85 6a             STA  Mode_Flags
66fd ee 07 04          INC  Op_Len
6700 20 ce 67          JSR  Size_To_Mode
6703 80 e4             BRA  _lpmatch
6705 ac 07 04 _okmat   LDY  Op_Len
6708 8a                TXA

              ;        store instruction bytes
              ;        -----------------------
              ;        A    = opcode
              ;        Y    = operand length
              ;        Long_AC = operand value

6709 85 6b    _store   STA  Op_Code
670b 84 6d             STY  Op_Size
670d e6 6d             INC  Op_Size
670f 5f 6c 17          BBR5 Op_Flag,_storen
6712 a9 ea             LDA  #$ea              ; 32 bit prefix
6714 a3 00             LDZ  #0
6716 ea 92 61          STA  [Long_PC],Z       ; store prefix
6719 1b                INZ
671a a5 6b             LDA  Op_Code
671c ea 92 61          STA  [Long_PC],Z       ; store opcode
671f 1b                INZ
6720 a5 59             LDA  Long_AC
6722 ea 92 61          STA  [Long_PC],Z       ; store address
6725 e6 6d             INC  Op_Size
6727 80 13             BRA  _print

6729 5a       _storen  PHY
672a fb                PLZ                    ; Z = Y
672b f0 0a             BEQ  _store1

672d b9 58 00 _lpsto   LDA  Long_AC-1,Y
6730 ea 92 61          STA  [Long_PC],Z
6733 3b                DEZ
6734 88                DEY
6735 d0 f6             BNE  _lpsto

6737 a5 6b    _store1  LDA  Op_Code
6739 ea 92 61          STA  [Long_PC],Z

673c 20 7d ff _print   JSR  PRIMM
673f 0d 91 41          .BYTE 13,$91,"A \eQ",0
6746 20 19 68          JSR  Print_Code
6749 e6 6d             INC  Op_Size
674b a5 6d             LDA  Op_Size
674d 20 72 6b          JSR  Add_LPC

              ; print out command 'A' together with next address
              ; and put it into buffer too,
              ; for easy entry of next assembler instruction

6750 20 7d ff          JSR  PRIMM
6753 0d 41 20          .BYTE CR,"A ",0

6757 a9 41             LDA  #'A'
6759 8d 00 02          STA  Buffer
675c a9 20             LDA  #' '
675e 8d 01 02          STA  Buffer+1
6761 a0 02             LDY  #2
6763 a2 02             LDX  #2                ; 6 digits
6765 b5 61             LDA  Long_PC,X
6767 d0 01             BNE  _auto
6769 ca                DEX                    ; 4 digits
676a da       _auto    PHX
676b b5 61             LDA  Long_PC,X
676d 20 25 6b          JSR  A_To_Hex
6770 99 00 02          STA  Buffer,Y
6773 20 d2 ff          JSR  CHROUT
6776 c8                INY
6777 8a                TXA
6778 99 00 02          STA  Buffer,Y
677b 20 d2 ff          JSR  CHROUT
677e c8                INY
677f fa                PLX
6780 ca                DEX
6781 10 e7             BPL  _auto

6783 a9 20             LDA  #' '
6785 99 00 02          STA  Buffer,Y
6788 20 d2 ff          JSR  CHROUT
678b c8                INY
678c 98                TYA
678d aa                TAX
678e 4c aa 60          JMP  Main_A
6791          EndMod [Mon_Assemble] Size = 699 [$2bb]

              ********************
              Module Branch_Target
              ********************

6791 c3 59             DEW  Long_AC
6793 3a                DEC  A
6794 d0 fb             BNE  Branch_Target

              ;        Target - PC

6796 38                SEC
6797 a5 59             LDA  Long_AC
6799 e5 61             SBC  Long_PC
679b 85 59             STA  Long_AC
679d a5 5a             LDA  Long_AC+1
679f e5 62             SBC  Long_PC+1
67a1 85 5a             STA  Long_AC+1
67a3 60                RTS
67a4          EndMod [Branch_Target] Size = 19 [$13]

              *****************
              Module Match_Mode
              *****************

              ;        find matching mnemonic and address mode

67a4 a6 6b             LDX  Op_Code           ; try this opcode
67a6 a5 6a             LDA  Mode_Flags         ; size and address mode
67a8 dd 9a 70 _loop    CMP  LEN_ADM,X
67ab f0 0e             BEQ  _return           ; success  ZF=1

              ;        search for next opcode with same mnemonic

67ad e8       _next    INX                    ; next opcode
67ae f0 0a             BEQ _error
67b0 bc 90 6f          LDY  MNE_Index,X
67b3 cc 02 04          CPY  Ix_Mne            ; same mnemonic ?
67b6 f0 f0             BEQ  _loop             ; -> compare again
67b8 80 f3             BRA  _next

67ba ca       _error   DEX                    ; X = $ff ZF=0
67bb 60       _return  RTS
67bc          EndMod [Match_Mode] Size = 24 [$18]

              *****************
              Module Mode_Index
              *****************

67bc a5 6a             LDA  Mode_Flags
67be a2 00             LDX  #0
67c0 dd 9a 71 _loop    CMP  ADMODE,X
67c3 f0 07             BEQ  _found
67c5 e8                INX
67c6 e0 10             CPX  #16
67c8 90 f6             BCC  _loop
67ca 8a                TXA
67cb 60                RTS
67cc 86 6a    _found   STX  Mode_Flags
67ce          EndMod [Mode_Index] Size = 18 [$12]

              *******************
              Module Size_To_Mode
              *******************

67ce ad 07 04          LDA  Op_Len
67d1 4a                LSR  A
67d2 6a                ROR  A
67d3 6a                ROR  A
67d4 05 6a             ORA  Mode_Flags
67d6 85 6a             STA  Mode_Flags
67d8 a2 00             LDX  #0
67da 60                RTS
67db          EndMod [Size_To_Mode] Size = 13 [$d]

              **********************
              Module Mon_Disassemble
              **********************

67db 20 25 6a          JSR  Get_LAC           ; get 1st. parameter
67de b0 08             BCS  _nopar
67e0 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = start address
67e3 20 25 6a          JSR  Get_LAC           ; Long_AC = end address
67e6 90 06             BCC  range
67e8 a9 20    _nopar   LDA  #32               ; disassemble 32 bytes
67ea 85 5d             STA  Long_CT
67ec 80 06             BRA  _loop
67ee 20 92 61 range    JSR  LAC_Minus_LPC     ; Long_CT = range
67f1 93 e0 f8          LBCC Mon_Error         ; -> negative

67f4 20 11 6b _loop    JSR  CR_Erase          ; prepare empty line
67f7 20 e1 ff          JSR  STOP
67fa f3 a9 f8          LBEQ Main
67fd 20 13 68          JSR  Dis_Code          ; disassemble one line
6800 e6 6d             INC  Op_Size
6802 a5 6d             LDA  Op_Size
6804 20 72 6b          JSR  Add_LPC           ; advance address
6807 a5 5d             LDA  Long_CT
6809 38                SEC
680a e5 6d             SBC  Op_Size
680c 85 5d             STA  Long_CT
680e b0 e4             BCS  _loop
6810 4c a5 60          JMP  Main
6813          EndMod [Mon_Disassemble] Size = 56 [$38]

              ***************
              Module Dis_Code
              ***************

6813 20 7d ff          JSR  PRIMM
6816 2e 20 00          .BYTE ". ",0
6819          EndMod [Dis_Code] Size = 6 [$6]

              *****************
              Module Print_Code
              *****************

              ;        print 24 bit address of instruction

6819 20 da 6a          JSR  Hex_LPC          ; 24 bit address

              ;        read opcode and calculate length and address mode

681c a0 00             LDY  #0
681e 84 6c             STY  Op_Flag           ; clear flags
6820 20 d2 61          JSR  Fetch             ; fetch from (banked) address

              ;        check for Q instructions

6823 c9 42             CMP  #$42              ; NEG
6825 d0 0f             BNE  _nop
6827 c8                INY                    ; Y = 1
6828 20 d2 61          JSR  Fetch
682b c9 42             CMP  #$42              ; NEG
682d d0 07             BNE  _nop
682f c7 6c             SMB4 Op_Flag           ; Q flag
6831 a9 02             LDA  #2
6833 20 72 6b          JSR  Add_LPC           ; skip NEG NEG

              ;        check for 32 bit address mode

6836 a0 00    _nop     LDY  #0
6838 20 d2 61          JSR  Fetch
683b 85 6b             STA  Op_Code
683d aa                TAX
683e c9 ea             CMP  #$ea              ; prefix ?
6840 d0 12             BNE  _normal
6842 c8                INY
6843 20 d2 61          JSR  Fetch             ; opcode after prefix
6846 29 1f             AND  #%0001 1111       ; identify ($nn),Z codes
6848 c9 12             CMP  #%0001 0010
684a d0 08             BNE  _normal
684c d7 6c             SMB5 Op_Flag           ; set extended flag
684e 20 d2 61          JSR  Fetch
6851 85 6b             STA  Op_Code           ; code after prefix
6853 aa                TAX

6854 bc 9a 70 _normal  LDY  LEN_ADM,X         ; Y = length and address mode
6857 98                TYA                    ; A = length and address mode
6858 29 0f             AND  #15               ; A = address mode
685a aa                TAX                    ; X = address mode
685b bd 9a 71          LDA  ADMODE,X          ; A = mode flags
685e 85 69             STA  Adr_Flags         ; store
6860 98                TYA                    ; A = length and address mode
6861 29 c0             AND  #%1100 0000       ; mask instruction length
6863 0a                ASL  A                 ; rotate into lower two bits
6864 2a                ROL  A
6865 2a                ROL  A
6866 85 6d             STA  Op_Size           ; store
6868 5f 6c 02          BBR5 Op_Flag,_norm1
686b e6 6d             INC  Op_Size
686d          _norm1

              ;        print instruction and operand bytes

686d a0 00             LDY  #0
686f a9 20             LDA  #' '
6871 4f 6c 02          BBR4 Op_Flag,_blpr
6874 a9 2a             LDA  #'*'              ; print * for NEG NEG
6876 20 d2 ff _blpr    JSR  CHROUT
6879 20 d2 61 _lphex   JSR  Fetch
687c 20 04 6b          JSR  Print_Hex_Blank
687f c0 02             CPY  #2
6881 f0 13             BEQ  _long             ; stop after 3 bytes
6883 c4 6d             CPY  Op_Size
6885 c8                INY
6886 90 f1             BCC  _lphex

              ;        fill up with blanks

6888 c0 03    _lpfill  CPY  #3
688a b0 0a             BCS  _long
688c 20 7d ff          JSR  PRIMM
688f 20 20 20          .BYTE "   ",0
6893 c8                INY
6894 80 f2             BRA  _lpfill

              ;        detect long branches

6896 a9 9e    _long    LDA  #YELLOW
6898 20 d2 ff          JSR  CHROUT
689b a6 6b             LDX  Op_Code
689d bd 9a 70          LDA  LEN_ADM,X
68a0 c9 a0             CMP  #%1010 0000        ; long branch mode
68a2 d0 07             BNE  _locate
68a4 e7 6c             SMB6 Op_Flag            ; set long branch flag
68a6 a9 4c             LDA  #'L'
68a8 20 d2 ff          JSR  CHROUT

              ;        locate mnemonic text

68ab a6 6b    _locate  LDX  Op_Code           ; X = opcode
68ad bc 90 6f          LDY  MNE_Index,X       ; Y = index to mnemonic text
68b0 b9 da 6e          LDA  MNE_L,Y           ; A = packed left part
68b3 85 5a             STA  Long_AC+1
68b5 b9 35 6f          LDA  MNE_R,Y           ; A = packed right part
68b8 85 59             STA  Long_AC

              ;        unpack and print mnemonic text

68ba a2 03             LDX  #3                ; 3 letters
68bc a9 00    _lpmne   LDA  #0
68be a0 05             LDY  #5                ; 5 bits per letter
68c0 06 59    _lplet   ASL  Long_AC
68c2 26 5a             ROL  Long_AC+1
68c4 2a                ROL  A                 ; rotate letter into A
68c5 88                DEY
68c6 d0 f8             BNE  _lplet            ; next bit
68c8 69 3f             ADC  #$3f              ; add offset (C = 0)
68ca ca                DEX
68cb f0 06             BEQ  _lastc            ; 3rd. character
68cd 4b                TAZ                    ; remember
68ce 20 d2 ff          JSR  CHROUT            ; and print it
68d1 80 e9             BRA  _lpmne            ; next letter

68d3 4f 6c 21 _lastc   BBR4 Op_Flag,_lbra     ; -> no Q
68d6 c9 41             CMP  #'A'              ; LDA, STA, ORA
68d8 f0 0c             BEQ  _Q3
68da c9 43             CMP  #'C'              ; DEC, INC
68dc d0 0f             BNE  _Q4
68de c2 45             CPZ  #'E'              ; DEC
68e0 f0 04             BEQ  _Q3
68e2 c2 4e             CPZ  #'N'              ; INC
68e4 d0 07             BNE  _Q4
68e6 a9 51    _Q3      LDA  #'Q'              ; LDQ, STQ, ORQ, INQ, DEQ
68e8 20 d2 ff          JSR  CHROUT
68eb 80 2e             BRA  _mne4
68ed 20 d2 ff _Q4      JSR  CHROUT
68f0 a9 51             LDA  #'Q'              ; add Q as 4th. char
68f2 20 d2 ff          JSR  CHROUT
68f5 80 27             BRA  _mne5

68f7 20 d2 ff _lbra    JSR  CHROUT            ; 3rd. character
68fa ef 6c 21          BBS6 Op_Flag,_mne5     ; long branch

              ;        check for 4-letter bit instructions

68fd a5 6b             LDA  Op_Code
68ff 29 0f             AND  #15
6901 c9 07             CMP  #7                ; RMB & SMB
6903 f0 06             BEQ  _biti
6905 c9 0f             CMP  #15               ; BBR & BBS
6907 d0 12             BNE  _mne4
6909 f7 6c             SMB7 Op_Flag           ; flag two operands
690b a5 6b    _biti    LDA  Op_Code
690d 29 70             AND  #%0111 0000
690f 0a                ASL  A
6910 2a                ROL  A
6911 2a                ROL  A
6912 2a                ROL  A
6913 2a                ROL  A
6914 09 30             ORA  #'0'
6916 20 d2 ff          JSR  CHROUT
6919 80 03             BRA  _mne5

691b 20 07 6b _mne4    JSR  Print_Blank
691e 20 07 6b _mne5    JSR  Print_Blank
6921 a9 05             LDA  #WHITE
6923 20 d2 ff          JSR  CHROUT

              ;        check for accumulator operand

6926 a5 6b             LDA  Op_Code
6928 a2 08             LDX  #8
692a ca       _lpaccu  DEX
692b 30 12             BMI  _oper
692d dd aa 71          CMP  ACCUMODE,X
6930 d0 f8             BNE  _lpaccu

6932 a9 41             LDA  #'A'
6934 4f 6c 02          BBR4 Op_Flag,_accu
6937 a9 51             LDA  #'Q'
6939 20 d2 ff _accu    JSR  CHROUT
693c 4c 22 6a          JMP  _return

              ;        fetch and decode operand

693f a6 6d    _oper    LDX  Op_Size
6941 f3 df 00          LBEQ _return           ; -> no operand

6944 7f 69 04          BBR7 Adr_Flags,_laba   ; bit 7: immediate
6947 a9 23             LDA  #'#'
6949 80 0a             BRA  _labb
694b 6f 69 0a _laba    BBR6 Adr_Flags,_labc   ; bit 6: left (
694e a9 28             LDA  #'('
6950 5f 6c 02          BBR5 Op_Flag,_labb
6953 a9 5b             LDA  #'['
6955 20 d2 ff _labb    JSR  CHROUT
6958 a9 24    _labc    LDA  #'$'
695a 20 d2 ff          JSR  CHROUT

              ;        fetch operand to Long_AC

695d a0 00             LDY  #0
695f 84 5a             STY  Long_AC+1
6961 c8       _lpfop   INY
6962 20 d2 61          JSR  Fetch
6965 99 58 00          STA  Long_AC-1,Y
6968 c4 6d             CPY  Op_Size
696a 90 f5             BCC  _lpfop

              ;        interpret address modes

696c a6 6b             LDX  Op_Code
696e bd 9a 70          LDA  LEN_ADM,X
6971 29 20             AND  #%0010 0000       ; branches
6973 d3 84 00          LBNE _rel

              ;        print 16 bit operand hi/lo or 8 bit operand

6976 5f 6c 0c          BBR5 Op_Flag,_proper
6979 a5 5a             LDA  Long_AC+1
697b 20 19 6b          JSR  Print_Hex         ; [$nn],Z
697e a9 5d             LDA  #']'
6980 20 d2 ff          JSR  CHROUT
6983 80 35             BRA  _labf

6985 a4 6d    _proper  LDY  Op_Size
6987 7f 6c 02          BBR7 Op_Flag,_lpoper
698a a0 01             LDY  #1
698c b9 58 00 _lpoper  LDA  Long_AC-1,Y
698f 20 19 6b          JSR  Print_Hex
6992 88                DEY
6993 d0 f7             BNE  _lpoper

6995 5f 69 1a          BBR5 Adr_Flags,_labe   ; comma flag
6998 a9 2c             LDA  #','
699a 20 d2 ff          JSR  CHROUT

699d 4f 69 0a          BBR4 Adr_Flags,_labd   ; SP flag
69a0 a9 53             LDA  #'S'
69a2 20 d2 ff          JSR  CHROUT
69a5 a9 50             LDA  #'P'
69a7 20 d2 ff          JSR  CHROUT

69aa 0f 69 05 _labd    BBR0 Adr_Flags,_labe   ; X flag
69ad a9 58             LDA  #'X'
69af 20 d2 ff          JSR  CHROUT

69b2 3f 69 05 _labe    BBR3 Adr_Flags,_labf   ; ) flag
69b5 a9 29             LDA  #')'
69b7 20 d2 ff          JSR  CHROUT

69ba 4f 6c 08 _labf    BBR4 Op_Flag,_comch    ; not a Q instruction
69bd a5 69             LDA  Adr_Flags
69bf 29 03             AND  #3
69c1 c9 01             CMP  #1
69c3 d0 5d             BNE  _return           ; Q only with ,X

69c5 2f 69 12 _comch   BBR2 Adr_Flags,_labg   ; , flag
69c8 a9 2c             LDA  #','
69ca 20 d2 ff          JSR  CHROUT

69cd a5 69             LDA  Adr_Flags
69cf 29 03             AND  #%0000 0011 ; $03
69d1 f0 07             BEQ  _labg
69d3 a8                TAY
69d4 b9 b9 71          LDA  Index_Char-1,Y
69d7 20 d2 ff          JSR  CHROUT

              ;        fetch 2nd. operand for BBR and BBS

69da 7f 6c 45 _labg    BBR7 Op_Flag,_return
69dd a9 2c             LDA  #','
69df 20 d2 ff          JSR  CHROUT
69e2 a9 24             LDA  #'$'
69e4 20 d2 ff          JSR  CHROUT
69e7 a0 02             LDY  #2
69e9 20 d2 61          JSR  Fetch
69ec 85 59             STA  Long_AC
69ee a9 00             LDA  #0
69f0 85 5a             STA  Long_AC+1
69f2 88                DEY
69f3 84 6d             STY  Op_Size           ; Op_Size = 1
69f5 a9 03             LDA  #3                ; offset for relative address
69f7 80 02             BRA  _rela

69f9 a9 02    _rel     LDA  #2                ; offset for relative address
69fb 48       _rela    PHA
69fc a5 6d             LDA  Op_Size           ; 1:short   2:long
69fe 4a                LSR  A
69ff 6a                ROR  A
6a00 25 59             AND  Long_AC
6a02 10 04             BPL  _labh
6a04 a9 ff             LDA  #$ff              ; backward branch
6a06 85 5a             STA  Long_AC+1

6a08 fa       _labh    PLX                    ; offset 2 or 3
6a09 e3 59    _lpinw   INW  Long_AC
6a0b ca                DEX
6a0c d0 fb             BNE  _lpinw

6a0e 18                CLC
6a0f a5 59             LDA  Long_AC
6a11 65 61             ADC  Long_PC
6a13 48                PHA
6a14 a5 5a             LDA  Long_AC+1
6a16 65 62             ADC  Long_PC+1
6a18 aa                TAX
6a19 68                PLA
6a1a 20 fe 6a          JSR  Print_XA_Hex
6a1d 7f 6c 02          BBR7 Op_Flag,_return
6a20 e6 6d             INC  Op_Size
6a22 60       _return  RTS
6a23          EndMod [Print_Code] Size = 522 [$20a]

              **************
              Module Got_LAC
              **************

6a23 c6 6f             DEC  Buf_Index
6a25          EndMod [Got_LAC] Size = 2 [$2]

              **************
              Module Get_LAC
              **************

6a25 20 42 6a          JSR  Read_Number
6a28 b0 0f             BCS  _error            ; illegal character
6a2a f0 10             BEQ  _noval            ; no value
6a2c 20 47 6b          JSR  Got_Char          ; delimiter ?
6a2f f0 0d             BEQ  _end              ; end of input
6a31 c9 20             CMP  #' '
6a33 f0 0b             BEQ  _ok
6a35 c9 2c             CMP  #','
6a37 f0 07             BEQ  _ok
6a39 4c d3 60 _error   JMP  Mon_Error         ; stack is reset in Mon_Error

6a3c 38       _noval   SEC
6a3d 60                RTS

6a3e c6 6f    _end     DEC  Buf_Index
6a40 18       _ok      CLC
6a41 60                RTS
6a42          EndMod [Get_LAC] Size = 29 [$1d]

              ******************
              Module Read_Number
              ******************

6a42 da                PHX
6a43 5a                PHY
6a44 db                PHZ
6a45 a9 00             LDA  #0
6a47 85 6e             STA  Dig_Cnt               ; count columns read
6a49 85 59             STA  Long_AC           ; clear result Long_AC
6a4b 85 5a             STA  Long_AC+1
6a4d 85 5b             STA  Long_AC+2
6a4f 85 5c             STA  Long_AC+3

6a51 20 3a 6b          JSR  Get_Glyph         ; get 1st. character
6a54 f0 7d             BEQ  _exit
6a56 c9 27             CMP  #APOSTR           ; character entry 'C
6a58 d0 09             BNE  _numeric
6a5a 20 49 6b          JSR  Get_Char          ; character after '
6a5d 85 59             STA  Long_AC
6a5f e6 6e             INC  Dig_Cnt
6a61 80 70             BRA  _exit

6a63 a0 03    _numeric LDY  #3                ; $ + % %
6a65 d9 18 61 _prefix  CMP  Cons_Prefix,Y     ; Y = base index
6a68 f0 06             BEQ  _digit            ; -> valid prefix
6a6a 88                DEY
6a6b 10 f8             BPL  _prefix
6a6d c8                INY                    ; Y = 0
6a6e c6 6f             DEC  Buf_Index         ; character is digit

6a70 20 49 6b _digit   JSR  Get_Char          ; hex -> BCD
6a73 f0 5e             BEQ  _exit             ; ? : ; and zero terminate
6a75 c9 30             CMP  #'0'
6a77 90 5a             BCC  _exit
6a79 c9 3a             CMP  #':'
6a7b 90 0a             BCC  _valid            ; 0-9
6a7d c9 41             CMP  #'A'
6a7f 90 52             BCC  _exit
6a81 c9 47             CMP  #'G'
6a83 b0 4e             BCS  _exit
6a85 e9 07             SBC  #7                ; hex conversion
6a87 e9 2f    _valid   SBC  #'0'-1
6a89 d9 b2 71          CMP  Num_Base,Y
6a8c b0 42             BCS  _error
6a8e 48                PHA                    ; push digit
6a8f e6 6e             INC  Dig_Cnt

6a91 c0 01             CPY  #1                ; decimal
6a93 d0 0a             BNE  _laba
6a95 a2 03             LDX  #3                ; push Long_AC * 2
6a97 18                CLC
6a98 b5 59    _push    LDA  Long_AC,X
6a9a 2a                ROL  A
6a9b 48                PHA
6a9c ca                DEX
6a9d 10 f9             BPL  _push

6a9f be b6 71 _laba    LDX  Num_Bits,Y
6aa2 06 59    _shift   ASL  Long_AC
6aa4 26 5a             ROL  Long_AC+1
6aa6 eb 5b 00          ROW  Long_AC+2
6aa9 b0 25             BCS  _error            ; overflow
6aab ca                DEX
6aac d0 f4             BNE  _shift

6aae c0 01             CPY  #1                ; decimal adjustment
6ab0 d0 0e             BNE  _labc
6ab2 a2 00             LDX  #0
6ab4 a3 03             LDZ  #3
6ab6 18                CLC
6ab7 68       _pull    PLA
6ab8 75 59             ADC  Long_AC,X
6aba 95 59             STA  Long_AC,X
6abc e8                INX
6abd 3b                DEZ
6abe 10 f7             BPL  _pull

6ac0 68       _labc    PLA                    ; pull digit
6ac1 18                CLC
6ac2 65 59             ADC  Long_AC
6ac4 85 59             STA  Long_AC
6ac6 90 a8             BCC  _digit
6ac8 e6 5a             INC  Long_AC+1
6aca d0 a4             BNE  _digit
6acc e3 5b             INW  Long_AC+2
6ace d0 a0             BNE  _digit

6ad0 38       _error   SEC
6ad1 80 01             BRA  _return
6ad3 18       _exit    CLC
6ad4 fb       _return  PLZ
6ad5 7a                PLY
6ad6 fa                PLX
6ad7 a5 6e             LDA  Dig_Cnt           ; digits read
6ad9 60                RTS
6ada          EndMod [Read_Number] Size = 152 [$98]

              **************
              Module Hex_LPC
              **************

6ada a6 64             LDX  Long_PC+3
6adc f0 15             BEQ  _laba
6ade a9 9e             LDA  #YELLOW
6ae0 20 d2 ff          JSR  CHROUT
6ae3 8a                TXA
6ae4 20 19 6b          JSR  Print_Hex
6ae7 a5 63             LDA  Long_PC+2
6ae9 20 19 6b          JSR  Print_Hex
6aec a9 05             LDA  #WHITE
6aee 20 d2 ff          JSR  CHROUT
6af1 80 07             BRA  _labb
6af3 a5 63    _laba    LDA  Long_PC+2
6af5 f0 03             BEQ  _labb
6af7 20 19 6b          JSR  Print_Hex
6afa a6 62    _labb    LDX  Long_PC+1
6afc a5 61             LDA  Long_PC
6afe          EndMod [Hex_LPC] Size = 36 [$24]

              *******************
              Module Print_XA_Hex
              *******************

6afe 48                PHA
6aff 8a                TXA
6b00 20 19 6b          JSR  Print_Hex
6b03 68                PLA
6b04          EndMod [Print_XA_Hex] Size = 6 [$6]

              **********************
              Module Print_Hex_Blank
              **********************

6b04 20 19 6b          JSR  Print_Hex
6b07          EndMod [Print_Hex_Blank] Size = 3 [$3]

              ******************
              Module Print_Blank
              ******************

6b07 a9 20             LDA  #' '
6b09 4c d2 ff          JMP  CHROUT
6b0c          EndMod [Print_Blank] Size = 5 [$5]

              ***************
              Module Print_CR
              ***************

6b0c a9 0d             LDA  #13
6b0e 4c d2 ff          JMP  CHROUT
6b11          EndMod [Print_CR] Size = 5 [$5]

              ***************
              Module CR_Erase
              ***************

6b11 20 7d ff          JSR  PRIMM
6b14 0d 1b 51          .BYTE "\r\eQ",0
6b18 60                RTS
6b19          EndMod [CR_Erase] Size = 8 [$8]

              ****************
              Module Print_Hex
              ****************

6b19 da                PHX
6b1a 20 25 6b          JSR  A_To_Hex
6b1d 20 d2 ff          JSR  CHROUT
6b20 8a                TXA
6b21 fa                PLX
6b22 4c d2 ff          JMP  CHROUT
6b25          EndMod [Print_Hex] Size = 12 [$c]

              ***************
              Module A_To_Hex
              ***************

6b25 48                PHA
6b26 20 2f 6b          JSR  _nibble
6b29 aa                TAX
6b2a 68                PLA
6b2b 4a                LSR  A
6b2c 4a                LSR  A
6b2d 4a                LSR  A
6b2e 4a                LSR  A

6b2f 29 0f    _nibble  AND  #15
6b31 c9 0a             CMP  #10
6b33 90 02             BCC  _lab
6b35 69 06             ADC  #6
6b37 69 30    _lab     ADC  #'0'
6b39 60                RTS
6b3a          EndMod [A_To_Hex] Size = 21 [$15]

              ****************
              Module Get_Glyph
              ****************
6b3a da                PHX
6b3b a9 20             LDA  #' '
6b3d a6 6f    _loop    LDX  Buf_Index
6b3f e6 6f             INC  Buf_Index
6b41 dd 00 02          CMP  Buffer,X
6b44 f0 f7             BEQ  _loop
6b46 fa                PLX                    ; fall through
6b47          EndMod [Get_Glyph] Size = 13 [$d]

              ***************
              Module Got_Char
              ***************

6b47 c6 6f             DEC  Buf_Index
6b49          EndMod [Got_Char] Size = 2 [$2]

              ***************
              Module Get_Char
              ***************

6b49 da                PHX
6b4a a6 6f             LDX  Buf_Index
6b4c e6 6f             INC  Buf_Index
6b4e bd 00 02          LDA  Buffer,X
6b51 e0 01             CPX  #1
6b53 fa                PLX
6b54 90 08             BCC  _regc
6b56 c9 3b             CMP  #';'            ; register
6b58 f0 0a             BEQ  _return
6b5a c9 3f             CMP  #'?'            ; help
6b5c f0 06             BEQ  _return
6b5e c9 00    _regc    CMP  #0
6b60 f0 02             BEQ  _return
6b62 c9 3a             CMP  #':'
6b64 60       _return  RTS
6b65          EndMod [Get_Char] Size = 28 [$1c]


              **************
              Module Dec_LCT
              **************

6b65 a5 5d             LDA  Long_CT
6b67 05 5e             ORA  Long_CT+1
6b69 d0 02             BNE  _skip
6b6b c3 5f             DEW  Long_CT+2
6b6d c3 5d    _skip    DEW  Long_CT
6b6f a5 60             LDA  Long_CT+3         ; set N flag
6b71 60                RTS
6b72          EndMod [Dec_LCT] Size = 13 [$d]

              **************
              Module Add_LPC
              **************

6b72 18                CLC
6b73 65 61             ADC  Long_PC
6b75 85 61             STA  Long_PC
6b77 90 06             BCC  _return

              ************
6b79          Inc_LPC_Page
              ************

6b79 e6 62             INC  Long_PC+1
6b7b d0 02             BNE  _return
6b7d e3 63             INW  Long_PC+2
6b7f 60       _return  RTS

              ******************
              Module Param_Range
              ******************

              ; read two (address) parameters

              ; Long_CT = difference (2nd. minus 1st.)
              ; Long_PC = 1st. parameter
              ; Long_DA = 2nd. parameter

              ; carry on exit flags error

6b80 20 25 6a          JSR  Get_LAC           ; get 1st. parameter
6b83 b0 12             BCS  _error
6b85 20 5f 61          JSR  LAC_To_LPC        ; Long_PC = 1st. address
6b88 20 25 6a          JSR  Get_LAC
6b8b b0 0a             BCS  _error
6b8d 20 77 61          JSR  LAC_To_LDA        ; Long_DA = 2nd. address
6b90 20 92 61          JSR  LAC_Minus_LPC     ; Long_CT = range
6b93 90 02             BCC  _error
6b95 18                CLC
6b96 60                RTS
6b97 38       _error   SEC
6b98 60                RTS
6b99          EndMod [Param_Range] Size = 25 [$19]

              ****************
              Module Converter
              ****************

6b99 a2 00             LDX  #0
6b9b 86 6f             STX  Buf_Index
6b9d 20 25 6a          JSR  Get_LAC
6ba0 b3 31 f5          LBCS Mon_Error
6ba3 a2 00             LDX  #0
6ba5 da       _loop    PHX
6ba6 20 11 6b          JSR  CR_Erase
6ba9 bd 18 61          LDA  Cons_Prefix,X
6bac 20 d2 ff          JSR  CHROUT
6baf 8a                TXA
6bb0 0a                ASL  A
6bb1 aa                TAX
6bb2 23 be 6b          JSR  (Conv_Tab,X)
6bb5 fa                PLX
6bb6 e8                INX
6bb7 e0 04             CPX  #4
6bb9 90 ea             BCC  _loop
6bbb 4c a5 60          JMP  Main

6bbe fb 6b    Conv_Tab .WORD Print_Hexval
6bc0 04 6c             .WORD Print_Decimal
6bc2 cc 6b             .WORD Print_Octal
6bc4 c6 6b             .WORD Print_Dual
6bc6          EndMod [Converter] Size = 45 [$2d]

              *****************
              Module Print_Dual
              *****************

6bc6 a2 18             LDX  #24               ; digits
6bc8 a0 01             LDY  #1                ; bits per digit
6bca 80 04             BRA  _entry

              ***********
6bcc          Print_Octal
              ***********

6bcc a2 08             LDX  #8                ; digits
6bce a0 03             LDY  #3                ; bits per digit

6bd0 20 6b 61 _entry   JSR  LAC_To_LCT
6bd3 a3 00             LDZ  #0
6bd5 64 61             STZ  Long_PC
6bd7 a3 30             LDZ  #'0'
6bd9 5a                PHY                    ; save start value
6bda 7a       _loopa   PLY                    ; reinitialise
6bdb 5a                PHY
6bdc a9 00             LDA  #0
6bde 06 5d    _loopb   ASL  Long_CT
6be0 eb 5e 00          ROW  Long_CT+1
6be3 2a                ROL  A
6be4 88                DEY
6be5 d0 f7             BNE  _loopb
6be7 e0 01             CPX  #1                ; print last character
6be9 f0 04             BEQ  _skip
6beb 05 61             ORA  Long_PC
6bed f0 07             BEQ  _next
6bef 09 30    _skip    ORA  #'0'
6bf1 64 61             STZ  Long_PC
6bf3 20 d2 ff          JSR  CHROUT
6bf6 ca       _next    DEX
6bf7 d0 e1             BNE  _loopa
6bf9 7a                PLY                    ; cleanup stack
6bfa 60                RTS
6bfb          EndMod [Print_Dual] Size = 53 [$35]

              *******************
              Module Print_Hexval
              *******************

6bfb 20 5f 61         JSR  LAC_To_LPC
6bfe a9 00            LDA  #0
6c00 85 64            STA  Long_PC+3
6c02 80 32            BRA  Print_BCD
6c04          EndMod [Print_Hexval] Size = 9 [$9]

              ********************
              Module Print_Decimal
              ********************

              ; max $ffffff = 16777215 (8 digits)

6c04 20 6b 61          JSR  LAC_To_LCT
6c07 a2 03             LDX  #3                ; 4 BCD bytes = 8 digits
6c09 a9 00             LDA  #0
6c0b 95 61    _clear   STA  Long_PC,X
6c0d ca                DEX
6c0e 10 fb             BPL  _clear

6c10 a2 20             LDX  #32               ; source bits
6c12 f8                SED
6c13 06 5d    _loop    ASL  Long_CT
6c15 26 5e             ROL  Long_CT+1
6c17 eb 5f 00          ROW  Long_CT+2
6c1a a5 61             LDA  Long_PC
6c1c 65 61             ADC  Long_PC
6c1e 85 61             STA  Long_PC
6c20 a5 62             LDA  Long_PC+1
6c22 65 62             ADC  Long_PC+1
6c24 85 62             STA  Long_PC+1
6c26 a5 63             LDA  Long_PC+2
6c28 65 63             ADC  Long_PC+2
6c2a 85 63             STA  Long_PC+2
6c2c a5 64             LDA  Long_PC+3
6c2e 65 64             ADC  Long_PC+3
6c30 85 64             STA  Long_PC+3
6c32 ca                DEX
6c33 d0 de             BNE  _loop
6c35 d8                CLD
6c36          EndMod [Print_Decimal] Size = 50 [$32]

              ****************
              Module Print_BCD
              ****************

6c36 a9 00             LDA  #0
6c38 85 5d             STA  Long_CT
6c3a a3 30             LDZ  #'0'
6c3c a0 08             LDY  #8                ; max. digits
6c3e a2 03    _loopa   LDX  #3                ; 4 bytes
6c40 a9 00             LDA  #0
6c42 06 61    _loopb   ASL  Long_PC
6c44 26 62             ROL  Long_PC+1
6c46 eb 63 00          ROW  Long_PC+2
6c49 2a                ROL  A
6c4a ca                DEX
6c4b 10 f5             BPL  _loopb

6c4d c0 01             CPY  #1                ; print last character
6c4f f0 04             BEQ  _skip
6c51 05 5d             ORA  Long_CT
6c53 f0 0d             BEQ  _next
6c55 09 30    _skip    ORA  #'0'
6c57 64 5d             STZ  Long_CT
6c59 c9 3a             CMP  #$3a
6c5b 90 02             BCC  _print
6c5d 69 06             ADC  #6                ; + carry
6c5f 20 d2 ff _print   JSR  CHROUT
6c62 88       _next    DEY
6c63 d0 d9             BNE  _loopa
6c65 60                RTS
6c66          EndMod [Print_BCD] Size = 48 [$30]


              ***************
              Module Mon_Disk
              ***************

6c66 c6 6f             DEC  Buf_Index
6c68 a6 6f             LDX  Buf_Index
6c6a bd 00 02          LDA  Buffer,X
6c6d f0 68             BEQ  Print_Disk_Status
6c6f 85 5d             STA  Long_CT           ; dir marker
6c71 a0 ff             LDY  #$ff              ; SA = 15
6c73 c9 24             CMP  #'$'
6c75 d0 02             BNE  _lab
6c77 a0 f0             LDY  #$f0              ; SA =  0
6c79 a5 ba    _lab     LDA  FA
6c7b 20 b1 ff          JSR  LISTEN
6c7e 98                TYA                    ; SA
6c7f 20 93 ff          JSR  SECOND
6c82 bd 00 02 _loop    LDA  Buffer,X
6c85 f0 06             BEQ  _close
6c87 20 a8 ff          JSR  CIOUT
6c8a e8                INX
6c8b 80 f5             BRA  _loop
6c8d 20 ae ff _close   JSR  UNLSN
6c90 a5 5d             LDA  Long_CT
6c92 c9 24             CMP  #'$'
6c94 d0 41             BNE  Print_Disk_Status
6c96 4c 28 6d          JMP  Directory

6c99          EndMod [Mon_Disk] Size = 51 [$33]

              **********************
              Module Get_Disk_Status
              **********************

6c99 a5 ba             LDA  FA
6c9b 20 b4 ff          JSR  TALK
6c9e a9 6f             LDA  #$6f
6ca0 20 96 ff          JSR  TKSA
6ca3 20 a5 ff          JSR  ACPTR             ; 1st. digit
6ca6 8d 34 04          STA  Disk_Msg
6ca9 0a                ASL  A
6caa 0a                ASL  A
6cab 0a                ASL  A
6cac 0a                ASL  A
6cad 8d 0b 04          STA  Disk_Status       ; BCD
6cb0 20 a5 ff          JSR  ACPTR             ; 2nd. digit
6cb3 8d 35 04          STA  Disk_Msg+1
6cb6 29 0f             AND  #15
6cb8 0d 0b 04          ORA  Disk_Status
6cbb 8d 0b 04          STA  Disk_Status       ; complete BCD number

6cbe a0 01             LDY  #1
6cc0 c8       _loop    INY
6cc1 20 a5 ff          JSR  ACPTR
6cc4 99 34 04          STA  Disk_Msg,Y
6cc7 c9 20             CMP  #' '
6cc9 b0 f5             BCS  _loop
6ccb a9 00             LDA  #0
6ccd 99 34 04          STA  Disk_Msg,Y
6cd0 20 ab ff          JSR  UNTALK
6cd3 ad 0b 04          LDA  Disk_Status
6cd6 60                RTS
6cd7          EndMod [Get_Disk_Status] Size = 62 [$3e]

              ************************
              Module Print_Disk_Status
              ************************

6cd7 20 99 6c          JSR  Get_Disk_Status

              **************
6cda          Print_Disk_Msg
              **************

6cda 20 0c 6b          JSR  Print_CR
6cdd a0 00             LDY  #0
6cdf b9 34 04 _loop    LDA  Disk_Msg,Y
6ce2 f0 06             BEQ  _exit
6ce4 20 d2 ff          JSR  CHROUT
6ce7 c8                INY
6ce8 80 f5             BRA  _loop
6cea 4c 0c 6b _exit    JMP  Print_CR
6ced          EndMod [Print_Disk_Status] Size = 22 [$16]

              ; @[u] : print disk status for unit u
              ; @[u],$[=pattern] : print directory
              ; @[u],command : send disk command and read status
              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)
              ; @[u],U2 mem track startsec [endsec] : write disk sector(s)

              **************
              Module Mon_DOS
              **************

6ced a2 08             LDX  #8                ; default device
6cef 20 3a 6b          JSR  Get_Glyph
6cf2 c9 30             CMP  #'0'
6cf4 90 17             BCC  _unit
6cf6 c9 3a             CMP  #':'
6cf8 b0 13             BCS  _unit
6cfa c6 6f             DEC  Buf_Index
6cfc 20 42 6a          JSR  Read_Number
6cff b0 0c             BCS  _unit
6d01 a6 59             LDX  Long_AC           ; unit
6d03 e0 04             CPX  #4
6d05 93 cc f3          LBCC Mon_Error
6d08 e0 1f             CPX  #31
6d0a b3 c7 f3          LBCS Mon_Error
6d0d 86 ba    _unit    STX  FA
6d0f c6 6f             DEC  Buf_Index
6d11 20 49 6b _next    JSR  Get_Char
6d14 f0 0c             BEQ  _status           ; only @u
6d16 c9 20             CMP  #' '
6d18 f0 f7             BEQ  _next
6d1a c9 2c             CMP  #','
6d1c f0 f3             BEQ  _next
6d1e c9 55             CMP  #'U'              ; sector read/write
6d20 f0 4e             BEQ  DOS_U
6d22 20 66 6c _status  JSR  Mon_Disk
6d25 4c a5 60          JMP  Main
6d28          EndMod [Mon_DOS] Size = 59 [$3b]

              ****************
              Module Directory
              ****************

6d28 a5 ba             LDA  FA
6d2a 20 b4 ff          JSR  TALK
6d2d a9 60             LDA  #$60
6d2f 85 b9             STA  SA
6d31 20 96 ff          JSR  TKSA
6d34 a9 00             LDA  #0
6d36 85 90             STA  STATUS

6d38 a3 06             LDZ  #6                ; load address, pseudo link, pseudo number
6d3a aa       _loopb   TAX                    ; X = previous byte
6d3b 20 a5 ff          JSR  ACPTR             ; A = current  byte
6d3e a4 90             LDY  STATUS
6d40 d0 2b             BNE  _exit
6d42 3b                DEZ
6d43 d0 f5             BNE  _loopb            ; X/A = last read word

6d45 86 59             STX  Long_AC
6d47 85 5a             STA  Long_AC+1
6d49 64 5b             STZ  Long_AC+2
6d4b 64 5c             STZ  Long_AC+3
6d4d 20 04 6c          JSR  Print_Decimal     ; file size
6d50 20 07 6b          JSR  Print_Blank

6d53 20 a5 ff _loopc   JSR  ACPTR             ; print file entry
6d56 f0 09             BEQ  _cr
6d58 a4 90             LDY  STATUS
6d5a d0 11             BNE  _exit
6d5c 20 d2 ff          JSR  CHROUT
6d5f 90 f2             BCC  _loopc

6d61 20 0c 6b _cr      JSR  Print_CR
6d64 20 e1 ff          JSR  STOP
6d67 f0 04             BEQ  _exit
6d69 a3 04             LDZ  #4
6d6b 80 cd             BRA  _loopb            ; next file
6d6d 4c ab ff _exit    JMP  UNTALK
6d70          EndMod [Directory] Size = 72 [$48]

              ************
              Module DOS_U
              ************

6d70 20 49 6b          JSR  Get_Char
6d73 c9 31             CMP  #'1'            ; U1: read
6d75 93 5c f3          LBCC Mon_Error
6d78 c9 33             CMP  #'3'            ; U2: write
6d7a b3 57 f3          LBCS Mon_Error
6d7d 8d 0d 04          STA  Mon_Data+1      ; U type
6d80 e6 6f             INC  Buf_Index
6d82 20 25 6a          JSR  Get_LAC
6d85 b3 4c f3          LBCS Mon_Error
6d88 20 5f 61          JSR  LAC_To_LPC      ; Long_PC = memory address

6d8b 20 25 6a          JSR  Get_LAC
6d8e b3 43 f3          LBCS Mon_Error
6d91 a5 59             LDA  Long_AC
6d93 8d 09 04          STA  Disk_Track

6d96 20 25 6a          JSR  Get_LAC
6d99 b3 38 f3          LBCS Mon_Error
6d9c a5 59             LDA  Long_AC
6d9e 8d 0a 04          STA  Disk_Sector

6da1 20 25 6a          JSR  Get_LAC
6da4 20 6b 61          JSR  LAC_To_LCT        ; Long_CT = sector count
6da7 c3 5d             DEW  Long_CT           ; Long_CT = -1 for single

6da9 20 a7 6e          JSR  Open_Disk_Buffer

6dac ad 0d 04 _loop    LDA  Mon_Data+1
6daf 4a                LSR  A
6db0 f0 0a             BEQ  _write
6db2 20 d7 6d          JSR  Find_Next_Sector
6db5 d0 17             BNE  _error
6db7 20 31 6e          JSR  Read_Sector
6dba 80 08             BRA  _next

6dbc 20 4b 6e _write   JSR  Write_Sector
6dbf 20 d7 6d          JSR  Find_Next_Sector
6dc2 d0 0a             BNE  _error

6dc4 20 79 6b _next    JSR  Inc_LPC_Page
6dc7 ee 0a 04          INC  Disk_Sector
6dca c3 5d             DEW  Long_CT
6dcc 10 de             BPL  _loop

6dce 20 da 6c _error   JSR  Print_Disk_Msg
6dd1 20 c3 6e          JSR  Close_Disk_Buffer
6dd4 4c a5 60          JMP  Main
6dd7          EndMod [DOS_U] Size = 103 [$67]

              ***********************
              Module Find_Next_Sector
              ***********************

6dd7 20 85 6e          JSR  Build_U_String
6dda 20 20 6e          JSR  Send_Disk_Command
6ddd 20 99 6c          JSR  Get_Disk_Status
6de0 f0 1d             BEQ  _return           ; OK
6de2 c9 66             CMP  #$66              ; illegal track or sector
6de4 d0 13             BNE  _error            ; error
6de6 a9 00             LDA  #0
6de8 8d 0a 04          STA  Disk_Sector
6deb ee 09 04          INC  Disk_Track        ; try next track
6dee 20 85 6e          JSR  Build_U_String
6df1 20 20 6e          JSR  Send_Disk_Command
6df4 20 99 6c          JSR  Get_Disk_Status
6df7 f0 06             BEQ  _return
6df9 20 da 6c _error   JSR  Print_Disk_Msg
6dfc ad 0b 04          LDA  Disk_Status
6dff 60       _return  RTS
6e00          EndMod [Find_Next_Sector] Size = 41 [$29]

              ***************************
              Module Open_Command_Channel
              ***************************

6e00 a5 ba             LDA  FA
6e02 20 b1 ff          JSR  LISTEN
6e05 a9 ff             LDA  #$ff
6e07 20 93 ff          JSR  SECOND
6e0a a0 00             LDY  #0
6e0c 84 90             STY  STATUS
6e0e 60                RTS
6e0f          EndMod [Open_Command_Channel] Size = 15 [$f]

              ***************
              Module Reset_BP
              ***************

6e0f 20 00 6e          JSR  Open_Command_Channel
6e12 b9 cc 71 _loop    LDA  BP_ZERO,Y
6e15 f0 06             BEQ  _end
6e17 20 a8 ff          JSR  CIOUT
6e1a c8                INY
6e1b 80 f5             BRA  _loop
6e1d 4c ae ff _end     JMP  UNLSN
6e20          EndMod [Reset_BP] Size = 17 [$11]

              ************************
              Module Send_Disk_Command
              ************************

6e20 20 00 6e          JSR  Open_Command_Channel
6e23 b9 0c 04 _loop    LDA  Mon_Data,Y
6e26 f0 06             BEQ  _end
6e28 20 a8 ff          JSR  CIOUT
6e2b c8                INY
6e2c 80 f5             BRA  _loop
6e2e 4c ae ff _end     JMP  UNLSN
6e31          EndMod [Send_Disk_Command] Size = 17 [$11]

              ******************
              Module Read_Sector
              ******************

6e31 a5 ba             LDA  FA
6e33 20 b4 ff          JSR  TALK
6e36 a9 69             LDA  #$69              ; SA = 9
6e38 20 96 ff          JSR  TKSA
6e3b a3 00             LDZ  #0
6e3d 64 90             STZ  STATUS
6e3f 20 a5 ff _loop    JSR  ACPTR
6e42 ea 92 61          STA  [Long_PC],Z
6e45 1b                INZ
6e46 d0 f7             BNE  _loop
6e48 4c ab ff          JMP  UNTALK
6e4b          EndMod [Read_Sector] Size = 26 [$1a]

              ******************
              Module Write_Sector
              ******************

6e4b 20 0f 6e          JSR  Reset_BP          ; reset disk buffer pointer
6e4e a5 ba             LDA  FA
6e50 20 b1 ff          JSR  LISTEN
6e53 a9 69             LDA  #$69              ; SA = 9
6e55 20 96 ff          JSR  TKSA
6e58 a3 00             LDZ  #0
6e5a 64 90             STZ  STATUS
6e5c ea b2 61 _loop    LDA  [Long_PC],Z
6e5f 20 a8 ff          JSR  CIOUT
6e62 1b                INZ
6e63 d0 f7             BNE  _loop
6e65 20 ae ff          JSR  UNLSN
6e68 60                RTS
6e69          EndMod [Write_Sector] Size = 30 [$1e]

              *************
              Module Set_TS
              *************

              ; Input  A = track or sector
              ;        X = string index

6e69 c9 64    _100      CMP  #100
6e6b 90 07              BCC  _10
6e6d fe 0c 04           INC  Mon_Data,X
6e70 e9 64              SBC  #100
6e72 80 f5              BRA  _100
6e74 c9 0a    _10       CMP  #10
6e76 90 07              BCC  _1
6e78 fe 0d 04           INC  Mon_Data+1,X
6e7b e9 0a              SBC  #10
6e7d 80 f5              BRA  _10
6e7f 09 30    _1        ORA  #'0'
6e81 9d 0e 04           STA  Mon_Data+2,X
6e84 60                 RTS
6e85          EndMod [Set_TS] Size = 28 [$1c]

              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)

              ; U1:CHANNEL DRIVE TRACK SECTOR

              *********************
              Module Build_U_String
              *********************

6e85 a2 0e             LDX  #14
6e87 bd bd 71 _loop    LDA  U1,X
6e8a 9d 0c 04          STA  Mon_Data,X
6e8d ca                DEX
6e8e e0 02             CPX  #2
6e90 b0 f5             BCS  _loop
6e92 a9 55             LDA  #'U'
6e94 8d 0c 04          STA  Mon_Data
6e97 ad 09 04          LDA  Disk_Track
6e9a a2 07             LDX  #7
6e9c 20 69 6e          JSR  Set_TS
6e9f ad 0a 04          LDA  Disk_Sector
6ea2 a2 0b             LDX  #11
6ea4 4c 69 6e          JMP  Set_TS
6ea7          EndMod [Build_U_String] Size = 34 [$22]

              ***********************
              Module Open_Disk_Buffer
              ***********************

6ea7 a9 00             LDA  #0
6ea9 85 90             STA  STATUS
6eab a5 ba             LDA  FA
6ead 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
6eb0 a9 f9             LDA  #$f9            ; sa = 9
6eb2 20 93 ff          JSR  SECOND
6eb5 a9 23             LDA  #'#'            ; open buffer
6eb7 20 a8 ff          JSR  CIOUT
6eba 20 ae ff          JSR  UNLSN
6ebd a5 90             LDA  STATUS
6ebf d3 16 fe          LBNE Print_Disk_Status
6ec2 60                RTS
6ec3          EndMod [Open_Disk_Buffer] Size = 28 [$1c]

              ************************
              Module Close_Disk_Buffer
              ************************

6ec3 a9 00             LDA  #0
6ec5 85 90             STA  STATUS
6ec7 a5 ba             LDA  FA
6ec9 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
6ecc a9 e9             LDA  #$e9            ; sa = 9
6ece 20 93 ff          JSR  SECOND
6ed1 20 ae ff          JSR  UNLSN
6ed4 a5 90             LDA  STATUS
6ed6 d3 ff fd          LBNE Print_Disk_Status
6ed9 60                RTS
6eda          EndMod [Close_Disk_Buffer] Size = 23 [$17]


              ; The 3 letter mnemonics are encoded as three 5-bit values
              ; and stored in a left byte MNE_L and a right byte MNE_R
              ; The 5 bit value is computed by subtracting $3f from the
              ; ASCII value, so '?'-> 0, '@'->1, 'A'->2, 'B'->3,'Z'->27
              ; For example "ADC" is encoded as 2, 5, 4
              ; ----------------
              ; 7654321076543210
              ; 00010
              ;      00101
              ;           00100
              ;                0
              ;
              ; The operator >" stores the left (high) byte of the packed value
              ; The operator <" stores the right (low) byte of the packed value

              *****
6eda          MNE_L
              *****

6eda 11                .BYTE >"ADC"
6edb 13                .BYTE >"AND"
6edc 15                .BYTE >"ASL"
6edd 15                .BYTE >"ASR"
6ede 15                .BYTE >"ASW"
6edf 18                .BYTE >"BBR"
6ee0 18                .BYTE >"BBS"
6ee1 19                .BYTE >"BCC"
6ee2 19                .BYTE >"BCS"
6ee3 19                .BYTE >"BEQ"
6ee4 1a                .BYTE >"BIT"
6ee5 1b                .BYTE >"BMI"
6ee6 1b                .BYTE >"BNE"
6ee7 1c                .BYTE >"BPL"
6ee8 1c                .BYTE >"BRA"
6ee9 1c                .BYTE >"BRK"
6eea 1d                .BYTE >"BSR"
6eeb 1d                .BYTE >"BVC"
6eec 1d                .BYTE >"BVS"
6eed 23                .BYTE >"CLC"
6eee 23                .BYTE >"CLD"
6eef 23                .BYTE >"CLE"
6ef0 23                .BYTE >"CLI"
6ef1 23                .BYTE >"CLV"
6ef2 23                .BYTE >"CMP"
6ef3 24                .BYTE >"CPX"
6ef4 24                .BYTE >"CPY"
6ef5 24                .BYTE >"CPZ"
6ef6 29                .BYTE >"DEC"
6ef7 29                .BYTE >"DEW"
6ef8 29                .BYTE >"DEX"
6ef9 29                .BYTE >"DEY"
6efa 29                .BYTE >"DEZ"
6efb 34                .BYTE >"EOR"
6efc 53                .BYTE >"INC"
6efd 53                .BYTE >"INW"
6efe 53                .BYTE >"INX"
6eff 53                .BYTE >"INY"
6f00 53                .BYTE >"INZ"
6f01 5b                .BYTE >"JMP"
6f02 5d                .BYTE >"JSR"
6f03 69                .BYTE >"LDA"
6f04 69                .BYTE >"LDX"
6f05 69                .BYTE >"LDY"
6f06 69                .BYTE >"LDZ"
6f07 6d                .BYTE >"LSR"
6f08 70                .BYTE >"MAP"
6f09 79                .BYTE >"NEG"
6f0a 7c                .BYTE >"NOP"
6f0b 84                .BYTE >"ORA"
6f0c 8a                .BYTE >"PHA"
6f0d 8a                .BYTE >"PHP"
6f0e 8a                .BYTE >"PHW"
6f0f 8a                .BYTE >"PHX"
6f10 8a                .BYTE >"PHY"
6f11 8a                .BYTE >"PHZ"
6f12 8b                .BYTE >"PLA"
6f13 8b                .BYTE >"PLP"
6f14 8b                .BYTE >"PLX"
6f15 8b                .BYTE >"PLY"
6f16 8b                .BYTE >"PLZ"
6f17 9b                .BYTE >"RMB"
6f18 9c                .BYTE >"ROL"
6f19 9c                .BYTE >"ROR"
6f1a 9c                .BYTE >"ROW"
6f1b 9d                .BYTE >"RTI"
6f1c 9d                .BYTE >"RTS"
6f1d a0                .BYTE >"SBC"
6f1e a1                .BYTE >"SEC"
6f1f a1                .BYTE >"SED"
6f20 a1                .BYTE >"SEE"
6f21 a1                .BYTE >"SEI"
6f22 a3                .BYTE >"SMB"
6f23 a5                .BYTE >"STA"
6f24 a5                .BYTE >"STX"
6f25 a5                .BYTE >"STY"
6f26 a5                .BYTE >"STZ"
6f27 a8                .BYTE >"TAB"
6f28 a8                .BYTE >"TAX"
6f29 a8                .BYTE >"TAY"
6f2a a8                .BYTE >"TAZ"
6f2b a8                .BYTE >"TBA"
6f2c ac                .BYTE >"TRB"
6f2d ad                .BYTE >"TSB"
6f2e ad                .BYTE >"TSX"
6f2f ad                .BYTE >"TSY"
6f30 ae                .BYTE >"TXA"
6f31 ae                .BYTE >"TXS"
6f32 ae                .BYTE >"TYA"
6f33 ae                .BYTE >"TYS"
6f34 ae                .BYTE >"TZA"

              *****
6f35          MNE_R
              *****

6f35 48                .BYTE <"ADC" ; 00
6f36 ca                .BYTE <"AND" ; 01
6f37 1a                .BYTE <"ASL" ; 02
6f38 26                .BYTE <"ASR" ; 03
6f39 30                .BYTE <"ASW" ; 04
6f3a e6                .BYTE <"BBR" ; 05
6f3b e8                .BYTE <"BBS" ; 06
6f3c 08                .BYTE <"BCC" ; 07
6f3d 28                .BYTE <"BCS" ; 08
6f3e a4                .BYTE <"BEQ" ; 09
6f3f aa                .BYTE <"BIT" ; 0a
6f40 94                .BYTE <"BMI" ; 0b
6f41 cc                .BYTE <"BNE" ; 0c
6f42 5a                .BYTE <"BPL" ; 0d
6f43 c4                .BYTE <"BRA" ; 0e
6f44 d8                .BYTE <"BRK" ; 0f
6f45 26                .BYTE <"BSR" ; 10
6f46 c8                .BYTE <"BVC" ; 11
6f47 e8                .BYTE <"BVS" ; 12
6f48 48                .BYTE <"CLC" ; 13
6f49 4a                .BYTE <"CLD" ; 14
6f4a 4c                .BYTE <"CLE" ; 15
6f4b 54                .BYTE <"CLI" ; 16
6f4c 6e                .BYTE <"CLV" ; 17
6f4d a2                .BYTE <"CMP" ; 18
6f4e 72                .BYTE <"CPX" ; 19
6f4f 74                .BYTE <"CPY" ; 1a
6f50 76                .BYTE <"CPZ" ; 1b
6f51 88                .BYTE <"DEC" ; 1c
6f52 b0                .BYTE <"DEW" ; 1d
6f53 b2                .BYTE <"DEX" ; 1e
6f54 b4                .BYTE <"DEY" ; 1f
6f55 b6                .BYTE <"DEZ"
6f56 26                .BYTE <"EOR"
6f57 c8                .BYTE <"INC"
6f58 f0                .BYTE <"INW"
6f59 f2                .BYTE <"INX"
6f5a f4                .BYTE <"INY"
6f5b f6                .BYTE <"INZ"
6f5c a2                .BYTE <"JMP"
6f5d 26                .BYTE <"JSR"
6f5e 44                .BYTE <"LDA"
6f5f 72                .BYTE <"LDX"
6f60 74                .BYTE <"LDY"
6f61 76                .BYTE <"LDZ"
6f62 26                .BYTE <"LSR"
6f63 a2                .BYTE <"MAP"
6f64 90                .BYTE <"NEG"
6f65 22                .BYTE <"NOP"
6f66 c4                .BYTE <"ORA"
6f67 44                .BYTE <"PHA"
6f68 62                .BYTE <"PHP"
6f69 70                .BYTE <"PHW"
6f6a 72                .BYTE <"PHX"
6f6b 74                .BYTE <"PHY"
6f6c 76                .BYTE <"PHZ"
6f6d 44                .BYTE <"PLA"
6f6e 62                .BYTE <"PLP"
6f6f 72                .BYTE <"PLX"
6f70 74                .BYTE <"PLY"
6f71 76                .BYTE <"PLZ"
6f72 86                .BYTE <"RMB"
6f73 1a                .BYTE <"ROL"
6f74 26                .BYTE <"ROR"
6f75 30                .BYTE <"ROW"
6f76 54                .BYTE <"RTI"
6f77 68                .BYTE <"RTS"
6f78 c8                .BYTE <"SBC"
6f79 88                .BYTE <"SEC"
6f7a 8a                .BYTE <"SED"
6f7b 8c                .BYTE <"SEE"
6f7c 94                .BYTE <"SEI"
6f7d 86                .BYTE <"SMB"
6f7e 44                .BYTE <"STA"
6f7f 72                .BYTE <"STX"
6f80 74                .BYTE <"STY"
6f81 76                .BYTE <"STZ"
6f82 86                .BYTE <"TAB"
6f83 b2                .BYTE <"TAX"
6f84 b4                .BYTE <"TAY"
6f85 b6                .BYTE <"TAZ"
6f86 c4                .BYTE <"TBA"
6f87 c6                .BYTE <"TRB"
6f88 06                .BYTE <"TSB"
6f89 32                .BYTE <"TSX"
6f8a 34                .BYTE <"TSY"
6f8b 44                .BYTE <"TXA"
6f8c 68                .BYTE <"TXS"
6f8d 84                .BYTE <"TYA"
6f8e a8                .BYTE <"TYS"
6f8f c4                .BYTE <"TZA"

              *********
6f90          MNE_Index
              *********

              ; an index for all 256 opcodes, describing
              ; where to find the 3-letter mnemonic

6f90 0f 31 15          .BYTE $0f,$31,$15,$46,$53,$31,$02,$3d
6f98 33 31 02          .BYTE $33,$31,$02,$55,$53,$31,$02,$05
6fa0 0d 31 31          .BYTE $0d,$31,$31,$0d,$52,$31,$02,$3d
6fa8 13 31 22          .BYTE $13,$31,$22,$26,$52,$31,$02,$05
6fb0 28 01 28          .BYTE $28,$01,$28,$28,$0a,$01,$3e,$3d
6fb8 39 01 3e          .BYTE $39,$01,$3e,$59,$0a,$01,$3e,$05
6fc0 0b 01 01          .BYTE $0b,$01,$01,$0b,$0a,$01,$3e,$3d
6fc8 44 01 1c          .BYTE $44,$01,$1c,$20,$0a,$01,$3e,$05
6fd0 41 21 2f          .BYTE $41,$21,$2f,$03,$03,$21,$2d,$3d
6fd8 32 21 2d          .BYTE $32,$21,$2d,$50,$27,$21,$2d,$05
6fe0 11 21 21          .BYTE $11,$21,$21,$11,$03,$21,$2d,$3d
6fe8 16 21 36          .BYTE $16,$21,$36,$4d,$2e,$21,$2d,$05
6ff0 42 00 42          .BYTE $42,$00,$42,$10,$4c,$00,$3f,$3d
6ff8 38 00 3f          .BYTE $38,$00,$3f,$5a,$27,$00,$3f,$05
7000 12 00 00          .BYTE $12,$00,$00,$12,$4c,$00,$3f,$3d
7008 47 00 3b          .BYTE $47,$00,$3b,$51,$27,$00,$3f,$05
7010 0e 49 49          .BYTE $0e,$49,$49,$0e,$4b,$49,$4a,$48
7018 1f 0a 56          .BYTE $1f,$0a,$56,$4b,$4b,$49,$4a,$06
7020 07 49 49          .BYTE $07,$49,$49,$07,$4b,$49,$4a,$48
7028 58 49 57          .BYTE $58,$49,$57,$4a,$4c,$49,$4c,$06
7030 2b 29 2a          .BYTE $2b,$29,$2a,$2c,$2b,$29,$2a,$48
7038 4f 29 4e          .BYTE $4f,$29,$4e,$2c,$2b,$29,$2a,$06
7040 08 29 29          .BYTE $08,$29,$29,$08,$2b,$29,$2a,$48
7048 17 29 54          .BYTE $17,$29,$54,$2c,$2b,$29,$2a,$06
7050 1a 18 1b          .BYTE $1a,$18,$1b,$1d,$1a,$18,$1c,$48
7058 25 18 1e          .BYTE $25,$18,$1e,$04,$1a,$18,$1c,$06
7060 0c 18 18          .BYTE $0c,$18,$18,$0c,$1b,$18,$1c,$48
7068 14 18 35          .BYTE $14,$18,$35,$37,$1b,$18,$1c,$06
7070 19 43 29          .BYTE $19,$43,$29,$23,$19,$43,$22,$48
7078 24 43 30          .BYTE $24,$43,$30,$40,$19,$43,$22,$06
7080 09 43 43          .BYTE $09,$43,$43,$09,$34,$43,$22,$48
7088 45 43 3a          .BYTE $45,$43,$3a,$3c,$34,$43,$22,$06

              *****
7090          BRAIN
              *****

              ;              index values for branch mnemonics

              ;              BCC BCS BEQ BMI BNE BPL BRA BSR BVC BVS
7090 07 08 09          .BYTE $07,$08,$09,$0b,$0c,$0d,$0e,$10,$11,$12

              *******
709a          LEN_ADM
              *******

              ; a table of instruction length, flags
              ; and address mode for all 256 opcodes

              ; 7-6: operand length %00.. 0: implied
              ;                     %01.. 1: direct page, indirect
              ;                     %10.. 2: absolute, etc.
              ;                     %11.. 3: BBR and BBS

              ;   5: relative       %0110 0000 $60 short branch
              ;                     %1010 0000 $a0 long  branch

              ;   4:

              ; 3-0: index of address mode


709a 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $00
70a2 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $08
70aa 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $10
70b2 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $18
70ba 80 44 8b          .BYTE $80,$44,$8b,$84,$40,$40,$40,$40 ; $20
70c2 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $28
70ca 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $30
70d2 00 88 00          .BYTE $00,$88,$00,$00,$87,$87,$87,$c0 ; $38
70da 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $40
70e2 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $48
70ea 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $50
70f2 00 88 00          .BYTE $00,$88,$00,$00,$00,$87,$87,$c0 ; $58
70fa 00 44 41          .BYTE $00,$44,$41,$a0,$40,$40,$40,$40 ; $60
7102 00 41 00          .BYTE $00,$41,$00,$00,$8b,$80,$80,$c0 ; $68
710a 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $70
7112 00 88 00          .BYTE $00,$88,$00,$00,$84,$87,$87,$c0 ; $78
711a 60 44 4d          .BYTE $60,$44,$4d,$a0,$40,$40,$40,$40 ; $80
7122 00 41 00          .BYTE $00,$41,$00,$87,$80,$80,$80,$c0 ; $88
712a 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $90
7132 00 88 00          .BYTE $00,$88,$00,$88,$80,$87,$87,$c0 ; $98
713a 41 44 41          .BYTE $41,$44,$41,$41,$40,$40,$40,$40 ; $a0
7142 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $a8
714a 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $b0
7152 00 88 00          .BYTE $00,$88,$00,$87,$87,$87,$88,$c0 ; $b8
715a 41 44 41          .BYTE $41,$44,$41,$40,$40,$40,$40,$40 ; $c0
7162 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $c8
716a 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $d0
7172 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $d8
717a 41 44 4d          .BYTE $41,$44,$4d,$40,$40,$40,$40,$40 ; $e0
7182 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $e8
718a 60 45 46          .BYTE $60,$45,$46,$a0,$81,$47,$47,$40 ; $f0
7192 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $f8

              ******
719a          ADMODE
              ******

              ; printout flags for 16 address modes
              ;               76543210
              ;               --------
              ;            7  x         #
              ;            6   x        (
              ;            5    x       ,
              ;            4     x      SP
              ;            3      x     )
              ;            2       x    ,
              ;            1/0      xx  01:X  10:Y  11:Z

719a 00                .BYTE %00000000 ; 0             implicit/direct
719b 80                .BYTE %10000000 ; 1 #$nn        immediate
719c 00                .BYTE %00000000 ; 2             ----------
719d 00                .BYTE %00000000 ; 3             ----------
719e 69                .BYTE %01101001 ; 4 ($nn,X)     indirect X
719f 4e                .BYTE %01001110 ; 5 ($nn),Y     indirect Y
71a0 4f                .BYTE %01001111 ; 6 ($nn),Z     indirect Z
71a1 05                .BYTE %00000101 ; 7 $nn,X       indexed  X
71a2 06                .BYTE %00000110 ; 8 $nn,Y       indexed  Y
71a3 05                .BYTE %00000101 ; 9 $nn,X       indexed  X
71a4 06                .BYTE %00000110 ; a $nn,Y       ----------
71a5 48                .BYTE %01001000 ; b ($nnnn,X)   JMP & JSR
71a6 69                .BYTE %01101001 ; c ($nn,X)     ----------
71a7 7e                .BYTE %01111110 ; d ($nn,SP),Y  LDA & STA
71a8 00                .BYTE %00000000 ; e
71a9 04                .BYTE %00000100 ; f

              ;              ASL INC ROL DEC LSR ROR NEG ASR
71aa 0a 1a 2a ACCUMODE .BYTE $0a,$1a,$2a,$3a,$4a,$6a,$42,$43

71b2 10 0a 08 Num_Base .BYTE 16,10, 8, 2 ; hex, dec, oct, bin
71b6 04 03 03 Num_Bits .BYTE  4, 3, 3, 1 ; hex, dec, oct, bin

71ba 58 59 5a Index_Char .BYTE "XYZ"

              ;                0123456789abcd
71bd 55 31 3a U1        .BYTE "U1:9 0 000 000",0 ; channel 9, drive, track, sector
71cc 42 2d 50 BP_ZERO   .BYTE "B-P 9 0",0        ; set buffer pointer to 0

              ***************
              Module Reg_Text
              ***************
71d4 20 7d ff          JSR  PRIMM
71d7 0d 20 20          .BYTE "\r    PC   SR AC XR YR ZR BP  SP  NVEBDIZC\r; \eQ",0
7206 60                RTS
7207          EndMod [Reg_Text] Size = 51 [$33]

              ***************
              Module Mon_Help
              ***************
7207 20 7d ff    JSR PRIMM

720a 96 41 05    .BYTE LRED,"A",WHITE,"SSEMBLE     - A ADDRESS MNEMONIC OPERAND",CR
7236 96 42 05    .BYTE LRED,"B",WHITE,"ITMAPS      - B [FROM [TO]]",CR
7255 96 43 05    .BYTE LRED,"C",WHITE,"OMPARE      - C FROM TO WITH",CR
7275 96 44 05    .BYTE LRED,"D",WHITE,"ISASSEMBLE  - D [FROM [TO]]",CR
7294 96 46 05    .BYTE LRED,"F",WHITE,"ILL         - F FROM TO FILLBYTE",CR
72b8 96 47 05    .BYTE LRED,"G",WHITE,"O           - G [ADDRESS]",CR
72d5 96 48 05    .BYTE LRED,"H",WHITE,"UNT         - H FROM TO (STRING OR BYTES)",CR
7302 96 4a 05    .BYTE LRED,"J",WHITE,"SR          - J ADDRESS",CR
731d 96 4c 05    .BYTE LRED,"L",WHITE,"OAD         - L FILENAME [UNIT [ADDRESS]]",CR
734a 96 4d 05    .BYTE LRED,"M",WHITE,"EMORY       - M [FROM [TO]]",CR
7369 96 52 05    .BYTE LRED,"R",WHITE,"EGISTERS    - R",CR
737c 96 53 05    .BYTE LRED,"S",WHITE,"AVE         - S FILENAME UNIT FROM TO",CR
73a5 96 54 05    .BYTE LRED,"T",WHITE,"RANSFER     - T FROM TO TARGET",CR
73c7 96 56 05    .BYTE LRED,"V",WHITE,"ERIFY       - V FILENAME [UNIT [ADDRESS]]",CR
73f4 45 96 58    .BYTE "E",LRED,"X",WHITE,"IT         - X",CR
7407 96 2e 05    .BYTE LRED,".",WHITE,"<DOT>       - . ADDRESS MNEMONIC OPERAND",CR
7433 96 3e 05    .BYTE LRED,">",WHITE,"<GREATER>   - > ADDRESS BYTE SEQUENCE",CR
745c 96 3b 05    .BYTE LRED,";",WHITE,"<SEMICOLON> - ; REGISTER CONTENTS",CR
7481 96 40 05    .BYTE LRED,"@",WHITE,"DOS         - @ [DOS COMMAND]",CR
74a2 96 3f 05    .BYTE LRED,"?",WHITE,"HELP        - ?",CR
74b5 00          .BYTE 0
74b6 4c a5 60    JMP Main
74b9          End_Mod

74b9 ff ff ff          .FILL $8000-* ($ff) ; 3749 bytes ; 2887 bytes


  439 Symbols
-------------
Bank                           $0002    28D   284    287    343    351
                                       521    523    525    772
PCH                            $0003    29D   272    280    315
PCL                            $0004    30D   278    281    313
SR                             $0005    31D   367
WHITE                          $0005    14D   470    734    742    886
                                       900   1801   2090   3183   3184
                                      3185   3186   3187   3188   3189
                                      3190   3191   3192   3193   3194
                                      3195   3196   3197   3198   3199
                                      3200   3201   3202
AC                             $0006    32D   301
XR                             $0007    33
YR                             $0008    34
ZR                             $0009    35
BP                             $000a    41
SPH                            $000b    42D   325    359
SPL                            $000c    43D   327    361    812    823
                                       827
CR                             $000d    18D   397    451   1491   3183
                                      3184   3185   3186   3187   3188
                                      3189   3190   3191   3192   3193
                                      3194   3195   3196   3197   3198
                                      3199   3200   3201   3202
REV                            $0012    19D   451
CRIGHT                         $001d    20D   428
QUOTE                          $0022    21D  1036   1043
APOSTR                         $0027    22D   973   1996
Long_AC                        $0059    56D   208    210    218    222
                                       520    522    524    535    549
                                       563    578    580    594    610
                                       622    624    632    633    635
                                       636    771    789    928    936
                                       955    988   1057   1066   1067
                                      1109   1224   1227   1394   1396
                                      1397   1405   1406   1461   1470
                                      1529   1536   1538   1539   1541
                                      1738   1740   1747   1748   1838
                                      1841   1855   1864   1913   1915
                                      1926   1929   1932   1937   1940
                                      1989   1990   1991   1992   1999
                                      2032   2039   2040   2041   2052
                                      2053   2060   2061   2063   2065
                                      2524   2563   2564   2565   2566
                                      2602   2607
Long_CT                        $005d    57D   211    212    214    215
                                       219    223    550    579    596
                                       693    694    697   1389   1395
                                      1403   1404   1609   1621   1624
                                      2220   2221   2223   2224   2225
                                      2325   2326   2368   2369   2370
                                      2393   2407   2410   2429   2444
                                      2612   2630
Long_PC                        $0061    58D   536    595    611    644
                                       646    669    671    746    790
                                       792    836    838    854    856
                                       935    954   1073   1092   1093
                                      1110   1456   1459   1462   1471
                                      1477   1499   1503   1537   1540
                                      1938   1941   2082   2088   2093
                                      2096   2097   2234   2235   2242
                                      2244   2319   2332   2335   2349
                                      2362   2371   2372   2373   2374
                                      2375   2376   2377   2378   2379
                                      2380   2381   2382   2398   2399
                                      2400   2710   2727
Long_DA                        $0065    59D   564    654    655    657
                                       658    713    716    719    735
                                       743    744    927    996   1004
                                      1126   1162   1163   1172   1176
Adr_Flags                      $0069    63D  1686   1824   1827   1869
                                      1873   1879   1883   1888   1893
                                      1897
Mode_Flags                     $006a    64D  1220   1248   1257   1267
                                      1279   1289   1299   1312   1326
                                      1340   1354   1370   1416   1434
                                      1437   1552   1573   1582   1593
                                      1594
Op_Code                        $006b    65D  1192   1210   1211   1393
                                      1420   1450   1458   1476   1551
                                      1667   1678   1725   1735   1781
                                      1788   1806   1847
Op_Flag                        $006c    66D  1127   1147   1259   1309
                                      1422   1453   1648   1659   1676
                                      1693   1701   1729   1759   1777
                                      1787   1814   1829   1854   1862
                                      1887   1906   1945
Op_Size                        $006d    70D  1451   1452   1463   1482
                                      1483   1618   1619   1623   1692
                                      1694   1708   1821   1842   1861
                                      1917   1923   1946
Dig_Cnt                        $006e    71D  1988   2000   2026   2074
Buf_Index                      $006f    72D   401   1039   1052   1237
                                      1954   1975   2009   2180   2181
                                      2191   2199   2200   2278   2425
                                      2426   2521   2530   2595
STATUS                         $0090    77D  1027   1084   2553   2558
                                      2572   2669   2708   2726   2786
                                      2794   2804   2810
VERCK                          $0093    78D   437   1068   1077   1085
LRED                           $0096    16D   742    884    898   3183
                                      3184   3185   3186   3187   3188
                                      3189   3190   3191   3192   3193
                                      3194   3195   3196   3197   3198
                                      3199   3200   3201   3202
YELLOW                         $009e    15D   451   1723   2084
FNLEN                          $00b7    79D  1025   1046
SA                             $00b9    80D  1022   1072   1095   2550
FA                             $00ba    81D  1020   1058   2434   2455
                                      2529   2547   2664   2703   2721
                                      2787   2805
FNADR                          $00bb    82D  1029   1031   1045
BA                             $00bd    83D  1024   1062
FNBANK                         $00be    84D  1026
NDX                            $00d0    86
MODE_80                        $00d7    87D   691    795    882    896
B_Margin                       $00e4    89
T_Margin                       $00e5    90
L_Margin                       $00e6    91
R_Margin                       $00e7    92
QTSW                           $00f4    94D   852
Buffer                         $0200    96D   393    402   1040   1494
                                      1496   1505   1509   1517   2182
                                      2201   2427   2438
IIRQ                           $0314    98
IBRK                           $0316    99
EXMON                          $032e   100
X_Vector                       $0400   104D   314    316    504
Ix_Mne                         $0402   105D  1182   1378   1561
Op_Mne                         $0403   106D  1144   1150   1157
Op_Ix                          $0406   107D  1128   1230   1233   1276
                                      1310   1324   1338   1352   1368
                                      1379
Op_Len                         $0407   108D  1129   1232   1432   1438
                                      1441   1589
Disk_Unit                      $0408   109D  1019
Disk_Track                     $0409   110D  2603   2650   2773
Disk_Sector                    $040a   111D  2608   2629   2649   2776
Disk_Status                    $040b   112D  2465   2469   2470   2481
                                      2656
Mon_Data                       $040c   114D   979    989   1001   1028
                                      1030   2594   2616   2691   2744
                                      2749   2753   2767   2772
Disk_Msg                       $0434   115D  2460   2467   2475   2479
                                      2497
header                         $1fff   167
Link                           $2029   179D   171
header_loop                    $205a   218D   221    225
Monitor_Call                   $6000   239
Monitor_Break                  $6003   245
Monitor_Switch                 $6006   251
Mon_Break                      $6009   257D   248
Mon_Break_loop                 $601f   271D   269    274
Mon_Break_nopage               $602b   281D   279
Mon_Break_bank                 $6036   286D   284
Mon_Call                       $603c   292D   242
Mon_Call_loop                  $6043   301D   303
Mon_Call_store                 $6055   313D   310
Mon_Start                      $605f   320D   288
Mon_Register                   $606d   335D   486
Mon_Register_loopa             $6072   343D   347
Mon_Register_loopb             $607d   351D   355
Mon_Register_loopc             $6096   368D   376
Mon_Register_flag              $609e   373D   371
Main                           $60a5   380D   404    431    705    759
                                       776    803    828    933    941
                                       962   1008   1012   1075   1087
                                      1090   1114   1133   1616   1626
                                      2294   2540   2635   3204
Main_A                         $60aa   389D  1522
Main_loop                      $60aa   392D   398
Main_getcomm                   $60c0   403D   406
Mon_Switch                     $60c9   410D   254
Mon_Switch_loop                $60cb   414D   417
Mon_Error                      $60d3   422D   396    689    915    917
                                       949    951    970    977   1033
                                      1037   1050   1070   1081   1086
                                      1104   1106   1122   1180   1203
                                      1205   1215   1222   1225   1311
                                      1314   1318   1325   1332   1339
                                      1344   1353   1360   1367   1369
                                      1372   1384   1388   1390   1417
                                      1433   1435   1612   1970   2280
                                      2526   2528   2591   2593   2597
                                      2601   2606
Mon_Select                     $60e0   434D   415
Print_Commands                 $60ed   447D   262    295
Command_Char                   $6107   454D   414
Cons_Prefix                    $6118   461D  2004   2284
Load_Save_Verify               $611d   467
Jump_Table                     $6123   474D   443
Mon_Exit                       $614d   501D   488
LAC_To_PC                      $6150   507D   767    811    822
LAC_To_PC_error                $615e   526D   519
LAC_To_LPC                     $615f   530D   684    732    785   1061
                                      1123   1605   2261   2347   2598
LAC_To_LPC_loop                $6162   535D   538
LAC_To_LCT                     $616b   544D  1236   2317   2359   2611
LAC_To_LCT_loop                $616e   549D   552
LAC_To_LDA                     $6177   558D  2264
LAC_To_LDA_loop                $617a   563D   566
LAC_Plus_LCT                   $6183   572D   925
LAC_Plus_LCT_loop              $6187   578D   582
LAC_Minus_LPC                  $6192   588D   688   1611   2265
LAC_Minus_LPC_loop             $6196   594D   598
LAC_Compare_LPC                $61a1   604D   920
LAC_Compare_LPC_loop           $61a5   610D   613
Inc_LAC                        $61ae   619D   938    958
Inc_LAC_return                 $61b4   625D   623
Dec_LAC                        $61b5   629D   930
Dec_LAC_skip                   $61bd   636D   634
Inc_LPC                        $61c0   641D   755    937    959   1009
                                      1111
Inc_LPC_return                 $61c6   647D   645
Dec_LDA                        $61c7   651D   929
Dec_LDA_skip                   $61cf   658D   656
Fetch                          $61d2   663D  1000   1649   1656   1666
                                      1672   1677   1704   1840   1912
Fetch_banked                   $61d9   671D   669
Mon_Memory                     $61df   678D   485
Mon_Memory_shift               $61fa   693D   691    696
Mon_Memory_row                 $6205   700D   683    686    704
Mon_Memory_exit                $6210   705D   701
Print_Bits                     $6213   709D   747
Print_Bits_loop                $6218   715D   721
Print_Bits_set                 $621f   718D   716
Mon_Bits                       $6229   727D   478
Mon_Bits_lab                   $6231   733D   731
Mon_Bits_row                   $623a   738D   758
Mon_Bits_col                   $6240   741D   753
Mon_Set_Register               $6266   763D   492
Mon_Set_Register_loop          $626e   769D   775
Mon_Set_Register_exit          $627d   776D   770
Mon_Set_Memory                 $6280   780D   491
Mon_Set_Memory_loop            $628a   787D   797
Mon_Set_Memory_banked          $6295   792D   790
Mon_Set_Memory_next            $629f   797D   795
Mon_Set_Memory_exit            $62a1   799D   784    788
Mon_Go                         $62ae   807D   482
Mon_JSR                        $62ba   818D   484
Dump_4_Bytes                   $62cc   832D   885    887
Dump_4_Bytes_loop              $62cf   836D   843
Dump_4_Bytes_banked            $62d3   838D   836
Dump_4_Chars                   $62df   848D   899    901
Dump_4_Chars_loop              $62e6   854D   866
Dump_4_Chars_banked            $62ea   856D   854
Dump_4_Chars_laba              $62f3   861D   859
Dump_Row                       $62fe   871D   702    802
Dump_Row_loop                  $6312   884D   882    889
Dump_Row_lchr                  $632d   898D   896    903
Mon_Transfer                   $6340   911D   487
Mon_Transfer_lpback            $6356   927D   932
Mon_Transfer_forward           $636a   935D   921    940
Mon_Compare                    $637e   945D   479
Mon_Compare_loop               $638f   954D   961
Mon_Compare_laba               $639a   958D   956
Mon_Hunt                       $63a8   966D   483
Mon_Hunt_lpstr                 $63bf   979D   984
Mon_Hunt_bin                   $63ce   987D   974
Mon_Hunt_lpbin                 $63d1   988D   994
Mon_Hunt_hunt                  $63e0   996D   982    985    992
Mon_Hunt_lpstart               $63e5   999D  1011
Mon_Hunt_lpins                 $63e7  1000D  1005
Mon_Hunt_next                  $63f7  1007D  1002
Load_Save                      $6408  1016D   439
Load_Save_skip                 $6423  1032D  1035
Load_Save_copyfn               $6434  1040D  1049
Load_Save_unit                 $644a  1052D  1044
Load_Save_exit                 $6480  1075D  1084
Load_Save_do                   $6483  1077D  1041   1054   1056   1060
                                      1096
Load_Save_exec                 $6490  1083D  1079
Load_Save_load                 $64ab  1092D  1064
Mon_Fill                       $64b5  1100D   481
Mon_Fill_loop                  $64c6  1109D  1113
Mon_Assemble                   $64d6  1118D   477    490
Mon_Assemble_start             $64df  1125D  1136
Mon_Assemble_getin             $64eb  1130D  1153
Mon_Assemble_laba              $64f5  1135D  1131
Mon_Assemble_labb              $650b  1150D  1141   1143   1146
Mon_Assemble_lpenc             $6513  1157D  1167
Mon_Assemble_lpbit             $651b  1161D  1165
Mon_Assemble_lpfind            $652a  1173D  1179
Mon_Assemble_nxfind            $6536  1178D  1174
Mon_Assemble_found             $653c  1182D  1177
Mon_Assemble_lpopc             $6542  1188D  1191
Mon_Assemble_exopc             $654a  1192D  1189
Mon_Assemble_labc              $6570  1219D  1199
Mon_Assemble_labd              $6572  1220D  1251   1261   1270   1290
                                      1303   1316   1334   1346   1362
                                      1374
Mon_Assemble_labf              $6588  1230D  1228
Mon_Assemble_labg              $6598  1237D  1223   1235
Mon_Assemble_lpnop             $659a  1239D  1242
Mon_Assemble_lbra              $65b0  1255D  1247
Mon_Assemble_indir             $65be  1265D  1256
Mon_Assemble_comma             $65ca  1274D  1266
Mon_Assemble_comma1            $65e7  1288D  1280   1282   1284
Mon_Assemble_stack             $65ed  1294D  1275
Mon_Assemble_rbra              $6603  1307D  1295
Mon_Assemble_error             $661c  1318D  1249   1258   1268   1277
                                      1287   1298   1301   1309
Mon_Assemble_right             $661f  1322D  1308
Mon_Assemble_right1            $6638  1333D  1328   1330
Mon_Assemble_X                 $663d  1336D  1323
Mon_Assemble_X1                $6652  1345D  1342
Mon_Assemble_Y                 $6657  1350D  1337
Mon_Assemble_Y1                $6670  1361D  1356   1358
Mon_Assemble_Z                 $6675  1366D  1351
Mon_Assemble_adjust            $668c  1378D  1240
Mon_Assemble_BB                $66a4  1389D  1386
Mon_Assemble_one               $66bc  1403D  1382
Mon_Assemble_lpbrain           $66c6  1408D  1411
Mon_Assemble_branch            $66d0  1416D  1409
Mon_Assemble_bran1             $66e4  1425D  1422
Mon_Assemble_match             $66e6  1429D  1380   1412
Mon_Assemble_lpmatch           $66e9  1430D  1440
Mon_Assemble_okmat             $6705  1441D  1431
Mon_Assemble_store             $6709  1450D  1399   1425
Mon_Assemble_storen            $6729  1466D  1453
Mon_Assemble_lpsto             $672d  1470D  1474
Mon_Assemble_store1            $6737  1476D  1468
Mon_Assemble_print             $673c  1479D  1464
Mon_Assemble_auto              $676a  1502D  1500   1514
Branch_Target                  $6791  1526D  1392   1419   1531
Match_Mode                     $67a4  1546D  1430
Match_Mode_loop                $67a8  1553D  1562
Match_Mode_next                $67ad  1558D  1563
Match_Mode_error               $67ba  1565D  1559
Match_Mode_return              $67bb  1566D  1554
Mode_Index                     $67bc  1570D  1429
Mode_Index_loop                $67c0  1575D  1579
Mode_Index_found               $67cc  1582D  1576
Size_To_Mode                   $67ce  1586D  1439
Mon_Disassemble                $67db  1600D   480
Mon_Disassemble_nopar          $67e8  1608D  1604
range                          $67ee  1611D  1607
Mon_Disassemble_loop           $67f4  1614D  1610   1625
Dis_Code                       $6813  1630D  1617
Print_Code                     $6819  1638D  1481
Print_Code_nop                 $6836  1665D  1654   1658
Print_Code_normal              $6854  1681D  1670   1675
Print_Code_norm1               $686d  1695D  1693
Print_Code_blpr                $6876  1703D  1701
Print_Code_lphex               $6879  1704D  1710
Print_Code_lpfill              $6888  1714D  1719
Print_Code_long                $6896  1723D  1707   1715
Print_Code_locate              $68ab  1735D  1728
Print_Code_lpmne               $68bc  1745D  1757
Print_Code_lplet               $68c0  1747D  1751
Print_Code_lastc               $68d3  1759D  1754
Print_Code_Q3                  $68e6  1768D  1761   1765
Print_Code_Q4                  $68ed  1771D  1763   1767
Print_Code_lbra                $68f7  1776D  1759
Print_Code_biti                $690b  1788D  1784
Print_Code_mne4                $691b  1799D  1770   1786
Print_Code_mne5                $691e  1800D  1774   1777   1797
Print_Code_lpaccu              $692a  1808D  1811
Print_Code_accu                $6939  1816D  1814
Print_Code_oper                $693f  1821D  1809
Print_Code_laba                $694b  1827D  1824
Print_Code_labb                $6955  1831D  1826   1829
Print_Code_labc                $6958  1832D  1827
Print_Code_lpfop               $6961  1839D  1843
Print_Code_proper              $6985  1861D  1854
Print_Code_lpoper              $698c  1864D  1862   1867
Print_Code_labd                $69aa  1879D  1873
Print_Code_labe                $69b2  1883D  1869   1879
Print_Code_labf                $69ba  1887D  1859   1883
Print_Code_comch               $69c5  1893D  1887
Print_Code_labg                $69da  1906D  1893   1899
Print_Code_rel                 $69f9  1921D  1850
Print_Code_rela                $69fb  1922D  1919
Print_Code_labh                $6a08  1931D  1927
Print_Code_lpinw               $6a09  1932D  1934
Print_Code_return              $6a22  1947D  1817   1822   1891   1906
                                      1945
Got_LAC                        $6a23  1951D   987
Get_LAC                        $6a25  1958D   681    685    730    766
                                       769    783    787    810    821
                                       916    950    991   1055   1059
                                      1063   1105   1121   1603   1606
                                      2259   2262   2279   2596   2600
                                      2605   2610
Get_LAC_error                  $6a39  1970D  1962
Get_LAC_noval                  $6a3c  1972D  1963
Get_LAC_end                    $6a3e  1975D  1965
Get_LAC_ok                     $6a40  1976D  1967   1969
Read_Number                    $6a42  1981D  1221   1961   2522
Read_Number_numeric            $6a63  2003D  1997
Read_Number_prefix             $6a65  2004D  2007
Read_Number_digit              $6a70  2011D  2005   2062   2064   2066
Read_Number_valid              $6a87  2022D  2016
Read_Number_push               $6a98  2032D  2036
Read_Number_laba               $6a9f  2038D  2029
Read_Number_shift              $6aa2  2039D  2044
Read_Number_pull               $6ab7  2051D  2056
Read_Number_labc               $6ac0  2058D  2047
Read_Number_error              $6ad0  2068D  2024   2042
Read_Number_exit               $6ad3  2070D  1995   2001   2012   2014
                                      2018   2020
Read_Number_return             $6ad4  2071D  2069
Hex_LPC                        $6ada  2079D   739    878    957   1006
                                      1643
Hex_LPC_laba                   $6af3  2093D  2083
Hex_LPC_labb                   $6afa  2096D  2092   2094
Print_XA_Hex                   $6afe  2101D  1944
Print_Hex_Blank                $6b04  2111D   352    362    839   1705
Print_Blank                    $6b07  2118D  1799   1800   2568
Print_CR                       $6b0c  2126D   383    733    754    875
                                       952    997   1065   1107   2495
                                      2502   2577
CR_Erase                       $6b11  2134D  1614   2283
Print_Hex                      $6b19  2143D   344    360   1856   1865
                                      2087   2089   2095   2106   2114
A_To_Hex                       $6b25  2155D  1504   2147
A_To_Hex_nibble                $6b2f  2167D  2159
A_To_Hex_lab                   $6b37  2171D  2169
Get_Glyph                      $6b3a  2176D  1994   2516
Get_Glyph_loop                 $6b3d  2180D  2183
Got_Char                       $6b47  2188D  1964
Get_Char                       $6b49  2195D   403    972    975    981
                                      1032   1053   1130   1201   1213
                                      1239   1296   1998   2011   2531
                                      2589
Get_Char_regc                  $6b5e  2209D  2204
Get_Char_return                $6b64  2212D  2206   2208   2210
Dec_LCT                        $6b65  2217D   931    939    960   1010
                                      1112
Dec_LCT_skip                   $6b6d  2224D  2222
Add_LPC                        $6b72  2230D   905   1484   1620   1661
Inc_LPC_Page                   $6b79  2239D  2628
Add_LPC_return                 $6b7f  2245D  2236   2243
Param_Range                    $6b80  2248D   914    948    969   1103
Param_Range_error              $6b97  2269D  2260   2263   2266
Converter                      $6b99  2274D   494    495    496    497
Converter_loop                 $6ba5  2282D  2293
Conv_Tab                       $6bbe  2296D  2289
Print_Dual                     $6bc6  2303D  2299
Print_Octal                    $6bcc  2311D  2298
Print_Dual_entry               $6bd0  2317D  2308
Print_Dual_loopa               $6bda  2322D  2338
Print_Dual_loopb               $6bde  2325D  2329
Print_Dual_skip                $6bef  2334D  2331
Print_Dual_next                $6bf6  2337D  2333
Print_Hexval                   $6bfb  2344D  2296
Print_Decimal                  $6c04  2354D  2297   2567
Print_Decimal_clear            $6c0b  2362D  2364
Print_Decimal_loop             $6c13  2368D  2384
Print_BCD                      $6c36  2389D  2350
Print_BCD_loopa                $6c3e  2396D  2416
Print_BCD_loopb                $6c42  2398D  2403
Print_BCD_skip                 $6c55  2409D  2406
Print_BCD_print                $6c5f  2414D  2412
Print_BCD_next                 $6c62  2415D  2408
Mon_Disk                       $6c66  2422D  2539
Mon_Disk_lab                   $6c79  2434D  2432
Mon_Disk_loop                  $6c82  2438D  2442
Mon_Disk_close                 $6c8d  2443D  2439
Get_Disk_Status                $6c99  2452D  2489   2644   2653
Get_Disk_Status_loop           $6cc0  2473D  2477
Print_Disk_Status              $6cd7  2486D  2428   2446   2795   2811
Print_Disk_Msg                 $6cda  2492D  2633   2655
Print_Disk_Status_loop         $6cdf  2497D  2501
Print_Disk_Status_exit         $6cea  2502D  2498
Mon_DOS                        $6ced  2512D   489
Mon_DOS_unit                   $6d0d  2529D  2518   2520   2523
Mon_DOS_next                   $6d11  2531D  2534   2536
Mon_DOS_status                 $6d22  2539D  2532
Directory                      $6d28  2544D  2447
Directory_loopb                $6d3a  2556D  2561   2581
Directory_loopc                $6d53  2570D  2575
Directory_cr                   $6d61  2577D  2571
Directory_exit                 $6d6d  2582D  2559   2573   2579
DOS_U                          $6d70  2586D  2538
DOS_U_loop                     $6dac  2616D  2631
DOS_U_write                    $6dbc  2624D  2618
DOS_U_next                     $6dc4  2628D  2622
DOS_U_error                    $6dce  2633D  2620   2626
Find_Next_Sector               $6dd7  2639D  2619   2625
Find_Next_Sector_error         $6df9  2655D  2647
Find_Next_Sector_return        $6dff  2657D  2645   2654
Open_Command_Channel           $6e00  2661D  2677   2690
Reset_BP                       $6e0f  2674D  2720
Reset_BP_loop                  $6e12  2678D  2682
Reset_BP_end                   $6e1d  2683D  2679
Send_Disk_Command              $6e20  2687D  2643   2652
Send_Disk_Command_loop         $6e23  2691D  2695
Send_Disk_Command_end          $6e2e  2696D  2692
Read_Sector                    $6e31  2700D  2621
Read_Sector_loop               $6e3f  2709D  2712
Write_Sector                   $6e4b  2717D  2624
Write_Sector_loop              $6e5c  2727D  2730
Set_TS                         $6e69  2736D  2775   2778
Set_TS_100                     $6e69  2742D  2746
Set_TS_10                      $6e74  2747D  2743   2751
Set_TS_1                       $6e7f  2752D  2748
Build_U_String                 $6e85  2762D  2642   2651
Build_U_String_loop            $6e87  2766D  2770
Open_Disk_Buffer               $6ea7  2782D  2614
Close_Disk_Buffer              $6ec3  2800D  2634
MNE_L                          $6eda  2832D  1173   1737
MNE_R                          $6f35  2928D  1175   1739
MNE_Index                      $6f90  3024D  1188   1560   1736
BRAIN                          $7090  3064D  1408
LEN_ADM                        $709a  3073D  1553   1681   1726   1848
ADMODE                         $719a  3127D  1575   1685
ACCUMODE                       $71aa  3159D  1810
Num_Base                       $71b2  3161D  2023
Num_Bits                       $71b6  3162D  2038
Index_Char                     $71ba  3164D  1901
U1                             $71bd  3167D  2766
BP_ZERO                        $71cc  3168D  2678
Reg_Text                       $71d4  3171D   338
Mon_Help                       $7207  3179D   493
End_Mod                        $74b9  3205
EXIT_OLD                       $cf2e   117D   311    312
EXIT                           $cfa4   118D   268    307    308    309
SETBNK                         $ff6b   120
JSRFAR                         $ff6e   121D   825
JMPFAR                         $ff71   122D   814
LDA_FAR                        $ff74   123
STA_FAR                        $ff77   124
CMP_FAR                        $ff7a   125
PRIMM                          $ff7d   126D   260    427    450    799
                                       891   1088   1479   1490   1633
                                      1716   2137   3173   3181
CINT                           $ff81   127
IOINIT                         $ff84   128
SETMSG                         $ff90   129D   329
SECOND                         $ff93   130D  2437   2667   2790   2808
TKSA                           $ff96   131D  2458   2551   2706   2724
MEMTOP                         $ff99   132
MEMBOT                         $ff9c   133
KEY                            $ff9f   134
SETTMO                         $ffa2   135
ACPTR                          $ffa5   136D  2459   2466   2474   2557
                                      2570   2709
CIOUT                          $ffa8   137D  2440   2680   2693   2728
                                      2792
UNTALK                         $ffab   138D  2480   2582   2713
UNLSN                          $ffae   139D  2443   2683   2696   2731
                                      2793   2809
LISTEN                         $ffb1   140D  2435   2665   2722   2788
                                      2806
TALK                           $ffb4   141D  2456   2548   2704
READSS                         $ffb7   142
SETLFS                         $ffba   143
SETNAM                         $ffbd   144
OPEN                           $ffc0   145
CLOSE                          $ffc3   146
CHKIN                          $ffc6   147
CHKOUT                         $ffc9   148
CLRCHN                         $ffcc   149
CHRIN                          $ffcf   150D   392
CHROUT                         $ffd2   151D   373    718    745    835
                                       853    862    877   1506   1510
                                      1518   1703   1724   1731   1756
                                      1769   1771   1773   1776   1796
                                      1802   1816   1831   1833   1858
                                      1871   1875   1877   1881   1885
                                      1895   1902   1908   1910   2085
                                      2091   2122   2130   2148   2151
                                      2285   2336   2414   2499   2574
LOAD                           $ffd5   152D  1083
SAVE                           $ffd8   153D  1074
SETTIM                         $ffdb   154
GETTIM                         $ffde   155
STOP                           $ffe1   156D   700   1007   1615   2578
GETIN                          $ffe4   157
CLALL                          $ffe7   158
SCAN                           $ffea   159
SCRORG                         $ffed   160
PLOT                           $fff0   161
Long_AC                        $0059    56D   208    210    218    222
                                       520    522    524    535    549
                                       563    578    580    594    610
                                       622    624    632    633    635
                                       636    771    789    928    936
                                       955    988   1057   1066   1067
                                      1109   1224   1227   1394   1396
                                      1397   1405   1406   1461   1470
                                      1529   1536   1538   1539   1541
                                      1738   1740   1747   1748   1838
                                      1841   1855   1864   1913   1915
                                      1926   1929   1932   1937   1940
                                      1989   1990   1991   1992   1999
                                      2032   2039   2040   2041   2052
                                      2053   2060   2061   2063   2065
                                      2524   2563   2564   2565   2566
                                      2602   2607
Long_PC                        $0061    58D   536    595    611    644
                                       646    669    671    746    790
                                       792    836    838    854    856
                                       935    954   1073   1092   1093
                                      1110   1456   1459   1462   1471
                                      1477   1499   1503   1537   1540
                                      1938   1941   2082   2088   2093
                                      2096   2097   2234   2235   2242
                                      2244   2319   2332   2335   2349
                                      2362   2371   2372   2373   2374
                                      2375   2376   2377   2378   2379
                                      2380   2381   2382   2398   2399
                                      2400   2710   2727
Long_CT                        $005d    57D   211    212    214    215
                                       219    223    550    579    596
                                       693    694    697   1389   1395
                                      1403   1404   1609   1621   1624
                                      2220   2221   2223   2224   2225
                                      2325   2326   2368   2369   2370
                                      2393   2407   2410   2429   2444
                                      2612   2630
WHITE                          $0005    14D   470    734    742    886
                                       900   1801   2090   3183   3184
                                      3185   3186   3187   3188   3189
                                      3190   3191   3192   3193   3194
                                      3195   3196   3197   3198   3199
                                      3200   3201   3202
LRED                           $0096    16D   742    884    898   3183
                                      3184   3185   3186   3187   3188
                                      3189   3190   3191   3192   3193
                                      3194   3195   3196   3197   3198
                                      3199   3200   3201   3202
CR                             $000d    18D   397    451   1491   3183
                                      3184   3185   3186   3187   3188
                                      3189   3190   3191   3192   3193
                                      3194   3195   3196   3197   3198
                                      3199   3200   3201   3202
Op_Flag                        $006c    66D  1127   1147   1259   1309
                                      1422   1453   1648   1659   1676
                                      1693   1701   1729   1759   1777
                                      1787   1814   1829   1854   1862
                                      1887   1906   1945
Mode_Flags                     $006a    64D  1220   1248   1257   1267
                                      1279   1289   1299   1312   1326
                                      1340   1354   1370   1416   1434
                                      1437   1552   1573   1582   1593
                                      1594
Long_DA                        $0065    59D   564    654    655    657
                                       658    713    716    719    735
                                       743    744    927    996   1004
                                      1126   1162   1163   1172   1176
Buf_Index                      $006f    72D   401   1039   1052   1237
                                      1954   1975   2009   2180   2181
                                      2191   2199   2200   2278   2425
                                      2426   2521   2530   2595
Op_Size                        $006d    70D  1451   1452   1463   1482
                                      1483   1618   1619   1623   1692
                                      1694   1708   1821   1842   1861
                                      1917   1923   1946
Op_Code                        $006b    65D  1192   1210   1211   1393
                                      1420   1450   1458   1476   1551
                                      1667   1678   1725   1735   1781
                                      1788   1806   1847
STATUS                         $0090    77D  1027   1084   2553   2558
                                      2572   2669   2708   2726   2786
                                      2794   2804   2810
FA                             $00ba    81D  1020   1058   2434   2455
                                      2529   2547   2664   2703   2721
                                      2787   2805
Adr_Flags                      $0069    63D  1686   1824   1827   1869
                                      1873   1879   1883   1888   1893
                                      1897
Bank                           $0002    28D   284    287    343    351
                                       521    523    525    772
SPL                            $000c    43D   327    361    812    823
                                       827
MODE_80                        $00d7    87D   691    795    882    896
SA                             $00b9    80D  1022   1072   1095   2550
VERCK                          $0093    78D   437   1068   1077   1085
Dig_Cnt                        $006e    71D  1988   2000   2026   2074
FNADR                          $00bb    82D  1029   1031   1045
YELLOW                         $009e    15D   451   1723   2084
PCL                            $0004    30D   278    281    313
PCH                            $0003    29D   272    280    315
BA                             $00bd    83D  1024   1062
FNLEN                          $00b7    79D  1025   1046
APOSTR                         $0027    22D   973   1996
QUOTE                          $0022    21D  1036   1043
SPH                            $000b    42D   325    359
QTSW                           $00f4    94D   852
FNBANK                         $00be    84D  1026
CRIGHT                         $001d    20D   428
REV                            $0012    19D   451
AC                             $0006    32D   301
SR                             $0005    31D   367
R_Margin                       $00e7    92
L_Margin                       $00e6    91
T_Margin                       $00e5    90
B_Margin                       $00e4    89
NDX                            $00d0    86
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
Long_AC                        $0059    56D   208    210    218    222
                                       520    522    524    535    549
                                       563    578    580    594    610
                                       622    624    632    633    635
                                       636    771    789    928    936
                                       955    988   1057   1066   1067
                                      1109   1224   1227   1394   1396
                                      1397   1405   1406   1461   1470
                                      1529   1536   1538   1539   1541
                                      1738   1740   1747   1748   1838
                                      1841   1855   1864   1913   1915
                                      1926   1929   1932   1937   1940
                                      1989   1990   1991   1992   1999
                                      2032   2039   2040   2041   2052
                                      2053   2060   2061   2063   2065
                                      2524   2563   2564   2565   2566
                                      2602   2607
Long_PC                        $0061    58D   536    595    611    644
                                       646    669    671    746    790
                                       792    836    838    854    856
                                       935    954   1073   1092   1093
                                      1110   1456   1459   1462   1471
                                      1477   1499   1503   1537   1540
                                      1938   1941   2082   2088   2093
                                      2096   2097   2234   2235   2242
                                      2244   2319   2332   2335   2349
                                      2362   2371   2372   2373   2374
                                      2375   2376   2377   2378   2379
                                      2380   2381   2382   2398   2399
                                      2400   2710   2727
Long_CT                        $005d    57D   211    212    214    215
                                       219    223    550    579    596
                                       693    694    697   1389   1395
                                      1403   1404   1609   1621   1624
                                      2220   2221   2223   2224   2225
                                      2325   2326   2368   2369   2370
                                      2393   2407   2410   2429   2444
                                      2612   2630
WHITE                          $0005    14D   470    734    742    886
                                       900   1801   2090   3183   3184
                                      3185   3186   3187   3188   3189
                                      3190   3191   3192   3193   3194
                                      3195   3196   3197   3198   3199
                                      3200   3201   3202
LRED                           $0096    16D   742    884    898   3183
                                      3184   3185   3186   3187   3188
                                      3189   3190   3191   3192   3193
                                      3194   3195   3196   3197   3198
                                      3199   3200   3201   3202
CR                             $000d    18D   397    451   1491   3183
                                      3184   3185   3186   3187   3188
                                      3189   3190   3191   3192   3193
                                      3194   3195   3196   3197   3198
                                      3199   3200   3201   3202
Op_Flag                        $006c    66D  1127   1147   1259   1309
                                      1422   1453   1648   1659   1676
                                      1693   1701   1729   1759   1777
                                      1787   1814   1829   1854   1862
                                      1887   1906   1945
Mode_Flags                     $006a    64D  1220   1248   1257   1267
                                      1279   1289   1299   1312   1326
                                      1340   1354   1370   1416   1434
                                      1437   1552   1573   1582   1593
                                      1594
Long_DA                        $0065    59D   564    654    655    657
                                       658    713    716    719    735
                                       743    744    927    996   1004
                                      1126   1162   1163   1172   1176
Buf_Index                      $006f    72D   401   1039   1052   1237
                                      1954   1975   2009   2180   2181
                                      2191   2199   2200   2278   2425
                                      2426   2521   2530   2595
Op_Size                        $006d    70D  1451   1452   1463   1482
                                      1483   1618   1619   1623   1692
                                      1694   1708   1821   1842   1861
                                      1917   1923   1946
Op_Code                        $006b    65D  1192   1210   1211   1393
                                      1420   1450   1458   1476   1551
                                      1667   1678   1725   1735   1781
                                      1788   1806   1847
Mon_Data                       $040c   114D   979    989   1001   1028
                                      1030   2594   2616   2691   2744
                                      2749   2753   2767   2772
Buffer                         $0200    96D   393    402   1040   1494
                                      1496   1505   1509   1517   2182
                                      2201   2427   2438
STATUS                         $0090    77D  1027   1084   2553   2558
                                      2572   2669   2708   2726   2786
                                      2794   2804   2810
FA                             $00ba    81D  1020   1058   2434   2455
                                      2529   2547   2664   2703   2721
                                      2787   2805
Op_Ix                          $0406   107D  1128   1230   1233   1276
                                      1310   1324   1338   1352   1368
                                      1379
Adr_Flags                      $0069    63D  1686   1824   1827   1869
                                      1873   1879   1883   1888   1893
                                      1897
Bank                           $0002    28D   284    287    343    351
                                       521    523    525    772
Op_Len                         $0407   108D  1129   1232   1432   1438
                                      1441   1589
Disk_Msg                       $0434   115D  2460   2467   2475   2479
                                      2497
Disk_Status                    $040b   112D  2465   2469   2470   2481
                                      2656
SPL                            $000c    43D   327    361    812    823
                                       827
Disk_Sector                    $040a   111D  2608   2629   2649   2776
MODE_80                        $00d7    87D   691    795    882    896
SA                             $00b9    80D  1022   1072   1095   2550
VERCK                          $0093    78D   437   1068   1077   1085
Dig_Cnt                        $006e    71D  1988   2000   2026   2074
Disk_Track                     $0409   110D  2603   2650   2773
Op_Mne                         $0403   106D  1144   1150   1157
Ix_Mne                         $0402   105D  1182   1378   1561
X_Vector                       $0400   104D   314    316    504
FNADR                          $00bb    82D  1029   1031   1045
YELLOW                         $009e    15D   451   1723   2084
PCL                            $0004    30D   278    281    313
PCH                            $0003    29D   272    280    315
header_loop                    $205a   218D   221    225
BA                             $00bd    83D  1024   1062
FNLEN                          $00b7    79D  1025   1046
APOSTR                         $0027    22D   973   1996
QUOTE                          $0022    21D  1036   1043
SPH                            $000b    42D   325    359
Link                           $2029   179D   171
Disk_Unit                      $0408   109D  1019
QTSW                           $00f4    94D   852
FNBANK                         $00be    84D  1026
CRIGHT                         $001d    20D   428
REV                            $0012    19D   451
AC                             $0006    32D   301
SR                             $0005    31D   367
header                         $1fff   167
EXMON                          $032e   100
IBRK                           $0316    99
IIRQ                           $0314    98
R_Margin                       $00e7    92
L_Margin                       $00e6    91
T_Margin                       $00e5    90
B_Margin                       $00e4    89
NDX                            $00d0    86
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
