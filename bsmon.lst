              *******************************
              * BSM = Bit Shifter's Monitor *
              * for The MEGA65  29-Dec_2020 *
              *******************************

              .CPU 45GS02

              .STORE $6000,$2000,"bsmon.rom"

              *************
              * Constants *
              *************

0005          WHITE  = $05
009e          YELLOW = $9e
0096          LRED   = $96

000d          CR     = $0d
0012          REV    = $12
001d          CRIGHT = $1d
0022          QUOTE  = $22
0027          APOSTR = $27

              ************************************************
              * Register storage for JMPFAR and JSRFAR calls *
              ************************************************

0002          Bank       =  2
0003          PCH        =  3
0004          PCL        =  4
0005          SR         =  5
0006          AC         =  6
0007          XR         =  7
0008          YR         =  8
0009          ZR         =  9

              *************************************
              * Used direct (zero) page addresses *
              *************************************

000a          BP         = 10
000b          SPH        = 11
000c          SPL        = 12

              ; following variables overlap with the BASIC floating point area

              ; $59 - $5d : temporary floating point accumulator
              ; $5e - $62 : temporary floating point accumulator
              ; $63 - $69 : primary   floating point accumulator
              ; $6a - $6f : secondary floating point accumulator

              ; A set of 32 bit variables also used as 32 bit pointer

0059          & = $59

0059          Long_AC    .BSS 4  ; 32 bit accumulator
005d          Long_CT    .BSS 4  ; 32 bit counter
0061          Long_PC    .BSS 4  ; 32 bit program counter
0065          Long_DA    .BSS 4  ; 32 bit data pointer

              ; Flags are  used in BBR BBS instructions

0069          Adr_Flags  .BSS 1
006a          Mode_Flags .BSS 1
006b          Op_Code    .BSS 1
006c          Op_Flag    .BSS 1  ; 7: two operands
                                 ; 6: long branch
                                 ; 5: 32 bit address
                                 ; 4: Q register
006d          Op_Size    .BSS 1
006e          Dig_Cnt    .BSS 1
006f          Buf_Index  .BSS 1

              ; operating system variables


0090          STATUS     = $90
0093          VERCK      = $93
00b7          FNLEN      = $b7
00b9          SA         = $b9
00ba          FA         = $ba
00bb          FNADR      = $bb
00bd          BA         = $bd
00be          FNBANK     = $be

00d0          NDX        = $d0        ; length of keyboard buffer
00d7          MODE_80    = $d7        ; 80 column / 40 volumn flag

00e4          B_Margin   = $e4        ; SCBOT  default = 24
00e5          T_Margin   = $e5        ; SCTOP  default =  0
00e6          L_Margin   = $e6        ; SCLF   default =  0
00e7          R_Margin   = $e7        ; SCRT   default = 39 or 79

00f4          QTSW       = $f4        ; Quote switch

0200          Buffer     = $0200      ; input buffer

0314          IIRQ       = $0314
0316          IBRK       = $0316
032e          EXMON      = $032e

0400          & = $400                ; bottom of BASIC runtime stack
                                      ; should be a safe space
0400          X_Vector    .BSS  2     ; exit vector (ROM version dependent)
0402          Ix_Mne      .BSS  1     ; index to mnemonics table
0403          Op_Mne      .BSS  3     ; 3 bytes for mnemonic
0406          Op_Ix       .BSS  1     ; type of constant
0407          Op_Len      .BSS  1     ; length of operand
0408          Disk_Unit   .BSS  1     ; unit = device
0409          Disk_Track  .BSS  1     ; logical track  1 -> 255
040a          Disk_Sector .BSS  1     ; logical sector 0 -> 255
040b          Disk_Status .BSS  1     ; BCD value of status

040c          Mon_Data    .BSS 40     ; buffer for hunt and filename
0434          Disk_Msg    .BSS 40     ; disk status as text message

cf2e          EXIT_OLD   = $cf2e      ; exit address for ROM 910110
cfa4          EXIT       = $cfa4      ; exit address for ROM 911001

ff6b          SETBNK     = $ff6b
ff6e          JSRFAR     = $ff6e
ff71          JMPFAR     = $ff71
ff74          LDA_FAR    = $ff74
ff77          STA_FAR    = $ff77
ff7a          CMP_FAR    = $ff7a
ff7d          PRIMM      = $ff7d
ff81          CINT       = $ff81
ff84          IOINIT     = $ff84
ff90          SETMSG     = $ff90
ff93          SECOND     = $ff93
ff96          TKSA       = $ff96
ff99          MEMTOP     = $ff99
ff9c          MEMBOT     = $ff9c
ff9f          KEY        = $ff9f
ffa2          SETTMO     = $ffa2
ffa5          ACPTR      = $ffa5
ffa8          CIOUT      = $ffa8
ffab          UNTALK     = $ffab
ffae          UNLSN      = $ffae
ffb1          LISTEN     = $ffb1
ffb4          TALK       = $ffb4
ffb7          READSS     = $ffb7
ffba          SETLFS     = $ffba
ffbd          SETNAM     = $ffbd
ffc0          OPEN       = $ffc0
ffc3          CLOSE      = $ffc3
ffc6          CHKIN      = $ffc6
ffc9          CHKOUT     = $ffc9
ffcc          CLRCHN     = $ffcc
ffcf          CHRIN      = $ffcf
ffd2          CHROUT     = $ffd2
ffd5          LOAD       = $ffd5
ffd8          SAVE       = $ffd8
ffdb          SETTIM     = $ffdb
ffde          GETTIM     = $ffde
ffe1          STOP       = $ffe1
ffe4          GETIN      = $ffe4
ffe7          CLALL      = $ffe7
ffea          SCAN       = $ffea
ffed          SCRORG     = $ffed
fff0          PLOT       = $fff0

1fff          * = $1fff
                      .STORE $1fff,$0101,"bsm.prg"

              *************
              Module header
              *************

1fff 01 20            .WORD $2001             ; load address
2001 29 20            .WORD Link              ; line link
2003 e4 07            .WORD 2020              ; line number
2005 fe 02            .BYTE $fe,$02           ; BANK token
2007 30 3a            .BYTE "0:"              ; BANK argument
2009 9e               .BYTE $9e               ; SYS  token
200a 28 38 32         .BYTE "(8235):"         ; $202d
2011 8f               .BYTE $8f               ; REM  token
2012 20 42 49         .BYTE " BIT SHIFTER 29-DEC-20",0
2029 00 00    Link    .WORD 0                 ; BASIC end marker

                      ; copy image to $030000

202b 78               SEI

              ; map memory to monitor configuration

202c a9 a0            LDA  #$a0
202e a2 82            LDX  #$82
2030 a0 00            LDY  #$00
2032 a3 83            LDZ  #$83
2034 5c               MAP
2035 ea               EOM

              ; VIC IV registers visible

2036 a9 47            LDA  #$47
2038 8d 2f d0         STA  $d02f
203b a9 53            LDA  #$53
203d 8d 2f d0         STA  $d02f

              ; toggle write protection

2040 a9 70            LDA  #$70
2042 8d 40 d6         STA  $D640
2045 ea               NOP

2046 a3 00            LDZ  #0
2048 64 59            STZ  Long_AC
204a a9 21            LDA  #$21
204c 85 5a            STA  Long_AC+1
204e 64 5d            STZ  Long_CT
2050 64 5e            STZ  Long_CT+1
2052 a9 03            LDA  #3
2054 85 5f            STA  Long_CT+2
2056 64 60            STZ  Long_CT+3
2058 a2 20            LDX  #$20

205a b2 59    _loop   LDA  (Long_AC),Z
205c ea 92 5d         STA  [Long_CT],Z
205f 1b               INZ
2060 d0 f8            BNE  _loop
2062 e6 5a            INC  Long_AC+1
2064 e6 5e            INC  Long_CT+1
2066 ca               DEX
2067 d0 f1            BNE  _loop

2069 a9 70            LDA  #$70
206b 8d 40 d6         STA  $D640              ; toggle write protection
206e ea               NOP

206f 60               RTS
2070          EndMod [header] Size = 113 [$71]

2070 00 00 00         .FILL $2100-* (0) ; 144 bytes

6000          * = $6000

              ********************
6000          Monitor_Call ; $6000
              ********************

6000 4c 3c 60          JMP  Mon_Call

              *********************
6003          Monitor_Break ; $6003
              *********************

6003 4c 09 60          JMP  Mon_Break

              **********************
6006          Monitor_Switch ; $6009
              **********************

6006 4c c9 60          JMP  Mon_Switch

              ****************
              Module Mon_Break
              ****************

6009 20 7d ff          JSR  PRIMM
600c 0d 42 52          .BYTE "\rBREAK\a",0
6014 20 ed 60          JSR  Print_Commands

              ; pull BP, Z, Y, X, A,SR,PCL,PCH
              ;       7  6  5  4  3  2  1  0

6017 a2 07             LDX  #7
6019 2c a4 cf          BIT  EXIT      ; version
601c 10 01             BPL  _loop
601e ca                DEX
601f 68       _loop    PLA
6020 95 03             STA  PCH,X
6022 ca                DEX
6023 10 fa             BPL  _loop

              ; decrement PC to point after BRK

6025 a5 04             LDA  PCL
6027 d0 02             BNE  _nopage
6029 c6 03             DEC  PCH
602b c6 04    _nopage  DEC  PCL

602d ad 1d 01          LDA  $011d
6030 7f 02 03          BBR7 Bank,_bank
6033 ad 1f 01          LDA  $011f
6036 29 0f    _bank    AND  #15
6038 85 02             STA  Bank
603a 80 23             BRA  Mon_Start
603c          EndMod [Mon_Break] Size = 51 [$33]

              ***************
              Module Mon_Call
              ***************

603c 20 ed 60          JSR  Print_Commands

              ;        clear register for monitor call

603f a9 00             LDA  #0
6041 a2 06             LDX  #6
6043 95 06    _loop    STA  AC,X
6045 ca                DEX
6046 10 fb             BPL  _loop

              ;        set default PC to "exit to BASIC"

6048 a9 a4             LDA  #<EXIT     ; ROM 911110
604a a2 cf             LDX  #>EXIT
604c 2c a4 cf          BIT  EXIT       ; $20 (JSR) or $ff ?
604f 10 04             BPL  _store
6051 a9 2e             LDA  #<EXIT_OLD ; ROM 910111
6053 a2 cf             LDX  #>EXIT_OLD
6055 85 04    _store   STA  PCL
6057 8d 00 04          STA  X_Vector
605a 86 03             STX  PCH
605c 8e 01 04          STX  X_Vector+1
605f          EndMod [Mon_Call] Size = 35 [$23]

              ****************
              Module Mon_Start
              ****************

605f d8                CLD
6060 0b                TSY
6061 84 0b             STY  SPH
6063 ba                TSX
6064 86 0c             STX  SPL
6066 a9 c0             LDA  #$c0
6068 20 90 ff          JSR  SETMSG
606b 58                CLI
606c ea                NOP
606d          EndMod [Mon_Start] Size = 14 [$e]

              ***************************
              Module Mon_Register ; $6042
              ***************************

606d 20 e8 71          JSR  Reg_Text

              ; print Bank,PCH

6070 a0 00             LDY  #0
6072 b9 02 00 _loopa   LDA  Bank,Y
6075 20 2d 6b          JSR  Print_Hex
6078 c8                INY
6079 c0 02             CPY  #2
607b 90 f5             BCC  _loopa

              ; print SR,PCL,A,X,Y,Z,BP

607d b9 02 00 _loopb   LDA  Bank,Y
6080 20 18 6b          JSR  Print_Hex_Blank
6083 c8                INY
6084 c0 09             CPY  #9
6086 90 f5             BCC  _loopb

              ; print 16 bit stack pointer

6088 a5 0b             LDA  SPH
608a 20 2d 6b          JSR  Print_Hex
608d a5 0c             LDA  SPL
608f 20 18 6b          JSR  Print_Hex_Blank

              ; print flags

6092 a0 08             LDY  #8
6094 a5 05             LDA  SR
6096 0a       _loopc   ASL  A
6097 48                PHA
6098 a9 2d             LDA  #'-'
609a 90 02             BCC  _flag
609c a9 31             LDA  #'1'
609e 20 d2 ff _flag    JSR  CHROUT
60a1 68                PLA
60a2 88                DEY
60a3 d0 f1             BNE  _loopc
60a5          EndMod [Mon_Register] Size = 56 [$38]

              ***********
              Module Main
              ***********

60a5 20 20 6b          JSR  Print_CR
60a8 a2 00             LDX  #0

              ; read one line into buffer

              ******
60aa          Main_A
              ******

60aa 20 cf ff _loop    JSR  CHRIN
60ad 9d 00 02          STA  Buffer,X
60b0 e8                INX
60b1 e0 50             CPX  #80
60b3 b0 1e             BCS  Mon_Error         ; input too long
60b5 c9 0d             CMP  #CR
60b7 d0 f1             BNE  _loop

60b9 a9 00             LDA  #0
60bb 85 6f             STA  Buf_Index
60bd 9d ff 01          STA  Buffer-1,X        ; terminate buffer
60c0 20 5d 6b _getcomm JSR  Get_Char
60c3 f0 e0             BEQ  Main
60c5 c9 20             CMP  #' '
60c7 f0 f7             BEQ  _getcomm
60c9          EndMod [Main] Size = 36 [$24]

              *****************
              Module Mon_Switch
              *****************

60c9 a2 18             LDX  #24
60cb dd 07 61 _loop    CMP  Command_Char,X
60ce f0 10             BEQ  Mon_Select
60d0 ca                DEX
60d1 10 f8             BPL  _loop

              ;        fall through to error routine if not found

              ****************
              Module Mon_Error
              ****************

              ; put a question mark at the end of the text

60d3 20 7d ff          JSR  PRIMM
60d6 1b 4f 1d          .BYTE "\eO",CRIGHT,'?',0
60db a2 f8             LDX  #$f8              ; reset stack pointer
60dd 9a                TXS
60de 80 c5             BRA  Main

              *****************
              Module Mon_Select
              *****************

60e0 85 93             STA  VERCK
60e2 e0 16             CPX  #22
60e4 b3 36 03          LBCS  Load_Save
60e7 8a                TXA
60e8 0a                ASL  A
60e9 aa                TAX
60ea 7c 23 61          JMP  (Jump_Table,X)
60ed          EndMod [Mon_Select] Size = 13 [$d]

              **************
60ed          Print_Commands
              **************

60ed 20 7d ff          JSR  PRIMM
60f0 0d 9e 12          .BYTE CR,YELLOW,REV,"BS MONITOR COMMANDS:"

              ************
6107          Command_Char
              ************

                       ;      0123456789abcdef
6107 41 42 43          .BYTE "ABCDFGHJMRTX@.>;?"

              ***********
6118          Cons_Prefix
              ***********

6118 24 2b 26          .BYTE "$+&%'"

              ****************
611d          Load_Save_Verify
              ****************

611d 4c 53 56          .BYTE "LSV",WHITE,0
6122 60                RTS

              **********
6123          Jump_Table
              **********

6123 ea 64             .WORD Mon_Assemble     ; A
6125 2b 62             .WORD Mon_Bits         ; B
6127 8c 63             .WORD Mon_Compare      ; C
6129 ef 67             .WORD Mon_Disassemble  ; D
612b c9 64             .WORD Mon_Fill         ; F
612d b0 62             .WORD Mon_Go           ; G
612f bc 63             .WORD Mon_Hunt         ; H
6131 bc 62             .WORD Mon_JSR          ; J
6133 e1 61             .WORD Mon_Memory       ; M
6135 6d 60             .WORD Mon_Register     ; R
6137 42 63             .WORD Mon_Transfer     ; T
6139 4d 61             .WORD Mon_Exit         ; X
613b 01 6d             .WORD Mon_DOS          ; @
613d ea 64             .WORD Mon_Assemble     ; .
613f 82 62             .WORD Mon_Set_Memory   ; >
6141 68 62             .WORD Mon_Set_Register ; ;
6143 1b 72             .WORD Mon_Help         ; ?
6145 ad 6b             .WORD Converter        ; $
6147 ad 6b             .WORD Converter        ; +
6149 ad 6b             .WORD Converter        ; &
614b ad 6b             .WORD Converter        ; %


              ***************
              Module Mon_Exit
              ***************

614d 6c 00 04          JMP  (X_Vector)

              ****************
              Module LAC_To_PC
              ****************

              ; called from Mon_Set_Register, Mon_Go and Mon_JSR
              ; as the first instruction. The carry flag was set from
              ; the routine Got_LAC if an error occured.
              ; Notice that the Bank, PCH and PCL values are stored
              ; high to low, reverse to the standard order.

              ; Bank, PCH and PCL are part of a list, that is used by
              ; the routines FAR_JMP and FAR_JSR of the operating system

6150 b0 0e             BCS  _error
6152 a5 59             LDA  Long_AC
6154 85 04             STA  Bank+2
6156 a5 5a             LDA  Long_AC+1
6158 85 03             STA  Bank+1
615a a5 5b             LDA  Long_AC+2
615c 05 5c             ORA  Long_AC+3
615e 85 02             STA  Bank
6160 60       _error   RTS
6161          EndMod [LAC_To_PC] Size = 17 [$11]

              *****************
              Module LAC_To_LPC
              *****************

6161 da                PHX
6162 a2 03             LDX  #3
6164 b5 59    _loop    LDA  Long_AC,X
6166 95 61             STA  Long_PC,X
6168 ca                DEX
6169 10 f9             BPL  _loop
616b fa                PLX
616c 60                RTS
616d          EndMod [LAC_To_LPC] Size = 12 [$c]

              *****************
              Module LAC_To_LCT
              *****************

616d da                PHX
616e a2 03             LDX  #3
6170 b5 59    _loop    LDA  Long_AC,X
6172 95 5d             STA  Long_CT,X
6174 ca                DEX
6175 10 f9             BPL  _loop
6177 fa                PLX
6178 60                RTS
6179          EndMod [LAC_To_LCT] Size = 12 [$c]

              *****************
              Module LAC_To_LDA
              *****************

6179 da                PHX
617a a2 03             LDX  #3
617c b5 59    _loop    LDA  Long_AC,X
617e 95 65             STA  Long_DA,X
6180 ca                DEX
6181 10 f9             BPL  _loop
6183 fa                PLX
6184 60                RTS
6185          EndMod [LAC_To_LDA] Size = 12 [$c]

              *******************
              Module LAC_Plus_LCT
              *******************

6185 da                PHX
6186 a2 fc             LDX  #252              ; use ZP wrap around
6188 18                CLC
6189 b5 5d    _loop    LDA  Long_AC+4,X
618b 75 61             ADC  Long_CT+4,X
618d 95 5d             STA  Long_AC+4,X
618f e8                INX
6190 d0 f7             BNE  _loop
6192 fa                PLX
6193 60                RTS
6194          EndMod [LAC_Plus_LCT] Size = 15 [$f]

              ********************
              Module LAC_Minus_LPC
              ********************

6194 da                PHX
6195 a2 fc             LDX  #252              ; use ZP wrap around
6197 38                SEC
6198 b5 5d    _loop    LDA  Long_AC+4,X
619a f5 65             SBC  Long_PC+4,X
619c 95 61             STA  Long_CT+4,X
619e e8                INX
619f d0 f7             BNE  _loop
61a1 fa                PLX
61a2 60                RTS
61a3          EndMod [LAC_Minus_LPC] Size = 15 [$f]

              **********************
              Module LAC_Compare_LPC
              **********************

61a3 da                PHX
61a4 a2 fc             LDX  #252              ; use ZP wrap around
61a6 38                SEC
61a7 b5 5d    _loop    LDA  Long_AC+4,X
61a9 f5 65             SBC  Long_PC+4,X
61ab e8                INX
61ac d0 f9             BNE  _loop
61ae fa                PLX
61af 60                RTS
61b0          EndMod [LAC_Compare_LPC] Size = 13 [$d]

              **************
              Module Inc_LAC
              **************

61b0 e3 59             INW  Long_AC
61b2 d0 02             BNE  _return
61b4 e3 5b             INW  Long_AC+2
61b6 60       _return  RTS
61b7          EndMod [Inc_LAC] Size = 7 [$7]

              **************
              Module Dec_LAC
              **************

61b7 a5 59             LDA  Long_AC
61b9 05 5a             ORA  Long_AC+1
61bb d0 02             BNE  _skip
61bd c3 5b             DEW  Long_AC+2
61bf c3 59    _skip    DEW  Long_AC
61c1 60                RTS
61c2          EndMod [Dec_LAC] Size = 11 [$b]

              **************
              Module Inc_LPC
              **************

61c2 e3 61             INW  Long_PC
61c4 d0 02             BNE  _return
61c6 e3 63             INW  Long_PC+2
61c8 60       _return  RTS
61c9          EndMod [Inc_LPC] Size = 7 [$7]

              **************
              Module Dec_LDA
              **************

61c9 a5 65             LDA  Long_DA
61cb 05 66             ORA  Long_DA+1
61cd d0 02             BNE  _skip
61cf c3 67             DEW  Long_DA+2
61d1 c3 65    _skip    DEW  Long_DA
61d3 60                RTS
61d4          EndMod [Dec_LDA] Size = 11 [$b]

              ************
              Module Fetch
              ************

61d4 db                PHZ
61d5 98                TYA
61d6 4b                TAZ
61d7 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
61da ea                NOP                    ; use LDA  [Long_PC],Z
61db b2 61    _banked  LDA  (Long_PC),Z
61dd fb                PLZ
61de 29 ff             AND  #$ff
61e0 60                RTS
61e1          EndMod [Fetch] Size = 13 [$d]

              *****************
              Module Mon_Memory
              *****************

61e1 20 39 6a          JSR  Get_LAC           ; get 1st. parameter
61e4 a3 10             LDZ  #16               ; default row count
61e6 b0 1f             BCS  _row              ; no address
61e8 20 61 61          JSR  LAC_To_LPC        ; Long_PC = start address
61eb 20 39 6a          JSR  Get_LAC           ; Long_AC = end address
61ee b0 17             BCS  _row              ; not given

61f0 20 94 61          JSR  LAC_Minus_LPC     ; Long_CT = range
61f3 93 de fe          LBCC Mon_Error         ; negative range -> error
61f6 a2 04             LDX  #4                ; 16 bytes / line
61f8 7f d7 01          BBR7 MODE_80,_shift
61fb ca                DEX                    ;  8 bytes / line
61fc 46 5e    _shift   LSR  Long_CT+1
61fe 66 5d             ROR  Long_CT
6200 ca                DEX
6201 d0 f9             BNE  _shift
6203 ab 5d 00          LDZ  Long_CT           ; row count
6206 1b                INZ

6207 20 e1 ff _row     JSR  STOP
620a f0 06             BEQ  _exit
620c 20 00 63          JSR  Dump_Row
620f 3b                DEZ
6210 d0 f5             BNE  _row
6212 4c a5 60 _exit    JMP  Main
6215          EndMod [Mon_Memory] Size = 52 [$34]

              *****************
              Module Print_Bits
              *****************

6215 db                PHZ
6216 85 65             STA  Long_DA
6218 a0 08             LDY  #8
621a a9 2a    _loop    LDA  #'*'
621c ff 65 02          BBS7 Long_DA,_set
621f a9 2e             LDA  #'.'
6221 20 d2 ff _set     JSR  CHROUT
6224 06 65             ASL  Long_DA
6226 88                DEY
6227 d0 f1             BNE  _loop
6229 fb                PLZ
622a 60                RTS
622b          EndMod [Print_Bits] Size = 22 [$16]

              ***************
              Module Mon_Bits
              ***************

622b 20 39 6a          JSR  Get_LAC           ; get 1st. parameter
622e b0 03             BCS  _lab
6230 20 61 61          JSR  LAC_To_LPC        ; Long_PC = start address
6233 20 20 6b _lab     JSR  Print_CR
6236 a9 05             LDA  #WHITE
6238 85 66             STA  Long_DA+1

623a a2 08             LDX  #8
623c da       _row     PHX
623d 20 ee 6a          JSR  Hex_LPC
6240 a3 00             LDZ  #0
6242 38       _col     SEC
6243 a9 9b             LDA  #WHITE+LRED       ; toggle colour
6245 e5 66             SBC  Long_DA+1
6247 85 66             STA  Long_DA+1
6249 20 d2 ff          JSR  CHROUT
624c ea b2 61          LDA  [Long_PC],Z
624f 20 15 62          JSR  Print_Bits
6252 18                CLC
6253 6b                TZA
6254 69 08             ADC  #8
6256 4b                TAZ
6257 c9 40             CMP  #64
6259 90 e7             BCC  _col
625b 20 20 6b          JSR  Print_CR
625e 20 c2 61          JSR  Inc_LPC
6261 fa                PLX
6262 ca                DEX
6263 d0 d7             BNE  _row
6265 4c a5 60          JMP  Main
6268          EndMod [Mon_Bits] Size = 61 [$3d]

              ***********************
              Module Mon_Set_Register
              ***********************

6268 20 39 6a          JSR  Get_LAC           ; get 1st. parameter
626b 20 50 61          JSR  LAC_To_PC
626e a0 03             LDY  #3
6270 20 39 6a _loop    JSR  Get_LAC
6273 b0 0a             BCS  _exit
6275 a5 59             LDA  Long_AC
6277 99 02 00          STA  Bank,Y
627a c8                INY
627b c0 09             CPY  #9
627d 90 f1             BCC  _loop
627f 4c a5 60 _exit    JMP  Main
6282          EndMod [Mon_Set_Register] Size = 26 [$1a]

              *********************
              Module Mon_Set_Memory
              *********************

6282 20 39 6a          JSR  Get_LAC           ; get 1st. parameter
6285 b0 1c             BCS  _exit
6287 20 61 61          JSR  LAC_To_LPC        ; Long_PC = row address
628a a3 00             LDZ  #0
628c 20 39 6a _loop    JSR  Get_LAC
628f b0 12             BCS  _exit
6291 a5 59             LDA  Long_AC
6293 ff 64 01          BBS7 Long_PC+3,_banked ; trigger banked access
6296 ea                NOP                    ; use STA  [Long_PC],Z
6297 92 61    _banked  STA  (Long_PC),Z
6299 1b                INZ
629a c2 10             CPZ  #16
629c 7f d7 02          BBR7 MODE_80,_next
629f c2 08             CPZ  #8
62a1 90 e9    _next    BCC  _loop

62a3 20 7d ff _exit    JSR  PRIMM
62a6 1b 4f             .BYTE "\eO"
62a8 91 00             .BYTE $91,$00
62aa 20 00 63          JSR  Dump_Row
62ad 4c a5 60          JMP  Main
62b0          EndMod [Mon_Set_Memory] Size = 46 [$2e]

              *************
              Module Mon_Go
              *************

62b0 20 39 6a          JSR  Get_LAC           ; get 1st. parameter
62b3 20 50 61          JSR  LAC_To_PC
62b6 a6 0c             LDX  SPL
62b8 9a                TXS
62b9 4c 71 ff          JMP  JMPFAR
62bc          EndMod [Mon_Go] Size = 12 [$c]

              **************
              Module Mon_JSR
              **************

62bc 20 39 6a          JSR  Get_LAC           ; get 1st. parameter
62bf 20 50 61          JSR  LAC_To_PC
62c2 a6 0c             LDX  SPL
62c4 9a                TXS
62c5 20 6e ff          JSR  JSRFAR
62c8 ba                TSX
62c9 86 0c             STX  SPL
62cb 4c a5 60          JMP  Main
62ce          EndMod [Mon_JSR] Size = 18 [$12]

              *******************
              Module Dump_4_Bytes
              *******************

62ce 20 d2 ff          JSR  CHROUT            ; colour
62d1 ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62d4 ea                NOP                    ; use LDA  [Long_PC],Z
62d5 b2 61    _banked  LDA  (Long_PC),Z
62d7 20 18 6b          JSR  Print_Hex_Blank
62da 1b                INZ
62db 6b                TZA
62dc 29 03             AND  #3
62de d0 f1             BNE  _loop
62e0 60                RTS
62e1          EndMod [Dump_4_Bytes] Size = 19 [$13]

              *******************
              Module Dump_4_Chars
              *******************

62e1 a0 00             LDY  #0
62e3 84 f4             STY  QTSW              ; disable quote mode
62e5 20 d2 ff          JSR  CHROUT            ; colour
62e8 ff 64 01 _loop    BBS7 Long_PC+3,_banked ; trigger banked access
62eb ea                NOP                    ; use LDA  [Long_PC],Z
62ec b2 61    _banked  LDA  (Long_PC),Z
62ee a8                TAY
62ef 29 60             AND  #%0110 0000
62f1 d0 02             BNE  _laba
62f3 a0 2e             LDY  #'.'
62f5 98       _laba    TYA
62f6 20 d2 ff          JSR  CHROUT
62f9 1b                INZ
62fa 6b                TZA
62fb 29 03             AND  #3
62fd d0 e9             BNE  _loop
62ff 60                RTS
6300          EndMod [Dump_4_Chars] Size = 31 [$1f]

              ***************
              Module Dump_Row
              ***************

6300 db                PHZ
6301 20 20 6b          JSR  Print_CR
6304 a9 3e             LDA  #'>'
6306 20 d2 ff          JSR  CHROUT
6309 20 ee 6a          JSR  Hex_LPC

630c a3 00             LDZ  #0
630e a2 02             LDX  #2                ; 2 blocks in 80 columns
6310 7f d7 01          BBR7 MODE_80,_loop
6313 ca                DEX                    ; 1 block  in 40 columns
6314 a9 96    _loop    LDA  #LRED
6316 20 ce 62          JSR  Dump_4_Bytes
6319 a9 05             LDA  #WHITE
631b 20 ce 62          JSR  Dump_4_Bytes
631e ca                DEX
631f d0 f3             BNE  _loop

6321 20 7d ff          JSR  PRIMM
6324 3a 12 00          .BYTE $3a,$12,$00      ; : reverse on

6327 a3 00             LDZ  #0
6329 a2 02             LDX  #2                ; 4 blocks in 80 columns
632b 7f d7 01          BBR7 MODE_80,_lchr
632e ca                DEX                    ; 2 blocks in 40 columns
632f a9 96    _lchr    LDA  #LRED
6331 20 e1 62          JSR  Dump_4_Chars
6334 a9 05             LDA  #WHITE
6336 20 e1 62          JSR  Dump_4_Chars
6339 ca                DEX
633a d0 f3             BNE  _lchr
633c 6b                TZA
633d 20 86 6b          JSR  Add_LPC
6340 fb                PLZ
6341 60                RTS
6342          EndMod [Dump_Row] Size = 66 [$42]

              *******************
              Module Mon_Transfer
              *******************

6342 20 94 6b          JSR  Param_Range       ; Long_PC = source
6345 b3 8c fd          LBCS Mon_Error         ; Long_CT = count
6348 20 39 6a          JSR  Get_LAC           ; Long_AC = target
634b b3 86 fd          LBCS Mon_Error

634e a3 00             LDZ  #0
6350 20 a3 61          JSR  LAC_Compare_LPC   ; target - source
6353 90 1d             BCC  _forward

              ;        source < target: backward transfer

6355 20 85 61          JSR  LAC_Plus_LCT      ; Long_AC = end of target

6358 ff 68 01 _lpback  BBS7 Long_DA+3,_rb     ; bit 31 ?
635b ea                NOP                    ; LDA  [Long_DA],Z
635c b2 65    _rb      LDA  (Long_DA),Z       ; backward copy
635e ff 5c 01          BBS7 Long_AC+3,_wb     ; bit 31 ?
6361 ea                NOP                    ; STA  [Long_AC],Z
6362 92 59    _wb      STA  (Long_AC),Z
6364 20 c9 61          JSR  Dec_LDA
6367 20 b7 61          JSR  Dec_LAC
636a 20 79 6b          JSR  Dec_LCT
636d 10 e9             BPL  _lpback
636f 4c a5 60          JMP  Main

6372 ff 64 01 _forward BBS7 Long_PC+3,_rf     ; bit 31 ?
6375 ea                NOP                    ; LDA  [Long_PC],Z
6376 b2 61    _rf      LDA  (Long_PC),Z       ; backward copy
6378 ff 5c 01          BBS7 Long_AC+3,_wf     ; bit 31 ?
637b ea                NOP                    ; STA  [Long_AC],Z
637c 92 59    _wf      STA  (Long_AC),Z
637e 20 c2 61          JSR  Inc_LPC
6381 20 b0 61          JSR  Inc_LAC
6384 20 79 6b          JSR  Dec_LCT
6387 10 e9             BPL  _forward
6389 4c a5 60          JMP  Main
638c          EndMod [Mon_Transfer] Size = 74 [$4a]

              ******************
              Module Mon_Compare
              ******************

638c 20 94 6b          JSR  Param_Range       ; Long_PC = source
638f b3 42 fd          LBCS Mon_Error         ; Long_CT = count
6392 20 39 6a          JSR  Get_LAC           ; Long_AC = target
6395 b3 3c fd          LBCS Mon_Error
6398 20 20 6b          JSR  Print_CR
639b a3 00             LDZ  #0
639d ff 64 01 _loop    BBS7 Long_PC+3,_rf     ; bit 31 ?
63a0 ea                NOP                    ; LDA  [Long_PC],Z
63a1 b2 61    _rf      LDA  (Long_PC),Z       ; backward copy
63a3 ff 5c 01          BBS7 Long_AC+3,_cf     ; bit 31 ?
63a6 ea                NOP                    ; CMP  [Long_AC],Z
63a7 d2 59    _cf      CMP  (Long_AC),Z
63a9 f0 03             BEQ  _laba
63ab 20 ee 6a          JSR  Hex_LPC
63ae 20 b0 61 _laba    JSR  Inc_LAC
63b1 20 c2 61          JSR  Inc_LPC
63b4 20 79 6b          JSR  Dec_LCT
63b7 10 e4             BPL  _loop
63b9 4c a5 60          JMP  Main
63bc          EndMod [Mon_Compare] Size = 48 [$30]

              ***************
              Module Mon_Hunt
              ***************

63bc 20 94 6b          JSR  Param_Range       ; Long_PC = start
63bf b3 12 fd          LBCS Mon_Error         ; Long_CT = count
63c2 a0 00             LDY  #0
63c4 20 5d 6b          JSR  Get_Char
63c7 c9 27             CMP  #APOSTR
63c9 d0 17             BNE  _bin
63cb 20 5d 6b          JSR  Get_Char          ; string hunt
63ce c9 00             CMP  #0
63d0 f3 01 fd          LBEQ Mon_Error         ; null string

63d3 99 0c 04 _lpstr   STA  Mon_Data,Y
63d6 c8                INY
63d7 20 5d 6b          JSR  Get_Char
63da f0 18             BEQ  _hunt
63dc c0 20             CPY  #32               ;max. string length
63de d0 f3             BNE  _lpstr
63e0 80 12             BRA  _hunt

63e2 20 37 6a _bin     JSR  Got_LAC
63e5 a5 59    _lpbin   LDA  Long_AC
63e7 99 0c 04          STA  Mon_Data,Y
63ea c8                INY
63eb 20 39 6a          JSR  Get_LAC
63ee b0 04             BCS  _hunt
63f0 c0 20             CPY  #32               ;max. data length
63f2 d0 f1             BNE  _lpbin

63f4 84 65    _hunt    STY  Long_DA           ; hunt length
63f6 20 20 6b          JSR  Print_CR

63f9 a0 00    _lpstart LDY  #0
63fb 20 d4 61 _lpins   JSR  Fetch
63fe d9 0c 04          CMP  Mon_Data,Y
6401 d0 08             BNE  _next
6403 c8                INY
6404 c4 65             CPY  Long_DA
6406 d0 f3             BNE  _lpins
6408 20 ee 6a          JSR  Hex_LPC           ; match
640b 20 e1 ff _next    JSR  STOP
640e f3 95 fc          LBEQ Main
6411 20 c2 61          JSR  Inc_LPC
6414 20 79 6b          JSR  Dec_LCT
6417 10 e0             BPL  _lpstart
6419 4c a5 60          JMP  Main
641c          EndMod [Mon_Hunt] Size = 96 [$60]

              ****************
              Module Load_Save
              ****************

641c ac 08 04          LDY  Disk_Unit
641f 84 ba             STY  FA
6421 a0 08             LDY  #8
6423 84 b9             STY  SA
6425 a0 00             LDY  #0
6427 84 bd             STY  BA
6429 84 b7             STY  FNLEN
642b 84 be             STY  FNBANK
642d 84 90             STY  STATUS
642f a9 04             LDA  #>Mon_Data
6431 85 bc             STA  FNADR+1
6433 a9 0c             LDA  #<Mon_Data
6435 85 bb             STA  FNADR
6437 20 5d 6b _skip    JSR  Get_Char          ; skip blanks
643a f3 97 fc          LBEQ Mon_Error
643d c9 20             CMP  #' '
643f f0 f6             BEQ  _skip
6441 c9 22             CMP  #QUOTE            ; must be quote
6443 d3 8e fc          LBNE Mon_Error

6446 a6 6f             LDX  Buf_Index
6448 bd 00 02 _copyfn  LDA  Buffer,X          ; copy filename
644b f0 4a             BEQ  _do               ; no more input
644d e8                INX
644e c9 22             CMP  #QUOTE
6450 f0 0c             BEQ  _unit             ; end of filename
6452 91 bb             STA  (FNADR),Y         ; store to filename
6454 e6 b7             INC  FNLEN
6456 c8                INY
6457 c0 13             CPY  #19               ; max = 16 plus prefix "@0:"
6459 90 ed             BCC  _copyfn
645b 4c d3 60          JMP  Mon_Error         ; filename too long

645e 86 6f    _unit    STX  Buf_Index         ; update read position
6460 20 5d 6b          JSR  Get_Char
6463 f0 32             BEQ  _do               ; no more parameter
6465 20 39 6a          JSR  Get_LAC
6468 b0 2d             BCS  _do
646a a5 59             LDA  Long_AC           ; unit #
646c 85 ba             STA  FA
646e 20 39 6a          JSR  Get_LAC
6471 b0 24             BCS  _do
6473 20 61 61          JSR  LAC_To_LPC        ; Long_PC = start address
6476 85 bd             STA  BA                ; Bank
6478 20 39 6a          JSR  Get_LAC           ; Long_AC = end address + 1
647b b0 42             BCS  _load             ; no end address -> load/verify
647d 20 20 6b          JSR  Print_CR
6480 a6 59             LDX  Long_AC           ; X/Y = end address
6482 a4 5a             LDY  Long_AC+1
6484 a5 93             LDA  VERCK             ; A = load/verify/save
6486 c9 53             CMP  #'S'
6488 d3 49 fc          LBNE Mon_Error         ; must be Save
648b a9 00             LDA  #0
648d 85 b9             STA  SA                ; set SA for PRG
648f a9 61             LDA  #Long_PC          ; Long_PC = start address
6491 20 d8 ff          JSR  SAVE
6494 4c a5 60 _exit    JMP  Main

6497 a5 93    _do      LDA  VERCK
6499 c9 56             CMP  #'V'              ; Verify
649b f0 07             BEQ  _exec
649d c9 4c             CMP  #'L'              ; Load
649f d3 32 fc          LBNE Mon_Error
64a2 a9 00             LDA  #0                ; 0 = LOAD
64a4 20 d5 ff _exec    JSR  LOAD              ; A == 0 : LOAD else VERIFY
64a7 4f 90 ea          BBR4 STATUS,_exit
64aa a5 93             LDA  VERCK
64ac f3 25 fc          LBEQ Mon_Error
64af b3 f4 fb          LBCS Main
64b2 20 7d ff          JSR  PRIMM
64b5 20 45 52          .BYTE " ERROR",0
64bc 4c a5 60          JMP  Main

64bf a6 61    _load    LDX  Long_PC
64c1 a4 62             LDY  Long_PC+1
64c3 a9 00             LDA  #0                ; 0 = use X/Y as load address
64c5 85 b9             STA  SA                ; and ignore load address from file
64c7 80 ce             BRA  _do
64c9          EndMod [Load_Save] Size = 173 [$ad]

              ***************
              Module Mon_Fill
              ***************

64c9 20 94 6b          JSR  Param_Range       ; Long_PC = target
64cc b3 05 fc          LBCS Mon_Error         ; Long_CT = count
64cf 20 39 6a          JSR  Get_LAC           ; Long_AC = fill byte
64d2 b3 ff fb          LBCS Mon_Error
64d5 20 20 6b          JSR  Print_CR
64d8 a3 00             LDZ  #0
64da a5 59    _loop    LDA  Long_AC
64dc ea 92 61          STA  [Long_PC],Z
64df 20 c2 61          JSR  Inc_LPC
64e2 20 79 6b          JSR  Dec_LCT
64e5 10 f3             BPL  _loop
64e7 4c a5 60          JMP  Main
64ea          EndMod [Mon_Fill] Size = 33 [$21]

              *******************
              Module Mon_Assemble
              *******************

64ea 20 39 6a          JSR  Get_LAC           ; get 1st. parameter
64ed b3 e4 fb          LBCS Mon_Error
64f0 20 61 61          JSR  LAC_To_LPC        ; Long_PC = PC

64f3 a2 00    _start   LDX  #0                ; mne letter counter
64f5 86 66             STX  Long_DA+1         ; clear encoded MNE
64f7 86 6c             STX  Op_Flag           ; 6:long branch 5:32 bit
64f9 8e 06 04          STX  Op_Ix             ; operand byte index
64fc 8e 07 04          STX  Op_Len            ; operand length
64ff 20 5d 6b _getin   JSR  Get_Char
6502 d0 05             BNE  _laba
6504 e0 00             CPX  #0
6506 f3 9d fb          LBEQ Main

6509 c9 20    _laba    CMP  #' '
650b f0 e6             BEQ  _start            ; restart after blank

              ;        check for long branches

650d e0 01             CPX  #1
650f d0 0e             BNE  _labb             ; -> not 2nd. char
6511 c9 42             CMP  #'B'
6513 d0 0a             BNE  _labb             ; 2nd. char != 'B'
6515 ab 03 04          LDZ  Op_Mne
6518 c2 4c             CPZ  #'L'
651a d0 03             BNE  _labb             ; 1st. Char != 'L'
651c e7 6c             SMB6 Op_Flag           ; flag long branch
651e ca                DEX                    ; skip 'L'

651f 9d 03 04 _labb    STA  Op_Mne,X          ; next mne character
6522 e8                INX
6523 e0 03             CPX  #3
6525 d0 d8             BNE  _getin

              ;        encode 3 letter mnemonic

6527 bd 02 04 _lpenc   LDA  Op_Mne-1,X
652a 38                SEC
652b e9 3f             SBC  #$3f              ; offset
652d a0 05             LDY  #5                ; 5 bit code
652f 4a       _lpbit   LSR  A
6530 66 65             ROR  Long_DA
6532 66 66             ROR  Long_DA+1
6534 88                DEY
6535 d0 f8             BNE  _lpbit
6537 ca                DEX
6538 d0 ed             BNE  _lpenc

              ;        find packed MNE code in table

653a a2 5a             LDX  #90               ; # of mnemonics
653c a5 65             LDA  Long_DA
653e dd ee 6e _lpfind  CMP  MNE_L,X           ; compare left MNE
6541 d0 07             BNE  _nxfind
6543 bc 49 6f          LDY  MNE_R,X
6546 c4 66             CPY  Long_DA+1         ; compare right MNE
6548 f0 06             BEQ  _found
654a ca       _nxfind  DEX
654b 10 f1             BPL  _lpfind
654d 4c d3 60          JMP  Mon_Error

6550 8e 02 04 _found   STX  Ix_Mne

              ;        find 1st. opcode for this mnemonic

6553 8a                TXA
6554 a2 00             LDX  #0
6556 dd a4 6f _lpopc   CMP  MNE_Index,X
6559 f0 03             BEQ  _exopc
655b e8                INX
655c d0 f8             BNE  _lpopc
655e 86 6b    _exopc   STX  Op_Code

              ;        check for BBR BBS RMB SMB

6560 8a                TXA
6561 29 07             AND  #7
6563 c9 07             CMP  #7
6565 d0 1d             BNE  _labc

6567 20 5d 6b          JSR  Get_Char
656a c9 30             CMP  #'0'
656c 93 65 fb          LBCC Mon_Error
656f c9 38             CMP  #'8'
6571 b3 60 fb          LBCS Mon_Error
6574 0a                ASL  A
6575 0a                ASL  A
6576 0a                ASL  A
6577 0a                ASL  A
6578 05 6b             ORA  Op_Code
657a 85 6b             STA  Op_Code

657c 20 5d 6b          JSR  Get_Char
657f c9 20             CMP  #' '
6581 d3 50 fb          LBNE Mon_Error

              ;        read operand

6584 a9 00    _labc    LDA  #0
6586 85 6a    _labd    STA  Mode_Flags
6588 20 56 6a          JSR  Read_Number
658b b3 46 fb          LBCS Mon_Error
658e f0 1c             BEQ  _labg             ; no operand
6590 a5 5b             LDA  Long_AC+2
6592 d3 3f fb          LBNE Mon_Error         ; -> overflow
6595 a0 02             LDY  #2                ; Y=2 word operand
6597 a5 5a             LDA  Long_AC+1
6599 d0 01             BNE  _labf             ; high byte not zero
659b 88                DEY                    ; Y=1 byte operand
659c ae 06 04 _labf    LDX  Op_Ix             ; X = operand value #
659f 98                TYA                    ; A = 1:byte or 2:word
65a0 9d 07 04          STA  Op_Len,X          ; store operand length
65a3 ee 06 04          INC  Op_Ix             ; ++index to operand value
65a6 8a                TXA                    ; A = current index
65a7 d0 03             BNE  _labg             ; -> at 2nd. byte
65a9 20 6d 61          JSR  LAC_To_LCT        ; Long_CT = 1st. operand
65ac c6 6f    _labg    DEC  Buf_Index         ; back to delimiter

65ae 20 5d 6b _lpnop   JSR  Get_Char          ; get delimiter
65b1 f3 ed 00          LBEQ _adjust           ; end of operand
65b4 c9 20             CMP  #' '
65b6 f0 f6             BEQ  _lpnop

              ;        immediate

65b8 c9 23             CMP  #'#'
65ba d0 08             BNE  _lbra
65bc a5 6a             LDA  Mode_Flags
65be d0 70             BNE  _error
65c0 a9 80             LDA  #$80              ; immediate mode
65c2 80 c2             BRA  _labd

              ;        left bracket

65c4 c9 5b    _lbra    CMP  #'['
65c6 d0 0a             BNE  _indir
65c8 a5 6a             LDA  Mode_Flags
65ca d0 64             BNE  _error
65cc d7 6c             SMB5 Op_Flag           ; 32 bit mode
65ce a9 40             LDA  #$40              ; ( flag
65d0 80 b4             BRA  _labd

              ;        left parenthesis

65d2 c9 28    _indir   CMP  #'('
65d4 d0 08             BNE  _comma
65d6 a5 6a             LDA  Mode_Flags
65d8 d0 56             BNE  _error
65da a9 40             LDA  #$40              ; ( flag
65dc 80 a8             BRA  _labd

              ;        comma

65de c9 2c    _comma   CMP  #','
65e0 d0 1f             BNE  _stack
65e2 ad 06 04          LDA  Op_Ix             ; operand value #
65e5 f0 49             BEQ  _error
65e7 a2 04             LDX  #4                ; outside comma
65e9 a5 6a             LDA  Mode_Flags
65eb f0 0e             BEQ  _comma1           ; no flags yet
65ed c9 78             CMP  #$78              ; ($nn,SP)
65ef f0 0a             BEQ  _comma1
65f1 c9 48             CMP  #$48              ; ($nn)
65f3 f0 06             BEQ  _comma1
65f5 a2 20             LDX  #$20              ; , inside comma
65f7 c9 40             CMP  #$40              ; (
65f9 d0 35             BNE  _error
65fb 8a       _comma1  TXA
65fc 05 6a             ORA  Mode_Flags
65fe 4c 86 65          JMP  _labd

              ;        stack relative

6601 c9 53    _stack   CMP  #'S'
6603 d0 12             BNE  _rbra
6605 20 5d 6b          JSR  Get_Char
6608 c9 50             CMP  #'P'
660a d0 24             BNE  _error
660c a5 6a             LDA  Mode_Flags
660e c9 60             CMP  #$60              ; ($nn,
6610 d0 1e             BNE  _error
6612 09 10             ORA  #%0001 0000       ; SP flag
6614 4c 86 65          JMP  _labd

              ;        right bracket

6617 c9 5d    _rbra    CMP  #']'
6619 d0 18             BNE  _right
661b 5f 6c 12          BBR5 Op_Flag,_error
661e ad 06 04          LDA  Op_Ix
6621 f3 b0 fa          LBEQ Mon_Error         ; no value
6624 a5 6a             LDA  Mode_Flags
6626 c9 40             CMP  #$40              ; (
6628 d3 a9 fa          LBNE Mon_Error
662b 09 08             ORA  #%0000 1000       ; )
662d 4c 86 65          JMP  _labd

6630 4c d3 60 _error   JMP  Mon_Error

              ;        right parenthesis

6633 c9 29    _right   CMP  #')'
6635 d0 1a             BNE  _X
6637 ad 06 04          LDA  Op_Ix
663a f3 97 fa          LBEQ Mon_Error         ; no value
663d a5 6a             LDA  Mode_Flags
663f c9 40             CMP  #$40              ; (
6641 f0 09             BEQ  _right1
6643 c9 61             CMP  #$61              ; ($nn,X
6645 f0 05             BEQ  _right1
6647 c9 70             CMP  #$70              ; ($nn,SP
6649 d3 88 fa          LBNE Mon_Error
664c 09 08    _right1  ORA  #%0000 1000       ; )
664e 4c 86 65          JMP  _labd

6651 c9 58    _X       CMP  #'X'
6653 d0 16             BNE  _Y
6655 ad 06 04          LDA  Op_Ix
6658 f3 79 fa          LBEQ Mon_Error
665b a5 6a             LDA  Mode_Flags
665d c9 60             CMP  #$60
665f f0 05             BEQ  _X1
6661 c9 04             CMP  #4
6663 d3 6e fa          LBNE Mon_Error
6666 09 01    _X1      ORA  #%0000 0001
6668 4c 86 65          JMP  _labd

              ;        Y

666b c9 59    _Y       CMP  #'Y'
666d d0 1a             BNE  _Z
666f ad 06 04          LDA  Op_Ix
6672 f3 5f fa          LBEQ Mon_Error
6675 a5 6a             LDA  Mode_Flags
6677 c9 4c             CMP  #$4c             ; ($nn),
6679 f0 09             BEQ  _Y1
667b c9 04             CMP  #4               ; $nn,
667d f0 05             BEQ  _Y1
667f c9 7c             CMP  #$7c             ; ($nn,SP),
6681 d3 50 fa          LBNE Mon_Error
6684 09 02    _Y1      ORA  #%0000 0010      ; Y
6686 4c 86 65          JMP  _labd

              ;        Z

6689 c9 5a    _Z       CMP  #'Z'
668b d3 46 fa          LBNE Mon_Error
668e ad 06 04          LDA  Op_Ix
6691 f3 40 fa          LBEQ Mon_Error
6694 a5 6a             LDA  Mode_Flags
6696 c9 4c             CMP  #$4c              ; $nn,
6698 d3 39 fa          LBNE Mon_Error
669b 09 03             ORA  #%0000 0011       ; Z
669d 4c 86 65          JMP  _labd

              ;        BBR BBS RMB SMB  two operands

66a0 ad 02 04 _adjust  LDA  Ix_Mne
66a3 ae 06 04          LDX  Op_Ix             ; # if values
66a6 f0 52             BEQ  _match            ; -> no operand
66a8 ca                DEX
66a9 f0 25             BEQ  _one             ; ->  one operand
66ab ca                DEX
66ac d3 25 fa          LBNE Mon_Error         ; -> error if more than 2
66af c9 05             CMP  #5                ; BBR
66b1 f0 05             BEQ  _BB
66b3 c9 06             CMP  #6                ; BBS
66b5 d3 1c fa          LBNE Mon_Error
66b8 a5 5e    _BB      LDA  Long_CT+1
66ba d3 17 fa          LBNE Mon_Error
66bd a9 03             LDA  #3                ; offset
66bf 20 a5 67          JSR  Branch_Target
66c2 a5 6b             LDA  Op_Code
66c4 a4 59             LDY  Long_AC
66c6 a6 5d             LDX  Long_CT
66c8 86 59             STX  Long_AC
66ca 84 5a             STY  Long_AC+1
66cc a0 02             LDY  #2
66ce 80 4d             BRA  _store

              ;        one operand in Long_CT

66d0 a6 5d    _one     LDX  Long_CT
66d2 a4 5e             LDY  Long_CT+1
66d4 86 59             STX  Long_AC
66d6 84 5a             STY  Long_AC+1            ; Aval = operand
66d8 a2 0a             LDX  #10
66da dd a3 70 _lpbrain CMP  BRAIN-1,X
66dd f0 05             BEQ  _branch
66df ca                DEX
66e0 d0 f8             BNE  _lpbrain
66e2 80 16             BRA  _match

              ;        branch instruction

66e4 a5 6a    _branch  LDA  Mode_Flags
66e6 d3 eb f9          LBNE Mon_Error         ; only value
66e9 a9 02             LDA  #2                ; branch offset
66eb 20 a5 67          JSR  Branch_Target
66ee a5 6b             LDA  Op_Code
66f0 a0 01             LDY  #1                ; short branch
66f2 6f 6c 03          BBR6 Op_Flag,_bran1
66f5 c8                INY                    ; long branch
66f6 09 03             ORA  #3
66f8 80 23    _bran1   BRA  _store

              ;        find opcode matching mnemonic and address mode

66fa 20 d0 67 _match   JSR  Mode_Index
66fd 20 b8 67 _lpmatch JSR  Match_Mode
6700 f0 17             BEQ  _okmat
6702 ad 07 04          LDA  Op_Len
6705 f3 cc f9          LBEQ Mon_Error
6708 a5 6a             LDA  Mode_Flags
670a 33 c7 f9          LBMI Mon_Error
670d 29 3f             AND  #%0011 1111
670f 85 6a             STA  Mode_Flags
6711 ee 07 04          INC  Op_Len
6714 20 e2 67          JSR  Size_To_Mode
6717 80 e4             BRA  _lpmatch
6719 ac 07 04 _okmat   LDY  Op_Len
671c 8a                TXA

              ;        store instruction bytes
              ;        -----------------------
              ;        A    = opcode
              ;        Y    = operand length
              ;        Long_AC = operand value

671d 85 6b    _store   STA  Op_Code
671f 84 6d             STY  Op_Size
6721 e6 6d             INC  Op_Size
6723 5f 6c 17          BBR5 Op_Flag,_storen
6726 a9 ea             LDA  #$ea              ; 32 bit prefix
6728 a3 00             LDZ  #0
672a ea 92 61          STA  [Long_PC],Z       ; store prefix
672d 1b                INZ
672e a5 6b             LDA  Op_Code
6730 ea 92 61          STA  [Long_PC],Z       ; store opcode
6733 1b                INZ
6734 a5 59             LDA  Long_AC
6736 ea 92 61          STA  [Long_PC],Z       ; store address
6739 e6 6d             INC  Op_Size
673b 80 13             BRA  _print

673d 5a       _storen  PHY
673e fb                PLZ                    ; Z = Y
673f f0 0a             BEQ  _store1

6741 b9 58 00 _lpsto   LDA  Long_AC-1,Y
6744 ea 92 61          STA  [Long_PC],Z
6747 3b                DEZ
6748 88                DEY
6749 d0 f6             BNE  _lpsto

674b a5 6b    _store1  LDA  Op_Code
674d ea 92 61          STA  [Long_PC],Z

6750 20 7d ff _print   JSR  PRIMM
6753 0d 91 41          .BYTE 13,$91,"A \eQ",0
675a 20 2d 68          JSR  Print_Code
675d e6 6d             INC  Op_Size
675f a5 6d             LDA  Op_Size
6761 20 86 6b          JSR  Add_LPC

              ; print out command 'A' together with next address
              ; and put it into buffer too,
              ; for easy entry of next assembler instruction

6764 20 7d ff          JSR  PRIMM
6767 0d 41 20          .BYTE CR,"A ",0

676b a9 41             LDA  #'A'
676d 8d 00 02          STA  Buffer
6770 a9 20             LDA  #' '
6772 8d 01 02          STA  Buffer+1
6775 a0 02             LDY  #2
6777 a2 02             LDX  #2                ; 6 digits
6779 b5 61             LDA  Long_PC,X
677b d0 01             BNE  _auto
677d ca                DEX                    ; 4 digits
677e da       _auto    PHX
677f b5 61             LDA  Long_PC,X
6781 20 39 6b          JSR  A_To_Hex
6784 99 00 02          STA  Buffer,Y
6787 20 d2 ff          JSR  CHROUT
678a c8                INY
678b 8a                TXA
678c 99 00 02          STA  Buffer,Y
678f 20 d2 ff          JSR  CHROUT
6792 c8                INY
6793 fa                PLX
6794 ca                DEX
6795 10 e7             BPL  _auto

6797 a9 20             LDA  #' '
6799 99 00 02          STA  Buffer,Y
679c 20 d2 ff          JSR  CHROUT
679f c8                INY
67a0 98                TYA
67a1 aa                TAX
67a2 4c aa 60          JMP  Main_A
67a5          EndMod [Mon_Assemble] Size = 699 [$2bb]

              ********************
              Module Branch_Target
              ********************

67a5 c3 59             DEW  Long_AC
67a7 3a                DEC  A
67a8 d0 fb             BNE  Branch_Target

              ;        Target - PC

67aa 38                SEC
67ab a5 59             LDA  Long_AC
67ad e5 61             SBC  Long_PC
67af 85 59             STA  Long_AC
67b1 a5 5a             LDA  Long_AC+1
67b3 e5 62             SBC  Long_PC+1
67b5 85 5a             STA  Long_AC+1
67b7 60                RTS
67b8          EndMod [Branch_Target] Size = 19 [$13]

              *****************
              Module Match_Mode
              *****************

              ;        find matching mnemonic and address mode

67b8 a6 6b             LDX  Op_Code           ; try this opcode
67ba a5 6a             LDA  Mode_Flags         ; size and address mode
67bc dd ae 70 _loop    CMP  LEN_ADM,X
67bf f0 0e             BEQ  _return           ; success  ZF=1

              ;        search for next opcode with same mnemonic

67c1 e8       _next    INX                    ; next opcode
67c2 f0 0a             BEQ _error
67c4 bc a4 6f          LDY  MNE_Index,X
67c7 cc 02 04          CPY  Ix_Mne            ; same mnemonic ?
67ca f0 f0             BEQ  _loop             ; -> compare again
67cc 80 f3             BRA  _next

67ce ca       _error   DEX                    ; X = $ff ZF=0
67cf 60       _return  RTS
67d0          EndMod [Match_Mode] Size = 24 [$18]

              *****************
              Module Mode_Index
              *****************

67d0 a5 6a             LDA  Mode_Flags
67d2 a2 00             LDX  #0
67d4 dd ae 71 _loop    CMP  ADMODE,X
67d7 f0 07             BEQ  _found
67d9 e8                INX
67da e0 10             CPX  #16
67dc 90 f6             BCC  _loop
67de 8a                TXA
67df 60                RTS
67e0 86 6a    _found   STX  Mode_Flags
67e2          EndMod [Mode_Index] Size = 18 [$12]

              *******************
              Module Size_To_Mode
              *******************

67e2 ad 07 04          LDA  Op_Len
67e5 4a                LSR  A
67e6 6a                ROR  A
67e7 6a                ROR  A
67e8 05 6a             ORA  Mode_Flags
67ea 85 6a             STA  Mode_Flags
67ec a2 00             LDX  #0
67ee 60                RTS
67ef          EndMod [Size_To_Mode] Size = 13 [$d]

              **********************
              Module Mon_Disassemble
              **********************

67ef 20 39 6a          JSR  Get_LAC           ; get 1st. parameter
67f2 b0 08             BCS  _nopar
67f4 20 61 61          JSR  LAC_To_LPC        ; Long_PC = start address
67f7 20 39 6a          JSR  Get_LAC           ; Long_AC = end address
67fa 90 06             BCC  range
67fc a9 20    _nopar   LDA  #32               ; disassemble 32 bytes
67fe 85 5d             STA  Long_CT
6800 80 06             BRA  _loop
6802 20 94 61 range    JSR  LAC_Minus_LPC     ; Long_CT = range
6805 93 cc f8          LBCC Mon_Error         ; -> negative

6808 20 25 6b _loop    JSR  CR_Erase          ; prepare empty line
680b 20 e1 ff          JSR  STOP
680e f3 95 f8          LBEQ Main
6811 20 27 68          JSR  Dis_Code          ; disassemble one line
6814 e6 6d             INC  Op_Size
6816 a5 6d             LDA  Op_Size
6818 20 86 6b          JSR  Add_LPC           ; advance address
681b a5 5d             LDA  Long_CT
681d 38                SEC
681e e5 6d             SBC  Op_Size
6820 85 5d             STA  Long_CT
6822 b0 e4             BCS  _loop
6824 4c a5 60          JMP  Main
6827          EndMod [Mon_Disassemble] Size = 56 [$38]

              ***************
              Module Dis_Code
              ***************

6827 20 7d ff          JSR  PRIMM
682a 2e 20 00          .BYTE ". ",0
682d          EndMod [Dis_Code] Size = 6 [$6]

              *****************
              Module Print_Code
              *****************

              ;        print 24 bit address of instruction

682d 20 ee 6a          JSR  Hex_LPC          ; 24 bit address

              ;        read opcode and calculate length and address mode

6830 a0 00             LDY  #0
6832 84 6c             STY  Op_Flag           ; clear flags
6834 20 d4 61          JSR  Fetch             ; fetch from (banked) address

              ;        check for Q instructions

6837 c9 42             CMP  #$42              ; NEG
6839 d0 0f             BNE  _nop
683b c8                INY                    ; Y = 1
683c 20 d4 61          JSR  Fetch
683f c9 42             CMP  #$42              ; NEG
6841 d0 07             BNE  _nop
6843 c7 6c             SMB4 Op_Flag           ; Q flag
6845 a9 02             LDA  #2
6847 20 86 6b          JSR  Add_LPC           ; skip NEG NEG

              ;        check for 32 bit address mode

684a a0 00    _nop     LDY  #0
684c 20 d4 61          JSR  Fetch
684f 85 6b             STA  Op_Code
6851 aa                TAX
6852 c9 ea             CMP  #$ea              ; prefix ?
6854 d0 12             BNE  _normal
6856 c8                INY
6857 20 d4 61          JSR  Fetch             ; opcode after prefix
685a 29 1f             AND  #%0001 1111       ; identify ($nn),Z codes
685c c9 12             CMP  #%0001 0010
685e d0 08             BNE  _normal
6860 d7 6c             SMB5 Op_Flag           ; set extended flag
6862 20 d4 61          JSR  Fetch
6865 85 6b             STA  Op_Code           ; code after prefix
6867 aa                TAX

6868 bc ae 70 _normal  LDY  LEN_ADM,X         ; Y = length and address mode
686b 98                TYA                    ; A = length and address mode
686c 29 0f             AND  #15               ; A = address mode
686e aa                TAX                    ; X = address mode
686f bd ae 71          LDA  ADMODE,X          ; A = mode flags
6872 85 69             STA  Adr_Flags         ; store
6874 98                TYA                    ; A = length and address mode
6875 29 c0             AND  #%1100 0000       ; mask instruction length
6877 0a                ASL  A                 ; rotate into lower two bits
6878 2a                ROL  A
6879 2a                ROL  A
687a 85 6d             STA  Op_Size           ; store
687c 5f 6c 02          BBR5 Op_Flag,_norm1
687f e6 6d             INC  Op_Size
6881          _norm1

              ;        print instruction and operand bytes

6881 a0 00             LDY  #0
6883 a9 20             LDA  #' '
6885 4f 6c 02          BBR4 Op_Flag,_blpr
6888 a9 2a             LDA  #'*'              ; print * for NEG NEG
688a 20 d2 ff _blpr    JSR  CHROUT
688d 20 d4 61 _lphex   JSR  Fetch
6890 20 18 6b          JSR  Print_Hex_Blank
6893 c0 02             CPY  #2
6895 f0 13             BEQ  _long             ; stop after 3 bytes
6897 c4 6d             CPY  Op_Size
6899 c8                INY
689a 90 f1             BCC  _lphex

              ;        fill up with blanks

689c c0 03    _lpfill  CPY  #3
689e b0 0a             BCS  _long
68a0 20 7d ff          JSR  PRIMM
68a3 20 20 20          .BYTE "   ",0
68a7 c8                INY
68a8 80 f2             BRA  _lpfill

              ;        detect long branches

68aa a9 9e    _long    LDA  #YELLOW
68ac 20 d2 ff          JSR  CHROUT
68af a6 6b             LDX  Op_Code
68b1 bd ae 70          LDA  LEN_ADM,X
68b4 c9 a0             CMP  #%1010 0000        ; long branch mode
68b6 d0 07             BNE  _locate
68b8 e7 6c             SMB6 Op_Flag            ; set long branch flag
68ba a9 4c             LDA  #'L'
68bc 20 d2 ff          JSR  CHROUT

              ;        locate mnemonic text

68bf a6 6b    _locate  LDX  Op_Code           ; X = opcode
68c1 bc a4 6f          LDY  MNE_Index,X       ; Y = index to mnemonic text
68c4 b9 ee 6e          LDA  MNE_L,Y           ; A = packed left part
68c7 85 5a             STA  Long_AC+1
68c9 b9 49 6f          LDA  MNE_R,Y           ; A = packed right part
68cc 85 59             STA  Long_AC

              ;        unpack and print mnemonic text

68ce a2 03             LDX  #3                ; 3 letters
68d0 a9 00    _lpmne   LDA  #0
68d2 a0 05             LDY  #5                ; 5 bits per letter
68d4 06 59    _lplet   ASL  Long_AC
68d6 26 5a             ROL  Long_AC+1
68d8 2a                ROL  A                 ; rotate letter into A
68d9 88                DEY
68da d0 f8             BNE  _lplet            ; next bit
68dc 69 3f             ADC  #$3f              ; add offset (C = 0)
68de ca                DEX
68df f0 06             BEQ  _lastc            ; 3rd. character
68e1 4b                TAZ                    ; remember
68e2 20 d2 ff          JSR  CHROUT            ; and print it
68e5 80 e9             BRA  _lpmne            ; next letter

68e7 4f 6c 21 _lastc   BBR4 Op_Flag,_lbra     ; -> no Q
68ea c9 41             CMP  #'A'              ; LDA, STA, ORA
68ec f0 0c             BEQ  _Q3
68ee c9 43             CMP  #'C'              ; DEC, INC
68f0 d0 0f             BNE  _Q4
68f2 c2 45             CPZ  #'E'              ; DEC
68f4 f0 04             BEQ  _Q3
68f6 c2 4e             CPZ  #'N'              ; INC
68f8 d0 07             BNE  _Q4
68fa a9 51    _Q3      LDA  #'Q'              ; LDQ, STQ, ORQ, INQ, DEQ
68fc 20 d2 ff          JSR  CHROUT
68ff 80 2e             BRA  _mne4
6901 20 d2 ff _Q4      JSR  CHROUT
6904 a9 51             LDA  #'Q'              ; add Q as 4th. char
6906 20 d2 ff          JSR  CHROUT
6909 80 27             BRA  _mne5

690b 20 d2 ff _lbra    JSR  CHROUT            ; 3rd. character
690e ef 6c 21          BBS6 Op_Flag,_mne5     ; long branch

              ;        check for 4-letter bit instructions

6911 a5 6b             LDA  Op_Code
6913 29 0f             AND  #15
6915 c9 07             CMP  #7                ; RMB & SMB
6917 f0 06             BEQ  _biti
6919 c9 0f             CMP  #15               ; BBR & BBS
691b d0 12             BNE  _mne4
691d f7 6c             SMB7 Op_Flag           ; flag two operands
691f a5 6b    _biti    LDA  Op_Code
6921 29 70             AND  #%0111 0000
6923 0a                ASL  A
6924 2a                ROL  A
6925 2a                ROL  A
6926 2a                ROL  A
6927 2a                ROL  A
6928 09 30             ORA  #'0'
692a 20 d2 ff          JSR  CHROUT
692d 80 03             BRA  _mne5

692f 20 1b 6b _mne4    JSR  Print_Blank
6932 20 1b 6b _mne5    JSR  Print_Blank
6935 a9 05             LDA  #WHITE
6937 20 d2 ff          JSR  CHROUT

              ;        check for accumulator operand

693a a5 6b             LDA  Op_Code
693c a2 08             LDX  #8
693e ca       _lpaccu  DEX
693f 30 12             BMI  _oper
6941 dd be 71          CMP  ACCUMODE,X
6944 d0 f8             BNE  _lpaccu

6946 a9 41             LDA  #'A'
6948 4f 6c 02          BBR4 Op_Flag,_accu
694b a9 51             LDA  #'Q'
694d 20 d2 ff _accu    JSR  CHROUT
6950 4c 36 6a          JMP  _return

              ;        fetch and decode operand

6953 a6 6d    _oper    LDX  Op_Size
6955 f3 df 00          LBEQ _return           ; -> no operand

6958 7f 69 04          BBR7 Adr_Flags,_laba   ; bit 7: immediate
695b a9 23             LDA  #'#'
695d 80 0a             BRA  _labb
695f 6f 69 0a _laba    BBR6 Adr_Flags,_labc   ; bit 6: left (
6962 a9 28             LDA  #'('
6964 5f 6c 02          BBR5 Op_Flag,_labb
6967 a9 5b             LDA  #'['
6969 20 d2 ff _labb    JSR  CHROUT
696c a9 24    _labc    LDA  #'$'
696e 20 d2 ff          JSR  CHROUT

              ;        fetch operand to Long_AC

6971 a0 00             LDY  #0
6973 84 5a             STY  Long_AC+1
6975 c8       _lpfop   INY
6976 20 d4 61          JSR  Fetch
6979 99 58 00          STA  Long_AC-1,Y
697c c4 6d             CPY  Op_Size
697e 90 f5             BCC  _lpfop

              ;        interpret address modes

6980 a6 6b             LDX  Op_Code
6982 bd ae 70          LDA  LEN_ADM,X
6985 29 20             AND  #%0010 0000       ; branches
6987 d3 84 00          LBNE _rel

              ;        print 16 bit operand hi/lo or 8 bit operand

698a 5f 6c 0c          BBR5 Op_Flag,_proper
698d a5 5a             LDA  Long_AC+1
698f 20 2d 6b          JSR  Print_Hex         ; [$nn],Z
6992 a9 5d             LDA  #']'
6994 20 d2 ff          JSR  CHROUT
6997 80 35             BRA  _labf

6999 a4 6d    _proper  LDY  Op_Size
699b 7f 6c 02          BBR7 Op_Flag,_lpoper
699e a0 01             LDY  #1
69a0 b9 58 00 _lpoper  LDA  Long_AC-1,Y
69a3 20 2d 6b          JSR  Print_Hex
69a6 88                DEY
69a7 d0 f7             BNE  _lpoper

69a9 5f 69 1a          BBR5 Adr_Flags,_labe   ; comma flag
69ac a9 2c             LDA  #','
69ae 20 d2 ff          JSR  CHROUT

69b1 4f 69 0a          BBR4 Adr_Flags,_labd   ; SP flag
69b4 a9 53             LDA  #'S'
69b6 20 d2 ff          JSR  CHROUT
69b9 a9 50             LDA  #'P'
69bb 20 d2 ff          JSR  CHROUT

69be 0f 69 05 _labd    BBR0 Adr_Flags,_labe   ; X flag
69c1 a9 58             LDA  #'X'
69c3 20 d2 ff          JSR  CHROUT

69c6 3f 69 05 _labe    BBR3 Adr_Flags,_labf   ; ) flag
69c9 a9 29             LDA  #')'
69cb 20 d2 ff          JSR  CHROUT

69ce 4f 6c 08 _labf    BBR4 Op_Flag,_comch    ; not a Q instruction
69d1 a5 69             LDA  Adr_Flags
69d3 29 03             AND  #3
69d5 c9 01             CMP  #1
69d7 d0 5d             BNE  _return           ; Q only with ,X

69d9 2f 69 12 _comch   BBR2 Adr_Flags,_labg   ; , flag
69dc a9 2c             LDA  #','
69de 20 d2 ff          JSR  CHROUT

69e1 a5 69             LDA  Adr_Flags
69e3 29 03             AND  #%0000 0011 ; $03
69e5 f0 07             BEQ  _labg
69e7 a8                TAY
69e8 b9 cd 71          LDA  Index_Char-1,Y
69eb 20 d2 ff          JSR  CHROUT

              ;        fetch 2nd. operand for BBR and BBS

69ee 7f 6c 45 _labg    BBR7 Op_Flag,_return
69f1 a9 2c             LDA  #','
69f3 20 d2 ff          JSR  CHROUT
69f6 a9 24             LDA  #'$'
69f8 20 d2 ff          JSR  CHROUT
69fb a0 02             LDY  #2
69fd 20 d4 61          JSR  Fetch
6a00 85 59             STA  Long_AC
6a02 a9 00             LDA  #0
6a04 85 5a             STA  Long_AC+1
6a06 88                DEY
6a07 84 6d             STY  Op_Size           ; Op_Size = 1
6a09 a9 03             LDA  #3                ; offset for relative address
6a0b 80 02             BRA  _rela

6a0d a9 02    _rel     LDA  #2                ; offset for relative address
6a0f 48       _rela    PHA
6a10 a5 6d             LDA  Op_Size           ; 1:short   2:long
6a12 4a                LSR  A
6a13 6a                ROR  A
6a14 25 59             AND  Long_AC
6a16 10 04             BPL  _labh
6a18 a9 ff             LDA  #$ff              ; backward branch
6a1a 85 5a             STA  Long_AC+1

6a1c fa       _labh    PLX                    ; offset 2 or 3
6a1d e3 59    _lpinw   INW  Long_AC
6a1f ca                DEX
6a20 d0 fb             BNE  _lpinw

6a22 18                CLC
6a23 a5 59             LDA  Long_AC
6a25 65 61             ADC  Long_PC
6a27 48                PHA
6a28 a5 5a             LDA  Long_AC+1
6a2a 65 62             ADC  Long_PC+1
6a2c aa                TAX
6a2d 68                PLA
6a2e 20 12 6b          JSR  Print_XA_Hex
6a31 7f 6c 02          BBR7 Op_Flag,_return
6a34 e6 6d             INC  Op_Size
6a36 60       _return  RTS
6a37          EndMod [Print_Code] Size = 522 [$20a]

              **************
              Module Got_LAC
              **************

6a37 c6 6f             DEC  Buf_Index
6a39          EndMod [Got_LAC] Size = 2 [$2]

              **************
              Module Get_LAC
              **************

6a39 20 56 6a          JSR  Read_Number
6a3c b0 0f             BCS  _error            ; illegal character
6a3e f0 10             BEQ  _noval            ; no value
6a40 20 5b 6b          JSR  Got_Char          ; delimiter ?
6a43 f0 0d             BEQ  _end              ; end of input
6a45 c9 20             CMP  #' '
6a47 f0 0b             BEQ  _ok
6a49 c9 2c             CMP  #','
6a4b f0 07             BEQ  _ok
6a4d 4c d3 60 _error   JMP  Mon_Error         ; stack is reset in Mon_Error

6a50 38       _noval   SEC
6a51 60                RTS

6a52 c6 6f    _end     DEC  Buf_Index
6a54 18       _ok      CLC
6a55 60                RTS
6a56          EndMod [Get_LAC] Size = 29 [$1d]

              ******************
              Module Read_Number
              ******************

6a56 da                PHX
6a57 5a                PHY
6a58 db                PHZ
6a59 a9 00             LDA  #0
6a5b 85 6e             STA  Dig_Cnt               ; count columns read
6a5d 85 59             STA  Long_AC           ; clear result Long_AC
6a5f 85 5a             STA  Long_AC+1
6a61 85 5b             STA  Long_AC+2
6a63 85 5c             STA  Long_AC+3

6a65 20 4e 6b          JSR  Get_Glyph         ; get 1st. character
6a68 f0 7d             BEQ  _exit
6a6a c9 27             CMP  #APOSTR           ; character entry 'C
6a6c d0 09             BNE  _numeric
6a6e 20 5d 6b          JSR  Get_Char          ; character after '
6a71 85 59             STA  Long_AC
6a73 e6 6e             INC  Dig_Cnt
6a75 80 70             BRA  _exit

6a77 a0 03    _numeric LDY  #3                ; $ + % %
6a79 d9 18 61 _prefix  CMP  Cons_Prefix,Y     ; Y = base index
6a7c f0 06             BEQ  _digit            ; -> valid prefix
6a7e 88                DEY
6a7f 10 f8             BPL  _prefix
6a81 c8                INY                    ; Y = 0
6a82 c6 6f             DEC  Buf_Index         ; character is digit

6a84 20 5d 6b _digit   JSR  Get_Char          ; hex -> BCD
6a87 f0 5e             BEQ  _exit             ; ? : ; and zero terminate
6a89 c9 30             CMP  #'0'
6a8b 90 5a             BCC  _exit
6a8d c9 3a             CMP  #':'
6a8f 90 0a             BCC  _valid            ; 0-9
6a91 c9 41             CMP  #'A'
6a93 90 52             BCC  _exit
6a95 c9 47             CMP  #'G'
6a97 b0 4e             BCS  _exit
6a99 e9 07             SBC  #7                ; hex conversion
6a9b e9 2f    _valid   SBC  #'0'-1
6a9d d9 c6 71          CMP  Num_Base,Y
6aa0 b0 42             BCS  _error
6aa2 48                PHA                    ; push digit
6aa3 e6 6e             INC  Dig_Cnt

6aa5 c0 01             CPY  #1                ; decimal
6aa7 d0 0a             BNE  _laba
6aa9 a2 03             LDX  #3                ; push Long_AC * 2
6aab 18                CLC
6aac b5 59    _push    LDA  Long_AC,X
6aae 2a                ROL  A
6aaf 48                PHA
6ab0 ca                DEX
6ab1 10 f9             BPL  _push

6ab3 be ca 71 _laba    LDX  Num_Bits,Y
6ab6 06 59    _shift   ASL  Long_AC
6ab8 26 5a             ROL  Long_AC+1
6aba eb 5b 00          ROW  Long_AC+2
6abd b0 25             BCS  _error            ; overflow
6abf ca                DEX
6ac0 d0 f4             BNE  _shift

6ac2 c0 01             CPY  #1                ; decimal adjustment
6ac4 d0 0e             BNE  _labc
6ac6 a2 00             LDX  #0
6ac8 a3 03             LDZ  #3
6aca 18                CLC
6acb 68       _pull    PLA
6acc 75 59             ADC  Long_AC,X
6ace 95 59             STA  Long_AC,X
6ad0 e8                INX
6ad1 3b                DEZ
6ad2 10 f7             BPL  _pull

6ad4 68       _labc    PLA                    ; pull digit
6ad5 18                CLC
6ad6 65 59             ADC  Long_AC
6ad8 85 59             STA  Long_AC
6ada 90 a8             BCC  _digit
6adc e6 5a             INC  Long_AC+1
6ade d0 a4             BNE  _digit
6ae0 e3 5b             INW  Long_AC+2
6ae2 d0 a0             BNE  _digit

6ae4 38       _error   SEC
6ae5 80 01             BRA  _return
6ae7 18       _exit    CLC
6ae8 fb       _return  PLZ
6ae9 7a                PLY
6aea fa                PLX
6aeb a5 6e             LDA  Dig_Cnt           ; digits read
6aed 60                RTS
6aee          EndMod [Read_Number] Size = 152 [$98]

              **************
              Module Hex_LPC
              **************

6aee a6 64             LDX  Long_PC+3
6af0 f0 15             BEQ  _laba
6af2 a9 9e             LDA  #YELLOW
6af4 20 d2 ff          JSR  CHROUT
6af7 8a                TXA
6af8 20 2d 6b          JSR  Print_Hex
6afb a5 63             LDA  Long_PC+2
6afd 20 2d 6b          JSR  Print_Hex
6b00 a9 05             LDA  #WHITE
6b02 20 d2 ff          JSR  CHROUT
6b05 80 07             BRA  _labb
6b07 a5 63    _laba    LDA  Long_PC+2
6b09 f0 03             BEQ  _labb
6b0b 20 2d 6b          JSR  Print_Hex
6b0e a6 62    _labb    LDX  Long_PC+1
6b10 a5 61             LDA  Long_PC
6b12          EndMod [Hex_LPC] Size = 36 [$24]

              *******************
              Module Print_XA_Hex
              *******************

6b12 48                PHA
6b13 8a                TXA
6b14 20 2d 6b          JSR  Print_Hex
6b17 68                PLA
6b18          EndMod [Print_XA_Hex] Size = 6 [$6]

              **********************
              Module Print_Hex_Blank
              **********************

6b18 20 2d 6b          JSR  Print_Hex
6b1b          EndMod [Print_Hex_Blank] Size = 3 [$3]

              ******************
              Module Print_Blank
              ******************

6b1b a9 20             LDA  #' '
6b1d 4c d2 ff          JMP  CHROUT
6b20          EndMod [Print_Blank] Size = 5 [$5]

              ***************
              Module Print_CR
              ***************

6b20 a9 0d             LDA  #13
6b22 4c d2 ff          JMP  CHROUT
6b25          EndMod [Print_CR] Size = 5 [$5]

              ***************
              Module CR_Erase
              ***************

6b25 20 7d ff          JSR  PRIMM
6b28 0d 1b 51          .BYTE "\r\eQ",0
6b2c 60                RTS
6b2d          EndMod [CR_Erase] Size = 8 [$8]

              ****************
              Module Print_Hex
              ****************

6b2d da                PHX
6b2e 20 39 6b          JSR  A_To_Hex
6b31 20 d2 ff          JSR  CHROUT
6b34 8a                TXA
6b35 fa                PLX
6b36 4c d2 ff          JMP  CHROUT
6b39          EndMod [Print_Hex] Size = 12 [$c]

              ***************
              Module A_To_Hex
              ***************

6b39 48                PHA
6b3a 20 43 6b          JSR  _nibble
6b3d aa                TAX
6b3e 68                PLA
6b3f 4a                LSR  A
6b40 4a                LSR  A
6b41 4a                LSR  A
6b42 4a                LSR  A

6b43 29 0f    _nibble  AND  #15
6b45 c9 0a             CMP  #10
6b47 90 02             BCC  _lab
6b49 69 06             ADC  #6
6b4b 69 30    _lab     ADC  #'0'
6b4d 60                RTS
6b4e          EndMod [A_To_Hex] Size = 21 [$15]

              ****************
              Module Get_Glyph
              ****************
6b4e da                PHX
6b4f a9 20             LDA  #' '
6b51 a6 6f    _loop    LDX  Buf_Index
6b53 e6 6f             INC  Buf_Index
6b55 dd 00 02          CMP  Buffer,X
6b58 f0 f7             BEQ  _loop
6b5a fa                PLX                    ; fall through
6b5b          EndMod [Get_Glyph] Size = 13 [$d]

              ***************
              Module Got_Char
              ***************

6b5b c6 6f             DEC  Buf_Index
6b5d          EndMod [Got_Char] Size = 2 [$2]

              ***************
              Module Get_Char
              ***************

6b5d da                PHX
6b5e a6 6f             LDX  Buf_Index
6b60 e6 6f             INC  Buf_Index
6b62 bd 00 02          LDA  Buffer,X
6b65 e0 01             CPX  #1
6b67 fa                PLX
6b68 90 08             BCC  _regc
6b6a c9 3b             CMP  #';'            ; register
6b6c f0 0a             BEQ  _return
6b6e c9 3f             CMP  #'?'            ; help
6b70 f0 06             BEQ  _return
6b72 c9 00    _regc    CMP  #0
6b74 f0 02             BEQ  _return
6b76 c9 3a             CMP  #':'
6b78 60       _return  RTS
6b79          EndMod [Get_Char] Size = 28 [$1c]


              **************
              Module Dec_LCT
              **************

6b79 a5 5d             LDA  Long_CT
6b7b 05 5e             ORA  Long_CT+1
6b7d d0 02             BNE  _skip
6b7f c3 5f             DEW  Long_CT+2
6b81 c3 5d    _skip    DEW  Long_CT
6b83 a5 60             LDA  Long_CT+3         ; set N flag
6b85 60                RTS
6b86          EndMod [Dec_LCT] Size = 13 [$d]

              **************
              Module Add_LPC
              **************

6b86 18                CLC
6b87 65 61             ADC  Long_PC
6b89 85 61             STA  Long_PC
6b8b 90 06             BCC  _return

              ************
6b8d          Inc_LPC_Page
              ************

6b8d e6 62             INC  Long_PC+1
6b8f d0 02             BNE  _return
6b91 e3 63             INW  Long_PC+2
6b93 60       _return  RTS

              ******************
              Module Param_Range
              ******************

              ; read two (address) parameters

              ; Long_CT = difference (2nd. minus 1st.)
              ; Long_PC = 1st. parameter
              ; Long_DA = 2nd. parameter

              ; carry on exit flags error

6b94 20 39 6a          JSR  Get_LAC           ; get 1st. parameter
6b97 b0 12             BCS  _error
6b99 20 61 61          JSR  LAC_To_LPC        ; Long_PC = 1st. address
6b9c 20 39 6a          JSR  Get_LAC
6b9f b0 0a             BCS  _error
6ba1 20 79 61          JSR  LAC_To_LDA        ; Long_DA = 2nd. address
6ba4 20 94 61          JSR  LAC_Minus_LPC     ; Long_CT = range
6ba7 90 02             BCC  _error
6ba9 18                CLC
6baa 60                RTS
6bab 38       _error   SEC
6bac 60                RTS
6bad          EndMod [Param_Range] Size = 25 [$19]

              ****************
              Module Converter
              ****************

6bad a2 00             LDX  #0
6baf 86 6f             STX  Buf_Index
6bb1 20 39 6a          JSR  Get_LAC
6bb4 b3 1d f5          LBCS Mon_Error
6bb7 a2 00             LDX  #0
6bb9 da       _loop    PHX
6bba 20 25 6b          JSR  CR_Erase
6bbd bd 18 61          LDA  Cons_Prefix,X
6bc0 20 d2 ff          JSR  CHROUT
6bc3 8a                TXA
6bc4 0a                ASL  A
6bc5 aa                TAX
6bc6 23 d2 6b          JSR  (Conv_Tab,X)
6bc9 fa                PLX
6bca e8                INX
6bcb e0 04             CPX  #4
6bcd 90 ea             BCC  _loop
6bcf 4c a5 60          JMP  Main

6bd2 0f 6c    Conv_Tab .WORD Print_Hexval
6bd4 18 6c             .WORD Print_Decimal
6bd6 e0 6b             .WORD Print_Octal
6bd8 da 6b             .WORD Print_Dual
6bda          EndMod [Converter] Size = 45 [$2d]

              *****************
              Module Print_Dual
              *****************

6bda a2 18             LDX  #24               ; digits
6bdc a0 01             LDY  #1                ; bits per digit
6bde 80 04             BRA  _entry

              ***********
6be0          Print_Octal
              ***********

6be0 a2 08             LDX  #8                ; digits
6be2 a0 03             LDY  #3                ; bits per digit

6be4 20 6d 61 _entry   JSR  LAC_To_LCT
6be7 a3 00             LDZ  #0
6be9 64 61             STZ  Long_PC
6beb a3 30             LDZ  #'0'
6bed 5a                PHY                    ; save start value
6bee 7a       _loopa   PLY                    ; reinitialise
6bef 5a                PHY
6bf0 a9 00             LDA  #0
6bf2 06 5d    _loopb   ASL  Long_CT
6bf4 eb 5e 00          ROW  Long_CT+1
6bf7 2a                ROL  A
6bf8 88                DEY
6bf9 d0 f7             BNE  _loopb
6bfb e0 01             CPX  #1                ; print last character
6bfd f0 04             BEQ  _skip
6bff 05 61             ORA  Long_PC
6c01 f0 07             BEQ  _next
6c03 09 30    _skip    ORA  #'0'
6c05 64 61             STZ  Long_PC
6c07 20 d2 ff          JSR  CHROUT
6c0a ca       _next    DEX
6c0b d0 e1             BNE  _loopa
6c0d 7a                PLY                    ; cleanup stack
6c0e 60                RTS
6c0f          EndMod [Print_Dual] Size = 53 [$35]

              *******************
              Module Print_Hexval
              *******************

6c0f 20 61 61         JSR  LAC_To_LPC
6c12 a9 00            LDA  #0
6c14 85 64            STA  Long_PC+3
6c16 80 32            BRA  Print_BCD
6c18          EndMod [Print_Hexval] Size = 9 [$9]

              ********************
              Module Print_Decimal
              ********************

              ; max $ffffff = 16777215 (8 digits)

6c18 20 6d 61          JSR  LAC_To_LCT
6c1b a2 03             LDX  #3                ; 4 BCD bytes = 8 digits
6c1d a9 00             LDA  #0
6c1f 95 61    _clear   STA  Long_PC,X
6c21 ca                DEX
6c22 10 fb             BPL  _clear

6c24 a2 20             LDX  #32               ; source bits
6c26 f8                SED
6c27 06 5d    _loop    ASL  Long_CT
6c29 26 5e             ROL  Long_CT+1
6c2b eb 5f 00          ROW  Long_CT+2
6c2e a5 61             LDA  Long_PC
6c30 65 61             ADC  Long_PC
6c32 85 61             STA  Long_PC
6c34 a5 62             LDA  Long_PC+1
6c36 65 62             ADC  Long_PC+1
6c38 85 62             STA  Long_PC+1
6c3a a5 63             LDA  Long_PC+2
6c3c 65 63             ADC  Long_PC+2
6c3e 85 63             STA  Long_PC+2
6c40 a5 64             LDA  Long_PC+3
6c42 65 64             ADC  Long_PC+3
6c44 85 64             STA  Long_PC+3
6c46 ca                DEX
6c47 d0 de             BNE  _loop
6c49 d8                CLD
6c4a          EndMod [Print_Decimal] Size = 50 [$32]

              ****************
              Module Print_BCD
              ****************

6c4a a9 00             LDA  #0
6c4c 85 5d             STA  Long_CT
6c4e a3 30             LDZ  #'0'
6c50 a0 08             LDY  #8                ; max. digits
6c52 a2 03    _loopa   LDX  #3                ; 4 bytes
6c54 a9 00             LDA  #0
6c56 06 61    _loopb   ASL  Long_PC
6c58 26 62             ROL  Long_PC+1
6c5a eb 63 00          ROW  Long_PC+2
6c5d 2a                ROL  A
6c5e ca                DEX
6c5f 10 f5             BPL  _loopb

6c61 c0 01             CPY  #1                ; print last character
6c63 f0 04             BEQ  _skip
6c65 05 5d             ORA  Long_CT
6c67 f0 0d             BEQ  _next
6c69 09 30    _skip    ORA  #'0'
6c6b 64 5d             STZ  Long_CT
6c6d c9 3a             CMP  #$3a
6c6f 90 02             BCC  _print
6c71 69 06             ADC  #6                ; + carry
6c73 20 d2 ff _print   JSR  CHROUT
6c76 88       _next    DEY
6c77 d0 d9             BNE  _loopa
6c79 60                RTS
6c7a          EndMod [Print_BCD] Size = 48 [$30]


              ***************
              Module Mon_Disk
              ***************

6c7a c6 6f             DEC  Buf_Index
6c7c a6 6f             LDX  Buf_Index
6c7e bd 00 02          LDA  Buffer,X
6c81 f0 68             BEQ  Print_Disk_Status
6c83 85 5d             STA  Long_CT           ; dir marker
6c85 a0 ff             LDY  #$ff              ; SA = 15
6c87 c9 24             CMP  #'$'
6c89 d0 02             BNE  _lab
6c8b a0 f0             LDY  #$f0              ; SA =  0
6c8d a5 ba    _lab     LDA  FA
6c8f 20 b1 ff          JSR  LISTEN
6c92 98                TYA                    ; SA
6c93 20 93 ff          JSR  SECOND
6c96 bd 00 02 _loop    LDA  Buffer,X
6c99 f0 06             BEQ  _close
6c9b 20 a8 ff          JSR  CIOUT
6c9e e8                INX
6c9f 80 f5             BRA  _loop
6ca1 20 ae ff _close   JSR  UNLSN
6ca4 a5 5d             LDA  Long_CT
6ca6 c9 24             CMP  #'$'
6ca8 d0 41             BNE  Print_Disk_Status
6caa 4c 3c 6d          JMP  Directory

6cad          EndMod [Mon_Disk] Size = 51 [$33]

              **********************
              Module Get_Disk_Status
              **********************

6cad a5 ba             LDA  FA
6caf 20 b4 ff          JSR  TALK
6cb2 a9 6f             LDA  #$6f
6cb4 20 96 ff          JSR  TKSA
6cb7 20 a5 ff          JSR  ACPTR             ; 1st. digit
6cba 8d 34 04          STA  Disk_Msg
6cbd 0a                ASL  A
6cbe 0a                ASL  A
6cbf 0a                ASL  A
6cc0 0a                ASL  A
6cc1 8d 0b 04          STA  Disk_Status       ; BCD
6cc4 20 a5 ff          JSR  ACPTR             ; 2nd. digit
6cc7 8d 35 04          STA  Disk_Msg+1
6cca 29 0f             AND  #15
6ccc 0d 0b 04          ORA  Disk_Status
6ccf 8d 0b 04          STA  Disk_Status       ; complete BCD number

6cd2 a0 01             LDY  #1
6cd4 c8       _loop    INY
6cd5 20 a5 ff          JSR  ACPTR
6cd8 99 34 04          STA  Disk_Msg,Y
6cdb c9 20             CMP  #' '
6cdd b0 f5             BCS  _loop
6cdf a9 00             LDA  #0
6ce1 99 34 04          STA  Disk_Msg,Y
6ce4 20 ab ff          JSR  UNTALK
6ce7 ad 0b 04          LDA  Disk_Status
6cea 60                RTS
6ceb          EndMod [Get_Disk_Status] Size = 62 [$3e]

              ************************
              Module Print_Disk_Status
              ************************

6ceb 20 ad 6c          JSR  Get_Disk_Status

              **************
6cee          Print_Disk_Msg
              **************

6cee 20 20 6b          JSR  Print_CR
6cf1 a0 00             LDY  #0
6cf3 b9 34 04 _loop    LDA  Disk_Msg,Y
6cf6 f0 06             BEQ  _exit
6cf8 20 d2 ff          JSR  CHROUT
6cfb c8                INY
6cfc 80 f5             BRA  _loop
6cfe 4c 20 6b _exit    JMP  Print_CR
6d01          EndMod [Print_Disk_Status] Size = 22 [$16]

              ; @[u] : print disk status for unit u
              ; @[u],$[=pattern] : print directory
              ; @[u],command : send disk command and read status
              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)
              ; @[u],U2 mem track startsec [endsec] : write disk sector(s)

              **************
              Module Mon_DOS
              **************

6d01 a2 08             LDX  #8                ; default device
6d03 20 4e 6b          JSR  Get_Glyph
6d06 c9 30             CMP  #'0'
6d08 90 17             BCC  _unit
6d0a c9 3a             CMP  #':'
6d0c b0 13             BCS  _unit
6d0e c6 6f             DEC  Buf_Index
6d10 20 56 6a          JSR  Read_Number
6d13 b0 0c             BCS  _unit
6d15 a6 59             LDX  Long_AC           ; unit
6d17 e0 04             CPX  #4
6d19 93 b8 f3          LBCC Mon_Error
6d1c e0 1f             CPX  #31
6d1e b3 b3 f3          LBCS Mon_Error
6d21 86 ba    _unit    STX  FA
6d23 c6 6f             DEC  Buf_Index
6d25 20 5d 6b _next    JSR  Get_Char
6d28 f0 0c             BEQ  _status           ; only @u
6d2a c9 20             CMP  #' '
6d2c f0 f7             BEQ  _next
6d2e c9 2c             CMP  #','
6d30 f0 f3             BEQ  _next
6d32 c9 55             CMP  #'U'              ; sector read/write
6d34 f0 4e             BEQ  DOS_U
6d36 20 7a 6c _status  JSR  Mon_Disk
6d39 4c a5 60          JMP  Main
6d3c          EndMod [Mon_DOS] Size = 59 [$3b]

              ****************
              Module Directory
              ****************

6d3c a5 ba             LDA  FA
6d3e 20 b4 ff          JSR  TALK
6d41 a9 60             LDA  #$60
6d43 85 b9             STA  SA
6d45 20 96 ff          JSR  TKSA
6d48 a9 00             LDA  #0
6d4a 85 90             STA  STATUS

6d4c a3 06             LDZ  #6                ; load address, pseudo link, pseudo number
6d4e aa       _loopb   TAX                    ; X = previous byte
6d4f 20 a5 ff          JSR  ACPTR             ; A = current  byte
6d52 a4 90             LDY  STATUS
6d54 d0 2b             BNE  _exit
6d56 3b                DEZ
6d57 d0 f5             BNE  _loopb            ; X/A = last read word

6d59 86 59             STX  Long_AC
6d5b 85 5a             STA  Long_AC+1
6d5d 64 5b             STZ  Long_AC+2
6d5f 64 5c             STZ  Long_AC+3
6d61 20 18 6c          JSR  Print_Decimal     ; file size
6d64 20 1b 6b          JSR  Print_Blank

6d67 20 a5 ff _loopc   JSR  ACPTR             ; print file entry
6d6a f0 09             BEQ  _cr
6d6c a4 90             LDY  STATUS
6d6e d0 11             BNE  _exit
6d70 20 d2 ff          JSR  CHROUT
6d73 90 f2             BCC  _loopc

6d75 20 20 6b _cr      JSR  Print_CR
6d78 20 e1 ff          JSR  STOP
6d7b f0 04             BEQ  _exit
6d7d a3 04             LDZ  #4
6d7f 80 cd             BRA  _loopb            ; next file
6d81 4c ab ff _exit    JMP  UNTALK
6d84          EndMod [Directory] Size = 72 [$48]

              ************
              Module DOS_U
              ************

6d84 20 5d 6b          JSR  Get_Char
6d87 c9 31             CMP  #'1'            ; U1: read
6d89 93 48 f3          LBCC Mon_Error
6d8c c9 33             CMP  #'3'            ; U2: write
6d8e b3 43 f3          LBCS Mon_Error
6d91 8d 0d 04          STA  Mon_Data+1      ; U type
6d94 e6 6f             INC  Buf_Index
6d96 20 39 6a          JSR  Get_LAC
6d99 b3 38 f3          LBCS Mon_Error
6d9c 20 61 61          JSR  LAC_To_LPC      ; Long_PC = memory address

6d9f 20 39 6a          JSR  Get_LAC
6da2 b3 2f f3          LBCS Mon_Error
6da5 a5 59             LDA  Long_AC
6da7 8d 09 04          STA  Disk_Track

6daa 20 39 6a          JSR  Get_LAC
6dad b3 24 f3          LBCS Mon_Error
6db0 a5 59             LDA  Long_AC
6db2 8d 0a 04          STA  Disk_Sector

6db5 20 39 6a          JSR  Get_LAC
6db8 20 6d 61          JSR  LAC_To_LCT        ; Long_CT = sector count
6dbb c3 5d             DEW  Long_CT           ; Long_CT = -1 for single

6dbd 20 bb 6e          JSR  Open_Disk_Buffer

6dc0 ad 0d 04 _loop    LDA  Mon_Data+1
6dc3 4a                LSR  A
6dc4 f0 0a             BEQ  _write
6dc6 20 eb 6d          JSR  Find_Next_Sector
6dc9 d0 17             BNE  _error
6dcb 20 45 6e          JSR  Read_Sector
6dce 80 08             BRA  _next

6dd0 20 5f 6e _write   JSR  Write_Sector
6dd3 20 eb 6d          JSR  Find_Next_Sector
6dd6 d0 0a             BNE  _error

6dd8 20 8d 6b _next    JSR  Inc_LPC_Page
6ddb ee 0a 04          INC  Disk_Sector
6dde c3 5d             DEW  Long_CT
6de0 10 de             BPL  _loop

6de2 20 ee 6c _error   JSR  Print_Disk_Msg
6de5 20 d7 6e          JSR  Close_Disk_Buffer
6de8 4c a5 60          JMP  Main
6deb          EndMod [DOS_U] Size = 103 [$67]

              ***********************
              Module Find_Next_Sector
              ***********************

6deb 20 99 6e          JSR  Build_U_String
6dee 20 34 6e          JSR  Send_Disk_Command
6df1 20 ad 6c          JSR  Get_Disk_Status
6df4 f0 1d             BEQ  _return           ; OK
6df6 c9 66             CMP  #$66              ; illegal track or sector
6df8 d0 13             BNE  _error            ; error
6dfa a9 00             LDA  #0
6dfc 8d 0a 04          STA  Disk_Sector
6dff ee 09 04          INC  Disk_Track        ; try next track
6e02 20 99 6e          JSR  Build_U_String
6e05 20 34 6e          JSR  Send_Disk_Command
6e08 20 ad 6c          JSR  Get_Disk_Status
6e0b f0 06             BEQ  _return
6e0d 20 ee 6c _error   JSR  Print_Disk_Msg
6e10 ad 0b 04          LDA  Disk_Status
6e13 60       _return  RTS
6e14          EndMod [Find_Next_Sector] Size = 41 [$29]

              ***************************
              Module Open_Command_Channel
              ***************************

6e14 a5 ba             LDA  FA
6e16 20 b1 ff          JSR  LISTEN
6e19 a9 ff             LDA  #$ff
6e1b 20 93 ff          JSR  SECOND
6e1e a0 00             LDY  #0
6e20 84 90             STY  STATUS
6e22 60                RTS
6e23          EndMod [Open_Command_Channel] Size = 15 [$f]

              ***************
              Module Reset_BP
              ***************

6e23 20 14 6e          JSR  Open_Command_Channel
6e26 b9 e0 71 _loop    LDA  BP_ZERO,Y
6e29 f0 06             BEQ  _end
6e2b 20 a8 ff          JSR  CIOUT
6e2e c8                INY
6e2f 80 f5             BRA  _loop
6e31 4c ae ff _end     JMP  UNLSN
6e34          EndMod [Reset_BP] Size = 17 [$11]

              ************************
              Module Send_Disk_Command
              ************************

6e34 20 14 6e          JSR  Open_Command_Channel
6e37 b9 0c 04 _loop    LDA  Mon_Data,Y
6e3a f0 06             BEQ  _end
6e3c 20 a8 ff          JSR  CIOUT
6e3f c8                INY
6e40 80 f5             BRA  _loop
6e42 4c ae ff _end     JMP  UNLSN
6e45          EndMod [Send_Disk_Command] Size = 17 [$11]

              ******************
              Module Read_Sector
              ******************

6e45 a5 ba             LDA  FA
6e47 20 b4 ff          JSR  TALK
6e4a a9 69             LDA  #$69              ; SA = 9
6e4c 20 96 ff          JSR  TKSA
6e4f a3 00             LDZ  #0
6e51 64 90             STZ  STATUS
6e53 20 a5 ff _loop    JSR  ACPTR
6e56 ea 92 61          STA  [Long_PC],Z
6e59 1b                INZ
6e5a d0 f7             BNE  _loop
6e5c 4c ab ff          JMP  UNTALK
6e5f          EndMod [Read_Sector] Size = 26 [$1a]

              ******************
              Module Write_Sector
              ******************

6e5f 20 23 6e          JSR  Reset_BP          ; reset disk buffer pointer
6e62 a5 ba             LDA  FA
6e64 20 b1 ff          JSR  LISTEN
6e67 a9 69             LDA  #$69              ; SA = 9
6e69 20 96 ff          JSR  TKSA
6e6c a3 00             LDZ  #0
6e6e 64 90             STZ  STATUS
6e70 ea b2 61 _loop    LDA  [Long_PC],Z
6e73 20 a8 ff          JSR  CIOUT
6e76 1b                INZ
6e77 d0 f7             BNE  _loop
6e79 20 ae ff          JSR  UNLSN
6e7c 60                RTS
6e7d          EndMod [Write_Sector] Size = 30 [$1e]

              *************
              Module Set_TS
              *************

              ; Input  A = track or sector
              ;        X = string index

6e7d c9 64    _100      CMP  #100
6e7f 90 07              BCC  _10
6e81 fe 0c 04           INC  Mon_Data,X
6e84 e9 64              SBC  #100
6e86 80 f5              BRA  _100
6e88 c9 0a    _10       CMP  #10
6e8a 90 07              BCC  _1
6e8c fe 0d 04           INC  Mon_Data+1,X
6e8f e9 0a              SBC  #10
6e91 80 f5              BRA  _10
6e93 09 30    _1        ORA  #'0'
6e95 9d 0e 04           STA  Mon_Data+2,X
6e98 60                 RTS
6e99          EndMod [Set_TS] Size = 28 [$1c]

              ; @[u],U1 mem track startsec [endsec] : read  disk sector(s)

              ; U1:CHANNEL DRIVE TRACK SECTOR

              *********************
              Module Build_U_String
              *********************

6e99 a2 0e             LDX  #14
6e9b bd d1 71 _loop    LDA  U1,X
6e9e 9d 0c 04          STA  Mon_Data,X
6ea1 ca                DEX
6ea2 e0 02             CPX  #2
6ea4 b0 f5             BCS  _loop
6ea6 a9 55             LDA  #'U'
6ea8 8d 0c 04          STA  Mon_Data
6eab ad 09 04          LDA  Disk_Track
6eae a2 07             LDX  #7
6eb0 20 7d 6e          JSR  Set_TS
6eb3 ad 0a 04          LDA  Disk_Sector
6eb6 a2 0b             LDX  #11
6eb8 4c 7d 6e          JMP  Set_TS
6ebb          EndMod [Build_U_String] Size = 34 [$22]

              ***********************
              Module Open_Disk_Buffer
              ***********************

6ebb a9 00             LDA  #0
6ebd 85 90             STA  STATUS
6ebf a5 ba             LDA  FA
6ec1 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
6ec4 a9 f9             LDA  #$f9            ; sa = 9
6ec6 20 93 ff          JSR  SECOND
6ec9 a9 23             LDA  #'#'            ; open buffer
6ecb 20 a8 ff          JSR  CIOUT
6ece 20 ae ff          JSR  UNLSN
6ed1 a5 90             LDA  STATUS
6ed3 d3 16 fe          LBNE Print_Disk_Status
6ed6 60                RTS
6ed7          EndMod [Open_Disk_Buffer] Size = 28 [$1c]

              ************************
              Module Close_Disk_Buffer
              ************************

6ed7 a9 00             LDA  #0
6ed9 85 90             STA  STATUS
6edb a5 ba             LDA  FA
6edd 20 b1 ff          JSR  LISTEN          ; open fa,9,"#"
6ee0 a9 e9             LDA  #$e9            ; sa = 9
6ee2 20 93 ff          JSR  SECOND
6ee5 20 ae ff          JSR  UNLSN
6ee8 a5 90             LDA  STATUS
6eea d3 ff fd          LBNE Print_Disk_Status
6eed 60                RTS
6eee          EndMod [Close_Disk_Buffer] Size = 23 [$17]


              ; The 3 letter mnemonics are encoded as three 5-bit values
              ; and stored in a left byte MNE_L and a right byte MNE_R
              ; The 5 bit value is computed by subtracting $3f from the
              ; ASCII value, so '?'-> 0, '@'->1, 'A'->2, 'B'->3,'Z'->27
              ; For example "ADC" is encoded as 2, 5, 4
              ; ----------------
              ; 7654321076543210
              ; 00010
              ;      00101
              ;           00100
              ;                0
              ;
              ; The operator >" stores the left (high) byte of the packed value
              ; The operator <" stores the right (low) byte of the packed value

              *****
6eee          MNE_L
              *****

6eee 11                .BYTE >"ADC"
6eef 13                .BYTE >"AND"
6ef0 15                .BYTE >"ASL"
6ef1 15                .BYTE >"ASR"
6ef2 15                .BYTE >"ASW"
6ef3 18                .BYTE >"BBR"
6ef4 18                .BYTE >"BBS"
6ef5 19                .BYTE >"BCC"
6ef6 19                .BYTE >"BCS"
6ef7 19                .BYTE >"BEQ"
6ef8 1a                .BYTE >"BIT"
6ef9 1b                .BYTE >"BMI"
6efa 1b                .BYTE >"BNE"
6efb 1c                .BYTE >"BPL"
6efc 1c                .BYTE >"BRA"
6efd 1c                .BYTE >"BRK"
6efe 1d                .BYTE >"BSR"
6eff 1d                .BYTE >"BVC"
6f00 1d                .BYTE >"BVS"
6f01 23                .BYTE >"CLC"
6f02 23                .BYTE >"CLD"
6f03 23                .BYTE >"CLE"
6f04 23                .BYTE >"CLI"
6f05 23                .BYTE >"CLV"
6f06 23                .BYTE >"CMP"
6f07 24                .BYTE >"CPX"
6f08 24                .BYTE >"CPY"
6f09 24                .BYTE >"CPZ"
6f0a 29                .BYTE >"DEC"
6f0b 29                .BYTE >"DEW"
6f0c 29                .BYTE >"DEX"
6f0d 29                .BYTE >"DEY"
6f0e 29                .BYTE >"DEZ"
6f0f 34                .BYTE >"EOR"
6f10 53                .BYTE >"INC"
6f11 53                .BYTE >"INW"
6f12 53                .BYTE >"INX"
6f13 53                .BYTE >"INY"
6f14 53                .BYTE >"INZ"
6f15 5b                .BYTE >"JMP"
6f16 5d                .BYTE >"JSR"
6f17 69                .BYTE >"LDA"
6f18 69                .BYTE >"LDX"
6f19 69                .BYTE >"LDY"
6f1a 69                .BYTE >"LDZ"
6f1b 6d                .BYTE >"LSR"
6f1c 70                .BYTE >"MAP"
6f1d 79                .BYTE >"NEG"
6f1e 7c                .BYTE >"NOP"
6f1f 84                .BYTE >"ORA"
6f20 8a                .BYTE >"PHA"
6f21 8a                .BYTE >"PHP"
6f22 8a                .BYTE >"PHW"
6f23 8a                .BYTE >"PHX"
6f24 8a                .BYTE >"PHY"
6f25 8a                .BYTE >"PHZ"
6f26 8b                .BYTE >"PLA"
6f27 8b                .BYTE >"PLP"
6f28 8b                .BYTE >"PLX"
6f29 8b                .BYTE >"PLY"
6f2a 8b                .BYTE >"PLZ"
6f2b 9b                .BYTE >"RMB"
6f2c 9c                .BYTE >"ROL"
6f2d 9c                .BYTE >"ROR"
6f2e 9c                .BYTE >"ROW"
6f2f 9d                .BYTE >"RTI"
6f30 9d                .BYTE >"RTS"
6f31 a0                .BYTE >"SBC"
6f32 a1                .BYTE >"SEC"
6f33 a1                .BYTE >"SED"
6f34 a1                .BYTE >"SEE"
6f35 a1                .BYTE >"SEI"
6f36 a3                .BYTE >"SMB"
6f37 a5                .BYTE >"STA"
6f38 a5                .BYTE >"STX"
6f39 a5                .BYTE >"STY"
6f3a a5                .BYTE >"STZ"
6f3b a8                .BYTE >"TAB"
6f3c a8                .BYTE >"TAX"
6f3d a8                .BYTE >"TAY"
6f3e a8                .BYTE >"TAZ"
6f3f a8                .BYTE >"TBA"
6f40 ac                .BYTE >"TRB"
6f41 ad                .BYTE >"TSB"
6f42 ad                .BYTE >"TSX"
6f43 ad                .BYTE >"TSY"
6f44 ae                .BYTE >"TXA"
6f45 ae                .BYTE >"TXS"
6f46 ae                .BYTE >"TYA"
6f47 ae                .BYTE >"TYS"
6f48 ae                .BYTE >"TZA"

              *****
6f49          MNE_R
              *****

6f49 48                .BYTE <"ADC" ; 00
6f4a ca                .BYTE <"AND" ; 01
6f4b 1a                .BYTE <"ASL" ; 02
6f4c 26                .BYTE <"ASR" ; 03
6f4d 30                .BYTE <"ASW" ; 04
6f4e e6                .BYTE <"BBR" ; 05
6f4f e8                .BYTE <"BBS" ; 06
6f50 08                .BYTE <"BCC" ; 07
6f51 28                .BYTE <"BCS" ; 08
6f52 a4                .BYTE <"BEQ" ; 09
6f53 aa                .BYTE <"BIT" ; 0a
6f54 94                .BYTE <"BMI" ; 0b
6f55 cc                .BYTE <"BNE" ; 0c
6f56 5a                .BYTE <"BPL" ; 0d
6f57 c4                .BYTE <"BRA" ; 0e
6f58 d8                .BYTE <"BRK" ; 0f
6f59 26                .BYTE <"BSR" ; 10
6f5a c8                .BYTE <"BVC" ; 11
6f5b e8                .BYTE <"BVS" ; 12
6f5c 48                .BYTE <"CLC" ; 13
6f5d 4a                .BYTE <"CLD" ; 14
6f5e 4c                .BYTE <"CLE" ; 15
6f5f 54                .BYTE <"CLI" ; 16
6f60 6e                .BYTE <"CLV" ; 17
6f61 a2                .BYTE <"CMP" ; 18
6f62 72                .BYTE <"CPX" ; 19
6f63 74                .BYTE <"CPY" ; 1a
6f64 76                .BYTE <"CPZ" ; 1b
6f65 88                .BYTE <"DEC" ; 1c
6f66 b0                .BYTE <"DEW" ; 1d
6f67 b2                .BYTE <"DEX" ; 1e
6f68 b4                .BYTE <"DEY" ; 1f
6f69 b6                .BYTE <"DEZ"
6f6a 26                .BYTE <"EOR"
6f6b c8                .BYTE <"INC"
6f6c f0                .BYTE <"INW"
6f6d f2                .BYTE <"INX"
6f6e f4                .BYTE <"INY"
6f6f f6                .BYTE <"INZ"
6f70 a2                .BYTE <"JMP"
6f71 26                .BYTE <"JSR"
6f72 44                .BYTE <"LDA"
6f73 72                .BYTE <"LDX"
6f74 74                .BYTE <"LDY"
6f75 76                .BYTE <"LDZ"
6f76 26                .BYTE <"LSR"
6f77 a2                .BYTE <"MAP"
6f78 90                .BYTE <"NEG"
6f79 22                .BYTE <"NOP"
6f7a c4                .BYTE <"ORA"
6f7b 44                .BYTE <"PHA"
6f7c 62                .BYTE <"PHP"
6f7d 70                .BYTE <"PHW"
6f7e 72                .BYTE <"PHX"
6f7f 74                .BYTE <"PHY"
6f80 76                .BYTE <"PHZ"
6f81 44                .BYTE <"PLA"
6f82 62                .BYTE <"PLP"
6f83 72                .BYTE <"PLX"
6f84 74                .BYTE <"PLY"
6f85 76                .BYTE <"PLZ"
6f86 86                .BYTE <"RMB"
6f87 1a                .BYTE <"ROL"
6f88 26                .BYTE <"ROR"
6f89 30                .BYTE <"ROW"
6f8a 54                .BYTE <"RTI"
6f8b 68                .BYTE <"RTS"
6f8c c8                .BYTE <"SBC"
6f8d 88                .BYTE <"SEC"
6f8e 8a                .BYTE <"SED"
6f8f 8c                .BYTE <"SEE"
6f90 94                .BYTE <"SEI"
6f91 86                .BYTE <"SMB"
6f92 44                .BYTE <"STA"
6f93 72                .BYTE <"STX"
6f94 74                .BYTE <"STY"
6f95 76                .BYTE <"STZ"
6f96 86                .BYTE <"TAB"
6f97 b2                .BYTE <"TAX"
6f98 b4                .BYTE <"TAY"
6f99 b6                .BYTE <"TAZ"
6f9a c4                .BYTE <"TBA"
6f9b c6                .BYTE <"TRB"
6f9c 06                .BYTE <"TSB"
6f9d 32                .BYTE <"TSX"
6f9e 34                .BYTE <"TSY"
6f9f 44                .BYTE <"TXA"
6fa0 68                .BYTE <"TXS"
6fa1 84                .BYTE <"TYA"
6fa2 a8                .BYTE <"TYS"
6fa3 c4                .BYTE <"TZA"

              *********
6fa4          MNE_Index
              *********

              ; an index for all 256 opcodes, describing
              ; where to find the 3-letter mnemonic

6fa4 0f 31 15          .BYTE $0f,$31,$15,$46,$53,$31,$02,$3d
6fac 33 31 02          .BYTE $33,$31,$02,$55,$53,$31,$02,$05
6fb4 0d 31 31          .BYTE $0d,$31,$31,$0d,$52,$31,$02,$3d
6fbc 13 31 22          .BYTE $13,$31,$22,$26,$52,$31,$02,$05
6fc4 28 01 28          .BYTE $28,$01,$28,$28,$0a,$01,$3e,$3d
6fcc 39 01 3e          .BYTE $39,$01,$3e,$59,$0a,$01,$3e,$05
6fd4 0b 01 01          .BYTE $0b,$01,$01,$0b,$0a,$01,$3e,$3d
6fdc 44 01 1c          .BYTE $44,$01,$1c,$20,$0a,$01,$3e,$05
6fe4 41 21 2f          .BYTE $41,$21,$2f,$03,$03,$21,$2d,$3d
6fec 32 21 2d          .BYTE $32,$21,$2d,$50,$27,$21,$2d,$05
6ff4 11 21 21          .BYTE $11,$21,$21,$11,$03,$21,$2d,$3d
6ffc 16 21 36          .BYTE $16,$21,$36,$4d,$2e,$21,$2d,$05
7004 42 00 42          .BYTE $42,$00,$42,$10,$4c,$00,$3f,$3d
700c 38 00 3f          .BYTE $38,$00,$3f,$5a,$27,$00,$3f,$05
7014 12 00 00          .BYTE $12,$00,$00,$12,$4c,$00,$3f,$3d
701c 47 00 3b          .BYTE $47,$00,$3b,$51,$27,$00,$3f,$05
7024 0e 49 49          .BYTE $0e,$49,$49,$0e,$4b,$49,$4a,$48
702c 1f 0a 56          .BYTE $1f,$0a,$56,$4b,$4b,$49,$4a,$06
7034 07 49 49          .BYTE $07,$49,$49,$07,$4b,$49,$4a,$48
703c 58 49 57          .BYTE $58,$49,$57,$4a,$4c,$49,$4c,$06
7044 2b 29 2a          .BYTE $2b,$29,$2a,$2c,$2b,$29,$2a,$48
704c 4f 29 4e          .BYTE $4f,$29,$4e,$2c,$2b,$29,$2a,$06
7054 08 29 29          .BYTE $08,$29,$29,$08,$2b,$29,$2a,$48
705c 17 29 54          .BYTE $17,$29,$54,$2c,$2b,$29,$2a,$06
7064 1a 18 1b          .BYTE $1a,$18,$1b,$1d,$1a,$18,$1c,$48
706c 25 18 1e          .BYTE $25,$18,$1e,$04,$1a,$18,$1c,$06
7074 0c 18 18          .BYTE $0c,$18,$18,$0c,$1b,$18,$1c,$48
707c 14 18 35          .BYTE $14,$18,$35,$37,$1b,$18,$1c,$06
7084 19 43 29          .BYTE $19,$43,$29,$23,$19,$43,$22,$48
708c 24 43 30          .BYTE $24,$43,$30,$40,$19,$43,$22,$06
7094 09 43 43          .BYTE $09,$43,$43,$09,$34,$43,$22,$48
709c 45 43 3a          .BYTE $45,$43,$3a,$3c,$34,$43,$22,$06

              *****
70a4          BRAIN
              *****

              ;              index values for branch mnemonics

              ;              BCC BCS BEQ BMI BNE BPL BRA BSR BVC BVS
70a4 07 08 09          .BYTE $07,$08,$09,$0b,$0c,$0d,$0e,$10,$11,$12

              *******
70ae          LEN_ADM
              *******

              ; a table of instruction length, flags
              ; and address mode for all 256 opcodes

              ; 7-6: operand length %00.. 0: implied
              ;                     %01.. 1: direct page, indirect
              ;                     %10.. 2: absolute, etc.
              ;                     %11.. 3: BBR and BBS

              ;   5: relative       %0110 0000 $60 short branch
              ;                     %1010 0000 $a0 long  branch

              ;   4:

              ; 3-0: index of address mode


70ae 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $00
70b6 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $08
70be 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $10
70c6 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $18
70ce 80 44 8b          .BYTE $80,$44,$8b,$84,$40,$40,$40,$40 ; $20
70d6 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $28
70de 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $30
70e6 00 88 00          .BYTE $00,$88,$00,$00,$87,$87,$87,$c0 ; $38
70ee 00 44 00          .BYTE $00,$44,$00,$00,$40,$40,$40,$40 ; $40
70f6 00 41 00          .BYTE $00,$41,$00,$00,$80,$80,$80,$c0 ; $48
70fe 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $50
7106 00 88 00          .BYTE $00,$88,$00,$00,$00,$87,$87,$c0 ; $58
710e 00 44 41          .BYTE $00,$44,$41,$a0,$40,$40,$40,$40 ; $60
7116 00 41 00          .BYTE $00,$41,$00,$00,$8b,$80,$80,$c0 ; $68
711e 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$47,$40 ; $70
7126 00 88 00          .BYTE $00,$88,$00,$00,$84,$87,$87,$c0 ; $78
712e 60 44 4d          .BYTE $60,$44,$4d,$a0,$40,$40,$40,$40 ; $80
7136 00 41 00          .BYTE $00,$41,$00,$87,$80,$80,$80,$c0 ; $88
713e 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $90
7146 00 88 00          .BYTE $00,$88,$00,$88,$80,$87,$87,$c0 ; $98
714e 41 44 41          .BYTE $41,$44,$41,$41,$40,$40,$40,$40 ; $a0
7156 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $a8
715e 60 45 46          .BYTE $60,$45,$46,$a0,$47,$47,$48,$40 ; $b0
7166 00 88 00          .BYTE $00,$88,$00,$87,$87,$87,$88,$c0 ; $b8
716e 41 44 41          .BYTE $41,$44,$41,$40,$40,$40,$40,$40 ; $c0
7176 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $c8
717e 60 45 46          .BYTE $60,$45,$46,$a0,$40,$47,$47,$40 ; $d0
7186 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $d8
718e 41 44 4d          .BYTE $41,$44,$4d,$40,$40,$40,$40,$40 ; $e0
7196 00 41 00          .BYTE $00,$41,$00,$80,$80,$80,$80,$c0 ; $e8
719e 60 45 46          .BYTE $60,$45,$46,$a0,$81,$47,$47,$40 ; $f0
71a6 00 88 00          .BYTE $00,$88,$00,$00,$80,$87,$87,$c0 ; $f8

              ******
71ae          ADMODE
              ******

              ; printout flags for 16 address modes
              ;               76543210
              ;               --------
              ;            7  x         #
              ;            6   x        (
              ;            5    x       ,
              ;            4     x      SP
              ;            3      x     )
              ;            2       x    ,
              ;            1/0      xx  01:X  10:Y  11:Z

71ae 00                .BYTE %00000000 ; 0             implicit/direct
71af 80                .BYTE %10000000 ; 1 #$nn        immediate
71b0 00                .BYTE %00000000 ; 2             ----------
71b1 00                .BYTE %00000000 ; 3             ----------
71b2 69                .BYTE %01101001 ; 4 ($nn,X)     indirect X
71b3 4e                .BYTE %01001110 ; 5 ($nn),Y     indirect Y
71b4 4f                .BYTE %01001111 ; 6 ($nn),Z     indirect Z
71b5 05                .BYTE %00000101 ; 7 $nn,X       indexed  X
71b6 06                .BYTE %00000110 ; 8 $nn,Y       indexed  Y
71b7 05                .BYTE %00000101 ; 9 $nn,X       indexed  X
71b8 06                .BYTE %00000110 ; a $nn,Y       ----------
71b9 48                .BYTE %01001000 ; b ($nnnn,X)   JMP & JSR
71ba 69                .BYTE %01101001 ; c ($nn,X)     ----------
71bb 7e                .BYTE %01111110 ; d ($nn,SP),Y  LDA & STA
71bc 00                .BYTE %00000000 ; e
71bd 04                .BYTE %00000100 ; f

              ;              ASL INC ROL DEC LSR ROR NEG ASR
71be 0a 1a 2a ACCUMODE .BYTE $0a,$1a,$2a,$3a,$4a,$6a,$42,$43

71c6 10 0a 08 Num_Base .BYTE 16,10, 8, 2 ; hex, dec, oct, bin
71ca 04 03 03 Num_Bits .BYTE  4, 3, 3, 1 ; hex, dec, oct, bin

71ce 58 59 5a Index_Char .BYTE "XYZ"

              ;                0123456789abcd
71d1 55 31 3a U1        .BYTE "U1:9 0 000 000",0 ; channel 9, drive, track, sector
71e0 42 2d 50 BP_ZERO   .BYTE "B-P 9 0",0        ; set buffer pointer to 0

              ***************
              Module Reg_Text
              ***************
71e8 20 7d ff          JSR  PRIMM
71eb 0d 20 20          .BYTE "\r    PC   SR AC XR YR ZR BP  SP  NVEBDIZC\r; \eQ",0
721a 60                RTS
721b          EndMod [Reg_Text] Size = 51 [$33]

              ***************
              Module Mon_Help
              ***************
721b 20 7d ff    JSR PRIMM

721e 96 41 05    .BYTE LRED,"A",WHITE,"SSEMBLE     - A ADDRESS MNEMONIC OPERAND",CR
724a 96 42 05    .BYTE LRED,"B",WHITE,"ITMAPS      - B [FROM [TO]]",CR
7269 96 43 05    .BYTE LRED,"C",WHITE,"OMPARE      - C FROM TO WITH",CR
7289 96 44 05    .BYTE LRED,"D",WHITE,"ISASSEMBLE  - D [FROM [TO]]",CR
72a8 96 46 05    .BYTE LRED,"F",WHITE,"ILL         - F FROM TO FILLBYTE",CR
72cc 96 47 05    .BYTE LRED,"G",WHITE,"O           - G [ADDRESS]",CR
72e9 96 48 05    .BYTE LRED,"H",WHITE,"UNT         - H FROM TO (STRING OR BYTES)",CR
7316 96 4a 05    .BYTE LRED,"J",WHITE,"SR          - J ADDRESS",CR
7331 96 4c 05    .BYTE LRED,"L",WHITE,"OAD         - L FILENAME [UNIT [ADDRESS]]",CR
735e 96 4d 05    .BYTE LRED,"M",WHITE,"EMORY       - M [FROM [TO]]",CR
737d 96 52 05    .BYTE LRED,"R",WHITE,"EGISTERS    - R",CR
7390 96 53 05    .BYTE LRED,"S",WHITE,"AVE         - S FILENAME UNIT FROM TO",CR
73b9 96 54 05    .BYTE LRED,"T",WHITE,"RANSFER     - T FROM TO TARGET",CR
73db 96 56 05    .BYTE LRED,"V",WHITE,"ERIFY       - V FILENAME [UNIT [ADDRESS]]",CR
7408 45 96 58    .BYTE "E",LRED,"X",WHITE,"IT         - X",CR
741b 96 2e 05    .BYTE LRED,".",WHITE,"<DOT>       - . ADDRESS MNEMONIC OPERAND",CR
7447 96 3e 05    .BYTE LRED,">",WHITE,"<GREATER>   - > ADDRESS BYTE SEQUENCE",CR
7470 96 3b 05    .BYTE LRED,";",WHITE,"<SEMICOLON> - ; REGISTER CONTENTS",CR
7495 96 40 05    .BYTE LRED,"@",WHITE,"DOS         - @ [DOS COMMAND]",CR
74b6 96 3f 05    .BYTE LRED,"?",WHITE,"HELP        - ?",CR
74c9 00          .BYTE 0
74ca 4c a5 60    JMP Main
74cd          End_Mod

74cd ff ff ff          .FILL $8000-* ($ff) ; 3749 bytes ; 2867 bytes


  445 Symbols
-------------
Bank                           $0002    28D   284    287    343    351
                                       521    523    526    773
PCH                            $0003    29D   272    280    315
PCL                            $0004    30D   278    281    313
SR                             $0005    31D   367
WHITE                          $0005    14D   470    735    743    887
                                       901   1814   2103   3196   3197
                                      3198   3199   3200   3201   3202
                                      3203   3204   3205   3206   3207
                                      3208   3209   3210   3211   3212
                                      3213   3214   3215
AC                             $0006    32D   301
XR                             $0007    33
YR                             $0008    34
ZR                             $0009    35
BP                             $000a    41
SPH                            $000b    42D   325    359
SPL                            $000c    43D   327    361    813    824
                                       828
CR                             $000d    18D   397    451   1504   3196
                                      3197   3198   3199   3200   3201
                                      3202   3203   3204   3205   3206
                                      3207   3208   3209   3210   3211
                                      3212   3213   3214   3215
REV                            $0012    19D   451
CRIGHT                         $001d    20D   428
QUOTE                          $0022    21D  1049   1056
APOSTR                         $0027    22D   986   2009
Long_AC                        $0059    56D   208    210    218    222
                                       520    522    524    525    536
                                       550    564    579    581    595
                                       611    623    625    633    634
                                       636    637    772    790    931
                                       933    943    945    966    968
                                      1001   1070   1079   1080   1122
                                      1237   1240   1407   1409   1410
                                      1418   1419   1474   1483   1542
                                      1549   1551   1552   1554   1751
                                      1753   1760   1761   1851   1854
                                      1868   1877   1926   1928   1939
                                      1942   1945   1950   1953   2002
                                      2003   2004   2005   2012   2045
                                      2052   2053   2054   2065   2066
                                      2073   2074   2076   2078   2537
                                      2576   2577   2578   2579   2615
                                      2620
Long_CT                        $005d    57D   211    212    214    215
                                       219    223    551    580    597
                                       694    695    698   1402   1408
                                      1416   1417   1622   1634   1637
                                      2233   2234   2236   2237   2238
                                      2338   2339   2381   2382   2383
                                      2406   2420   2423   2442   2457
                                      2625   2643
Long_PC                        $0061    58D   537    596    612    645
                                       647    670    672    747    791
                                       793    837    839    855    857
                                       940    942    963    965   1086
                                      1105   1106   1123   1469   1472
                                      1475   1484   1490   1512   1516
                                      1550   1553   1951   1954   2095
                                      2101   2106   2109   2110   2247
                                      2248   2255   2257   2332   2345
                                      2348   2362   2375   2384   2385
                                      2386   2387   2388   2389   2390
                                      2391   2392   2393   2394   2395
                                      2411   2412   2413   2723   2740
Long_DA                        $0065    59D   565    655    656    658
                                       659    714    717    720    736
                                       744    745    928    930   1009
                                      1017   1139   1175   1176   1185
                                      1189
Adr_Flags                      $0069    63D  1699   1837   1840   1882
                                      1886   1892   1896   1901   1906
                                      1910
Mode_Flags                     $006a    64D  1233   1261   1270   1280
                                      1292   1302   1312   1325   1339
                                      1353   1367   1383   1429   1447
                                      1450   1565   1586   1595   1606
                                      1607
Op_Code                        $006b    65D  1205   1223   1224   1406
                                      1433   1463   1471   1489   1564
                                      1680   1691   1738   1748   1794
                                      1801   1819   1860
Op_Flag                        $006c    66D  1140   1160   1272   1322
                                      1435   1466   1661   1672   1689
                                      1706   1714   1742   1772   1790
                                      1800   1827   1842   1867   1875
                                      1900   1919   1958
Op_Size                        $006d    70D  1464   1465   1476   1495
                                      1496   1631   1632   1636   1705
                                      1707   1721   1834   1855   1874
                                      1930   1936   1959
Dig_Cnt                        $006e    71D  2001   2013   2039   2087
Buf_Index                      $006f    72D   401   1052   1065   1250
                                      1967   1988   2022   2193   2194
                                      2204   2212   2213   2291   2438
                                      2439   2534   2543   2608
STATUS                         $0090    77D  1040   1097   2566   2571
                                      2585   2682   2721   2739   2799
                                      2807   2817   2823
VERCK                          $0093    78D   437   1081   1090   1098
LRED                           $0096    16D   743    885    899   3196
                                      3197   3198   3199   3200   3201
                                      3202   3203   3204   3205   3206
                                      3207   3208   3209   3210   3211
                                      3212   3213   3214   3215
YELLOW                         $009e    15D   451   1736   2097
FNLEN                          $00b7    79D  1038   1059
SA                             $00b9    80D  1035   1085   1108   2563
FA                             $00ba    81D  1033   1071   2447   2468
                                      2542   2560   2677   2716   2734
                                      2800   2818
FNADR                          $00bb    82D  1042   1044   1058
BA                             $00bd    83D  1037   1075
FNBANK                         $00be    84D  1039
NDX                            $00d0    86
MODE_80                        $00d7    87D   692    796    883    897
B_Margin                       $00e4    89
T_Margin                       $00e5    90
L_Margin                       $00e6    91
R_Margin                       $00e7    92
QTSW                           $00f4    94D   853
Buffer                         $0200    96D   393    402   1053   1507
                                      1509   1518   1522   1530   2195
                                      2214   2440   2451
IIRQ                           $0314    98
IBRK                           $0316    99
EXMON                          $032e   100
X_Vector                       $0400   104D   314    316    504
Ix_Mne                         $0402   105D  1195   1391   1574
Op_Mne                         $0403   106D  1157   1163   1170
Op_Ix                          $0406   107D  1141   1243   1246   1289
                                      1323   1337   1351   1365   1381
                                      1392
Op_Len                         $0407   108D  1142   1245   1445   1451
                                      1454   1602
Disk_Unit                      $0408   109D  1032
Disk_Track                     $0409   110D  2616   2663   2786
Disk_Sector                    $040a   111D  2621   2642   2662   2789
Disk_Status                    $040b   112D  2478   2482   2483   2494
                                      2669
Mon_Data                       $040c   114D   992   1002   1014   1041
                                      1043   2607   2629   2704   2757
                                      2762   2766   2780   2785
Disk_Msg                       $0434   115D  2473   2480   2488   2492
                                      2510
header                         $1fff   167
Link                           $2029   179D   171
header_loop                    $205a   218D   221    225
Monitor_Call                   $6000   239
Monitor_Break                  $6003   245
Monitor_Switch                 $6006   251
Mon_Break                      $6009   257D   248
Mon_Break_loop                 $601f   271D   269    274
Mon_Break_nopage               $602b   281D   279
Mon_Break_bank                 $6036   286D   284
Mon_Call                       $603c   292D   242
Mon_Call_loop                  $6043   301D   303
Mon_Call_store                 $6055   313D   310
Mon_Start                      $605f   320D   288
Mon_Register                   $606d   335D   486
Mon_Register_loopa             $6072   343D   347
Mon_Register_loopb             $607d   351D   355
Mon_Register_loopc             $6096   368D   376
Mon_Register_flag              $609e   373D   371
Main                           $60a5   380D   404    431    706    760
                                       777    804    829    938    950
                                       975   1021   1025   1088   1100
                                      1103   1127   1146   1629   1639
                                      2307   2553   2648   3217
Main_A                         $60aa   389D  1535
Main_loop                      $60aa   392D   398
Main_getcomm                   $60c0   403D   406
Mon_Switch                     $60c9   410D   254
Mon_Switch_loop                $60cb   414D   417
Mon_Error                      $60d3   422D   396    690    916    918
                                       958    960    983    990   1046
                                      1050   1063   1083   1094   1099
                                      1117   1119   1135   1193   1216
                                      1218   1228   1235   1238   1324
                                      1327   1331   1338   1345   1352
                                      1357   1366   1373   1380   1382
                                      1385   1397   1401   1403   1430
                                      1446   1448   1625   1983   2293
                                      2539   2541   2604   2606   2610
                                      2614   2619
Mon_Select                     $60e0   434D   415
Print_Commands                 $60ed   447D   262    295
Command_Char                   $6107   454D   414
Cons_Prefix                    $6118   461D  2017   2297
Load_Save_Verify               $611d   467
Jump_Table                     $6123   474D   443
Mon_Exit                       $614d   501D   488
LAC_To_PC                      $6150   507D   768    812    823
LAC_To_PC_error                $6160   527D   519
LAC_To_LPC                     $6161   531D   685    733    786   1074
                                      1136   1618   2274   2360   2611
LAC_To_LPC_loop                $6164   536D   539
LAC_To_LCT                     $616d   545D  1249   2330   2372   2624
LAC_To_LCT_loop                $6170   550D   553
LAC_To_LDA                     $6179   559D  2277
LAC_To_LDA_loop                $617c   564D   567
LAC_Plus_LCT                   $6185   573D   926
LAC_Plus_LCT_loop              $6189   579D   583
LAC_Minus_LPC                  $6194   589D   689   1624   2278
LAC_Minus_LPC_loop             $6198   595D   599
LAC_Compare_LPC                $61a3   605D   921
LAC_Compare_LPC_loop           $61a7   611D   614
Inc_LAC                        $61b0   620D   947    971
Inc_LAC_return                 $61b6   626D   624
Dec_LAC                        $61b7   630D   935
Dec_LAC_skip                   $61bf   637D   635
Inc_LPC                        $61c2   642D   756    946    972   1022
                                      1124
Inc_LPC_return                 $61c8   648D   646
Dec_LDA                        $61c9   652D   934
Dec_LDA_skip                   $61d1   659D   657
Fetch                          $61d4   664D  1013   1662   1669   1679
                                      1685   1690   1717   1853   1925
Fetch_banked                   $61db   672D   670
Mon_Memory                     $61e1   679D   485
Mon_Memory_shift               $61fc   694D   692    697
Mon_Memory_row                 $6207   701D   684    687    705
Mon_Memory_exit                $6212   706D   702
Print_Bits                     $6215   710D   748
Print_Bits_loop                $621a   716D   722
Print_Bits_set                 $6221   719D   717
Mon_Bits                       $622b   728D   478
Mon_Bits_lab                   $6233   734D   732
Mon_Bits_row                   $623c   739D   759
Mon_Bits_col                   $6242   742D   754
Mon_Set_Register               $6268   764D   492
Mon_Set_Register_loop          $6270   770D   776
Mon_Set_Register_exit          $627f   777D   771
Mon_Set_Memory                 $6282   781D   491
Mon_Set_Memory_loop            $628c   788D   798
Mon_Set_Memory_banked          $6297   793D   791
Mon_Set_Memory_next            $62a1   798D   796
Mon_Set_Memory_exit            $62a3   800D   785    789
Mon_Go                         $62b0   808D   482
Mon_JSR                        $62bc   819D   484
Dump_4_Bytes                   $62ce   833D   886    888
Dump_4_Bytes_loop              $62d1   837D   844
Dump_4_Bytes_banked            $62d5   839D   837
Dump_4_Chars                   $62e1   849D   900    902
Dump_4_Chars_loop              $62e8   855D   867
Dump_4_Chars_banked            $62ec   857D   855
Dump_4_Chars_laba              $62f5   862D   860
Dump_Row                       $6300   872D   703    803
Dump_Row_loop                  $6314   885D   883    890
Dump_Row_lchr                  $632f   899D   897    904
Mon_Transfer                   $6342   912D   487
Mon_Transfer_lpback            $6358   928D   937
Mon_Transfer_rb                $635c   930D   928
Mon_Transfer_wb                $6362   933D   931
Mon_Transfer_forward           $6372   940D   922    949
Mon_Transfer_rf                $6376   942D   940
Mon_Transfer_wf                $637c   945D   943
Mon_Compare                    $638c   954D   479
Mon_Compare_loop               $639d   963D   974
Mon_Compare_rf                 $63a1   965D   963
Mon_Compare_cf                 $63a7   968D   966
Mon_Compare_laba               $63ae   971D   969
Mon_Hunt                       $63bc   979D   483
Mon_Hunt_lpstr                 $63d3   992D   997
Mon_Hunt_bin                   $63e2  1000D   987
Mon_Hunt_lpbin                 $63e5  1001D  1007
Mon_Hunt_hunt                  $63f4  1009D   995    998   1005
Mon_Hunt_lpstart               $63f9  1012D  1024
Mon_Hunt_lpins                 $63fb  1013D  1018
Mon_Hunt_next                  $640b  1020D  1015
Load_Save                      $641c  1029D   439
Load_Save_skip                 $6437  1045D  1048
Load_Save_copyfn               $6448  1053D  1062
Load_Save_unit                 $645e  1065D  1057
Load_Save_exit                 $6494  1088D  1097
Load_Save_do                   $6497  1090D  1054   1067   1069   1073
                                      1109
Load_Save_exec                 $64a4  1096D  1092
Load_Save_load                 $64bf  1105D  1077
Mon_Fill                       $64c9  1113D   481
Mon_Fill_loop                  $64da  1122D  1126
Mon_Assemble                   $64ea  1131D   477    490
Mon_Assemble_start             $64f3  1138D  1149
Mon_Assemble_getin             $64ff  1143D  1166
Mon_Assemble_laba              $6509  1148D  1144
Mon_Assemble_labb              $651f  1163D  1154   1156   1159
Mon_Assemble_lpenc             $6527  1170D  1180
Mon_Assemble_lpbit             $652f  1174D  1178
Mon_Assemble_lpfind            $653e  1186D  1192
Mon_Assemble_nxfind            $654a  1191D  1187
Mon_Assemble_found             $6550  1195D  1190
Mon_Assemble_lpopc             $6556  1201D  1204
Mon_Assemble_exopc             $655e  1205D  1202
Mon_Assemble_labc              $6584  1232D  1212
Mon_Assemble_labd              $6586  1233D  1264   1274   1283   1303
                                      1316   1329   1347   1359   1375
                                      1387
Mon_Assemble_labf              $659c  1243D  1241
Mon_Assemble_labg              $65ac  1250D  1236   1248
Mon_Assemble_lpnop             $65ae  1252D  1255
Mon_Assemble_lbra              $65c4  1268D  1260
Mon_Assemble_indir             $65d2  1278D  1269
Mon_Assemble_comma             $65de  1287D  1279
Mon_Assemble_comma1            $65fb  1301D  1293   1295   1297
Mon_Assemble_stack             $6601  1307D  1288
Mon_Assemble_rbra              $6617  1320D  1308
Mon_Assemble_error             $6630  1331D  1262   1271   1281   1290
                                      1300   1311   1314   1322
Mon_Assemble_right             $6633  1335D  1321
Mon_Assemble_right1            $664c  1346D  1341   1343
Mon_Assemble_X                 $6651  1349D  1336
Mon_Assemble_X1                $6666  1358D  1355
Mon_Assemble_Y                 $666b  1363D  1350
Mon_Assemble_Y1                $6684  1374D  1369   1371
Mon_Assemble_Z                 $6689  1379D  1364
Mon_Assemble_adjust            $66a0  1391D  1253
Mon_Assemble_BB                $66b8  1402D  1399
Mon_Assemble_one               $66d0  1416D  1395
Mon_Assemble_lpbrain           $66da  1421D  1424
Mon_Assemble_branch            $66e4  1429D  1422
Mon_Assemble_bran1             $66f8  1438D  1435
Mon_Assemble_match             $66fa  1442D  1393   1425
Mon_Assemble_lpmatch           $66fd  1443D  1453
Mon_Assemble_okmat             $6719  1454D  1444
Mon_Assemble_store             $671d  1463D  1412   1438
Mon_Assemble_storen            $673d  1479D  1466
Mon_Assemble_lpsto             $6741  1483D  1487
Mon_Assemble_store1            $674b  1489D  1481
Mon_Assemble_print             $6750  1492D  1477
Mon_Assemble_auto              $677e  1515D  1513   1527
Branch_Target                  $67a5  1539D  1405   1432   1544
Match_Mode                     $67b8  1559D  1443
Match_Mode_loop                $67bc  1566D  1575
Match_Mode_next                $67c1  1571D  1576
Match_Mode_error               $67ce  1578D  1572
Match_Mode_return              $67cf  1579D  1567
Mode_Index                     $67d0  1583D  1442
Mode_Index_loop                $67d4  1588D  1592
Mode_Index_found               $67e0  1595D  1589
Size_To_Mode                   $67e2  1599D  1452
Mon_Disassemble                $67ef  1613D   480
Mon_Disassemble_nopar          $67fc  1621D  1617
range                          $6802  1624D  1620
Mon_Disassemble_loop           $6808  1627D  1623   1638
Dis_Code                       $6827  1643D  1630
Print_Code                     $682d  1651D  1494
Print_Code_nop                 $684a  1678D  1667   1671
Print_Code_normal              $6868  1694D  1683   1688
Print_Code_norm1               $6881  1708D  1706
Print_Code_blpr                $688a  1716D  1714
Print_Code_lphex               $688d  1717D  1723
Print_Code_lpfill              $689c  1727D  1732
Print_Code_long                $68aa  1736D  1720   1728
Print_Code_locate              $68bf  1748D  1741
Print_Code_lpmne               $68d0  1758D  1770
Print_Code_lplet               $68d4  1760D  1764
Print_Code_lastc               $68e7  1772D  1767
Print_Code_Q3                  $68fa  1781D  1774   1778
Print_Code_Q4                  $6901  1784D  1776   1780
Print_Code_lbra                $690b  1789D  1772
Print_Code_biti                $691f  1801D  1797
Print_Code_mne4                $692f  1812D  1783   1799
Print_Code_mne5                $6932  1813D  1787   1790   1810
Print_Code_lpaccu              $693e  1821D  1824
Print_Code_accu                $694d  1829D  1827
Print_Code_oper                $6953  1834D  1822
Print_Code_laba                $695f  1840D  1837
Print_Code_labb                $6969  1844D  1839   1842
Print_Code_labc                $696c  1845D  1840
Print_Code_lpfop               $6975  1852D  1856
Print_Code_proper              $6999  1874D  1867
Print_Code_lpoper              $69a0  1877D  1875   1880
Print_Code_labd                $69be  1892D  1886
Print_Code_labe                $69c6  1896D  1882   1892
Print_Code_labf                $69ce  1900D  1872   1896
Print_Code_comch               $69d9  1906D  1900
Print_Code_labg                $69ee  1919D  1906   1912
Print_Code_rel                 $6a0d  1934D  1863
Print_Code_rela                $6a0f  1935D  1932
Print_Code_labh                $6a1c  1944D  1940
Print_Code_lpinw               $6a1d  1945D  1947
Print_Code_return              $6a36  1960D  1830   1835   1904   1919
                                      1958
Got_LAC                        $6a37  1964D  1000
Get_LAC                        $6a39  1971D   682    686    731    767
                                       770    784    788    811    822
                                       917    959   1004   1068   1072
                                      1076   1118   1134   1616   1619
                                      2272   2275   2292   2609   2613
                                      2618   2623
Get_LAC_error                  $6a4d  1983D  1975
Get_LAC_noval                  $6a50  1985D  1976
Get_LAC_end                    $6a52  1988D  1978
Get_LAC_ok                     $6a54  1989D  1980   1982
Read_Number                    $6a56  1994D  1234   1974   2535
Read_Number_numeric            $6a77  2016D  2010
Read_Number_prefix             $6a79  2017D  2020
Read_Number_digit              $6a84  2024D  2018   2075   2077   2079
Read_Number_valid              $6a9b  2035D  2029
Read_Number_push               $6aac  2045D  2049
Read_Number_laba               $6ab3  2051D  2042
Read_Number_shift              $6ab6  2052D  2057
Read_Number_pull               $6acb  2064D  2069
Read_Number_labc               $6ad4  2071D  2060
Read_Number_error              $6ae4  2081D  2037   2055
Read_Number_exit               $6ae7  2083D  2008   2014   2025   2027
                                      2031   2033
Read_Number_return             $6ae8  2084D  2082
Hex_LPC                        $6aee  2092D   740    879    970   1019
                                      1656
Hex_LPC_laba                   $6b07  2106D  2096
Hex_LPC_labb                   $6b0e  2109D  2105   2107
Print_XA_Hex                   $6b12  2114D  1957
Print_Hex_Blank                $6b18  2124D   352    362    840   1718
Print_Blank                    $6b1b  2131D  1812   1813   2581
Print_CR                       $6b20  2139D   383    734    755    876
                                       961   1010   1078   1120   2508
                                      2515   2590
CR_Erase                       $6b25  2147D  1627   2296
Print_Hex                      $6b2d  2156D   344    360   1869   1878
                                      2100   2102   2108   2119   2127
A_To_Hex                       $6b39  2168D  1517   2160
A_To_Hex_nibble                $6b43  2180D  2172
A_To_Hex_lab                   $6b4b  2184D  2182
Get_Glyph                      $6b4e  2189D  2007   2529
Get_Glyph_loop                 $6b51  2193D  2196
Got_Char                       $6b5b  2201D  1977
Get_Char                       $6b5d  2208D   403    985    988    994
                                      1045   1066   1143   1214   1226
                                      1252   1309   2011   2024   2544
                                      2602
Get_Char_regc                  $6b72  2222D  2217
Get_Char_return                $6b78  2225D  2219   2221   2223
Dec_LCT                        $6b79  2230D   936    948    973   1023
                                      1125
Dec_LCT_skip                   $6b81  2237D  2235
Add_LPC                        $6b86  2243D   906   1497   1633   1674
Inc_LPC_Page                   $6b8d  2252D  2641
Add_LPC_return                 $6b93  2258D  2249   2256
Param_Range                    $6b94  2261D   915    957    982   1116
Param_Range_error              $6bab  2282D  2273   2276   2279
Converter                      $6bad  2287D   494    495    496    497
Converter_loop                 $6bb9  2295D  2306
Conv_Tab                       $6bd2  2309D  2302
Print_Dual                     $6bda  2316D  2312
Print_Octal                    $6be0  2324D  2311
Print_Dual_entry               $6be4  2330D  2321
Print_Dual_loopa               $6bee  2335D  2351
Print_Dual_loopb               $6bf2  2338D  2342
Print_Dual_skip                $6c03  2347D  2344
Print_Dual_next                $6c0a  2350D  2346
Print_Hexval                   $6c0f  2357D  2309
Print_Decimal                  $6c18  2367D  2310   2580
Print_Decimal_clear            $6c1f  2375D  2377
Print_Decimal_loop             $6c27  2381D  2397
Print_BCD                      $6c4a  2402D  2363
Print_BCD_loopa                $6c52  2409D  2429
Print_BCD_loopb                $6c56  2411D  2416
Print_BCD_skip                 $6c69  2422D  2419
Print_BCD_print                $6c73  2427D  2425
Print_BCD_next                 $6c76  2428D  2421
Mon_Disk                       $6c7a  2435D  2552
Mon_Disk_lab                   $6c8d  2447D  2445
Mon_Disk_loop                  $6c96  2451D  2455
Mon_Disk_close                 $6ca1  2456D  2452
Get_Disk_Status                $6cad  2465D  2502   2657   2666
Get_Disk_Status_loop           $6cd4  2486D  2490
Print_Disk_Status              $6ceb  2499D  2441   2459   2808   2824
Print_Disk_Msg                 $6cee  2505D  2646   2668
Print_Disk_Status_loop         $6cf3  2510D  2514
Print_Disk_Status_exit         $6cfe  2515D  2511
Mon_DOS                        $6d01  2525D   489
Mon_DOS_unit                   $6d21  2542D  2531   2533   2536
Mon_DOS_next                   $6d25  2544D  2547   2549
Mon_DOS_status                 $6d36  2552D  2545
Directory                      $6d3c  2557D  2460
Directory_loopb                $6d4e  2569D  2574   2594
Directory_loopc                $6d67  2583D  2588
Directory_cr                   $6d75  2590D  2584
Directory_exit                 $6d81  2595D  2572   2586   2592
DOS_U                          $6d84  2599D  2551
DOS_U_loop                     $6dc0  2629D  2644
DOS_U_write                    $6dd0  2637D  2631
DOS_U_next                     $6dd8  2641D  2635
DOS_U_error                    $6de2  2646D  2633   2639
Find_Next_Sector               $6deb  2652D  2632   2638
Find_Next_Sector_error         $6e0d  2668D  2660
Find_Next_Sector_return        $6e13  2670D  2658   2667
Open_Command_Channel           $6e14  2674D  2690   2703
Reset_BP                       $6e23  2687D  2733
Reset_BP_loop                  $6e26  2691D  2695
Reset_BP_end                   $6e31  2696D  2692
Send_Disk_Command              $6e34  2700D  2656   2665
Send_Disk_Command_loop         $6e37  2704D  2708
Send_Disk_Command_end          $6e42  2709D  2705
Read_Sector                    $6e45  2713D  2634
Read_Sector_loop               $6e53  2722D  2725
Write_Sector                   $6e5f  2730D  2637
Write_Sector_loop              $6e70  2740D  2743
Set_TS_100                     $6e7d  2755D  2759
Set_TS                         $6e7d  2749D  2788   2791
Set_TS_10                      $6e88  2760D  2756   2764
Set_TS_1                       $6e93  2765D  2761
Build_U_String                 $6e99  2775D  2655   2664
Build_U_String_loop            $6e9b  2779D  2783
Open_Disk_Buffer               $6ebb  2795D  2627
Close_Disk_Buffer              $6ed7  2813D  2647
MNE_L                          $6eee  2845D  1186   1750
MNE_R                          $6f49  2941D  1188   1752
MNE_Index                      $6fa4  3037D  1201   1573   1749
BRAIN                          $70a4  3077D  1421
LEN_ADM                        $70ae  3086D  1566   1694   1739   1861
ADMODE                         $71ae  3140D  1588   1698
ACCUMODE                       $71be  3172D  1823
Num_Base                       $71c6  3174D  2036
Num_Bits                       $71ca  3175D  2051
Index_Char                     $71ce  3177D  1914
U1                             $71d1  3180D  2779
BP_ZERO                        $71e0  3181D  2691
Reg_Text                       $71e8  3184D   338
Mon_Help                       $721b  3192D   493
End_Mod                        $74cd  3218
EXIT_OLD                       $cf2e   117D   311    312
EXIT                           $cfa4   118D   268    307    308    309
SETBNK                         $ff6b   120
JSRFAR                         $ff6e   121D   826
JMPFAR                         $ff71   122D   815
LDA_FAR                        $ff74   123
STA_FAR                        $ff77   124
CMP_FAR                        $ff7a   125
PRIMM                          $ff7d   126D   260    427    450    800
                                       892   1101   1492   1503   1646
                                      1729   2150   3186   3194
CINT                           $ff81   127
IOINIT                         $ff84   128
SETMSG                         $ff90   129D   329
SECOND                         $ff93   130D  2450   2680   2803   2821
TKSA                           $ff96   131D  2471   2564   2719   2737
MEMTOP                         $ff99   132
MEMBOT                         $ff9c   133
KEY                            $ff9f   134
SETTMO                         $ffa2   135
ACPTR                          $ffa5   136D  2472   2479   2487   2570
                                      2583   2722
CIOUT                          $ffa8   137D  2453   2693   2706   2741
                                      2805
UNTALK                         $ffab   138D  2493   2595   2726
UNLSN                          $ffae   139D  2456   2696   2709   2744
                                      2806   2822
LISTEN                         $ffb1   140D  2448   2678   2735   2801
                                      2819
TALK                           $ffb4   141D  2469   2561   2717
READSS                         $ffb7   142
SETLFS                         $ffba   143
SETNAM                         $ffbd   144
OPEN                           $ffc0   145
CLOSE                          $ffc3   146
CHKIN                          $ffc6   147
CHKOUT                         $ffc9   148
CLRCHN                         $ffcc   149
CHRIN                          $ffcf   150D   392
CHROUT                         $ffd2   151D   373    719    746    836
                                       854    863    878   1519   1523
                                      1531   1716   1737   1744   1769
                                      1782   1784   1786   1789   1809
                                      1815   1829   1844   1846   1871
                                      1884   1888   1890   1894   1898
                                      1908   1915   1921   1923   2098
                                      2104   2135   2143   2161   2164
                                      2298   2349   2427   2512   2587
LOAD                           $ffd5   152D  1096
SAVE                           $ffd8   153D  1087
SETTIM                         $ffdb   154
GETTIM                         $ffde   155
STOP                           $ffe1   156D   701   1020   1628   2591
GETIN                          $ffe4   157
CLALL                          $ffe7   158
SCAN                           $ffea   159
SCRORG                         $ffed   160
PLOT                           $fff0   161
Long_AC                        $0059    56D   208    210    218    222
                                       520    522    524    525    536
                                       550    564    579    581    595
                                       611    623    625    633    634
                                       636    637    772    790    931
                                       933    943    945    966    968
                                      1001   1070   1079   1080   1122
                                      1237   1240   1407   1409   1410
                                      1418   1419   1474   1483   1542
                                      1549   1551   1552   1554   1751
                                      1753   1760   1761   1851   1854
                                      1868   1877   1926   1928   1939
                                      1942   1945   1950   1953   2002
                                      2003   2004   2005   2012   2045
                                      2052   2053   2054   2065   2066
                                      2073   2074   2076   2078   2537
                                      2576   2577   2578   2579   2615
                                      2620
Long_PC                        $0061    58D   537    596    612    645
                                       647    670    672    747    791
                                       793    837    839    855    857
                                       940    942    963    965   1086
                                      1105   1106   1123   1469   1472
                                      1475   1484   1490   1512   1516
                                      1550   1553   1951   1954   2095
                                      2101   2106   2109   2110   2247
                                      2248   2255   2257   2332   2345
                                      2348   2362   2375   2384   2385
                                      2386   2387   2388   2389   2390
                                      2391   2392   2393   2394   2395
                                      2411   2412   2413   2723   2740
Long_CT                        $005d    57D   211    212    214    215
                                       219    223    551    580    597
                                       694    695    698   1402   1408
                                      1416   1417   1622   1634   1637
                                      2233   2234   2236   2237   2238
                                      2338   2339   2381   2382   2383
                                      2406   2420   2423   2442   2457
                                      2625   2643
WHITE                          $0005    14D   470    735    743    887
                                       901   1814   2103   3196   3197
                                      3198   3199   3200   3201   3202
                                      3203   3204   3205   3206   3207
                                      3208   3209   3210   3211   3212
                                      3213   3214   3215
LRED                           $0096    16D   743    885    899   3196
                                      3197   3198   3199   3200   3201
                                      3202   3203   3204   3205   3206
                                      3207   3208   3209   3210   3211
                                      3212   3213   3214   3215
CR                             $000d    18D   397    451   1504   3196
                                      3197   3198   3199   3200   3201
                                      3202   3203   3204   3205   3206
                                      3207   3208   3209   3210   3211
                                      3212   3213   3214   3215
Op_Flag                        $006c    66D  1140   1160   1272   1322
                                      1435   1466   1661   1672   1689
                                      1706   1714   1742   1772   1790
                                      1800   1827   1842   1867   1875
                                      1900   1919   1958
Mode_Flags                     $006a    64D  1233   1261   1270   1280
                                      1292   1302   1312   1325   1339
                                      1353   1367   1383   1429   1447
                                      1450   1565   1586   1595   1606
                                      1607
Long_DA                        $0065    59D   565    655    656    658
                                       659    714    717    720    736
                                       744    745    928    930   1009
                                      1017   1139   1175   1176   1185
                                      1189
Buf_Index                      $006f    72D   401   1052   1065   1250
                                      1967   1988   2022   2193   2194
                                      2204   2212   2213   2291   2438
                                      2439   2534   2543   2608
Op_Size                        $006d    70D  1464   1465   1476   1495
                                      1496   1631   1632   1636   1705
                                      1707   1721   1834   1855   1874
                                      1930   1936   1959
Op_Code                        $006b    65D  1205   1223   1224   1406
                                      1433   1463   1471   1489   1564
                                      1680   1691   1738   1748   1794
                                      1801   1819   1860
STATUS                         $0090    77D  1040   1097   2566   2571
                                      2585   2682   2721   2739   2799
                                      2807   2817   2823
FA                             $00ba    81D  1033   1071   2447   2468
                                      2542   2560   2677   2716   2734
                                      2800   2818
Adr_Flags                      $0069    63D  1699   1837   1840   1882
                                      1886   1892   1896   1901   1906
                                      1910
Bank                           $0002    28D   284    287    343    351
                                       521    523    526    773
SPL                            $000c    43D   327    361    813    824
                                       828
MODE_80                        $00d7    87D   692    796    883    897
SA                             $00b9    80D  1035   1085   1108   2563
VERCK                          $0093    78D   437   1081   1090   1098
Dig_Cnt                        $006e    71D  2001   2013   2039   2087
FNADR                          $00bb    82D  1042   1044   1058
YELLOW                         $009e    15D   451   1736   2097
PCL                            $0004    30D   278    281    313
PCH                            $0003    29D   272    280    315
BA                             $00bd    83D  1037   1075
FNLEN                          $00b7    79D  1038   1059
APOSTR                         $0027    22D   986   2009
QUOTE                          $0022    21D  1049   1056
SPH                            $000b    42D   325    359
QTSW                           $00f4    94D   853
FNBANK                         $00be    84D  1039
CRIGHT                         $001d    20D   428
REV                            $0012    19D   451
AC                             $0006    32D   301
SR                             $0005    31D   367
R_Margin                       $00e7    92
L_Margin                       $00e6    91
T_Margin                       $00e5    90
B_Margin                       $00e4    89
NDX                            $00d0    86
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
Long_AC                        $0059    56D   208    210    218    222
                                       520    522    524    525    536
                                       550    564    579    581    595
                                       611    623    625    633    634
                                       636    637    772    790    931
                                       933    943    945    966    968
                                      1001   1070   1079   1080   1122
                                      1237   1240   1407   1409   1410
                                      1418   1419   1474   1483   1542
                                      1549   1551   1552   1554   1751
                                      1753   1760   1761   1851   1854
                                      1868   1877   1926   1928   1939
                                      1942   1945   1950   1953   2002
                                      2003   2004   2005   2012   2045
                                      2052   2053   2054   2065   2066
                                      2073   2074   2076   2078   2537
                                      2576   2577   2578   2579   2615
                                      2620
Long_PC                        $0061    58D   537    596    612    645
                                       647    670    672    747    791
                                       793    837    839    855    857
                                       940    942    963    965   1086
                                      1105   1106   1123   1469   1472
                                      1475   1484   1490   1512   1516
                                      1550   1553   1951   1954   2095
                                      2101   2106   2109   2110   2247
                                      2248   2255   2257   2332   2345
                                      2348   2362   2375   2384   2385
                                      2386   2387   2388   2389   2390
                                      2391   2392   2393   2394   2395
                                      2411   2412   2413   2723   2740
Long_CT                        $005d    57D   211    212    214    215
                                       219    223    551    580    597
                                       694    695    698   1402   1408
                                      1416   1417   1622   1634   1637
                                      2233   2234   2236   2237   2238
                                      2338   2339   2381   2382   2383
                                      2406   2420   2423   2442   2457
                                      2625   2643
WHITE                          $0005    14D   470    735    743    887
                                       901   1814   2103   3196   3197
                                      3198   3199   3200   3201   3202
                                      3203   3204   3205   3206   3207
                                      3208   3209   3210   3211   3212
                                      3213   3214   3215
LRED                           $0096    16D   743    885    899   3196
                                      3197   3198   3199   3200   3201
                                      3202   3203   3204   3205   3206
                                      3207   3208   3209   3210   3211
                                      3212   3213   3214   3215
CR                             $000d    18D   397    451   1504   3196
                                      3197   3198   3199   3200   3201
                                      3202   3203   3204   3205   3206
                                      3207   3208   3209   3210   3211
                                      3212   3213   3214   3215
Op_Flag                        $006c    66D  1140   1160   1272   1322
                                      1435   1466   1661   1672   1689
                                      1706   1714   1742   1772   1790
                                      1800   1827   1842   1867   1875
                                      1900   1919   1958
Mode_Flags                     $006a    64D  1233   1261   1270   1280
                                      1292   1302   1312   1325   1339
                                      1353   1367   1383   1429   1447
                                      1450   1565   1586   1595   1606
                                      1607
Long_DA                        $0065    59D   565    655    656    658
                                       659    714    717    720    736
                                       744    745    928    930   1009
                                      1017   1139   1175   1176   1185
                                      1189
Buf_Index                      $006f    72D   401   1052   1065   1250
                                      1967   1988   2022   2193   2194
                                      2204   2212   2213   2291   2438
                                      2439   2534   2543   2608
Op_Size                        $006d    70D  1464   1465   1476   1495
                                      1496   1631   1632   1636   1705
                                      1707   1721   1834   1855   1874
                                      1930   1936   1959
Op_Code                        $006b    65D  1205   1223   1224   1406
                                      1433   1463   1471   1489   1564
                                      1680   1691   1738   1748   1794
                                      1801   1819   1860
Mon_Data                       $040c   114D   992   1002   1014   1041
                                      1043   2607   2629   2704   2757
                                      2762   2766   2780   2785
Buffer                         $0200    96D   393    402   1053   1507
                                      1509   1518   1522   1530   2195
                                      2214   2440   2451
STATUS                         $0090    77D  1040   1097   2566   2571
                                      2585   2682   2721   2739   2799
                                      2807   2817   2823
FA                             $00ba    81D  1033   1071   2447   2468
                                      2542   2560   2677   2716   2734
                                      2800   2818
Op_Ix                          $0406   107D  1141   1243   1246   1289
                                      1323   1337   1351   1365   1381
                                      1392
Adr_Flags                      $0069    63D  1699   1837   1840   1882
                                      1886   1892   1896   1901   1906
                                      1910
Bank                           $0002    28D   284    287    343    351
                                       521    523    526    773
Op_Len                         $0407   108D  1142   1245   1445   1451
                                      1454   1602
Disk_Msg                       $0434   115D  2473   2480   2488   2492
                                      2510
Disk_Status                    $040b   112D  2478   2482   2483   2494
                                      2669
SPL                            $000c    43D   327    361    813    824
                                       828
Disk_Sector                    $040a   111D  2621   2642   2662   2789
MODE_80                        $00d7    87D   692    796    883    897
SA                             $00b9    80D  1035   1085   1108   2563
VERCK                          $0093    78D   437   1081   1090   1098
Dig_Cnt                        $006e    71D  2001   2013   2039   2087
Disk_Track                     $0409   110D  2616   2663   2786
Op_Mne                         $0403   106D  1157   1163   1170
Ix_Mne                         $0402   105D  1195   1391   1574
X_Vector                       $0400   104D   314    316    504
FNADR                          $00bb    82D  1042   1044   1058
YELLOW                         $009e    15D   451   1736   2097
PCL                            $0004    30D   278    281    313
PCH                            $0003    29D   272    280    315
header_loop                    $205a   218D   221    225
BA                             $00bd    83D  1037   1075
FNLEN                          $00b7    79D  1038   1059
APOSTR                         $0027    22D   986   2009
QUOTE                          $0022    21D  1049   1056
SPH                            $000b    42D   325    359
Link                           $2029   179D   171
Disk_Unit                      $0408   109D  1032
QTSW                           $00f4    94D   853
FNBANK                         $00be    84D  1039
CRIGHT                         $001d    20D   428
REV                            $0012    19D   451
AC                             $0006    32D   301
SR                             $0005    31D   367
header                         $1fff   167
EXMON                          $032e   100
IBRK                           $0316    99
IIRQ                           $0314    98
R_Margin                       $00e7    92
L_Margin                       $00e6    91
T_Margin                       $00e5    90
B_Margin                       $00e4    89
NDX                            $00d0    86
BP                             $000a    41
ZR                             $0009    35
YR                             $0008    34
XR                             $0007    33
